// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/log.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Log {
  public static partial class LogService
  {
    static readonly string __ServiceName = "log.LogService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Log.LogRqst> __Marshaller_log_LogRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Log.LogRqst.Parser));
    static readonly grpc::Marshaller<global::Log.LogRsp> __Marshaller_log_LogRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Log.LogRsp.Parser));
    static readonly grpc::Marshaller<global::Log.GetLogRqst> __Marshaller_log_GetLogRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Log.GetLogRqst.Parser));
    static readonly grpc::Marshaller<global::Log.GetLogRsp> __Marshaller_log_GetLogRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Log.GetLogRsp.Parser));
    static readonly grpc::Marshaller<global::Log.DeleteLogRqst> __Marshaller_log_DeleteLogRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Log.DeleteLogRqst.Parser));
    static readonly grpc::Marshaller<global::Log.DeleteLogRsp> __Marshaller_log_DeleteLogRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Log.DeleteLogRsp.Parser));
    static readonly grpc::Marshaller<global::Log.ClearAllLogRqst> __Marshaller_log_ClearAllLogRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Log.ClearAllLogRqst.Parser));
    static readonly grpc::Marshaller<global::Log.ClearAllLogRsp> __Marshaller_log_ClearAllLogRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Log.ClearAllLogRsp.Parser));

    static readonly grpc::Method<global::Log.LogRqst, global::Log.LogRsp> __Method_Log = new grpc::Method<global::Log.LogRqst, global::Log.LogRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Log",
        __Marshaller_log_LogRqst,
        __Marshaller_log_LogRsp);

    static readonly grpc::Method<global::Log.GetLogRqst, global::Log.GetLogRsp> __Method_GetLog = new grpc::Method<global::Log.GetLogRqst, global::Log.GetLogRsp>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetLog",
        __Marshaller_log_GetLogRqst,
        __Marshaller_log_GetLogRsp);

    static readonly grpc::Method<global::Log.DeleteLogRqst, global::Log.DeleteLogRsp> __Method_DeleteLog = new grpc::Method<global::Log.DeleteLogRqst, global::Log.DeleteLogRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteLog",
        __Marshaller_log_DeleteLogRqst,
        __Marshaller_log_DeleteLogRsp);

    static readonly grpc::Method<global::Log.ClearAllLogRqst, global::Log.ClearAllLogRsp> __Method_ClearAllLog = new grpc::Method<global::Log.ClearAllLogRqst, global::Log.ClearAllLogRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClearAllLog",
        __Marshaller_log_ClearAllLogRqst,
        __Marshaller_log_ClearAllLogRsp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Log.LogReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LogService</summary>
    [grpc::BindServiceMethod(typeof(LogService), "BindService")]
    public abstract partial class LogServiceBase
    {
      /// <summary>
      ///* Set a method into the log... *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Log.LogRsp> Log(global::Log.LogRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Get the list of logs *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetLog(global::Log.GetLogRqst request, grpc::IServerStreamWriter<global::Log.GetLogRsp> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete a single log entry *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Log.DeleteLogRsp> DeleteLog(global::Log.DeleteLogRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete all log *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Log.ClearAllLogRsp> ClearAllLog(global::Log.ClearAllLogRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LogService</summary>
    public partial class LogServiceClient : grpc::ClientBase<LogServiceClient>
    {
      /// <summary>Creates a new client for LogService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LogServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LogService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LogServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LogServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LogServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///* Set a method into the log... *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Log.LogRsp Log(global::Log.LogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Log(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Set a method into the log... *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Log.LogRsp Log(global::Log.LogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Log, null, options, request);
      }
      /// <summary>
      ///* Set a method into the log... *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Log.LogRsp> LogAsync(global::Log.LogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Set a method into the log... *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Log.LogRsp> LogAsync(global::Log.LogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Log, null, options, request);
      }
      /// <summary>
      ///* Get the list of logs *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Log.GetLogRsp> GetLog(global::Log.GetLogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Get the list of logs *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Log.GetLogRsp> GetLog(global::Log.GetLogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetLog, null, options, request);
      }
      /// <summary>
      ///* Delete a single log entry *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Log.DeleteLogRsp DeleteLog(global::Log.DeleteLogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete a single log entry *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Log.DeleteLogRsp DeleteLog(global::Log.DeleteLogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteLog, null, options, request);
      }
      /// <summary>
      ///* Delete a single log entry *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Log.DeleteLogRsp> DeleteLogAsync(global::Log.DeleteLogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete a single log entry *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Log.DeleteLogRsp> DeleteLogAsync(global::Log.DeleteLogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteLog, null, options, request);
      }
      /// <summary>
      ///* Delete all log *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Log.ClearAllLogRsp ClearAllLog(global::Log.ClearAllLogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearAllLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete all log *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Log.ClearAllLogRsp ClearAllLog(global::Log.ClearAllLogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearAllLog, null, options, request);
      }
      /// <summary>
      ///* Delete all log *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Log.ClearAllLogRsp> ClearAllLogAsync(global::Log.ClearAllLogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearAllLogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete all log *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Log.ClearAllLogRsp> ClearAllLogAsync(global::Log.ClearAllLogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearAllLog, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LogServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LogServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LogServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Log, serviceImpl.Log)
          .AddMethod(__Method_GetLog, serviceImpl.GetLog)
          .AddMethod(__Method_DeleteLog, serviceImpl.DeleteLog)
          .AddMethod(__Method_ClearAllLog, serviceImpl.ClearAllLog).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LogServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Log, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Log.LogRqst, global::Log.LogRsp>(serviceImpl.Log));
      serviceBinder.AddMethod(__Method_GetLog, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Log.GetLogRqst, global::Log.GetLogRsp>(serviceImpl.GetLog));
      serviceBinder.AddMethod(__Method_DeleteLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Log.DeleteLogRqst, global::Log.DeleteLogRsp>(serviceImpl.DeleteLog));
      serviceBinder.AddMethod(__Method_ClearAllLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Log.ClearAllLogRqst, global::Log.ClearAllLogRsp>(serviceImpl.ClearAllLog));
    }

  }
}
#endregion
