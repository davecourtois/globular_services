// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: services/proto/persistence.proto
// </auto-generated>
// Original file comments:
// *
// You can use echo as starter project.
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Persistence {
  /// <summary>
  /// Persistence nothing can take place of persistence..!-)
  /// </summary>
  public static partial class PersistenceService
  {
    static readonly string __ServiceName = "persistence.PersistenceService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Persistence.StopRequest> __Marshaller_persistence_StopRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.StopRequest.Parser));
    static readonly grpc::Marshaller<global::Persistence.StopResponse> __Marshaller_persistence_StopResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.StopResponse.Parser));
    static readonly grpc::Marshaller<global::Persistence.CreateDatabaseRqst> __Marshaller_persistence_CreateDatabaseRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.CreateDatabaseRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.CreateDatabaseRsp> __Marshaller_persistence_CreateDatabaseRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.CreateDatabaseRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.ConnectRqst> __Marshaller_persistence_ConnectRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.ConnectRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.ConnectRsp> __Marshaller_persistence_ConnectRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.ConnectRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.DisconnectRqst> __Marshaller_persistence_DisconnectRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.DisconnectRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.DisconnectRsp> __Marshaller_persistence_DisconnectRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.DisconnectRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.DeleteDatabaseRqst> __Marshaller_persistence_DeleteDatabaseRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.DeleteDatabaseRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.DeleteDatabaseRsp> __Marshaller_persistence_DeleteDatabaseRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.DeleteDatabaseRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.CreateCollectionRqst> __Marshaller_persistence_CreateCollectionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.CreateCollectionRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.CreateCollectionRsp> __Marshaller_persistence_CreateCollectionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.CreateCollectionRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.DeleteCollectionRqst> __Marshaller_persistence_DeleteCollectionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.DeleteCollectionRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.DeleteCollectionRsp> __Marshaller_persistence_DeleteCollectionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.DeleteCollectionRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.CreateConnectionRqst> __Marshaller_persistence_CreateConnectionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.CreateConnectionRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.CreateConnectionRsp> __Marshaller_persistence_CreateConnectionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.CreateConnectionRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.DeleteConnectionRqst> __Marshaller_persistence_DeleteConnectionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.DeleteConnectionRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.DeleteConnectionRsp> __Marshaller_persistence_DeleteConnectionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.DeleteConnectionRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.PingConnectionRqst> __Marshaller_persistence_PingConnectionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.PingConnectionRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.PingConnectionRsp> __Marshaller_persistence_PingConnectionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.PingConnectionRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.CountRqst> __Marshaller_persistence_CountRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.CountRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.CountRsp> __Marshaller_persistence_CountRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.CountRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.InsertOneRqst> __Marshaller_persistence_InsertOneRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.InsertOneRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.InsertOneRsp> __Marshaller_persistence_InsertOneRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.InsertOneRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.InsertManyRqst> __Marshaller_persistence_InsertManyRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.InsertManyRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.InsertManyRsp> __Marshaller_persistence_InsertManyRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.InsertManyRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.FindRqst> __Marshaller_persistence_FindRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.FindRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.FindResp> __Marshaller_persistence_FindResp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.FindResp.Parser));
    static readonly grpc::Marshaller<global::Persistence.FindOneRqst> __Marshaller_persistence_FindOneRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.FindOneRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.FindOneResp> __Marshaller_persistence_FindOneResp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.FindOneResp.Parser));
    static readonly grpc::Marshaller<global::Persistence.AggregateRqst> __Marshaller_persistence_AggregateRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.AggregateRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.AggregateResp> __Marshaller_persistence_AggregateResp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.AggregateResp.Parser));
    static readonly grpc::Marshaller<global::Persistence.UpdateRqst> __Marshaller_persistence_UpdateRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.UpdateRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.UpdateRsp> __Marshaller_persistence_UpdateRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.UpdateRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.UpdateOneRqst> __Marshaller_persistence_UpdateOneRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.UpdateOneRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.UpdateOneRsp> __Marshaller_persistence_UpdateOneRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.UpdateOneRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.ReplaceOneRqst> __Marshaller_persistence_ReplaceOneRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.ReplaceOneRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.ReplaceOneRsp> __Marshaller_persistence_ReplaceOneRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.ReplaceOneRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.DeleteRqst> __Marshaller_persistence_DeleteRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.DeleteRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.DeleteRsp> __Marshaller_persistence_DeleteRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.DeleteRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.DeleteOneRqst> __Marshaller_persistence_DeleteOneRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.DeleteOneRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.DeleteOneRsp> __Marshaller_persistence_DeleteOneRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.DeleteOneRsp.Parser));
    static readonly grpc::Marshaller<global::Persistence.RunAdminCmdRqst> __Marshaller_persistence_RunAdminCmdRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.RunAdminCmdRqst.Parser));
    static readonly grpc::Marshaller<global::Persistence.RunAdminCmdRsp> __Marshaller_persistence_RunAdminCmdRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Persistence.RunAdminCmdRsp.Parser));

    static readonly grpc::Method<global::Persistence.StopRequest, global::Persistence.StopResponse> __Method_Stop = new grpc::Method<global::Persistence.StopRequest, global::Persistence.StopResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Stop",
        __Marshaller_persistence_StopRequest,
        __Marshaller_persistence_StopResponse);

    static readonly grpc::Method<global::Persistence.CreateDatabaseRqst, global::Persistence.CreateDatabaseRsp> __Method_CreateDatabase = new grpc::Method<global::Persistence.CreateDatabaseRqst, global::Persistence.CreateDatabaseRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDatabase",
        __Marshaller_persistence_CreateDatabaseRqst,
        __Marshaller_persistence_CreateDatabaseRsp);

    static readonly grpc::Method<global::Persistence.ConnectRqst, global::Persistence.ConnectRsp> __Method_Connect = new grpc::Method<global::Persistence.ConnectRqst, global::Persistence.ConnectRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_persistence_ConnectRqst,
        __Marshaller_persistence_ConnectRsp);

    static readonly grpc::Method<global::Persistence.DisconnectRqst, global::Persistence.DisconnectRsp> __Method_Disconnect = new grpc::Method<global::Persistence.DisconnectRqst, global::Persistence.DisconnectRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Disconnect",
        __Marshaller_persistence_DisconnectRqst,
        __Marshaller_persistence_DisconnectRsp);

    static readonly grpc::Method<global::Persistence.DeleteDatabaseRqst, global::Persistence.DeleteDatabaseRsp> __Method_DeleteDatabase = new grpc::Method<global::Persistence.DeleteDatabaseRqst, global::Persistence.DeleteDatabaseRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDatabase",
        __Marshaller_persistence_DeleteDatabaseRqst,
        __Marshaller_persistence_DeleteDatabaseRsp);

    static readonly grpc::Method<global::Persistence.CreateCollectionRqst, global::Persistence.CreateCollectionRsp> __Method_CreateCollection = new grpc::Method<global::Persistence.CreateCollectionRqst, global::Persistence.CreateCollectionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCollection",
        __Marshaller_persistence_CreateCollectionRqst,
        __Marshaller_persistence_CreateCollectionRsp);

    static readonly grpc::Method<global::Persistence.DeleteCollectionRqst, global::Persistence.DeleteCollectionRsp> __Method_DeleteCollection = new grpc::Method<global::Persistence.DeleteCollectionRqst, global::Persistence.DeleteCollectionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCollection",
        __Marshaller_persistence_DeleteCollectionRqst,
        __Marshaller_persistence_DeleteCollectionRsp);

    static readonly grpc::Method<global::Persistence.CreateConnectionRqst, global::Persistence.CreateConnectionRsp> __Method_CreateConnection = new grpc::Method<global::Persistence.CreateConnectionRqst, global::Persistence.CreateConnectionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateConnection",
        __Marshaller_persistence_CreateConnectionRqst,
        __Marshaller_persistence_CreateConnectionRsp);

    static readonly grpc::Method<global::Persistence.DeleteConnectionRqst, global::Persistence.DeleteConnectionRsp> __Method_DeleteConnection = new grpc::Method<global::Persistence.DeleteConnectionRqst, global::Persistence.DeleteConnectionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConnection",
        __Marshaller_persistence_DeleteConnectionRqst,
        __Marshaller_persistence_DeleteConnectionRsp);

    static readonly grpc::Method<global::Persistence.PingConnectionRqst, global::Persistence.PingConnectionRsp> __Method_Ping = new grpc::Method<global::Persistence.PingConnectionRqst, global::Persistence.PingConnectionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_persistence_PingConnectionRqst,
        __Marshaller_persistence_PingConnectionRsp);

    static readonly grpc::Method<global::Persistence.CountRqst, global::Persistence.CountRsp> __Method_Count = new grpc::Method<global::Persistence.CountRqst, global::Persistence.CountRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Count",
        __Marshaller_persistence_CountRqst,
        __Marshaller_persistence_CountRsp);

    static readonly grpc::Method<global::Persistence.InsertOneRqst, global::Persistence.InsertOneRsp> __Method_InsertOne = new grpc::Method<global::Persistence.InsertOneRqst, global::Persistence.InsertOneRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertOne",
        __Marshaller_persistence_InsertOneRqst,
        __Marshaller_persistence_InsertOneRsp);

    static readonly grpc::Method<global::Persistence.InsertManyRqst, global::Persistence.InsertManyRsp> __Method_InsertMany = new grpc::Method<global::Persistence.InsertManyRqst, global::Persistence.InsertManyRsp>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "InsertMany",
        __Marshaller_persistence_InsertManyRqst,
        __Marshaller_persistence_InsertManyRsp);

    static readonly grpc::Method<global::Persistence.FindRqst, global::Persistence.FindResp> __Method_Find = new grpc::Method<global::Persistence.FindRqst, global::Persistence.FindResp>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Find",
        __Marshaller_persistence_FindRqst,
        __Marshaller_persistence_FindResp);

    static readonly grpc::Method<global::Persistence.FindOneRqst, global::Persistence.FindOneResp> __Method_FindOne = new grpc::Method<global::Persistence.FindOneRqst, global::Persistence.FindOneResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindOne",
        __Marshaller_persistence_FindOneRqst,
        __Marshaller_persistence_FindOneResp);

    static readonly grpc::Method<global::Persistence.AggregateRqst, global::Persistence.AggregateResp> __Method_Aggregate = new grpc::Method<global::Persistence.AggregateRqst, global::Persistence.AggregateResp>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Aggregate",
        __Marshaller_persistence_AggregateRqst,
        __Marshaller_persistence_AggregateResp);

    static readonly grpc::Method<global::Persistence.UpdateRqst, global::Persistence.UpdateRsp> __Method_Update = new grpc::Method<global::Persistence.UpdateRqst, global::Persistence.UpdateRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_persistence_UpdateRqst,
        __Marshaller_persistence_UpdateRsp);

    static readonly grpc::Method<global::Persistence.UpdateOneRqst, global::Persistence.UpdateOneRsp> __Method_UpdateOne = new grpc::Method<global::Persistence.UpdateOneRqst, global::Persistence.UpdateOneRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOne",
        __Marshaller_persistence_UpdateOneRqst,
        __Marshaller_persistence_UpdateOneRsp);

    static readonly grpc::Method<global::Persistence.ReplaceOneRqst, global::Persistence.ReplaceOneRsp> __Method_ReplaceOne = new grpc::Method<global::Persistence.ReplaceOneRqst, global::Persistence.ReplaceOneRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReplaceOne",
        __Marshaller_persistence_ReplaceOneRqst,
        __Marshaller_persistence_ReplaceOneRsp);

    static readonly grpc::Method<global::Persistence.DeleteRqst, global::Persistence.DeleteRsp> __Method_Delete = new grpc::Method<global::Persistence.DeleteRqst, global::Persistence.DeleteRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_persistence_DeleteRqst,
        __Marshaller_persistence_DeleteRsp);

    static readonly grpc::Method<global::Persistence.DeleteOneRqst, global::Persistence.DeleteOneRsp> __Method_DeleteOne = new grpc::Method<global::Persistence.DeleteOneRqst, global::Persistence.DeleteOneRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOne",
        __Marshaller_persistence_DeleteOneRqst,
        __Marshaller_persistence_DeleteOneRsp);

    static readonly grpc::Method<global::Persistence.RunAdminCmdRqst, global::Persistence.RunAdminCmdRsp> __Method_RunAdminCmd = new grpc::Method<global::Persistence.RunAdminCmdRqst, global::Persistence.RunAdminCmdRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RunAdminCmd",
        __Marshaller_persistence_RunAdminCmdRqst,
        __Marshaller_persistence_RunAdminCmdRsp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Persistence.PersistenceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PersistenceService</summary>
    [grpc::BindServiceMethod(typeof(PersistenceService), "BindService")]
    public abstract partial class PersistenceServiceBase
    {
      /// <summary>
      /// Stop the server.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.StopResponse> Stop(global::Persistence.StopRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a database
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.CreateDatabaseRsp> CreateDatabase(global::Persistence.CreateDatabaseRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Open connection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.ConnectRsp> Connect(global::Persistence.ConnectRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Close connection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.DisconnectRsp> Disconnect(global::Persistence.DisconnectRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a database
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.DeleteDatabaseRsp> DeleteDatabase(global::Persistence.DeleteDatabaseRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a Collection
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.CreateCollectionRsp> CreateCollection(global::Persistence.CreateCollectionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete collection
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.DeleteCollectionRsp> DeleteCollection(global::Persistence.DeleteCollectionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a connection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.CreateConnectionRsp> CreateConnection(global::Persistence.CreateConnectionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a connection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.DeleteConnectionRsp> DeleteConnection(global::Persistence.DeleteConnectionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Ping existing connection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.PingConnectionRsp> Ping(global::Persistence.PingConnectionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the number of entry in a collection
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.CountRsp> Count(global::Persistence.CountRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Insert one result
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.InsertOneRsp> InsertOne(global::Persistence.InsertOneRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Insert many result at once.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.InsertManyRsp> InsertMany(grpc::IAsyncStreamReader<global::Persistence.InsertManyRqst> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Find many
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Find(global::Persistence.FindRqst request, grpc::IServerStreamWriter<global::Persistence.FindResp> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Find one
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.FindOneResp> FindOne(global::Persistence.FindOneRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Aggregate
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Aggregate(global::Persistence.AggregateRqst request, grpc::IServerStreamWriter<global::Persistence.AggregateResp> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update many result.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.UpdateRsp> Update(global::Persistence.UpdateRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update one
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.UpdateOneRsp> UpdateOne(global::Persistence.UpdateOneRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Replace one
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.ReplaceOneRsp> ReplaceOne(global::Persistence.ReplaceOneRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete many.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.DeleteRsp> Delete(global::Persistence.DeleteRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete one
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.DeleteOneRsp> DeleteOne(global::Persistence.DeleteOneRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// run admin command.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Persistence.RunAdminCmdRsp> RunAdminCmd(global::Persistence.RunAdminCmdRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PersistenceService</summary>
    public partial class PersistenceServiceClient : grpc::ClientBase<PersistenceServiceClient>
    {
      /// <summary>Creates a new client for PersistenceService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PersistenceServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PersistenceService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PersistenceServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PersistenceServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PersistenceServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Stop the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.StopResponse Stop(global::Persistence.StopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stop the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.StopResponse Stop(global::Persistence.StopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      /// Stop the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.StopResponse> StopAsync(global::Persistence.StopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stop the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.StopResponse> StopAsync(global::Persistence.StopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      /// Create a database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.CreateDatabaseRsp CreateDatabase(global::Persistence.CreateDatabaseRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.CreateDatabaseRsp CreateDatabase(global::Persistence.CreateDatabaseRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDatabase, null, options, request);
      }
      /// <summary>
      /// Create a database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.CreateDatabaseRsp> CreateDatabaseAsync(global::Persistence.CreateDatabaseRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.CreateDatabaseRsp> CreateDatabaseAsync(global::Persistence.CreateDatabaseRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDatabase, null, options, request);
      }
      /// <summary>
      /// Open connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.ConnectRsp Connect(global::Persistence.ConnectRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Open connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.ConnectRsp Connect(global::Persistence.ConnectRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      /// Open connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.ConnectRsp> ConnectAsync(global::Persistence.ConnectRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Open connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.ConnectRsp> ConnectAsync(global::Persistence.ConnectRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      /// Close connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.DisconnectRsp Disconnect(global::Persistence.DisconnectRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Disconnect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Close connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.DisconnectRsp Disconnect(global::Persistence.DisconnectRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Disconnect, null, options, request);
      }
      /// <summary>
      /// Close connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.DisconnectRsp> DisconnectAsync(global::Persistence.DisconnectRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisconnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Close connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.DisconnectRsp> DisconnectAsync(global::Persistence.DisconnectRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Disconnect, null, options, request);
      }
      /// <summary>
      /// Delete a database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.DeleteDatabaseRsp DeleteDatabase(global::Persistence.DeleteDatabaseRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.DeleteDatabaseRsp DeleteDatabase(global::Persistence.DeleteDatabaseRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDatabase, null, options, request);
      }
      /// <summary>
      /// Delete a database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.DeleteDatabaseRsp> DeleteDatabaseAsync(global::Persistence.DeleteDatabaseRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a database
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.DeleteDatabaseRsp> DeleteDatabaseAsync(global::Persistence.DeleteDatabaseRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDatabase, null, options, request);
      }
      /// <summary>
      /// Create a Collection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.CreateCollectionRsp CreateCollection(global::Persistence.CreateCollectionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCollection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a Collection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.CreateCollectionRsp CreateCollection(global::Persistence.CreateCollectionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCollection, null, options, request);
      }
      /// <summary>
      /// Create a Collection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.CreateCollectionRsp> CreateCollectionAsync(global::Persistence.CreateCollectionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCollectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a Collection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.CreateCollectionRsp> CreateCollectionAsync(global::Persistence.CreateCollectionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCollection, null, options, request);
      }
      /// <summary>
      /// Delete collection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.DeleteCollectionRsp DeleteCollection(global::Persistence.DeleteCollectionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete collection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.DeleteCollectionRsp DeleteCollection(global::Persistence.DeleteCollectionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCollection, null, options, request);
      }
      /// <summary>
      /// Delete collection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.DeleteCollectionRsp> DeleteCollectionAsync(global::Persistence.DeleteCollectionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete collection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.DeleteCollectionRsp> DeleteCollectionAsync(global::Persistence.DeleteCollectionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCollection, null, options, request);
      }
      /// <summary>
      /// Create a connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.CreateConnectionRsp CreateConnection(global::Persistence.CreateConnectionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConnection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.CreateConnectionRsp CreateConnection(global::Persistence.CreateConnectionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateConnection, null, options, request);
      }
      /// <summary>
      /// Create a connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.CreateConnectionRsp> CreateConnectionAsync(global::Persistence.CreateConnectionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConnectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.CreateConnectionRsp> CreateConnectionAsync(global::Persistence.CreateConnectionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateConnection, null, options, request);
      }
      /// <summary>
      /// Delete a connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.DeleteConnectionRsp DeleteConnection(global::Persistence.DeleteConnectionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConnection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.DeleteConnectionRsp DeleteConnection(global::Persistence.DeleteConnectionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConnection, null, options, request);
      }
      /// <summary>
      /// Delete a connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.DeleteConnectionRsp> DeleteConnectionAsync(global::Persistence.DeleteConnectionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConnectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.DeleteConnectionRsp> DeleteConnectionAsync(global::Persistence.DeleteConnectionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConnection, null, options, request);
      }
      /// <summary>
      /// Ping existing connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.PingConnectionRsp Ping(global::Persistence.PingConnectionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ping existing connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.PingConnectionRsp Ping(global::Persistence.PingConnectionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>
      /// Ping existing connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.PingConnectionRsp> PingAsync(global::Persistence.PingConnectionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ping existing connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.PingConnectionRsp> PingAsync(global::Persistence.PingConnectionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>
      /// Get the number of entry in a collection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.CountRsp Count(global::Persistence.CountRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Count(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the number of entry in a collection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.CountRsp Count(global::Persistence.CountRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Count, null, options, request);
      }
      /// <summary>
      /// Get the number of entry in a collection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.CountRsp> CountAsync(global::Persistence.CountRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the number of entry in a collection
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.CountRsp> CountAsync(global::Persistence.CountRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Count, null, options, request);
      }
      /// <summary>
      /// Insert one result
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.InsertOneRsp InsertOne(global::Persistence.InsertOneRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertOne(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Insert one result
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.InsertOneRsp InsertOne(global::Persistence.InsertOneRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertOne, null, options, request);
      }
      /// <summary>
      /// Insert one result
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.InsertOneRsp> InsertOneAsync(global::Persistence.InsertOneRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertOneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Insert one result
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.InsertOneRsp> InsertOneAsync(global::Persistence.InsertOneRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertOne, null, options, request);
      }
      /// <summary>
      /// Insert many result at once.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Persistence.InsertManyRqst, global::Persistence.InsertManyRsp> InsertMany(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertMany(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Insert many result at once.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Persistence.InsertManyRqst, global::Persistence.InsertManyRsp> InsertMany(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_InsertMany, null, options);
      }
      /// <summary>
      /// Find many
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Persistence.FindResp> Find(global::Persistence.FindRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Find(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find many
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Persistence.FindResp> Find(global::Persistence.FindRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Find, null, options, request);
      }
      /// <summary>
      /// Find one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.FindOneResp FindOne(global::Persistence.FindOneRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindOne(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.FindOneResp FindOne(global::Persistence.FindOneRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindOne, null, options, request);
      }
      /// <summary>
      /// Find one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.FindOneResp> FindOneAsync(global::Persistence.FindOneRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindOneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.FindOneResp> FindOneAsync(global::Persistence.FindOneRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindOne, null, options, request);
      }
      /// <summary>
      /// Aggregate
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Persistence.AggregateResp> Aggregate(global::Persistence.AggregateRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Aggregate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Aggregate
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Persistence.AggregateResp> Aggregate(global::Persistence.AggregateRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Aggregate, null, options, request);
      }
      /// <summary>
      /// Update many result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.UpdateRsp Update(global::Persistence.UpdateRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update many result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.UpdateRsp Update(global::Persistence.UpdateRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Update many result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.UpdateRsp> UpdateAsync(global::Persistence.UpdateRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update many result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.UpdateRsp> UpdateAsync(global::Persistence.UpdateRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Update one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.UpdateOneRsp UpdateOne(global::Persistence.UpdateOneRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOne(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.UpdateOneRsp UpdateOne(global::Persistence.UpdateOneRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOne, null, options, request);
      }
      /// <summary>
      /// Update one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.UpdateOneRsp> UpdateOneAsync(global::Persistence.UpdateOneRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.UpdateOneRsp> UpdateOneAsync(global::Persistence.UpdateOneRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOne, null, options, request);
      }
      /// <summary>
      /// Replace one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.ReplaceOneRsp ReplaceOne(global::Persistence.ReplaceOneRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplaceOne(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replace one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.ReplaceOneRsp ReplaceOne(global::Persistence.ReplaceOneRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReplaceOne, null, options, request);
      }
      /// <summary>
      /// Replace one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.ReplaceOneRsp> ReplaceOneAsync(global::Persistence.ReplaceOneRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplaceOneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replace one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.ReplaceOneRsp> ReplaceOneAsync(global::Persistence.ReplaceOneRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReplaceOne, null, options, request);
      }
      /// <summary>
      /// Delete many.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.DeleteRsp Delete(global::Persistence.DeleteRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete many.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.DeleteRsp Delete(global::Persistence.DeleteRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Delete many.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.DeleteRsp> DeleteAsync(global::Persistence.DeleteRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete many.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.DeleteRsp> DeleteAsync(global::Persistence.DeleteRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Delete one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.DeleteOneRsp DeleteOne(global::Persistence.DeleteOneRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOne(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.DeleteOneRsp DeleteOne(global::Persistence.DeleteOneRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOne, null, options, request);
      }
      /// <summary>
      /// Delete one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.DeleteOneRsp> DeleteOneAsync(global::Persistence.DeleteOneRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete one
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.DeleteOneRsp> DeleteOneAsync(global::Persistence.DeleteOneRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOne, null, options, request);
      }
      /// <summary>
      /// run admin command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.RunAdminCmdRsp RunAdminCmd(global::Persistence.RunAdminCmdRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunAdminCmd(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// run admin command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Persistence.RunAdminCmdRsp RunAdminCmd(global::Persistence.RunAdminCmdRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RunAdminCmd, null, options, request);
      }
      /// <summary>
      /// run admin command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.RunAdminCmdRsp> RunAdminCmdAsync(global::Persistence.RunAdminCmdRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunAdminCmdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// run admin command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Persistence.RunAdminCmdRsp> RunAdminCmdAsync(global::Persistence.RunAdminCmdRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RunAdminCmd, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PersistenceServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PersistenceServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PersistenceServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Stop, serviceImpl.Stop)
          .AddMethod(__Method_CreateDatabase, serviceImpl.CreateDatabase)
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_Disconnect, serviceImpl.Disconnect)
          .AddMethod(__Method_DeleteDatabase, serviceImpl.DeleteDatabase)
          .AddMethod(__Method_CreateCollection, serviceImpl.CreateCollection)
          .AddMethod(__Method_DeleteCollection, serviceImpl.DeleteCollection)
          .AddMethod(__Method_CreateConnection, serviceImpl.CreateConnection)
          .AddMethod(__Method_DeleteConnection, serviceImpl.DeleteConnection)
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_Count, serviceImpl.Count)
          .AddMethod(__Method_InsertOne, serviceImpl.InsertOne)
          .AddMethod(__Method_InsertMany, serviceImpl.InsertMany)
          .AddMethod(__Method_Find, serviceImpl.Find)
          .AddMethod(__Method_FindOne, serviceImpl.FindOne)
          .AddMethod(__Method_Aggregate, serviceImpl.Aggregate)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_UpdateOne, serviceImpl.UpdateOne)
          .AddMethod(__Method_ReplaceOne, serviceImpl.ReplaceOne)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_DeleteOne, serviceImpl.DeleteOne)
          .AddMethod(__Method_RunAdminCmd, serviceImpl.RunAdminCmd).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PersistenceServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Stop, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.StopRequest, global::Persistence.StopResponse>(serviceImpl.Stop));
      serviceBinder.AddMethod(__Method_CreateDatabase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.CreateDatabaseRqst, global::Persistence.CreateDatabaseRsp>(serviceImpl.CreateDatabase));
      serviceBinder.AddMethod(__Method_Connect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.ConnectRqst, global::Persistence.ConnectRsp>(serviceImpl.Connect));
      serviceBinder.AddMethod(__Method_Disconnect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.DisconnectRqst, global::Persistence.DisconnectRsp>(serviceImpl.Disconnect));
      serviceBinder.AddMethod(__Method_DeleteDatabase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.DeleteDatabaseRqst, global::Persistence.DeleteDatabaseRsp>(serviceImpl.DeleteDatabase));
      serviceBinder.AddMethod(__Method_CreateCollection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.CreateCollectionRqst, global::Persistence.CreateCollectionRsp>(serviceImpl.CreateCollection));
      serviceBinder.AddMethod(__Method_DeleteCollection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.DeleteCollectionRqst, global::Persistence.DeleteCollectionRsp>(serviceImpl.DeleteCollection));
      serviceBinder.AddMethod(__Method_CreateConnection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.CreateConnectionRqst, global::Persistence.CreateConnectionRsp>(serviceImpl.CreateConnection));
      serviceBinder.AddMethod(__Method_DeleteConnection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.DeleteConnectionRqst, global::Persistence.DeleteConnectionRsp>(serviceImpl.DeleteConnection));
      serviceBinder.AddMethod(__Method_Ping, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.PingConnectionRqst, global::Persistence.PingConnectionRsp>(serviceImpl.Ping));
      serviceBinder.AddMethod(__Method_Count, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.CountRqst, global::Persistence.CountRsp>(serviceImpl.Count));
      serviceBinder.AddMethod(__Method_InsertOne, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.InsertOneRqst, global::Persistence.InsertOneRsp>(serviceImpl.InsertOne));
      serviceBinder.AddMethod(__Method_InsertMany, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Persistence.InsertManyRqst, global::Persistence.InsertManyRsp>(serviceImpl.InsertMany));
      serviceBinder.AddMethod(__Method_Find, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Persistence.FindRqst, global::Persistence.FindResp>(serviceImpl.Find));
      serviceBinder.AddMethod(__Method_FindOne, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.FindOneRqst, global::Persistence.FindOneResp>(serviceImpl.FindOne));
      serviceBinder.AddMethod(__Method_Aggregate, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Persistence.AggregateRqst, global::Persistence.AggregateResp>(serviceImpl.Aggregate));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.UpdateRqst, global::Persistence.UpdateRsp>(serviceImpl.Update));
      serviceBinder.AddMethod(__Method_UpdateOne, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.UpdateOneRqst, global::Persistence.UpdateOneRsp>(serviceImpl.UpdateOne));
      serviceBinder.AddMethod(__Method_ReplaceOne, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.ReplaceOneRqst, global::Persistence.ReplaceOneRsp>(serviceImpl.ReplaceOne));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.DeleteRqst, global::Persistence.DeleteRsp>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_DeleteOne, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.DeleteOneRqst, global::Persistence.DeleteOneRsp>(serviceImpl.DeleteOne));
      serviceBinder.AddMethod(__Method_RunAdminCmd, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Persistence.RunAdminCmdRqst, global::Persistence.RunAdminCmdRsp>(serviceImpl.RunAdminCmd));
    }

  }
}
#endregion
