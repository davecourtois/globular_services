// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/ressource.proto
// </auto-generated>
// Original file comments:
// *
// Management and definition of ressources.
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ressource {
  /// <summary>
  ///*
  /// That service is use to manage Globular ressource like permissions and accounts
  /// or role. The service made use of Persistence service to store various 
  /// objects.
  /// </summary>
  public static partial class RessourceService
  {
    static readonly string __ServiceName = "ressource.RessourceService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Ressource.RegisterPeerRqst> __Marshaller_ressource_RegisterPeerRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RegisterPeerRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.RegisterPeerRsp> __Marshaller_ressource_RegisterPeerRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RegisterPeerRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetPeersRqst> __Marshaller_ressource_GetPeersRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetPeersRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetPeersRsp> __Marshaller_ressource_GetPeersRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetPeersRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeletePeerRqst> __Marshaller_ressource_DeletePeerRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeletePeerRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeletePeerRsp> __Marshaller_ressource_DeletePeerRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeletePeerRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.AddPeerActionRqst> __Marshaller_ressource_AddPeerActionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.AddPeerActionRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.AddPeerActionRsp> __Marshaller_ressource_AddPeerActionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.AddPeerActionRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.RemovePeerActionRqst> __Marshaller_ressource_RemovePeerActionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RemovePeerActionRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.RemovePeerActionRsp> __Marshaller_ressource_RemovePeerActionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RemovePeerActionRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.RegisterAccountRqst> __Marshaller_ressource_RegisterAccountRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RegisterAccountRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.RegisterAccountRsp> __Marshaller_ressource_RegisterAccountRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RegisterAccountRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteAccountRqst> __Marshaller_ressource_DeleteAccountRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteAccountRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteAccountRsp> __Marshaller_ressource_DeleteAccountRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteAccountRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.AuthenticateRqst> __Marshaller_ressource_AuthenticateRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.AuthenticateRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.AuthenticateRsp> __Marshaller_ressource_AuthenticateRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.AuthenticateRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.SynchronizeLdapRqst> __Marshaller_ressource_SynchronizeLdapRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.SynchronizeLdapRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.SynchronizeLdapRsp> __Marshaller_ressource_SynchronizeLdapRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.SynchronizeLdapRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.RefreshTokenRqst> __Marshaller_ressource_RefreshTokenRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RefreshTokenRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.RefreshTokenRsp> __Marshaller_ressource_RefreshTokenRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RefreshTokenRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.AddAccountRoleRqst> __Marshaller_ressource_AddAccountRoleRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.AddAccountRoleRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.AddAccountRoleRsp> __Marshaller_ressource_AddAccountRoleRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.AddAccountRoleRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.RemoveAccountRoleRqst> __Marshaller_ressource_RemoveAccountRoleRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RemoveAccountRoleRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.RemoveAccountRoleRsp> __Marshaller_ressource_RemoveAccountRoleRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RemoveAccountRoleRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.CreateRoleRqst> __Marshaller_ressource_CreateRoleRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.CreateRoleRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.CreateRoleRsp> __Marshaller_ressource_CreateRoleRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.CreateRoleRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteRoleRqst> __Marshaller_ressource_DeleteRoleRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteRoleRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteRoleRsp> __Marshaller_ressource_DeleteRoleRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteRoleRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.AddRoleActionRqst> __Marshaller_ressource_AddRoleActionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.AddRoleActionRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.AddRoleActionRsp> __Marshaller_ressource_AddRoleActionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.AddRoleActionRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.RemoveRoleActionRqst> __Marshaller_ressource_RemoveRoleActionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RemoveRoleActionRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.RemoveRoleActionRsp> __Marshaller_ressource_RemoveRoleActionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RemoveRoleActionRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.AddApplicationActionRqst> __Marshaller_ressource_AddApplicationActionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.AddApplicationActionRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.AddApplicationActionRsp> __Marshaller_ressource_AddApplicationActionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.AddApplicationActionRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.RemoveApplicationActionRqst> __Marshaller_ressource_RemoveApplicationActionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RemoveApplicationActionRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.RemoveApplicationActionRsp> __Marshaller_ressource_RemoveApplicationActionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RemoveApplicationActionRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetAllActionsRqst> __Marshaller_ressource_GetAllActionsRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetAllActionsRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetAllActionsRsp> __Marshaller_ressource_GetAllActionsRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetAllActionsRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetPermissionsRqst> __Marshaller_ressource_GetPermissionsRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetPermissionsRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetPermissionsRsp> __Marshaller_ressource_GetPermissionsRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetPermissionsRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.SetPermissionRqst> __Marshaller_ressource_SetPermissionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.SetPermissionRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.SetPermissionRsp> __Marshaller_ressource_SetPermissionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.SetPermissionRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeletePermissionsRqst> __Marshaller_ressource_DeletePermissionsRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeletePermissionsRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeletePermissionsRsp> __Marshaller_ressource_DeletePermissionsRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeletePermissionsRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.SetRessourceOwnerRqst> __Marshaller_ressource_SetRessourceOwnerRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.SetRessourceOwnerRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.SetRessourceOwnerRsp> __Marshaller_ressource_SetRessourceOwnerRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.SetRessourceOwnerRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetRessourceOwnersRqst> __Marshaller_ressource_GetRessourceOwnersRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetRessourceOwnersRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetRessourceOwnersRsp> __Marshaller_ressource_GetRessourceOwnersRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetRessourceOwnersRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteRessourceOwnerRqst> __Marshaller_ressource_DeleteRessourceOwnerRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteRessourceOwnerRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteRessourceOwnerRsp> __Marshaller_ressource_DeleteRessourceOwnerRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteRessourceOwnerRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteRessourceOwnersRqst> __Marshaller_ressource_DeleteRessourceOwnersRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteRessourceOwnersRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteRessourceOwnersRsp> __Marshaller_ressource_DeleteRessourceOwnersRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteRessourceOwnersRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetAllFilesInfoRqst> __Marshaller_ressource_GetAllFilesInfoRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetAllFilesInfoRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetAllFilesInfoRsp> __Marshaller_ressource_GetAllFilesInfoRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetAllFilesInfoRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidateTokenRqst> __Marshaller_ressource_ValidateTokenRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidateTokenRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidateTokenRsp> __Marshaller_ressource_ValidateTokenRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidateTokenRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidateUserRessourceAccessRqst> __Marshaller_ressource_ValidateUserRessourceAccessRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidateUserRessourceAccessRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidateUserRessourceAccessRsp> __Marshaller_ressource_ValidateUserRessourceAccessRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidateUserRessourceAccessRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidateApplicationRessourceAccessRqst> __Marshaller_ressource_ValidateApplicationRessourceAccessRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidateApplicationRessourceAccessRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidateApplicationRessourceAccessRsp> __Marshaller_ressource_ValidateApplicationRessourceAccessRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidateApplicationRessourceAccessRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidateUserAccessRqst> __Marshaller_ressource_ValidateUserAccessRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidateUserAccessRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidateUserAccessRsp> __Marshaller_ressource_ValidateUserAccessRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidateUserAccessRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidateApplicationAccessRqst> __Marshaller_ressource_ValidateApplicationAccessRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidateApplicationAccessRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidateApplicationAccessRsp> __Marshaller_ressource_ValidateApplicationAccessRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidateApplicationAccessRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidatePeerAccessRqst> __Marshaller_ressource_ValidatePeerAccessRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidatePeerAccessRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidatePeerAccessRsp> __Marshaller_ressource_ValidatePeerAccessRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidatePeerAccessRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidatePeerRessourceAccessRqst> __Marshaller_ressource_ValidatePeerRessourceAccessRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidatePeerRessourceAccessRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.ValidatePeerRessourceAccessRsp> __Marshaller_ressource_ValidatePeerRessourceAccessRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ValidatePeerRessourceAccessRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteAccountPermissionsRqst> __Marshaller_ressource_DeleteAccountPermissionsRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteAccountPermissionsRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteAccountPermissionsRsp> __Marshaller_ressource_DeleteAccountPermissionsRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteAccountPermissionsRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteRolePermissionsRqst> __Marshaller_ressource_DeleteRolePermissionsRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteRolePermissionsRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteRolePermissionsRsp> __Marshaller_ressource_DeleteRolePermissionsRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteRolePermissionsRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetAllApplicationsInfoRqst> __Marshaller_ressource_GetAllApplicationsInfoRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetAllApplicationsInfoRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetAllApplicationsInfoRsp> __Marshaller_ressource_GetAllApplicationsInfoRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetAllApplicationsInfoRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteApplicationRqst> __Marshaller_ressource_DeleteApplicationRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteApplicationRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteApplicationRsp> __Marshaller_ressource_DeleteApplicationRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteApplicationRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.LogRqst> __Marshaller_ressource_LogRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.LogRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.LogRsp> __Marshaller_ressource_LogRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.LogRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetLogRqst> __Marshaller_ressource_GetLogRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetLogRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetLogRsp> __Marshaller_ressource_GetLogRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetLogRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteLogRqst> __Marshaller_ressource_DeleteLogRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteLogRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteLogRsp> __Marshaller_ressource_DeleteLogRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteLogRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.ClearAllLogRqst> __Marshaller_ressource_ClearAllLogRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ClearAllLogRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.ClearAllLogRsp> __Marshaller_ressource_ClearAllLogRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.ClearAllLogRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetRessourcesRqst> __Marshaller_ressource_GetRessourcesRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetRessourcesRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetRessourcesRsp> __Marshaller_ressource_GetRessourcesRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetRessourcesRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.SetRessourceRqst> __Marshaller_ressource_SetRessourceRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.SetRessourceRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.SetRessourceRsp> __Marshaller_ressource_SetRessourceRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.SetRessourceRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.RemoveRessourceRqst> __Marshaller_ressource_RemoveRessourceRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RemoveRessourceRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.RemoveRessourceRsp> __Marshaller_ressource_RemoveRessourceRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RemoveRessourceRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.SetActionPermissionRqst> __Marshaller_ressource_SetActionPermissionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.SetActionPermissionRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.SetActionPermissionRsp> __Marshaller_ressource_SetActionPermissionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.SetActionPermissionRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.RemoveActionPermissionRqst> __Marshaller_ressource_RemoveActionPermissionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RemoveActionPermissionRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.RemoveActionPermissionRsp> __Marshaller_ressource_RemoveActionPermissionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RemoveActionPermissionRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetActionPermissionRqst> __Marshaller_ressource_GetActionPermissionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetActionPermissionRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.GetActionPermissionRsp> __Marshaller_ressource_GetActionPermissionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.GetActionPermissionRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.CreateDirPermissionsRqst> __Marshaller_ressource_CreateDirPermissionsRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.CreateDirPermissionsRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.CreateDirPermissionsRsp> __Marshaller_ressource_CreateDirPermissionsRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.CreateDirPermissionsRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.RenameFilePermissionRqst> __Marshaller_ressource_RenameFilePermissionRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RenameFilePermissionRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.RenameFilePermissionRsp> __Marshaller_ressource_RenameFilePermissionRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.RenameFilePermissionRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteDirPermissionsRqst> __Marshaller_ressource_DeleteDirPermissionsRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteDirPermissionsRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteDirPermissionsRsp> __Marshaller_ressource_DeleteDirPermissionsRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteDirPermissionsRsp.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteFilePermissionsRqst> __Marshaller_ressource_DeleteFilePermissionsRqst = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteFilePermissionsRqst.Parser));
    static readonly grpc::Marshaller<global::Ressource.DeleteFilePermissionsRsp> __Marshaller_ressource_DeleteFilePermissionsRsp = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ressource.DeleteFilePermissionsRsp.Parser));

    static readonly grpc::Method<global::Ressource.RegisterPeerRqst, global::Ressource.RegisterPeerRsp> __Method_RegisterPeer = new grpc::Method<global::Ressource.RegisterPeerRqst, global::Ressource.RegisterPeerRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterPeer",
        __Marshaller_ressource_RegisterPeerRqst,
        __Marshaller_ressource_RegisterPeerRsp);

    static readonly grpc::Method<global::Ressource.GetPeersRqst, global::Ressource.GetPeersRsp> __Method_GetPeers = new grpc::Method<global::Ressource.GetPeersRqst, global::Ressource.GetPeersRsp>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetPeers",
        __Marshaller_ressource_GetPeersRqst,
        __Marshaller_ressource_GetPeersRsp);

    static readonly grpc::Method<global::Ressource.DeletePeerRqst, global::Ressource.DeletePeerRsp> __Method_DeletePeer = new grpc::Method<global::Ressource.DeletePeerRqst, global::Ressource.DeletePeerRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePeer",
        __Marshaller_ressource_DeletePeerRqst,
        __Marshaller_ressource_DeletePeerRsp);

    static readonly grpc::Method<global::Ressource.AddPeerActionRqst, global::Ressource.AddPeerActionRsp> __Method_AddPeerAction = new grpc::Method<global::Ressource.AddPeerActionRqst, global::Ressource.AddPeerActionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddPeerAction",
        __Marshaller_ressource_AddPeerActionRqst,
        __Marshaller_ressource_AddPeerActionRsp);

    static readonly grpc::Method<global::Ressource.RemovePeerActionRqst, global::Ressource.RemovePeerActionRsp> __Method_RemovePeerAction = new grpc::Method<global::Ressource.RemovePeerActionRqst, global::Ressource.RemovePeerActionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemovePeerAction",
        __Marshaller_ressource_RemovePeerActionRqst,
        __Marshaller_ressource_RemovePeerActionRsp);

    static readonly grpc::Method<global::Ressource.RegisterAccountRqst, global::Ressource.RegisterAccountRsp> __Method_RegisterAccount = new grpc::Method<global::Ressource.RegisterAccountRqst, global::Ressource.RegisterAccountRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterAccount",
        __Marshaller_ressource_RegisterAccountRqst,
        __Marshaller_ressource_RegisterAccountRsp);

    static readonly grpc::Method<global::Ressource.DeleteAccountRqst, global::Ressource.DeleteAccountRsp> __Method_DeleteAccount = new grpc::Method<global::Ressource.DeleteAccountRqst, global::Ressource.DeleteAccountRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAccount",
        __Marshaller_ressource_DeleteAccountRqst,
        __Marshaller_ressource_DeleteAccountRsp);

    static readonly grpc::Method<global::Ressource.AuthenticateRqst, global::Ressource.AuthenticateRsp> __Method_Authenticate = new grpc::Method<global::Ressource.AuthenticateRqst, global::Ressource.AuthenticateRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Authenticate",
        __Marshaller_ressource_AuthenticateRqst,
        __Marshaller_ressource_AuthenticateRsp);

    static readonly grpc::Method<global::Ressource.SynchronizeLdapRqst, global::Ressource.SynchronizeLdapRsp> __Method_SynchronizeLdap = new grpc::Method<global::Ressource.SynchronizeLdapRqst, global::Ressource.SynchronizeLdapRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SynchronizeLdap",
        __Marshaller_ressource_SynchronizeLdapRqst,
        __Marshaller_ressource_SynchronizeLdapRsp);

    static readonly grpc::Method<global::Ressource.RefreshTokenRqst, global::Ressource.RefreshTokenRsp> __Method_RefreshToken = new grpc::Method<global::Ressource.RefreshTokenRqst, global::Ressource.RefreshTokenRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RefreshToken",
        __Marshaller_ressource_RefreshTokenRqst,
        __Marshaller_ressource_RefreshTokenRsp);

    static readonly grpc::Method<global::Ressource.AddAccountRoleRqst, global::Ressource.AddAccountRoleRsp> __Method_AddAccountRole = new grpc::Method<global::Ressource.AddAccountRoleRqst, global::Ressource.AddAccountRoleRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddAccountRole",
        __Marshaller_ressource_AddAccountRoleRqst,
        __Marshaller_ressource_AddAccountRoleRsp);

    static readonly grpc::Method<global::Ressource.RemoveAccountRoleRqst, global::Ressource.RemoveAccountRoleRsp> __Method_RemoveAccountRole = new grpc::Method<global::Ressource.RemoveAccountRoleRqst, global::Ressource.RemoveAccountRoleRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveAccountRole",
        __Marshaller_ressource_RemoveAccountRoleRqst,
        __Marshaller_ressource_RemoveAccountRoleRsp);

    static readonly grpc::Method<global::Ressource.CreateRoleRqst, global::Ressource.CreateRoleRsp> __Method_CreateRole = new grpc::Method<global::Ressource.CreateRoleRqst, global::Ressource.CreateRoleRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRole",
        __Marshaller_ressource_CreateRoleRqst,
        __Marshaller_ressource_CreateRoleRsp);

    static readonly grpc::Method<global::Ressource.DeleteRoleRqst, global::Ressource.DeleteRoleRsp> __Method_DeleteRole = new grpc::Method<global::Ressource.DeleteRoleRqst, global::Ressource.DeleteRoleRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRole",
        __Marshaller_ressource_DeleteRoleRqst,
        __Marshaller_ressource_DeleteRoleRsp);

    static readonly grpc::Method<global::Ressource.AddRoleActionRqst, global::Ressource.AddRoleActionRsp> __Method_AddRoleAction = new grpc::Method<global::Ressource.AddRoleActionRqst, global::Ressource.AddRoleActionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddRoleAction",
        __Marshaller_ressource_AddRoleActionRqst,
        __Marshaller_ressource_AddRoleActionRsp);

    static readonly grpc::Method<global::Ressource.RemoveRoleActionRqst, global::Ressource.RemoveRoleActionRsp> __Method_RemoveRoleAction = new grpc::Method<global::Ressource.RemoveRoleActionRqst, global::Ressource.RemoveRoleActionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveRoleAction",
        __Marshaller_ressource_RemoveRoleActionRqst,
        __Marshaller_ressource_RemoveRoleActionRsp);

    static readonly grpc::Method<global::Ressource.AddApplicationActionRqst, global::Ressource.AddApplicationActionRsp> __Method_AddApplicationAction = new grpc::Method<global::Ressource.AddApplicationActionRqst, global::Ressource.AddApplicationActionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddApplicationAction",
        __Marshaller_ressource_AddApplicationActionRqst,
        __Marshaller_ressource_AddApplicationActionRsp);

    static readonly grpc::Method<global::Ressource.RemoveApplicationActionRqst, global::Ressource.RemoveApplicationActionRsp> __Method_RemoveApplicationAction = new grpc::Method<global::Ressource.RemoveApplicationActionRqst, global::Ressource.RemoveApplicationActionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveApplicationAction",
        __Marshaller_ressource_RemoveApplicationActionRqst,
        __Marshaller_ressource_RemoveApplicationActionRsp);

    static readonly grpc::Method<global::Ressource.GetAllActionsRqst, global::Ressource.GetAllActionsRsp> __Method_GetAllActions = new grpc::Method<global::Ressource.GetAllActionsRqst, global::Ressource.GetAllActionsRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllActions",
        __Marshaller_ressource_GetAllActionsRqst,
        __Marshaller_ressource_GetAllActionsRsp);

    static readonly grpc::Method<global::Ressource.GetPermissionsRqst, global::Ressource.GetPermissionsRsp> __Method_GetPermissions = new grpc::Method<global::Ressource.GetPermissionsRqst, global::Ressource.GetPermissionsRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPermissions",
        __Marshaller_ressource_GetPermissionsRqst,
        __Marshaller_ressource_GetPermissionsRsp);

    static readonly grpc::Method<global::Ressource.SetPermissionRqst, global::Ressource.SetPermissionRsp> __Method_SetPermission = new grpc::Method<global::Ressource.SetPermissionRqst, global::Ressource.SetPermissionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPermission",
        __Marshaller_ressource_SetPermissionRqst,
        __Marshaller_ressource_SetPermissionRsp);

    static readonly grpc::Method<global::Ressource.DeletePermissionsRqst, global::Ressource.DeletePermissionsRsp> __Method_DeletePermissions = new grpc::Method<global::Ressource.DeletePermissionsRqst, global::Ressource.DeletePermissionsRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePermissions",
        __Marshaller_ressource_DeletePermissionsRqst,
        __Marshaller_ressource_DeletePermissionsRsp);

    static readonly grpc::Method<global::Ressource.SetRessourceOwnerRqst, global::Ressource.SetRessourceOwnerRsp> __Method_SetRessourceOwner = new grpc::Method<global::Ressource.SetRessourceOwnerRqst, global::Ressource.SetRessourceOwnerRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetRessourceOwner",
        __Marshaller_ressource_SetRessourceOwnerRqst,
        __Marshaller_ressource_SetRessourceOwnerRsp);

    static readonly grpc::Method<global::Ressource.GetRessourceOwnersRqst, global::Ressource.GetRessourceOwnersRsp> __Method_GetRessourceOwners = new grpc::Method<global::Ressource.GetRessourceOwnersRqst, global::Ressource.GetRessourceOwnersRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRessourceOwners",
        __Marshaller_ressource_GetRessourceOwnersRqst,
        __Marshaller_ressource_GetRessourceOwnersRsp);

    static readonly grpc::Method<global::Ressource.DeleteRessourceOwnerRqst, global::Ressource.DeleteRessourceOwnerRsp> __Method_DeleteRessourceOwner = new grpc::Method<global::Ressource.DeleteRessourceOwnerRqst, global::Ressource.DeleteRessourceOwnerRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRessourceOwner",
        __Marshaller_ressource_DeleteRessourceOwnerRqst,
        __Marshaller_ressource_DeleteRessourceOwnerRsp);

    static readonly grpc::Method<global::Ressource.DeleteRessourceOwnersRqst, global::Ressource.DeleteRessourceOwnersRsp> __Method_DeleteRessourceOwners = new grpc::Method<global::Ressource.DeleteRessourceOwnersRqst, global::Ressource.DeleteRessourceOwnersRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRessourceOwners",
        __Marshaller_ressource_DeleteRessourceOwnersRqst,
        __Marshaller_ressource_DeleteRessourceOwnersRsp);

    static readonly grpc::Method<global::Ressource.GetAllFilesInfoRqst, global::Ressource.GetAllFilesInfoRsp> __Method_GetAllFilesInfo = new grpc::Method<global::Ressource.GetAllFilesInfoRqst, global::Ressource.GetAllFilesInfoRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllFilesInfo",
        __Marshaller_ressource_GetAllFilesInfoRqst,
        __Marshaller_ressource_GetAllFilesInfoRsp);

    static readonly grpc::Method<global::Ressource.ValidateTokenRqst, global::Ressource.ValidateTokenRsp> __Method_ValidateToken = new grpc::Method<global::Ressource.ValidateTokenRqst, global::Ressource.ValidateTokenRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateToken",
        __Marshaller_ressource_ValidateTokenRqst,
        __Marshaller_ressource_ValidateTokenRsp);

    static readonly grpc::Method<global::Ressource.ValidateUserRessourceAccessRqst, global::Ressource.ValidateUserRessourceAccessRsp> __Method_ValidateUserRessourceAccess = new grpc::Method<global::Ressource.ValidateUserRessourceAccessRqst, global::Ressource.ValidateUserRessourceAccessRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateUserRessourceAccess",
        __Marshaller_ressource_ValidateUserRessourceAccessRqst,
        __Marshaller_ressource_ValidateUserRessourceAccessRsp);

    static readonly grpc::Method<global::Ressource.ValidateApplicationRessourceAccessRqst, global::Ressource.ValidateApplicationRessourceAccessRsp> __Method_ValidateApplicationRessourceAccess = new grpc::Method<global::Ressource.ValidateApplicationRessourceAccessRqst, global::Ressource.ValidateApplicationRessourceAccessRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateApplicationRessourceAccess",
        __Marshaller_ressource_ValidateApplicationRessourceAccessRqst,
        __Marshaller_ressource_ValidateApplicationRessourceAccessRsp);

    static readonly grpc::Method<global::Ressource.ValidateUserAccessRqst, global::Ressource.ValidateUserAccessRsp> __Method_ValidateUserAccess = new grpc::Method<global::Ressource.ValidateUserAccessRqst, global::Ressource.ValidateUserAccessRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateUserAccess",
        __Marshaller_ressource_ValidateUserAccessRqst,
        __Marshaller_ressource_ValidateUserAccessRsp);

    static readonly grpc::Method<global::Ressource.ValidateApplicationAccessRqst, global::Ressource.ValidateApplicationAccessRsp> __Method_ValidateApplicationAccess = new grpc::Method<global::Ressource.ValidateApplicationAccessRqst, global::Ressource.ValidateApplicationAccessRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateApplicationAccess",
        __Marshaller_ressource_ValidateApplicationAccessRqst,
        __Marshaller_ressource_ValidateApplicationAccessRsp);

    static readonly grpc::Method<global::Ressource.ValidatePeerAccessRqst, global::Ressource.ValidatePeerAccessRsp> __Method_ValidatePeerAccess = new grpc::Method<global::Ressource.ValidatePeerAccessRqst, global::Ressource.ValidatePeerAccessRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidatePeerAccess",
        __Marshaller_ressource_ValidatePeerAccessRqst,
        __Marshaller_ressource_ValidatePeerAccessRsp);

    static readonly grpc::Method<global::Ressource.ValidatePeerRessourceAccessRqst, global::Ressource.ValidatePeerRessourceAccessRsp> __Method_ValidatePeerRessourceAccess = new grpc::Method<global::Ressource.ValidatePeerRessourceAccessRqst, global::Ressource.ValidatePeerRessourceAccessRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidatePeerRessourceAccess",
        __Marshaller_ressource_ValidatePeerRessourceAccessRqst,
        __Marshaller_ressource_ValidatePeerRessourceAccessRsp);

    static readonly grpc::Method<global::Ressource.DeleteAccountPermissionsRqst, global::Ressource.DeleteAccountPermissionsRsp> __Method_DeleteAccountPermissions = new grpc::Method<global::Ressource.DeleteAccountPermissionsRqst, global::Ressource.DeleteAccountPermissionsRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAccountPermissions",
        __Marshaller_ressource_DeleteAccountPermissionsRqst,
        __Marshaller_ressource_DeleteAccountPermissionsRsp);

    static readonly grpc::Method<global::Ressource.DeleteRolePermissionsRqst, global::Ressource.DeleteRolePermissionsRsp> __Method_DeleteRolePermissions = new grpc::Method<global::Ressource.DeleteRolePermissionsRqst, global::Ressource.DeleteRolePermissionsRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRolePermissions",
        __Marshaller_ressource_DeleteRolePermissionsRqst,
        __Marshaller_ressource_DeleteRolePermissionsRsp);

    static readonly grpc::Method<global::Ressource.GetAllApplicationsInfoRqst, global::Ressource.GetAllApplicationsInfoRsp> __Method_GetAllApplicationsInfo = new grpc::Method<global::Ressource.GetAllApplicationsInfoRqst, global::Ressource.GetAllApplicationsInfoRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllApplicationsInfo",
        __Marshaller_ressource_GetAllApplicationsInfoRqst,
        __Marshaller_ressource_GetAllApplicationsInfoRsp);

    static readonly grpc::Method<global::Ressource.DeleteApplicationRqst, global::Ressource.DeleteApplicationRsp> __Method_DeleteApplication = new grpc::Method<global::Ressource.DeleteApplicationRqst, global::Ressource.DeleteApplicationRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteApplication",
        __Marshaller_ressource_DeleteApplicationRqst,
        __Marshaller_ressource_DeleteApplicationRsp);

    static readonly grpc::Method<global::Ressource.LogRqst, global::Ressource.LogRsp> __Method_Log = new grpc::Method<global::Ressource.LogRqst, global::Ressource.LogRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Log",
        __Marshaller_ressource_LogRqst,
        __Marshaller_ressource_LogRsp);

    static readonly grpc::Method<global::Ressource.GetLogRqst, global::Ressource.GetLogRsp> __Method_GetLog = new grpc::Method<global::Ressource.GetLogRqst, global::Ressource.GetLogRsp>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetLog",
        __Marshaller_ressource_GetLogRqst,
        __Marshaller_ressource_GetLogRsp);

    static readonly grpc::Method<global::Ressource.DeleteLogRqst, global::Ressource.DeleteLogRsp> __Method_DeleteLog = new grpc::Method<global::Ressource.DeleteLogRqst, global::Ressource.DeleteLogRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteLog",
        __Marshaller_ressource_DeleteLogRqst,
        __Marshaller_ressource_DeleteLogRsp);

    static readonly grpc::Method<global::Ressource.ClearAllLogRqst, global::Ressource.ClearAllLogRsp> __Method_ClearAllLog = new grpc::Method<global::Ressource.ClearAllLogRqst, global::Ressource.ClearAllLogRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClearAllLog",
        __Marshaller_ressource_ClearAllLogRqst,
        __Marshaller_ressource_ClearAllLogRsp);

    static readonly grpc::Method<global::Ressource.GetRessourcesRqst, global::Ressource.GetRessourcesRsp> __Method_GetRessources = new grpc::Method<global::Ressource.GetRessourcesRqst, global::Ressource.GetRessourcesRsp>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetRessources",
        __Marshaller_ressource_GetRessourcesRqst,
        __Marshaller_ressource_GetRessourcesRsp);

    static readonly grpc::Method<global::Ressource.SetRessourceRqst, global::Ressource.SetRessourceRsp> __Method_SetRessource = new grpc::Method<global::Ressource.SetRessourceRqst, global::Ressource.SetRessourceRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetRessource",
        __Marshaller_ressource_SetRessourceRqst,
        __Marshaller_ressource_SetRessourceRsp);

    static readonly grpc::Method<global::Ressource.RemoveRessourceRqst, global::Ressource.RemoveRessourceRsp> __Method_RemoveRessource = new grpc::Method<global::Ressource.RemoveRessourceRqst, global::Ressource.RemoveRessourceRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveRessource",
        __Marshaller_ressource_RemoveRessourceRqst,
        __Marshaller_ressource_RemoveRessourceRsp);

    static readonly grpc::Method<global::Ressource.SetActionPermissionRqst, global::Ressource.SetActionPermissionRsp> __Method_SetActionPermission = new grpc::Method<global::Ressource.SetActionPermissionRqst, global::Ressource.SetActionPermissionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetActionPermission",
        __Marshaller_ressource_SetActionPermissionRqst,
        __Marshaller_ressource_SetActionPermissionRsp);

    static readonly grpc::Method<global::Ressource.RemoveActionPermissionRqst, global::Ressource.RemoveActionPermissionRsp> __Method_RemoveActionPermission = new grpc::Method<global::Ressource.RemoveActionPermissionRqst, global::Ressource.RemoveActionPermissionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveActionPermission",
        __Marshaller_ressource_RemoveActionPermissionRqst,
        __Marshaller_ressource_RemoveActionPermissionRsp);

    static readonly grpc::Method<global::Ressource.GetActionPermissionRqst, global::Ressource.GetActionPermissionRsp> __Method_GetActionPermission = new grpc::Method<global::Ressource.GetActionPermissionRqst, global::Ressource.GetActionPermissionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActionPermission",
        __Marshaller_ressource_GetActionPermissionRqst,
        __Marshaller_ressource_GetActionPermissionRsp);

    static readonly grpc::Method<global::Ressource.CreateDirPermissionsRqst, global::Ressource.CreateDirPermissionsRsp> __Method_CreateDirPermissions = new grpc::Method<global::Ressource.CreateDirPermissionsRqst, global::Ressource.CreateDirPermissionsRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDirPermissions",
        __Marshaller_ressource_CreateDirPermissionsRqst,
        __Marshaller_ressource_CreateDirPermissionsRsp);

    static readonly grpc::Method<global::Ressource.RenameFilePermissionRqst, global::Ressource.RenameFilePermissionRsp> __Method_RenameFilePermission = new grpc::Method<global::Ressource.RenameFilePermissionRqst, global::Ressource.RenameFilePermissionRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RenameFilePermission",
        __Marshaller_ressource_RenameFilePermissionRqst,
        __Marshaller_ressource_RenameFilePermissionRsp);

    static readonly grpc::Method<global::Ressource.DeleteDirPermissionsRqst, global::Ressource.DeleteDirPermissionsRsp> __Method_DeleteDirPermissions = new grpc::Method<global::Ressource.DeleteDirPermissionsRqst, global::Ressource.DeleteDirPermissionsRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDirPermissions",
        __Marshaller_ressource_DeleteDirPermissionsRqst,
        __Marshaller_ressource_DeleteDirPermissionsRsp);

    static readonly grpc::Method<global::Ressource.DeleteFilePermissionsRqst, global::Ressource.DeleteFilePermissionsRsp> __Method_DeleteFilePermissions = new grpc::Method<global::Ressource.DeleteFilePermissionsRqst, global::Ressource.DeleteFilePermissionsRsp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteFilePermissions",
        __Marshaller_ressource_DeleteFilePermissionsRqst,
        __Marshaller_ressource_DeleteFilePermissionsRsp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ressource.RessourceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RessourceService</summary>
    [grpc::BindServiceMethod(typeof(RessourceService), "BindService")]
    public abstract partial class RessourceServiceBase
    {
      /// <summary>
      ///* Register a peer on the network *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.RegisterPeerRsp> RegisterPeer(global::Ressource.RegisterPeerRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Return the list of peers *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetPeers(global::Ressource.GetPeersRqst request, grpc::IServerStreamWriter<global::Ressource.GetPeersRsp> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Remove a peer from the network *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.DeletePeerRsp> DeletePeer(global::Ressource.DeletePeerRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Add peer action permission *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.AddPeerActionRsp> AddPeerAction(global::Ressource.AddPeerActionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Remove peer action permission *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.RemovePeerActionRsp> RemovePeerAction(global::Ressource.RemovePeerActionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Register a new Account *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.RegisterAccountRsp> RegisterAccount(global::Ressource.RegisterAccountRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete an account *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.DeleteAccountRsp> DeleteAccount(global::Ressource.DeleteAccountRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Authenticate a user *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.AuthenticateRsp> Authenticate(global::Ressource.AuthenticateRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Synchronize Ressource with LDAP if connection exist *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.SynchronizeLdapRsp> SynchronizeLdap(global::Ressource.SynchronizeLdapRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Refresh token get a new token *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.RefreshTokenRsp> RefreshToken(global::Ressource.RefreshTokenRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Add role to a given account *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.AddAccountRoleRsp> AddAccountRole(global::Ressource.AddAccountRoleRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Remove a role from a given account *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.RemoveAccountRoleRsp> RemoveAccountRole(global::Ressource.RemoveAccountRoleRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Create a role with given action list *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.CreateRoleRsp> CreateRole(global::Ressource.CreateRoleRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete a role with a given id *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.DeleteRoleRsp> DeleteRole(global::Ressource.DeleteRoleRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Append an action to existing role. *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.AddRoleActionRsp> AddRoleAction(global::Ressource.AddRoleActionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Remove an action to existing role. *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.RemoveRoleActionRsp> RemoveRoleAction(global::Ressource.RemoveRoleActionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Append an action to existing applications. *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.AddApplicationActionRsp> AddApplicationAction(global::Ressource.AddApplicationActionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Remove an action to existing applications. *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.RemoveApplicationActionRsp> RemoveApplicationAction(global::Ressource.RemoveApplicationActionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Get all actions *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.GetAllActionsRsp> GetAllActions(global::Ressource.GetAllActionsRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*  *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.GetPermissionsRsp> GetPermissions(global::Ressource.GetPermissionsRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Set a file permission, create new one if not already exist. *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.SetPermissionRsp> SetPermission(global::Ressource.SetPermissionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete a file permissions *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.DeletePermissionsRsp> DeletePermissions(global::Ressource.DeletePermissionsRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Set Ressource owner *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.SetRessourceOwnerRsp> SetRessourceOwner(global::Ressource.SetRessourceOwnerRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Get the ressource owners *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.GetRessourceOwnersRsp> GetRessourceOwners(global::Ressource.GetRessourceOwnersRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete the ressource owner *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.DeleteRessourceOwnerRsp> DeleteRessourceOwner(global::Ressource.DeleteRessourceOwnerRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete the ressource owners *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.DeleteRessourceOwnersRsp> DeleteRessourceOwners(global::Ressource.DeleteRessourceOwnersRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Retrun a json string with all file info *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.GetAllFilesInfoRsp> GetAllFilesInfo(global::Ressource.GetAllFilesInfoRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Validate a token *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.ValidateTokenRsp> ValidateToken(global::Ressource.ValidateTokenRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Validate if user can access a given ressource. *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.ValidateUserRessourceAccessRsp> ValidateUserRessourceAccess(global::Ressource.ValidateUserRessourceAccessRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Validate if application can access a given ressouce. *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.ValidateApplicationRessourceAccessRsp> ValidateApplicationRessourceAccess(global::Ressource.ValidateApplicationRessourceAccessRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Validate if user can access a given method. *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.ValidateUserAccessRsp> ValidateUserAccess(global::Ressource.ValidateUserAccessRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Validate if application can access a given method. *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.ValidateApplicationAccessRsp> ValidateApplicationAccess(global::Ressource.ValidateApplicationAccessRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Validate if a peer can access a given method. *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.ValidatePeerAccessRsp> ValidatePeerAccess(global::Ressource.ValidatePeerAccessRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Validate if a peer can access a given ressource. *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.ValidatePeerRessourceAccessRsp> ValidatePeerRessourceAccess(global::Ressource.ValidatePeerRessourceAccessRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete all permission for a given account *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.DeleteAccountPermissionsRsp> DeleteAccountPermissions(global::Ressource.DeleteAccountPermissionsRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete all permission for a given role *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.DeleteRolePermissionsRsp> DeleteRolePermissions(global::Ressource.DeleteRolePermissionsRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Return a json string with all applications informations *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.GetAllApplicationsInfoRsp> GetAllApplicationsInfo(global::Ressource.GetAllApplicationsInfoRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete an application from the server. *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.DeleteApplicationRsp> DeleteApplication(global::Ressource.DeleteApplicationRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Set a method into the log... *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.LogRsp> Log(global::Ressource.LogRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Get the list of logs *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetLog(global::Ressource.GetLogRqst request, grpc::IServerStreamWriter<global::Ressource.GetLogRsp> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete a single log entry *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.DeleteLogRsp> DeleteLog(global::Ressource.DeleteLogRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete all log *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.ClearAllLogRsp> ClearAllLog(global::Ressource.ClearAllLogRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Get all ressources 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetRessources(global::Ressource.GetRessourcesRqst request, grpc::IServerStreamWriter<global::Ressource.GetRessourcesRsp> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Set a ressource from a client (custom service) to globular 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.SetRessourceRsp> SetRessource(global::Ressource.SetRessourceRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Remove a ressource from a client (custom service) to globular 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.RemoveRessourceRsp> RemoveRessource(global::Ressource.RemoveRessourceRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Set ressource action permission *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.SetActionPermissionRsp> SetActionPermission(global::Ressource.SetActionPermissionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Remove ressource action permission *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.RemoveActionPermissionRsp> RemoveActionPermission(global::Ressource.RemoveActionPermissionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Get ressource action permission *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.GetActionPermissionRsp> GetActionPermission(global::Ressource.GetActionPermissionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Create Permission for a dir (recursive) *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.CreateDirPermissionsRsp> CreateDirPermissions(global::Ressource.CreateDirPermissionsRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Rename file/dir permission *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.RenameFilePermissionRsp> RenameFilePermission(global::Ressource.RenameFilePermissionRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete Permission for a dir (recursive) *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.DeleteDirPermissionsRsp> DeleteDirPermissions(global::Ressource.DeleteDirPermissionsRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///* Delete a single file permission *
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Ressource.DeleteFilePermissionsRsp> DeleteFilePermissions(global::Ressource.DeleteFilePermissionsRqst request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RessourceService</summary>
    public partial class RessourceServiceClient : grpc::ClientBase<RessourceServiceClient>
    {
      /// <summary>Creates a new client for RessourceService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RessourceServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RessourceService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RessourceServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RessourceServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RessourceServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///* Register a peer on the network *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RegisterPeerRsp RegisterPeer(global::Ressource.RegisterPeerRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterPeer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Register a peer on the network *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RegisterPeerRsp RegisterPeer(global::Ressource.RegisterPeerRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterPeer, null, options, request);
      }
      /// <summary>
      ///* Register a peer on the network *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RegisterPeerRsp> RegisterPeerAsync(global::Ressource.RegisterPeerRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterPeerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Register a peer on the network *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RegisterPeerRsp> RegisterPeerAsync(global::Ressource.RegisterPeerRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterPeer, null, options, request);
      }
      /// <summary>
      ///* Return the list of peers *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Ressource.GetPeersRsp> GetPeers(global::Ressource.GetPeersRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPeers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Return the list of peers *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Ressource.GetPeersRsp> GetPeers(global::Ressource.GetPeersRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetPeers, null, options, request);
      }
      /// <summary>
      ///* Remove a peer from the network *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeletePeerRsp DeletePeer(global::Ressource.DeletePeerRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePeer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove a peer from the network *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeletePeerRsp DeletePeer(global::Ressource.DeletePeerRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePeer, null, options, request);
      }
      /// <summary>
      ///* Remove a peer from the network *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeletePeerRsp> DeletePeerAsync(global::Ressource.DeletePeerRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePeerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove a peer from the network *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeletePeerRsp> DeletePeerAsync(global::Ressource.DeletePeerRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePeer, null, options, request);
      }
      /// <summary>
      ///* Add peer action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.AddPeerActionRsp AddPeerAction(global::Ressource.AddPeerActionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPeerAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Add peer action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.AddPeerActionRsp AddPeerAction(global::Ressource.AddPeerActionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddPeerAction, null, options, request);
      }
      /// <summary>
      ///* Add peer action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.AddPeerActionRsp> AddPeerActionAsync(global::Ressource.AddPeerActionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPeerActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Add peer action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.AddPeerActionRsp> AddPeerActionAsync(global::Ressource.AddPeerActionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddPeerAction, null, options, request);
      }
      /// <summary>
      ///* Remove peer action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RemovePeerActionRsp RemovePeerAction(global::Ressource.RemovePeerActionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemovePeerAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove peer action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RemovePeerActionRsp RemovePeerAction(global::Ressource.RemovePeerActionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemovePeerAction, null, options, request);
      }
      /// <summary>
      ///* Remove peer action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RemovePeerActionRsp> RemovePeerActionAsync(global::Ressource.RemovePeerActionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemovePeerActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove peer action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RemovePeerActionRsp> RemovePeerActionAsync(global::Ressource.RemovePeerActionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemovePeerAction, null, options, request);
      }
      /// <summary>
      ///* Register a new Account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RegisterAccountRsp RegisterAccount(global::Ressource.RegisterAccountRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Register a new Account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RegisterAccountRsp RegisterAccount(global::Ressource.RegisterAccountRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterAccount, null, options, request);
      }
      /// <summary>
      ///* Register a new Account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RegisterAccountRsp> RegisterAccountAsync(global::Ressource.RegisterAccountRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Register a new Account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RegisterAccountRsp> RegisterAccountAsync(global::Ressource.RegisterAccountRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterAccount, null, options, request);
      }
      /// <summary>
      ///* Delete an account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteAccountRsp DeleteAccount(global::Ressource.DeleteAccountRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete an account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteAccountRsp DeleteAccount(global::Ressource.DeleteAccountRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAccount, null, options, request);
      }
      /// <summary>
      ///* Delete an account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteAccountRsp> DeleteAccountAsync(global::Ressource.DeleteAccountRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete an account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteAccountRsp> DeleteAccountAsync(global::Ressource.DeleteAccountRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAccount, null, options, request);
      }
      /// <summary>
      ///* Authenticate a user *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.AuthenticateRsp Authenticate(global::Ressource.AuthenticateRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Authenticate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Authenticate a user *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.AuthenticateRsp Authenticate(global::Ressource.AuthenticateRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Authenticate, null, options, request);
      }
      /// <summary>
      ///* Authenticate a user *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.AuthenticateRsp> AuthenticateAsync(global::Ressource.AuthenticateRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthenticateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Authenticate a user *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.AuthenticateRsp> AuthenticateAsync(global::Ressource.AuthenticateRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Authenticate, null, options, request);
      }
      /// <summary>
      ///* Synchronize Ressource with LDAP if connection exist *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.SynchronizeLdapRsp SynchronizeLdap(global::Ressource.SynchronizeLdapRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SynchronizeLdap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Synchronize Ressource with LDAP if connection exist *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.SynchronizeLdapRsp SynchronizeLdap(global::Ressource.SynchronizeLdapRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SynchronizeLdap, null, options, request);
      }
      /// <summary>
      ///* Synchronize Ressource with LDAP if connection exist *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.SynchronizeLdapRsp> SynchronizeLdapAsync(global::Ressource.SynchronizeLdapRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SynchronizeLdapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Synchronize Ressource with LDAP if connection exist *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.SynchronizeLdapRsp> SynchronizeLdapAsync(global::Ressource.SynchronizeLdapRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SynchronizeLdap, null, options, request);
      }
      /// <summary>
      ///* Refresh token get a new token *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RefreshTokenRsp RefreshToken(global::Ressource.RefreshTokenRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RefreshToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Refresh token get a new token *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RefreshTokenRsp RefreshToken(global::Ressource.RefreshTokenRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RefreshToken, null, options, request);
      }
      /// <summary>
      ///* Refresh token get a new token *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RefreshTokenRsp> RefreshTokenAsync(global::Ressource.RefreshTokenRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RefreshTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Refresh token get a new token *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RefreshTokenRsp> RefreshTokenAsync(global::Ressource.RefreshTokenRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RefreshToken, null, options, request);
      }
      /// <summary>
      ///* Add role to a given account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.AddAccountRoleRsp AddAccountRole(global::Ressource.AddAccountRoleRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAccountRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Add role to a given account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.AddAccountRoleRsp AddAccountRole(global::Ressource.AddAccountRoleRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddAccountRole, null, options, request);
      }
      /// <summary>
      ///* Add role to a given account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.AddAccountRoleRsp> AddAccountRoleAsync(global::Ressource.AddAccountRoleRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAccountRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Add role to a given account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.AddAccountRoleRsp> AddAccountRoleAsync(global::Ressource.AddAccountRoleRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddAccountRole, null, options, request);
      }
      /// <summary>
      ///* Remove a role from a given account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RemoveAccountRoleRsp RemoveAccountRole(global::Ressource.RemoveAccountRoleRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveAccountRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove a role from a given account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RemoveAccountRoleRsp RemoveAccountRole(global::Ressource.RemoveAccountRoleRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveAccountRole, null, options, request);
      }
      /// <summary>
      ///* Remove a role from a given account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RemoveAccountRoleRsp> RemoveAccountRoleAsync(global::Ressource.RemoveAccountRoleRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveAccountRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove a role from a given account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RemoveAccountRoleRsp> RemoveAccountRoleAsync(global::Ressource.RemoveAccountRoleRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveAccountRole, null, options, request);
      }
      /// <summary>
      ///* Create a role with given action list *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.CreateRoleRsp CreateRole(global::Ressource.CreateRoleRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Create a role with given action list *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.CreateRoleRsp CreateRole(global::Ressource.CreateRoleRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRole, null, options, request);
      }
      /// <summary>
      ///* Create a role with given action list *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.CreateRoleRsp> CreateRoleAsync(global::Ressource.CreateRoleRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Create a role with given action list *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.CreateRoleRsp> CreateRoleAsync(global::Ressource.CreateRoleRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRole, null, options, request);
      }
      /// <summary>
      ///* Delete a role with a given id *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteRoleRsp DeleteRole(global::Ressource.DeleteRoleRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete a role with a given id *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteRoleRsp DeleteRole(global::Ressource.DeleteRoleRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRole, null, options, request);
      }
      /// <summary>
      ///* Delete a role with a given id *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteRoleRsp> DeleteRoleAsync(global::Ressource.DeleteRoleRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete a role with a given id *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteRoleRsp> DeleteRoleAsync(global::Ressource.DeleteRoleRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRole, null, options, request);
      }
      /// <summary>
      ///* Append an action to existing role. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.AddRoleActionRsp AddRoleAction(global::Ressource.AddRoleActionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRoleAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Append an action to existing role. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.AddRoleActionRsp AddRoleAction(global::Ressource.AddRoleActionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddRoleAction, null, options, request);
      }
      /// <summary>
      ///* Append an action to existing role. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.AddRoleActionRsp> AddRoleActionAsync(global::Ressource.AddRoleActionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRoleActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Append an action to existing role. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.AddRoleActionRsp> AddRoleActionAsync(global::Ressource.AddRoleActionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddRoleAction, null, options, request);
      }
      /// <summary>
      ///* Remove an action to existing role. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RemoveRoleActionRsp RemoveRoleAction(global::Ressource.RemoveRoleActionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveRoleAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove an action to existing role. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RemoveRoleActionRsp RemoveRoleAction(global::Ressource.RemoveRoleActionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveRoleAction, null, options, request);
      }
      /// <summary>
      ///* Remove an action to existing role. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RemoveRoleActionRsp> RemoveRoleActionAsync(global::Ressource.RemoveRoleActionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveRoleActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove an action to existing role. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RemoveRoleActionRsp> RemoveRoleActionAsync(global::Ressource.RemoveRoleActionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveRoleAction, null, options, request);
      }
      /// <summary>
      ///* Append an action to existing applications. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.AddApplicationActionRsp AddApplicationAction(global::Ressource.AddApplicationActionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddApplicationAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Append an action to existing applications. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.AddApplicationActionRsp AddApplicationAction(global::Ressource.AddApplicationActionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddApplicationAction, null, options, request);
      }
      /// <summary>
      ///* Append an action to existing applications. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.AddApplicationActionRsp> AddApplicationActionAsync(global::Ressource.AddApplicationActionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddApplicationActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Append an action to existing applications. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.AddApplicationActionRsp> AddApplicationActionAsync(global::Ressource.AddApplicationActionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddApplicationAction, null, options, request);
      }
      /// <summary>
      ///* Remove an action to existing applications. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RemoveApplicationActionRsp RemoveApplicationAction(global::Ressource.RemoveApplicationActionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveApplicationAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove an action to existing applications. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RemoveApplicationActionRsp RemoveApplicationAction(global::Ressource.RemoveApplicationActionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveApplicationAction, null, options, request);
      }
      /// <summary>
      ///* Remove an action to existing applications. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RemoveApplicationActionRsp> RemoveApplicationActionAsync(global::Ressource.RemoveApplicationActionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveApplicationActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove an action to existing applications. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RemoveApplicationActionRsp> RemoveApplicationActionAsync(global::Ressource.RemoveApplicationActionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveApplicationAction, null, options, request);
      }
      /// <summary>
      ///* Get all actions *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.GetAllActionsRsp GetAllActions(global::Ressource.GetAllActionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllActions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Get all actions *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.GetAllActionsRsp GetAllActions(global::Ressource.GetAllActionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllActions, null, options, request);
      }
      /// <summary>
      ///* Get all actions *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.GetAllActionsRsp> GetAllActionsAsync(global::Ressource.GetAllActionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllActionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Get all actions *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.GetAllActionsRsp> GetAllActionsAsync(global::Ressource.GetAllActionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllActions, null, options, request);
      }
      /// <summary>
      ///*  *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.GetPermissionsRsp GetPermissions(global::Ressource.GetPermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*  *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.GetPermissionsRsp GetPermissions(global::Ressource.GetPermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPermissions, null, options, request);
      }
      /// <summary>
      ///*  *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.GetPermissionsRsp> GetPermissionsAsync(global::Ressource.GetPermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*  *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.GetPermissionsRsp> GetPermissionsAsync(global::Ressource.GetPermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPermissions, null, options, request);
      }
      /// <summary>
      ///* Set a file permission, create new one if not already exist. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.SetPermissionRsp SetPermission(global::Ressource.SetPermissionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Set a file permission, create new one if not already exist. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.SetPermissionRsp SetPermission(global::Ressource.SetPermissionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPermission, null, options, request);
      }
      /// <summary>
      ///* Set a file permission, create new one if not already exist. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.SetPermissionRsp> SetPermissionAsync(global::Ressource.SetPermissionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Set a file permission, create new one if not already exist. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.SetPermissionRsp> SetPermissionAsync(global::Ressource.SetPermissionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPermission, null, options, request);
      }
      /// <summary>
      ///* Delete a file permissions *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeletePermissionsRsp DeletePermissions(global::Ressource.DeletePermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete a file permissions *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeletePermissionsRsp DeletePermissions(global::Ressource.DeletePermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePermissions, null, options, request);
      }
      /// <summary>
      ///* Delete a file permissions *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeletePermissionsRsp> DeletePermissionsAsync(global::Ressource.DeletePermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete a file permissions *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeletePermissionsRsp> DeletePermissionsAsync(global::Ressource.DeletePermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePermissions, null, options, request);
      }
      /// <summary>
      ///* Set Ressource owner *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.SetRessourceOwnerRsp SetRessourceOwner(global::Ressource.SetRessourceOwnerRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRessourceOwner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Set Ressource owner *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.SetRessourceOwnerRsp SetRessourceOwner(global::Ressource.SetRessourceOwnerRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetRessourceOwner, null, options, request);
      }
      /// <summary>
      ///* Set Ressource owner *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.SetRessourceOwnerRsp> SetRessourceOwnerAsync(global::Ressource.SetRessourceOwnerRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRessourceOwnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Set Ressource owner *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.SetRessourceOwnerRsp> SetRessourceOwnerAsync(global::Ressource.SetRessourceOwnerRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetRessourceOwner, null, options, request);
      }
      /// <summary>
      ///* Get the ressource owners *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.GetRessourceOwnersRsp GetRessourceOwners(global::Ressource.GetRessourceOwnersRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRessourceOwners(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Get the ressource owners *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.GetRessourceOwnersRsp GetRessourceOwners(global::Ressource.GetRessourceOwnersRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRessourceOwners, null, options, request);
      }
      /// <summary>
      ///* Get the ressource owners *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.GetRessourceOwnersRsp> GetRessourceOwnersAsync(global::Ressource.GetRessourceOwnersRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRessourceOwnersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Get the ressource owners *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.GetRessourceOwnersRsp> GetRessourceOwnersAsync(global::Ressource.GetRessourceOwnersRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRessourceOwners, null, options, request);
      }
      /// <summary>
      ///* Delete the ressource owner *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteRessourceOwnerRsp DeleteRessourceOwner(global::Ressource.DeleteRessourceOwnerRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRessourceOwner(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete the ressource owner *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteRessourceOwnerRsp DeleteRessourceOwner(global::Ressource.DeleteRessourceOwnerRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRessourceOwner, null, options, request);
      }
      /// <summary>
      ///* Delete the ressource owner *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteRessourceOwnerRsp> DeleteRessourceOwnerAsync(global::Ressource.DeleteRessourceOwnerRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRessourceOwnerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete the ressource owner *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteRessourceOwnerRsp> DeleteRessourceOwnerAsync(global::Ressource.DeleteRessourceOwnerRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRessourceOwner, null, options, request);
      }
      /// <summary>
      ///* Delete the ressource owners *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteRessourceOwnersRsp DeleteRessourceOwners(global::Ressource.DeleteRessourceOwnersRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRessourceOwners(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete the ressource owners *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteRessourceOwnersRsp DeleteRessourceOwners(global::Ressource.DeleteRessourceOwnersRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRessourceOwners, null, options, request);
      }
      /// <summary>
      ///* Delete the ressource owners *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteRessourceOwnersRsp> DeleteRessourceOwnersAsync(global::Ressource.DeleteRessourceOwnersRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRessourceOwnersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete the ressource owners *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteRessourceOwnersRsp> DeleteRessourceOwnersAsync(global::Ressource.DeleteRessourceOwnersRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRessourceOwners, null, options, request);
      }
      /// <summary>
      ///* Retrun a json string with all file info *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.GetAllFilesInfoRsp GetAllFilesInfo(global::Ressource.GetAllFilesInfoRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllFilesInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Retrun a json string with all file info *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.GetAllFilesInfoRsp GetAllFilesInfo(global::Ressource.GetAllFilesInfoRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllFilesInfo, null, options, request);
      }
      /// <summary>
      ///* Retrun a json string with all file info *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.GetAllFilesInfoRsp> GetAllFilesInfoAsync(global::Ressource.GetAllFilesInfoRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllFilesInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Retrun a json string with all file info *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.GetAllFilesInfoRsp> GetAllFilesInfoAsync(global::Ressource.GetAllFilesInfoRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllFilesInfo, null, options, request);
      }
      /// <summary>
      ///* Validate a token *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidateTokenRsp ValidateToken(global::Ressource.ValidateTokenRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate a token *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidateTokenRsp ValidateToken(global::Ressource.ValidateTokenRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateToken, null, options, request);
      }
      /// <summary>
      ///* Validate a token *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidateTokenRsp> ValidateTokenAsync(global::Ressource.ValidateTokenRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate a token *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidateTokenRsp> ValidateTokenAsync(global::Ressource.ValidateTokenRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateToken, null, options, request);
      }
      /// <summary>
      ///* Validate if user can access a given ressource. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidateUserRessourceAccessRsp ValidateUserRessourceAccess(global::Ressource.ValidateUserRessourceAccessRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateUserRessourceAccess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate if user can access a given ressource. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidateUserRessourceAccessRsp ValidateUserRessourceAccess(global::Ressource.ValidateUserRessourceAccessRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateUserRessourceAccess, null, options, request);
      }
      /// <summary>
      ///* Validate if user can access a given ressource. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidateUserRessourceAccessRsp> ValidateUserRessourceAccessAsync(global::Ressource.ValidateUserRessourceAccessRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateUserRessourceAccessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate if user can access a given ressource. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidateUserRessourceAccessRsp> ValidateUserRessourceAccessAsync(global::Ressource.ValidateUserRessourceAccessRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateUserRessourceAccess, null, options, request);
      }
      /// <summary>
      ///* Validate if application can access a given ressouce. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidateApplicationRessourceAccessRsp ValidateApplicationRessourceAccess(global::Ressource.ValidateApplicationRessourceAccessRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateApplicationRessourceAccess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate if application can access a given ressouce. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidateApplicationRessourceAccessRsp ValidateApplicationRessourceAccess(global::Ressource.ValidateApplicationRessourceAccessRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateApplicationRessourceAccess, null, options, request);
      }
      /// <summary>
      ///* Validate if application can access a given ressouce. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidateApplicationRessourceAccessRsp> ValidateApplicationRessourceAccessAsync(global::Ressource.ValidateApplicationRessourceAccessRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateApplicationRessourceAccessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate if application can access a given ressouce. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidateApplicationRessourceAccessRsp> ValidateApplicationRessourceAccessAsync(global::Ressource.ValidateApplicationRessourceAccessRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateApplicationRessourceAccess, null, options, request);
      }
      /// <summary>
      ///* Validate if user can access a given method. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidateUserAccessRsp ValidateUserAccess(global::Ressource.ValidateUserAccessRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateUserAccess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate if user can access a given method. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidateUserAccessRsp ValidateUserAccess(global::Ressource.ValidateUserAccessRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateUserAccess, null, options, request);
      }
      /// <summary>
      ///* Validate if user can access a given method. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidateUserAccessRsp> ValidateUserAccessAsync(global::Ressource.ValidateUserAccessRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateUserAccessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate if user can access a given method. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidateUserAccessRsp> ValidateUserAccessAsync(global::Ressource.ValidateUserAccessRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateUserAccess, null, options, request);
      }
      /// <summary>
      ///* Validate if application can access a given method. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidateApplicationAccessRsp ValidateApplicationAccess(global::Ressource.ValidateApplicationAccessRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateApplicationAccess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate if application can access a given method. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidateApplicationAccessRsp ValidateApplicationAccess(global::Ressource.ValidateApplicationAccessRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateApplicationAccess, null, options, request);
      }
      /// <summary>
      ///* Validate if application can access a given method. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidateApplicationAccessRsp> ValidateApplicationAccessAsync(global::Ressource.ValidateApplicationAccessRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateApplicationAccessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate if application can access a given method. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidateApplicationAccessRsp> ValidateApplicationAccessAsync(global::Ressource.ValidateApplicationAccessRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateApplicationAccess, null, options, request);
      }
      /// <summary>
      ///* Validate if a peer can access a given method. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidatePeerAccessRsp ValidatePeerAccess(global::Ressource.ValidatePeerAccessRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidatePeerAccess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate if a peer can access a given method. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidatePeerAccessRsp ValidatePeerAccess(global::Ressource.ValidatePeerAccessRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidatePeerAccess, null, options, request);
      }
      /// <summary>
      ///* Validate if a peer can access a given method. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidatePeerAccessRsp> ValidatePeerAccessAsync(global::Ressource.ValidatePeerAccessRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidatePeerAccessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate if a peer can access a given method. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidatePeerAccessRsp> ValidatePeerAccessAsync(global::Ressource.ValidatePeerAccessRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidatePeerAccess, null, options, request);
      }
      /// <summary>
      ///* Validate if a peer can access a given ressource. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidatePeerRessourceAccessRsp ValidatePeerRessourceAccess(global::Ressource.ValidatePeerRessourceAccessRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidatePeerRessourceAccess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate if a peer can access a given ressource. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ValidatePeerRessourceAccessRsp ValidatePeerRessourceAccess(global::Ressource.ValidatePeerRessourceAccessRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidatePeerRessourceAccess, null, options, request);
      }
      /// <summary>
      ///* Validate if a peer can access a given ressource. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidatePeerRessourceAccessRsp> ValidatePeerRessourceAccessAsync(global::Ressource.ValidatePeerRessourceAccessRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidatePeerRessourceAccessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Validate if a peer can access a given ressource. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ValidatePeerRessourceAccessRsp> ValidatePeerRessourceAccessAsync(global::Ressource.ValidatePeerRessourceAccessRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidatePeerRessourceAccess, null, options, request);
      }
      /// <summary>
      ///* Delete all permission for a given account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteAccountPermissionsRsp DeleteAccountPermissions(global::Ressource.DeleteAccountPermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccountPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete all permission for a given account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteAccountPermissionsRsp DeleteAccountPermissions(global::Ressource.DeleteAccountPermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAccountPermissions, null, options, request);
      }
      /// <summary>
      ///* Delete all permission for a given account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteAccountPermissionsRsp> DeleteAccountPermissionsAsync(global::Ressource.DeleteAccountPermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccountPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete all permission for a given account *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteAccountPermissionsRsp> DeleteAccountPermissionsAsync(global::Ressource.DeleteAccountPermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAccountPermissions, null, options, request);
      }
      /// <summary>
      ///* Delete all permission for a given role *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteRolePermissionsRsp DeleteRolePermissions(global::Ressource.DeleteRolePermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRolePermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete all permission for a given role *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteRolePermissionsRsp DeleteRolePermissions(global::Ressource.DeleteRolePermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRolePermissions, null, options, request);
      }
      /// <summary>
      ///* Delete all permission for a given role *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteRolePermissionsRsp> DeleteRolePermissionsAsync(global::Ressource.DeleteRolePermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRolePermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete all permission for a given role *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteRolePermissionsRsp> DeleteRolePermissionsAsync(global::Ressource.DeleteRolePermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRolePermissions, null, options, request);
      }
      /// <summary>
      ///* Return a json string with all applications informations *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.GetAllApplicationsInfoRsp GetAllApplicationsInfo(global::Ressource.GetAllApplicationsInfoRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllApplicationsInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Return a json string with all applications informations *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.GetAllApplicationsInfoRsp GetAllApplicationsInfo(global::Ressource.GetAllApplicationsInfoRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllApplicationsInfo, null, options, request);
      }
      /// <summary>
      ///* Return a json string with all applications informations *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.GetAllApplicationsInfoRsp> GetAllApplicationsInfoAsync(global::Ressource.GetAllApplicationsInfoRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllApplicationsInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Return a json string with all applications informations *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.GetAllApplicationsInfoRsp> GetAllApplicationsInfoAsync(global::Ressource.GetAllApplicationsInfoRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllApplicationsInfo, null, options, request);
      }
      /// <summary>
      ///* Delete an application from the server. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteApplicationRsp DeleteApplication(global::Ressource.DeleteApplicationRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteApplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete an application from the server. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteApplicationRsp DeleteApplication(global::Ressource.DeleteApplicationRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteApplication, null, options, request);
      }
      /// <summary>
      ///* Delete an application from the server. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteApplicationRsp> DeleteApplicationAsync(global::Ressource.DeleteApplicationRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteApplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete an application from the server. *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteApplicationRsp> DeleteApplicationAsync(global::Ressource.DeleteApplicationRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteApplication, null, options, request);
      }
      /// <summary>
      ///* Set a method into the log... *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.LogRsp Log(global::Ressource.LogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Log(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Set a method into the log... *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.LogRsp Log(global::Ressource.LogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Log, null, options, request);
      }
      /// <summary>
      ///* Set a method into the log... *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.LogRsp> LogAsync(global::Ressource.LogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Set a method into the log... *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.LogRsp> LogAsync(global::Ressource.LogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Log, null, options, request);
      }
      /// <summary>
      ///* Get the list of logs *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Ressource.GetLogRsp> GetLog(global::Ressource.GetLogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Get the list of logs *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Ressource.GetLogRsp> GetLog(global::Ressource.GetLogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetLog, null, options, request);
      }
      /// <summary>
      ///* Delete a single log entry *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteLogRsp DeleteLog(global::Ressource.DeleteLogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete a single log entry *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteLogRsp DeleteLog(global::Ressource.DeleteLogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteLog, null, options, request);
      }
      /// <summary>
      ///* Delete a single log entry *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteLogRsp> DeleteLogAsync(global::Ressource.DeleteLogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete a single log entry *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteLogRsp> DeleteLogAsync(global::Ressource.DeleteLogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteLog, null, options, request);
      }
      /// <summary>
      ///* Delete all log *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ClearAllLogRsp ClearAllLog(global::Ressource.ClearAllLogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearAllLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete all log *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.ClearAllLogRsp ClearAllLog(global::Ressource.ClearAllLogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearAllLog, null, options, request);
      }
      /// <summary>
      ///* Delete all log *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ClearAllLogRsp> ClearAllLogAsync(global::Ressource.ClearAllLogRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearAllLogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete all log *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.ClearAllLogRsp> ClearAllLogAsync(global::Ressource.ClearAllLogRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearAllLog, null, options, request);
      }
      /// <summary>
      ///* Get all ressources 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Ressource.GetRessourcesRsp> GetRessources(global::Ressource.GetRessourcesRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRessources(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Get all ressources 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Ressource.GetRessourcesRsp> GetRessources(global::Ressource.GetRessourcesRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetRessources, null, options, request);
      }
      /// <summary>
      ///* Set a ressource from a client (custom service) to globular 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.SetRessourceRsp SetRessource(global::Ressource.SetRessourceRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRessource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Set a ressource from a client (custom service) to globular 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.SetRessourceRsp SetRessource(global::Ressource.SetRessourceRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetRessource, null, options, request);
      }
      /// <summary>
      ///* Set a ressource from a client (custom service) to globular 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.SetRessourceRsp> SetRessourceAsync(global::Ressource.SetRessourceRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRessourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Set a ressource from a client (custom service) to globular 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.SetRessourceRsp> SetRessourceAsync(global::Ressource.SetRessourceRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetRessource, null, options, request);
      }
      /// <summary>
      ///* Remove a ressource from a client (custom service) to globular 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RemoveRessourceRsp RemoveRessource(global::Ressource.RemoveRessourceRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveRessource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove a ressource from a client (custom service) to globular 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RemoveRessourceRsp RemoveRessource(global::Ressource.RemoveRessourceRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveRessource, null, options, request);
      }
      /// <summary>
      ///* Remove a ressource from a client (custom service) to globular 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RemoveRessourceRsp> RemoveRessourceAsync(global::Ressource.RemoveRessourceRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveRessourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove a ressource from a client (custom service) to globular 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RemoveRessourceRsp> RemoveRessourceAsync(global::Ressource.RemoveRessourceRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveRessource, null, options, request);
      }
      /// <summary>
      ///* Set ressource action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.SetActionPermissionRsp SetActionPermission(global::Ressource.SetActionPermissionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetActionPermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Set ressource action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.SetActionPermissionRsp SetActionPermission(global::Ressource.SetActionPermissionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetActionPermission, null, options, request);
      }
      /// <summary>
      ///* Set ressource action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.SetActionPermissionRsp> SetActionPermissionAsync(global::Ressource.SetActionPermissionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetActionPermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Set ressource action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.SetActionPermissionRsp> SetActionPermissionAsync(global::Ressource.SetActionPermissionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetActionPermission, null, options, request);
      }
      /// <summary>
      ///* Remove ressource action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RemoveActionPermissionRsp RemoveActionPermission(global::Ressource.RemoveActionPermissionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveActionPermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove ressource action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RemoveActionPermissionRsp RemoveActionPermission(global::Ressource.RemoveActionPermissionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveActionPermission, null, options, request);
      }
      /// <summary>
      ///* Remove ressource action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RemoveActionPermissionRsp> RemoveActionPermissionAsync(global::Ressource.RemoveActionPermissionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveActionPermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Remove ressource action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RemoveActionPermissionRsp> RemoveActionPermissionAsync(global::Ressource.RemoveActionPermissionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveActionPermission, null, options, request);
      }
      /// <summary>
      ///* Get ressource action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.GetActionPermissionRsp GetActionPermission(global::Ressource.GetActionPermissionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActionPermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Get ressource action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.GetActionPermissionRsp GetActionPermission(global::Ressource.GetActionPermissionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActionPermission, null, options, request);
      }
      /// <summary>
      ///* Get ressource action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.GetActionPermissionRsp> GetActionPermissionAsync(global::Ressource.GetActionPermissionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActionPermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Get ressource action permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.GetActionPermissionRsp> GetActionPermissionAsync(global::Ressource.GetActionPermissionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActionPermission, null, options, request);
      }
      /// <summary>
      ///* Create Permission for a dir (recursive) *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.CreateDirPermissionsRsp CreateDirPermissions(global::Ressource.CreateDirPermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDirPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Create Permission for a dir (recursive) *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.CreateDirPermissionsRsp CreateDirPermissions(global::Ressource.CreateDirPermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDirPermissions, null, options, request);
      }
      /// <summary>
      ///* Create Permission for a dir (recursive) *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.CreateDirPermissionsRsp> CreateDirPermissionsAsync(global::Ressource.CreateDirPermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDirPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Create Permission for a dir (recursive) *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.CreateDirPermissionsRsp> CreateDirPermissionsAsync(global::Ressource.CreateDirPermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDirPermissions, null, options, request);
      }
      /// <summary>
      ///* Rename file/dir permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RenameFilePermissionRsp RenameFilePermission(global::Ressource.RenameFilePermissionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenameFilePermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Rename file/dir permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.RenameFilePermissionRsp RenameFilePermission(global::Ressource.RenameFilePermissionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RenameFilePermission, null, options, request);
      }
      /// <summary>
      ///* Rename file/dir permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RenameFilePermissionRsp> RenameFilePermissionAsync(global::Ressource.RenameFilePermissionRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenameFilePermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Rename file/dir permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.RenameFilePermissionRsp> RenameFilePermissionAsync(global::Ressource.RenameFilePermissionRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RenameFilePermission, null, options, request);
      }
      /// <summary>
      ///* Delete Permission for a dir (recursive) *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteDirPermissionsRsp DeleteDirPermissions(global::Ressource.DeleteDirPermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDirPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete Permission for a dir (recursive) *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteDirPermissionsRsp DeleteDirPermissions(global::Ressource.DeleteDirPermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDirPermissions, null, options, request);
      }
      /// <summary>
      ///* Delete Permission for a dir (recursive) *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteDirPermissionsRsp> DeleteDirPermissionsAsync(global::Ressource.DeleteDirPermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDirPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete Permission for a dir (recursive) *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteDirPermissionsRsp> DeleteDirPermissionsAsync(global::Ressource.DeleteDirPermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDirPermissions, null, options, request);
      }
      /// <summary>
      ///* Delete a single file permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteFilePermissionsRsp DeleteFilePermissions(global::Ressource.DeleteFilePermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFilePermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete a single file permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ressource.DeleteFilePermissionsRsp DeleteFilePermissions(global::Ressource.DeleteFilePermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteFilePermissions, null, options, request);
      }
      /// <summary>
      ///* Delete a single file permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteFilePermissionsRsp> DeleteFilePermissionsAsync(global::Ressource.DeleteFilePermissionsRqst request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFilePermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///* Delete a single file permission *
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ressource.DeleteFilePermissionsRsp> DeleteFilePermissionsAsync(global::Ressource.DeleteFilePermissionsRqst request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteFilePermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RessourceServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RessourceServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RessourceServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterPeer, serviceImpl.RegisterPeer)
          .AddMethod(__Method_GetPeers, serviceImpl.GetPeers)
          .AddMethod(__Method_DeletePeer, serviceImpl.DeletePeer)
          .AddMethod(__Method_AddPeerAction, serviceImpl.AddPeerAction)
          .AddMethod(__Method_RemovePeerAction, serviceImpl.RemovePeerAction)
          .AddMethod(__Method_RegisterAccount, serviceImpl.RegisterAccount)
          .AddMethod(__Method_DeleteAccount, serviceImpl.DeleteAccount)
          .AddMethod(__Method_Authenticate, serviceImpl.Authenticate)
          .AddMethod(__Method_SynchronizeLdap, serviceImpl.SynchronizeLdap)
          .AddMethod(__Method_RefreshToken, serviceImpl.RefreshToken)
          .AddMethod(__Method_AddAccountRole, serviceImpl.AddAccountRole)
          .AddMethod(__Method_RemoveAccountRole, serviceImpl.RemoveAccountRole)
          .AddMethod(__Method_CreateRole, serviceImpl.CreateRole)
          .AddMethod(__Method_DeleteRole, serviceImpl.DeleteRole)
          .AddMethod(__Method_AddRoleAction, serviceImpl.AddRoleAction)
          .AddMethod(__Method_RemoveRoleAction, serviceImpl.RemoveRoleAction)
          .AddMethod(__Method_AddApplicationAction, serviceImpl.AddApplicationAction)
          .AddMethod(__Method_RemoveApplicationAction, serviceImpl.RemoveApplicationAction)
          .AddMethod(__Method_GetAllActions, serviceImpl.GetAllActions)
          .AddMethod(__Method_GetPermissions, serviceImpl.GetPermissions)
          .AddMethod(__Method_SetPermission, serviceImpl.SetPermission)
          .AddMethod(__Method_DeletePermissions, serviceImpl.DeletePermissions)
          .AddMethod(__Method_SetRessourceOwner, serviceImpl.SetRessourceOwner)
          .AddMethod(__Method_GetRessourceOwners, serviceImpl.GetRessourceOwners)
          .AddMethod(__Method_DeleteRessourceOwner, serviceImpl.DeleteRessourceOwner)
          .AddMethod(__Method_DeleteRessourceOwners, serviceImpl.DeleteRessourceOwners)
          .AddMethod(__Method_GetAllFilesInfo, serviceImpl.GetAllFilesInfo)
          .AddMethod(__Method_ValidateToken, serviceImpl.ValidateToken)
          .AddMethod(__Method_ValidateUserRessourceAccess, serviceImpl.ValidateUserRessourceAccess)
          .AddMethod(__Method_ValidateApplicationRessourceAccess, serviceImpl.ValidateApplicationRessourceAccess)
          .AddMethod(__Method_ValidateUserAccess, serviceImpl.ValidateUserAccess)
          .AddMethod(__Method_ValidateApplicationAccess, serviceImpl.ValidateApplicationAccess)
          .AddMethod(__Method_ValidatePeerAccess, serviceImpl.ValidatePeerAccess)
          .AddMethod(__Method_ValidatePeerRessourceAccess, serviceImpl.ValidatePeerRessourceAccess)
          .AddMethod(__Method_DeleteAccountPermissions, serviceImpl.DeleteAccountPermissions)
          .AddMethod(__Method_DeleteRolePermissions, serviceImpl.DeleteRolePermissions)
          .AddMethod(__Method_GetAllApplicationsInfo, serviceImpl.GetAllApplicationsInfo)
          .AddMethod(__Method_DeleteApplication, serviceImpl.DeleteApplication)
          .AddMethod(__Method_Log, serviceImpl.Log)
          .AddMethod(__Method_GetLog, serviceImpl.GetLog)
          .AddMethod(__Method_DeleteLog, serviceImpl.DeleteLog)
          .AddMethod(__Method_ClearAllLog, serviceImpl.ClearAllLog)
          .AddMethod(__Method_GetRessources, serviceImpl.GetRessources)
          .AddMethod(__Method_SetRessource, serviceImpl.SetRessource)
          .AddMethod(__Method_RemoveRessource, serviceImpl.RemoveRessource)
          .AddMethod(__Method_SetActionPermission, serviceImpl.SetActionPermission)
          .AddMethod(__Method_RemoveActionPermission, serviceImpl.RemoveActionPermission)
          .AddMethod(__Method_GetActionPermission, serviceImpl.GetActionPermission)
          .AddMethod(__Method_CreateDirPermissions, serviceImpl.CreateDirPermissions)
          .AddMethod(__Method_RenameFilePermission, serviceImpl.RenameFilePermission)
          .AddMethod(__Method_DeleteDirPermissions, serviceImpl.DeleteDirPermissions)
          .AddMethod(__Method_DeleteFilePermissions, serviceImpl.DeleteFilePermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RessourceServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterPeer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.RegisterPeerRqst, global::Ressource.RegisterPeerRsp>(serviceImpl.RegisterPeer));
      serviceBinder.AddMethod(__Method_GetPeers, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Ressource.GetPeersRqst, global::Ressource.GetPeersRsp>(serviceImpl.GetPeers));
      serviceBinder.AddMethod(__Method_DeletePeer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.DeletePeerRqst, global::Ressource.DeletePeerRsp>(serviceImpl.DeletePeer));
      serviceBinder.AddMethod(__Method_AddPeerAction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.AddPeerActionRqst, global::Ressource.AddPeerActionRsp>(serviceImpl.AddPeerAction));
      serviceBinder.AddMethod(__Method_RemovePeerAction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.RemovePeerActionRqst, global::Ressource.RemovePeerActionRsp>(serviceImpl.RemovePeerAction));
      serviceBinder.AddMethod(__Method_RegisterAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.RegisterAccountRqst, global::Ressource.RegisterAccountRsp>(serviceImpl.RegisterAccount));
      serviceBinder.AddMethod(__Method_DeleteAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.DeleteAccountRqst, global::Ressource.DeleteAccountRsp>(serviceImpl.DeleteAccount));
      serviceBinder.AddMethod(__Method_Authenticate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.AuthenticateRqst, global::Ressource.AuthenticateRsp>(serviceImpl.Authenticate));
      serviceBinder.AddMethod(__Method_SynchronizeLdap, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.SynchronizeLdapRqst, global::Ressource.SynchronizeLdapRsp>(serviceImpl.SynchronizeLdap));
      serviceBinder.AddMethod(__Method_RefreshToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.RefreshTokenRqst, global::Ressource.RefreshTokenRsp>(serviceImpl.RefreshToken));
      serviceBinder.AddMethod(__Method_AddAccountRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.AddAccountRoleRqst, global::Ressource.AddAccountRoleRsp>(serviceImpl.AddAccountRole));
      serviceBinder.AddMethod(__Method_RemoveAccountRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.RemoveAccountRoleRqst, global::Ressource.RemoveAccountRoleRsp>(serviceImpl.RemoveAccountRole));
      serviceBinder.AddMethod(__Method_CreateRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.CreateRoleRqst, global::Ressource.CreateRoleRsp>(serviceImpl.CreateRole));
      serviceBinder.AddMethod(__Method_DeleteRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.DeleteRoleRqst, global::Ressource.DeleteRoleRsp>(serviceImpl.DeleteRole));
      serviceBinder.AddMethod(__Method_AddRoleAction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.AddRoleActionRqst, global::Ressource.AddRoleActionRsp>(serviceImpl.AddRoleAction));
      serviceBinder.AddMethod(__Method_RemoveRoleAction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.RemoveRoleActionRqst, global::Ressource.RemoveRoleActionRsp>(serviceImpl.RemoveRoleAction));
      serviceBinder.AddMethod(__Method_AddApplicationAction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.AddApplicationActionRqst, global::Ressource.AddApplicationActionRsp>(serviceImpl.AddApplicationAction));
      serviceBinder.AddMethod(__Method_RemoveApplicationAction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.RemoveApplicationActionRqst, global::Ressource.RemoveApplicationActionRsp>(serviceImpl.RemoveApplicationAction));
      serviceBinder.AddMethod(__Method_GetAllActions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.GetAllActionsRqst, global::Ressource.GetAllActionsRsp>(serviceImpl.GetAllActions));
      serviceBinder.AddMethod(__Method_GetPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.GetPermissionsRqst, global::Ressource.GetPermissionsRsp>(serviceImpl.GetPermissions));
      serviceBinder.AddMethod(__Method_SetPermission, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.SetPermissionRqst, global::Ressource.SetPermissionRsp>(serviceImpl.SetPermission));
      serviceBinder.AddMethod(__Method_DeletePermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.DeletePermissionsRqst, global::Ressource.DeletePermissionsRsp>(serviceImpl.DeletePermissions));
      serviceBinder.AddMethod(__Method_SetRessourceOwner, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.SetRessourceOwnerRqst, global::Ressource.SetRessourceOwnerRsp>(serviceImpl.SetRessourceOwner));
      serviceBinder.AddMethod(__Method_GetRessourceOwners, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.GetRessourceOwnersRqst, global::Ressource.GetRessourceOwnersRsp>(serviceImpl.GetRessourceOwners));
      serviceBinder.AddMethod(__Method_DeleteRessourceOwner, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.DeleteRessourceOwnerRqst, global::Ressource.DeleteRessourceOwnerRsp>(serviceImpl.DeleteRessourceOwner));
      serviceBinder.AddMethod(__Method_DeleteRessourceOwners, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.DeleteRessourceOwnersRqst, global::Ressource.DeleteRessourceOwnersRsp>(serviceImpl.DeleteRessourceOwners));
      serviceBinder.AddMethod(__Method_GetAllFilesInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.GetAllFilesInfoRqst, global::Ressource.GetAllFilesInfoRsp>(serviceImpl.GetAllFilesInfo));
      serviceBinder.AddMethod(__Method_ValidateToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.ValidateTokenRqst, global::Ressource.ValidateTokenRsp>(serviceImpl.ValidateToken));
      serviceBinder.AddMethod(__Method_ValidateUserRessourceAccess, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.ValidateUserRessourceAccessRqst, global::Ressource.ValidateUserRessourceAccessRsp>(serviceImpl.ValidateUserRessourceAccess));
      serviceBinder.AddMethod(__Method_ValidateApplicationRessourceAccess, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.ValidateApplicationRessourceAccessRqst, global::Ressource.ValidateApplicationRessourceAccessRsp>(serviceImpl.ValidateApplicationRessourceAccess));
      serviceBinder.AddMethod(__Method_ValidateUserAccess, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.ValidateUserAccessRqst, global::Ressource.ValidateUserAccessRsp>(serviceImpl.ValidateUserAccess));
      serviceBinder.AddMethod(__Method_ValidateApplicationAccess, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.ValidateApplicationAccessRqst, global::Ressource.ValidateApplicationAccessRsp>(serviceImpl.ValidateApplicationAccess));
      serviceBinder.AddMethod(__Method_ValidatePeerAccess, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.ValidatePeerAccessRqst, global::Ressource.ValidatePeerAccessRsp>(serviceImpl.ValidatePeerAccess));
      serviceBinder.AddMethod(__Method_ValidatePeerRessourceAccess, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.ValidatePeerRessourceAccessRqst, global::Ressource.ValidatePeerRessourceAccessRsp>(serviceImpl.ValidatePeerRessourceAccess));
      serviceBinder.AddMethod(__Method_DeleteAccountPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.DeleteAccountPermissionsRqst, global::Ressource.DeleteAccountPermissionsRsp>(serviceImpl.DeleteAccountPermissions));
      serviceBinder.AddMethod(__Method_DeleteRolePermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.DeleteRolePermissionsRqst, global::Ressource.DeleteRolePermissionsRsp>(serviceImpl.DeleteRolePermissions));
      serviceBinder.AddMethod(__Method_GetAllApplicationsInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.GetAllApplicationsInfoRqst, global::Ressource.GetAllApplicationsInfoRsp>(serviceImpl.GetAllApplicationsInfo));
      serviceBinder.AddMethod(__Method_DeleteApplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.DeleteApplicationRqst, global::Ressource.DeleteApplicationRsp>(serviceImpl.DeleteApplication));
      serviceBinder.AddMethod(__Method_Log, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.LogRqst, global::Ressource.LogRsp>(serviceImpl.Log));
      serviceBinder.AddMethod(__Method_GetLog, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Ressource.GetLogRqst, global::Ressource.GetLogRsp>(serviceImpl.GetLog));
      serviceBinder.AddMethod(__Method_DeleteLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.DeleteLogRqst, global::Ressource.DeleteLogRsp>(serviceImpl.DeleteLog));
      serviceBinder.AddMethod(__Method_ClearAllLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.ClearAllLogRqst, global::Ressource.ClearAllLogRsp>(serviceImpl.ClearAllLog));
      serviceBinder.AddMethod(__Method_GetRessources, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Ressource.GetRessourcesRqst, global::Ressource.GetRessourcesRsp>(serviceImpl.GetRessources));
      serviceBinder.AddMethod(__Method_SetRessource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.SetRessourceRqst, global::Ressource.SetRessourceRsp>(serviceImpl.SetRessource));
      serviceBinder.AddMethod(__Method_RemoveRessource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.RemoveRessourceRqst, global::Ressource.RemoveRessourceRsp>(serviceImpl.RemoveRessource));
      serviceBinder.AddMethod(__Method_SetActionPermission, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.SetActionPermissionRqst, global::Ressource.SetActionPermissionRsp>(serviceImpl.SetActionPermission));
      serviceBinder.AddMethod(__Method_RemoveActionPermission, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.RemoveActionPermissionRqst, global::Ressource.RemoveActionPermissionRsp>(serviceImpl.RemoveActionPermission));
      serviceBinder.AddMethod(__Method_GetActionPermission, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.GetActionPermissionRqst, global::Ressource.GetActionPermissionRsp>(serviceImpl.GetActionPermission));
      serviceBinder.AddMethod(__Method_CreateDirPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.CreateDirPermissionsRqst, global::Ressource.CreateDirPermissionsRsp>(serviceImpl.CreateDirPermissions));
      serviceBinder.AddMethod(__Method_RenameFilePermission, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.RenameFilePermissionRqst, global::Ressource.RenameFilePermissionRsp>(serviceImpl.RenameFilePermission));
      serviceBinder.AddMethod(__Method_DeleteDirPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.DeleteDirPermissionsRqst, global::Ressource.DeleteDirPermissionsRsp>(serviceImpl.DeleteDirPermissions));
      serviceBinder.AddMethod(__Method_DeleteFilePermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ressource.DeleteFilePermissionsRqst, global::Ressource.DeleteFilePermissionsRsp>(serviceImpl.DeleteFilePermissions));
    }

  }
}
#endregion
