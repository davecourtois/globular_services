// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spc_2eproto;
namespace spc {
class CreateAnalyseRqst;
class CreateAnalyseRqstDefaultTypeInternal;
extern CreateAnalyseRqstDefaultTypeInternal _CreateAnalyseRqst_default_instance_;
class CreateAnalyseRsp;
class CreateAnalyseRspDefaultTypeInternal;
extern CreateAnalyseRspDefaultTypeInternal _CreateAnalyseRsp_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
class StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
}  // namespace spc
PROTOBUF_NAMESPACE_OPEN
template<> ::spc::CreateAnalyseRqst* Arena::CreateMaybeMessage<::spc::CreateAnalyseRqst>(Arena*);
template<> ::spc::CreateAnalyseRsp* Arena::CreateMaybeMessage<::spc::CreateAnalyseRsp>(Arena*);
template<> ::spc::StopRequest* Arena::CreateMaybeMessage<::spc::StopRequest>(Arena*);
template<> ::spc::StopResponse* Arena::CreateMaybeMessage<::spc::StopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spc {

// ===================================================================

class CreateAnalyseRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spc.CreateAnalyseRqst) */ {
 public:
  inline CreateAnalyseRqst() : CreateAnalyseRqst(nullptr) {}
  virtual ~CreateAnalyseRqst();

  CreateAnalyseRqst(const CreateAnalyseRqst& from);
  CreateAnalyseRqst(CreateAnalyseRqst&& from) noexcept
    : CreateAnalyseRqst() {
    *this = ::std::move(from);
  }

  inline CreateAnalyseRqst& operator=(const CreateAnalyseRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAnalyseRqst& operator=(CreateAnalyseRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAnalyseRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAnalyseRqst* internal_default_instance() {
    return reinterpret_cast<const CreateAnalyseRqst*>(
               &_CreateAnalyseRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAnalyseRqst& a, CreateAnalyseRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAnalyseRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAnalyseRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAnalyseRqst* New() const final {
    return CreateMaybeMessage<CreateAnalyseRqst>(nullptr);
  }

  CreateAnalyseRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAnalyseRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAnalyseRqst& from);
  void MergeFrom(const CreateAnalyseRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAnalyseRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spc.CreateAnalyseRqst";
  }
  protected:
  explicit CreateAnalyseRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spc_2eproto);
    return ::descriptor_table_spc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kToltypeFieldNumber = 5,
    kTestsFieldNumber = 7,
    kTolzonFieldNumber = 2,
    kLotolFieldNumber = 3,
    kUptolFieldNumber = 4,
    kIspopulationFieldNumber = 6,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string toltype = 5;
  void clear_toltype();
  const std::string& toltype() const;
  void set_toltype(const std::string& value);
  void set_toltype(std::string&& value);
  void set_toltype(const char* value);
  void set_toltype(const char* value, size_t size);
  std::string* mutable_toltype();
  std::string* release_toltype();
  void set_allocated_toltype(std::string* toltype);
  private:
  const std::string& _internal_toltype() const;
  void _internal_set_toltype(const std::string& value);
  std::string* _internal_mutable_toltype();
  public:

  // string tests = 7;
  void clear_tests();
  const std::string& tests() const;
  void set_tests(const std::string& value);
  void set_tests(std::string&& value);
  void set_tests(const char* value);
  void set_tests(const char* value, size_t size);
  std::string* mutable_tests();
  std::string* release_tests();
  void set_allocated_tests(std::string* tests);
  private:
  const std::string& _internal_tests() const;
  void _internal_set_tests(const std::string& value);
  std::string* _internal_mutable_tests();
  public:

  // double tolzon = 2;
  void clear_tolzon();
  double tolzon() const;
  void set_tolzon(double value);
  private:
  double _internal_tolzon() const;
  void _internal_set_tolzon(double value);
  public:

  // double lotol = 3;
  void clear_lotol();
  double lotol() const;
  void set_lotol(double value);
  private:
  double _internal_lotol() const;
  void _internal_set_lotol(double value);
  public:

  // double uptol = 4;
  void clear_uptol();
  double uptol() const;
  void set_uptol(double value);
  private:
  double _internal_uptol() const;
  void _internal_set_uptol(double value);
  public:

  // bool ispopulation = 6;
  void clear_ispopulation();
  bool ispopulation() const;
  void set_ispopulation(bool value);
  private:
  bool _internal_ispopulation() const;
  void _internal_set_ispopulation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:spc.CreateAnalyseRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toltype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tests_;
  double tolzon_;
  double lotol_;
  double uptol_;
  bool ispopulation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spc_2eproto;
};
// -------------------------------------------------------------------

class CreateAnalyseRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spc.CreateAnalyseRsp) */ {
 public:
  inline CreateAnalyseRsp() : CreateAnalyseRsp(nullptr) {}
  virtual ~CreateAnalyseRsp();

  CreateAnalyseRsp(const CreateAnalyseRsp& from);
  CreateAnalyseRsp(CreateAnalyseRsp&& from) noexcept
    : CreateAnalyseRsp() {
    *this = ::std::move(from);
  }

  inline CreateAnalyseRsp& operator=(const CreateAnalyseRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAnalyseRsp& operator=(CreateAnalyseRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAnalyseRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAnalyseRsp* internal_default_instance() {
    return reinterpret_cast<const CreateAnalyseRsp*>(
               &_CreateAnalyseRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateAnalyseRsp& a, CreateAnalyseRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAnalyseRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAnalyseRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAnalyseRsp* New() const final {
    return CreateMaybeMessage<CreateAnalyseRsp>(nullptr);
  }

  CreateAnalyseRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAnalyseRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAnalyseRsp& from);
  void MergeFrom(const CreateAnalyseRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAnalyseRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spc.CreateAnalyseRsp";
  }
  protected:
  explicit CreateAnalyseRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spc_2eproto);
    return ::descriptor_table_spc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:spc.CreateAnalyseRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spc_2eproto;
};
// -------------------------------------------------------------------

class StopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spc.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {}
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(nullptr);
  }

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spc.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spc_2eproto);
    return ::descriptor_table_spc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:spc.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spc_2eproto;
};
// -------------------------------------------------------------------

class StopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spc.StopResponse) */ {
 public:
  inline StopResponse() : StopResponse(nullptr) {}
  virtual ~StopResponse();

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopResponse* New() const final {
    return CreateMaybeMessage<StopResponse>(nullptr);
  }

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopResponse& from);
  void MergeFrom(const StopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spc.StopResponse";
  }
  protected:
  explicit StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spc_2eproto);
    return ::descriptor_table_spc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:spc.StopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAnalyseRqst

// string data = 1;
inline void CreateAnalyseRqst::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateAnalyseRqst::data() const {
  // @@protoc_insertion_point(field_get:spc.CreateAnalyseRqst.data)
  return _internal_data();
}
inline void CreateAnalyseRqst::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:spc.CreateAnalyseRqst.data)
}
inline std::string* CreateAnalyseRqst::mutable_data() {
  // @@protoc_insertion_point(field_mutable:spc.CreateAnalyseRqst.data)
  return _internal_mutable_data();
}
inline const std::string& CreateAnalyseRqst::_internal_data() const {
  return data_.Get();
}
inline void CreateAnalyseRqst::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateAnalyseRqst::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:spc.CreateAnalyseRqst.data)
}
inline void CreateAnalyseRqst::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:spc.CreateAnalyseRqst.data)
}
inline void CreateAnalyseRqst::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:spc.CreateAnalyseRqst.data)
}
inline std::string* CreateAnalyseRqst::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateAnalyseRqst::release_data() {
  // @@protoc_insertion_point(field_release:spc.CreateAnalyseRqst.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAnalyseRqst::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:spc.CreateAnalyseRqst.data)
}

// double tolzon = 2;
inline void CreateAnalyseRqst::clear_tolzon() {
  tolzon_ = 0;
}
inline double CreateAnalyseRqst::_internal_tolzon() const {
  return tolzon_;
}
inline double CreateAnalyseRqst::tolzon() const {
  // @@protoc_insertion_point(field_get:spc.CreateAnalyseRqst.tolzon)
  return _internal_tolzon();
}
inline void CreateAnalyseRqst::_internal_set_tolzon(double value) {
  
  tolzon_ = value;
}
inline void CreateAnalyseRqst::set_tolzon(double value) {
  _internal_set_tolzon(value);
  // @@protoc_insertion_point(field_set:spc.CreateAnalyseRqst.tolzon)
}

// double lotol = 3;
inline void CreateAnalyseRqst::clear_lotol() {
  lotol_ = 0;
}
inline double CreateAnalyseRqst::_internal_lotol() const {
  return lotol_;
}
inline double CreateAnalyseRqst::lotol() const {
  // @@protoc_insertion_point(field_get:spc.CreateAnalyseRqst.lotol)
  return _internal_lotol();
}
inline void CreateAnalyseRqst::_internal_set_lotol(double value) {
  
  lotol_ = value;
}
inline void CreateAnalyseRqst::set_lotol(double value) {
  _internal_set_lotol(value);
  // @@protoc_insertion_point(field_set:spc.CreateAnalyseRqst.lotol)
}

// double uptol = 4;
inline void CreateAnalyseRqst::clear_uptol() {
  uptol_ = 0;
}
inline double CreateAnalyseRqst::_internal_uptol() const {
  return uptol_;
}
inline double CreateAnalyseRqst::uptol() const {
  // @@protoc_insertion_point(field_get:spc.CreateAnalyseRqst.uptol)
  return _internal_uptol();
}
inline void CreateAnalyseRqst::_internal_set_uptol(double value) {
  
  uptol_ = value;
}
inline void CreateAnalyseRqst::set_uptol(double value) {
  _internal_set_uptol(value);
  // @@protoc_insertion_point(field_set:spc.CreateAnalyseRqst.uptol)
}

// string toltype = 5;
inline void CreateAnalyseRqst::clear_toltype() {
  toltype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateAnalyseRqst::toltype() const {
  // @@protoc_insertion_point(field_get:spc.CreateAnalyseRqst.toltype)
  return _internal_toltype();
}
inline void CreateAnalyseRqst::set_toltype(const std::string& value) {
  _internal_set_toltype(value);
  // @@protoc_insertion_point(field_set:spc.CreateAnalyseRqst.toltype)
}
inline std::string* CreateAnalyseRqst::mutable_toltype() {
  // @@protoc_insertion_point(field_mutable:spc.CreateAnalyseRqst.toltype)
  return _internal_mutable_toltype();
}
inline const std::string& CreateAnalyseRqst::_internal_toltype() const {
  return toltype_.Get();
}
inline void CreateAnalyseRqst::_internal_set_toltype(const std::string& value) {
  
  toltype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateAnalyseRqst::set_toltype(std::string&& value) {
  
  toltype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:spc.CreateAnalyseRqst.toltype)
}
inline void CreateAnalyseRqst::set_toltype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  toltype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:spc.CreateAnalyseRqst.toltype)
}
inline void CreateAnalyseRqst::set_toltype(const char* value,
    size_t size) {
  
  toltype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:spc.CreateAnalyseRqst.toltype)
}
inline std::string* CreateAnalyseRqst::_internal_mutable_toltype() {
  
  return toltype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateAnalyseRqst::release_toltype() {
  // @@protoc_insertion_point(field_release:spc.CreateAnalyseRqst.toltype)
  return toltype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAnalyseRqst::set_allocated_toltype(std::string* toltype) {
  if (toltype != nullptr) {
    
  } else {
    
  }
  toltype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toltype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:spc.CreateAnalyseRqst.toltype)
}

// bool ispopulation = 6;
inline void CreateAnalyseRqst::clear_ispopulation() {
  ispopulation_ = false;
}
inline bool CreateAnalyseRqst::_internal_ispopulation() const {
  return ispopulation_;
}
inline bool CreateAnalyseRqst::ispopulation() const {
  // @@protoc_insertion_point(field_get:spc.CreateAnalyseRqst.ispopulation)
  return _internal_ispopulation();
}
inline void CreateAnalyseRqst::_internal_set_ispopulation(bool value) {
  
  ispopulation_ = value;
}
inline void CreateAnalyseRqst::set_ispopulation(bool value) {
  _internal_set_ispopulation(value);
  // @@protoc_insertion_point(field_set:spc.CreateAnalyseRqst.ispopulation)
}

// string tests = 7;
inline void CreateAnalyseRqst::clear_tests() {
  tests_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateAnalyseRqst::tests() const {
  // @@protoc_insertion_point(field_get:spc.CreateAnalyseRqst.tests)
  return _internal_tests();
}
inline void CreateAnalyseRqst::set_tests(const std::string& value) {
  _internal_set_tests(value);
  // @@protoc_insertion_point(field_set:spc.CreateAnalyseRqst.tests)
}
inline std::string* CreateAnalyseRqst::mutable_tests() {
  // @@protoc_insertion_point(field_mutable:spc.CreateAnalyseRqst.tests)
  return _internal_mutable_tests();
}
inline const std::string& CreateAnalyseRqst::_internal_tests() const {
  return tests_.Get();
}
inline void CreateAnalyseRqst::_internal_set_tests(const std::string& value) {
  
  tests_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateAnalyseRqst::set_tests(std::string&& value) {
  
  tests_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:spc.CreateAnalyseRqst.tests)
}
inline void CreateAnalyseRqst::set_tests(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tests_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:spc.CreateAnalyseRqst.tests)
}
inline void CreateAnalyseRqst::set_tests(const char* value,
    size_t size) {
  
  tests_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:spc.CreateAnalyseRqst.tests)
}
inline std::string* CreateAnalyseRqst::_internal_mutable_tests() {
  
  return tests_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateAnalyseRqst::release_tests() {
  // @@protoc_insertion_point(field_release:spc.CreateAnalyseRqst.tests)
  return tests_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAnalyseRqst::set_allocated_tests(std::string* tests) {
  if (tests != nullptr) {
    
  } else {
    
  }
  tests_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tests,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:spc.CreateAnalyseRqst.tests)
}

// -------------------------------------------------------------------

// CreateAnalyseRsp

// string result = 1;
inline void CreateAnalyseRsp::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateAnalyseRsp::result() const {
  // @@protoc_insertion_point(field_get:spc.CreateAnalyseRsp.result)
  return _internal_result();
}
inline void CreateAnalyseRsp::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:spc.CreateAnalyseRsp.result)
}
inline std::string* CreateAnalyseRsp::mutable_result() {
  // @@protoc_insertion_point(field_mutable:spc.CreateAnalyseRsp.result)
  return _internal_mutable_result();
}
inline const std::string& CreateAnalyseRsp::_internal_result() const {
  return result_.Get();
}
inline void CreateAnalyseRsp::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateAnalyseRsp::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:spc.CreateAnalyseRsp.result)
}
inline void CreateAnalyseRsp::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:spc.CreateAnalyseRsp.result)
}
inline void CreateAnalyseRsp::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:spc.CreateAnalyseRsp.result)
}
inline std::string* CreateAnalyseRsp::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateAnalyseRsp::release_result() {
  // @@protoc_insertion_point(field_release:spc.CreateAnalyseRsp.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAnalyseRsp::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:spc.CreateAnalyseRsp.result)
}

// -------------------------------------------------------------------

// StopRequest

// -------------------------------------------------------------------

// StopResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spc_2eproto
