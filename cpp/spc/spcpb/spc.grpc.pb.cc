// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: spc.proto

#include "spc.pb.h"
#include "spc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace spc {

static const char* SpcService_method_names[] = {
  "/spc.SpcService/Stop",
  "/spc.SpcService/CreateAnalyse",
};

std::unique_ptr< SpcService::Stub> SpcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SpcService::Stub> stub(new SpcService::Stub(channel));
  return stub;
}

SpcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Stop_(SpcService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAnalyse_(SpcService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SpcService::Stub::Stop(::grpc::ClientContext* context, const ::spc::StopRequest& request, ::spc::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void SpcService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::spc::StopRequest* request, ::spc::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void SpcService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::spc::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void SpcService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::spc::StopRequest* request, ::spc::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

void SpcService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::spc::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spc::StopResponse>* SpcService::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::spc::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::spc::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::spc::StopResponse>* SpcService::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::spc::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::spc::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, false);
}

::grpc::Status SpcService::Stub::CreateAnalyse(::grpc::ClientContext* context, const ::spc::CreateAnalyseRqst& request, ::spc::CreateAnalyseRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateAnalyse_, context, request, response);
}

void SpcService::Stub::experimental_async::CreateAnalyse(::grpc::ClientContext* context, const ::spc::CreateAnalyseRqst* request, ::spc::CreateAnalyseRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateAnalyse_, context, request, response, std::move(f));
}

void SpcService::Stub::experimental_async::CreateAnalyse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::spc::CreateAnalyseRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateAnalyse_, context, request, response, std::move(f));
}

void SpcService::Stub::experimental_async::CreateAnalyse(::grpc::ClientContext* context, const ::spc::CreateAnalyseRqst* request, ::spc::CreateAnalyseRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateAnalyse_, context, request, response, reactor);
}

void SpcService::Stub::experimental_async::CreateAnalyse(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::spc::CreateAnalyseRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateAnalyse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spc::CreateAnalyseRsp>* SpcService::Stub::AsyncCreateAnalyseRaw(::grpc::ClientContext* context, const ::spc::CreateAnalyseRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::spc::CreateAnalyseRsp>::Create(channel_.get(), cq, rpcmethod_CreateAnalyse_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::spc::CreateAnalyseRsp>* SpcService::Stub::PrepareAsyncCreateAnalyseRaw(::grpc::ClientContext* context, const ::spc::CreateAnalyseRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::spc::CreateAnalyseRsp>::Create(channel_.get(), cq, rpcmethod_CreateAnalyse_, context, request, false);
}

SpcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpcService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpcService::Service, ::spc::StopRequest, ::spc::StopResponse>(
          [](SpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spc::StopRequest* req,
             ::spc::StopResponse* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpcService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SpcService::Service, ::spc::CreateAnalyseRqst, ::spc::CreateAnalyseRsp>(
          [](SpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spc::CreateAnalyseRqst* req,
             ::spc::CreateAnalyseRsp* resp) {
               return service->CreateAnalyse(ctx, req, resp);
             }, this)));
}

SpcService::Service::~Service() {
}

::grpc::Status SpcService::Service::Stop(::grpc::ServerContext* context, const ::spc::StopRequest* request, ::spc::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SpcService::Service::CreateAnalyse(::grpc::ServerContext* context, const ::spc::CreateAnalyseRqst* request, ::spc::CreateAnalyseRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace spc

