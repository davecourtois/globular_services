// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_resource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_resource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_resource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_resource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[86]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_resource_2eproto;
namespace resource {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class AccountExistRqst;
class AccountExistRqstDefaultTypeInternal;
extern AccountExistRqstDefaultTypeInternal _AccountExistRqst_default_instance_;
class AccountExistRsp;
class AccountExistRspDefaultTypeInternal;
extern AccountExistRspDefaultTypeInternal _AccountExistRsp_default_instance_;
class AddAccountRoleRqst;
class AddAccountRoleRqstDefaultTypeInternal;
extern AddAccountRoleRqstDefaultTypeInternal _AddAccountRoleRqst_default_instance_;
class AddAccountRoleRsp;
class AddAccountRoleRspDefaultTypeInternal;
extern AddAccountRoleRspDefaultTypeInternal _AddAccountRoleRsp_default_instance_;
class AddApplicationActionRqst;
class AddApplicationActionRqstDefaultTypeInternal;
extern AddApplicationActionRqstDefaultTypeInternal _AddApplicationActionRqst_default_instance_;
class AddApplicationActionRsp;
class AddApplicationActionRspDefaultTypeInternal;
extern AddApplicationActionRspDefaultTypeInternal _AddApplicationActionRsp_default_instance_;
class AddGroupMemberAccountRqst;
class AddGroupMemberAccountRqstDefaultTypeInternal;
extern AddGroupMemberAccountRqstDefaultTypeInternal _AddGroupMemberAccountRqst_default_instance_;
class AddGroupMemberAccountRsp;
class AddGroupMemberAccountRspDefaultTypeInternal;
extern AddGroupMemberAccountRspDefaultTypeInternal _AddGroupMemberAccountRsp_default_instance_;
class AddOrganizationAccountRqst;
class AddOrganizationAccountRqstDefaultTypeInternal;
extern AddOrganizationAccountRqstDefaultTypeInternal _AddOrganizationAccountRqst_default_instance_;
class AddOrganizationAccountRsp;
class AddOrganizationAccountRspDefaultTypeInternal;
extern AddOrganizationAccountRspDefaultTypeInternal _AddOrganizationAccountRsp_default_instance_;
class AddOrganizationApplicationRqst;
class AddOrganizationApplicationRqstDefaultTypeInternal;
extern AddOrganizationApplicationRqstDefaultTypeInternal _AddOrganizationApplicationRqst_default_instance_;
class AddOrganizationApplicationRsp;
class AddOrganizationApplicationRspDefaultTypeInternal;
extern AddOrganizationApplicationRspDefaultTypeInternal _AddOrganizationApplicationRsp_default_instance_;
class AddOrganizationGroupRqst;
class AddOrganizationGroupRqstDefaultTypeInternal;
extern AddOrganizationGroupRqstDefaultTypeInternal _AddOrganizationGroupRqst_default_instance_;
class AddOrganizationGroupRsp;
class AddOrganizationGroupRspDefaultTypeInternal;
extern AddOrganizationGroupRspDefaultTypeInternal _AddOrganizationGroupRsp_default_instance_;
class AddOrganizationRoleRqst;
class AddOrganizationRoleRqstDefaultTypeInternal;
extern AddOrganizationRoleRqstDefaultTypeInternal _AddOrganizationRoleRqst_default_instance_;
class AddOrganizationRoleRsp;
class AddOrganizationRoleRspDefaultTypeInternal;
extern AddOrganizationRoleRspDefaultTypeInternal _AddOrganizationRoleRsp_default_instance_;
class AddPeerActionRqst;
class AddPeerActionRqstDefaultTypeInternal;
extern AddPeerActionRqstDefaultTypeInternal _AddPeerActionRqst_default_instance_;
class AddPeerActionRsp;
class AddPeerActionRspDefaultTypeInternal;
extern AddPeerActionRspDefaultTypeInternal _AddPeerActionRsp_default_instance_;
class AddRoleActionRqst;
class AddRoleActionRqstDefaultTypeInternal;
extern AddRoleActionRqstDefaultTypeInternal _AddRoleActionRqst_default_instance_;
class AddRoleActionRsp;
class AddRoleActionRspDefaultTypeInternal;
extern AddRoleActionRspDefaultTypeInternal _AddRoleActionRsp_default_instance_;
class AuthenticateRqst;
class AuthenticateRqstDefaultTypeInternal;
extern AuthenticateRqstDefaultTypeInternal _AuthenticateRqst_default_instance_;
class AuthenticateRsp;
class AuthenticateRspDefaultTypeInternal;
extern AuthenticateRspDefaultTypeInternal _AuthenticateRsp_default_instance_;
class CreateGroupRqst;
class CreateGroupRqstDefaultTypeInternal;
extern CreateGroupRqstDefaultTypeInternal _CreateGroupRqst_default_instance_;
class CreateGroupRsp;
class CreateGroupRspDefaultTypeInternal;
extern CreateGroupRspDefaultTypeInternal _CreateGroupRsp_default_instance_;
class CreateOrganizationRqst;
class CreateOrganizationRqstDefaultTypeInternal;
extern CreateOrganizationRqstDefaultTypeInternal _CreateOrganizationRqst_default_instance_;
class CreateOrganizationRsp;
class CreateOrganizationRspDefaultTypeInternal;
extern CreateOrganizationRspDefaultTypeInternal _CreateOrganizationRsp_default_instance_;
class CreateRoleRqst;
class CreateRoleRqstDefaultTypeInternal;
extern CreateRoleRqstDefaultTypeInternal _CreateRoleRqst_default_instance_;
class CreateRoleRsp;
class CreateRoleRspDefaultTypeInternal;
extern CreateRoleRspDefaultTypeInternal _CreateRoleRsp_default_instance_;
class DeleteAccountRqst;
class DeleteAccountRqstDefaultTypeInternal;
extern DeleteAccountRqstDefaultTypeInternal _DeleteAccountRqst_default_instance_;
class DeleteAccountRsp;
class DeleteAccountRspDefaultTypeInternal;
extern DeleteAccountRspDefaultTypeInternal _DeleteAccountRsp_default_instance_;
class DeleteApplicationRqst;
class DeleteApplicationRqstDefaultTypeInternal;
extern DeleteApplicationRqstDefaultTypeInternal _DeleteApplicationRqst_default_instance_;
class DeleteApplicationRsp;
class DeleteApplicationRspDefaultTypeInternal;
extern DeleteApplicationRspDefaultTypeInternal _DeleteApplicationRsp_default_instance_;
class DeleteGroupRqst;
class DeleteGroupRqstDefaultTypeInternal;
extern DeleteGroupRqstDefaultTypeInternal _DeleteGroupRqst_default_instance_;
class DeleteGroupRsp;
class DeleteGroupRspDefaultTypeInternal;
extern DeleteGroupRspDefaultTypeInternal _DeleteGroupRsp_default_instance_;
class DeleteOrganizationRqst;
class DeleteOrganizationRqstDefaultTypeInternal;
extern DeleteOrganizationRqstDefaultTypeInternal _DeleteOrganizationRqst_default_instance_;
class DeleteOrganizationRsp;
class DeleteOrganizationRspDefaultTypeInternal;
extern DeleteOrganizationRspDefaultTypeInternal _DeleteOrganizationRsp_default_instance_;
class DeletePeerRqst;
class DeletePeerRqstDefaultTypeInternal;
extern DeletePeerRqstDefaultTypeInternal _DeletePeerRqst_default_instance_;
class DeletePeerRsp;
class DeletePeerRspDefaultTypeInternal;
extern DeletePeerRspDefaultTypeInternal _DeletePeerRsp_default_instance_;
class DeleteRoleRqst;
class DeleteRoleRqstDefaultTypeInternal;
extern DeleteRoleRqstDefaultTypeInternal _DeleteRoleRqst_default_instance_;
class DeleteRoleRsp;
class DeleteRoleRspDefaultTypeInternal;
extern DeleteRoleRspDefaultTypeInternal _DeleteRoleRsp_default_instance_;
class GetAllActionsRqst;
class GetAllActionsRqstDefaultTypeInternal;
extern GetAllActionsRqstDefaultTypeInternal _GetAllActionsRqst_default_instance_;
class GetAllActionsRsp;
class GetAllActionsRspDefaultTypeInternal;
extern GetAllActionsRspDefaultTypeInternal _GetAllActionsRsp_default_instance_;
class GetAllApplicationsInfoRqst;
class GetAllApplicationsInfoRqstDefaultTypeInternal;
extern GetAllApplicationsInfoRqstDefaultTypeInternal _GetAllApplicationsInfoRqst_default_instance_;
class GetAllApplicationsInfoRsp;
class GetAllApplicationsInfoRspDefaultTypeInternal;
extern GetAllApplicationsInfoRspDefaultTypeInternal _GetAllApplicationsInfoRsp_default_instance_;
class GetGroupsRqst;
class GetGroupsRqstDefaultTypeInternal;
extern GetGroupsRqstDefaultTypeInternal _GetGroupsRqst_default_instance_;
class GetGroupsRsp;
class GetGroupsRspDefaultTypeInternal;
extern GetGroupsRspDefaultTypeInternal _GetGroupsRsp_default_instance_;
class GetOrganizationsRqst;
class GetOrganizationsRqstDefaultTypeInternal;
extern GetOrganizationsRqstDefaultTypeInternal _GetOrganizationsRqst_default_instance_;
class GetOrganizationsRsp;
class GetOrganizationsRspDefaultTypeInternal;
extern GetOrganizationsRspDefaultTypeInternal _GetOrganizationsRsp_default_instance_;
class GetPeersRqst;
class GetPeersRqstDefaultTypeInternal;
extern GetPeersRqstDefaultTypeInternal _GetPeersRqst_default_instance_;
class GetPeersRsp;
class GetPeersRspDefaultTypeInternal;
extern GetPeersRspDefaultTypeInternal _GetPeersRsp_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupSyncInfos;
class GroupSyncInfosDefaultTypeInternal;
extern GroupSyncInfosDefaultTypeInternal _GroupSyncInfos_default_instance_;
class LdapSyncInfos;
class LdapSyncInfosDefaultTypeInternal;
extern LdapSyncInfosDefaultTypeInternal _LdapSyncInfos_default_instance_;
class Organization;
class OrganizationDefaultTypeInternal;
extern OrganizationDefaultTypeInternal _Organization_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class RefreshTokenRqst;
class RefreshTokenRqstDefaultTypeInternal;
extern RefreshTokenRqstDefaultTypeInternal _RefreshTokenRqst_default_instance_;
class RefreshTokenRsp;
class RefreshTokenRspDefaultTypeInternal;
extern RefreshTokenRspDefaultTypeInternal _RefreshTokenRsp_default_instance_;
class RegisterAccountRqst;
class RegisterAccountRqstDefaultTypeInternal;
extern RegisterAccountRqstDefaultTypeInternal _RegisterAccountRqst_default_instance_;
class RegisterAccountRsp;
class RegisterAccountRspDefaultTypeInternal;
extern RegisterAccountRspDefaultTypeInternal _RegisterAccountRsp_default_instance_;
class RegisterPeerRqst;
class RegisterPeerRqstDefaultTypeInternal;
extern RegisterPeerRqstDefaultTypeInternal _RegisterPeerRqst_default_instance_;
class RegisterPeerRsp;
class RegisterPeerRspDefaultTypeInternal;
extern RegisterPeerRspDefaultTypeInternal _RegisterPeerRsp_default_instance_;
class RemoveAccountRoleRqst;
class RemoveAccountRoleRqstDefaultTypeInternal;
extern RemoveAccountRoleRqstDefaultTypeInternal _RemoveAccountRoleRqst_default_instance_;
class RemoveAccountRoleRsp;
class RemoveAccountRoleRspDefaultTypeInternal;
extern RemoveAccountRoleRspDefaultTypeInternal _RemoveAccountRoleRsp_default_instance_;
class RemoveApplicationActionRqst;
class RemoveApplicationActionRqstDefaultTypeInternal;
extern RemoveApplicationActionRqstDefaultTypeInternal _RemoveApplicationActionRqst_default_instance_;
class RemoveApplicationActionRsp;
class RemoveApplicationActionRspDefaultTypeInternal;
extern RemoveApplicationActionRspDefaultTypeInternal _RemoveApplicationActionRsp_default_instance_;
class RemoveGroupMemberAccountRqst;
class RemoveGroupMemberAccountRqstDefaultTypeInternal;
extern RemoveGroupMemberAccountRqstDefaultTypeInternal _RemoveGroupMemberAccountRqst_default_instance_;
class RemoveGroupMemberAccountRsp;
class RemoveGroupMemberAccountRspDefaultTypeInternal;
extern RemoveGroupMemberAccountRspDefaultTypeInternal _RemoveGroupMemberAccountRsp_default_instance_;
class RemoveOrganizationAccountRqst;
class RemoveOrganizationAccountRqstDefaultTypeInternal;
extern RemoveOrganizationAccountRqstDefaultTypeInternal _RemoveOrganizationAccountRqst_default_instance_;
class RemoveOrganizationAccountRsp;
class RemoveOrganizationAccountRspDefaultTypeInternal;
extern RemoveOrganizationAccountRspDefaultTypeInternal _RemoveOrganizationAccountRsp_default_instance_;
class RemoveOrganizationApplicationRqst;
class RemoveOrganizationApplicationRqstDefaultTypeInternal;
extern RemoveOrganizationApplicationRqstDefaultTypeInternal _RemoveOrganizationApplicationRqst_default_instance_;
class RemoveOrganizationApplicationRsp;
class RemoveOrganizationApplicationRspDefaultTypeInternal;
extern RemoveOrganizationApplicationRspDefaultTypeInternal _RemoveOrganizationApplicationRsp_default_instance_;
class RemoveOrganizationGroupRqst;
class RemoveOrganizationGroupRqstDefaultTypeInternal;
extern RemoveOrganizationGroupRqstDefaultTypeInternal _RemoveOrganizationGroupRqst_default_instance_;
class RemoveOrganizationGroupRsp;
class RemoveOrganizationGroupRspDefaultTypeInternal;
extern RemoveOrganizationGroupRspDefaultTypeInternal _RemoveOrganizationGroupRsp_default_instance_;
class RemoveOrganizationRoleRqst;
class RemoveOrganizationRoleRqstDefaultTypeInternal;
extern RemoveOrganizationRoleRqstDefaultTypeInternal _RemoveOrganizationRoleRqst_default_instance_;
class RemoveOrganizationRoleRsp;
class RemoveOrganizationRoleRspDefaultTypeInternal;
extern RemoveOrganizationRoleRspDefaultTypeInternal _RemoveOrganizationRoleRsp_default_instance_;
class RemovePeerActionRqst;
class RemovePeerActionRqstDefaultTypeInternal;
extern RemovePeerActionRqstDefaultTypeInternal _RemovePeerActionRqst_default_instance_;
class RemovePeerActionRsp;
class RemovePeerActionRspDefaultTypeInternal;
extern RemovePeerActionRspDefaultTypeInternal _RemovePeerActionRsp_default_instance_;
class RemoveRoleActionRqst;
class RemoveRoleActionRqstDefaultTypeInternal;
extern RemoveRoleActionRqstDefaultTypeInternal _RemoveRoleActionRqst_default_instance_;
class RemoveRoleActionRsp;
class RemoveRoleActionRspDefaultTypeInternal;
extern RemoveRoleActionRspDefaultTypeInternal _RemoveRoleActionRsp_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class SynchronizeLdapRqst;
class SynchronizeLdapRqstDefaultTypeInternal;
extern SynchronizeLdapRqstDefaultTypeInternal _SynchronizeLdapRqst_default_instance_;
class SynchronizeLdapRsp;
class SynchronizeLdapRspDefaultTypeInternal;
extern SynchronizeLdapRspDefaultTypeInternal _SynchronizeLdapRsp_default_instance_;
class UserSyncInfos;
class UserSyncInfosDefaultTypeInternal;
extern UserSyncInfosDefaultTypeInternal _UserSyncInfos_default_instance_;
class ValidateTokenRqst;
class ValidateTokenRqstDefaultTypeInternal;
extern ValidateTokenRqstDefaultTypeInternal _ValidateTokenRqst_default_instance_;
class ValidateTokenRsp;
class ValidateTokenRspDefaultTypeInternal;
extern ValidateTokenRspDefaultTypeInternal _ValidateTokenRsp_default_instance_;
}  // namespace resource
PROTOBUF_NAMESPACE_OPEN
template<> ::resource::Account* Arena::CreateMaybeMessage<::resource::Account>(Arena*);
template<> ::resource::AccountExistRqst* Arena::CreateMaybeMessage<::resource::AccountExistRqst>(Arena*);
template<> ::resource::AccountExistRsp* Arena::CreateMaybeMessage<::resource::AccountExistRsp>(Arena*);
template<> ::resource::AddAccountRoleRqst* Arena::CreateMaybeMessage<::resource::AddAccountRoleRqst>(Arena*);
template<> ::resource::AddAccountRoleRsp* Arena::CreateMaybeMessage<::resource::AddAccountRoleRsp>(Arena*);
template<> ::resource::AddApplicationActionRqst* Arena::CreateMaybeMessage<::resource::AddApplicationActionRqst>(Arena*);
template<> ::resource::AddApplicationActionRsp* Arena::CreateMaybeMessage<::resource::AddApplicationActionRsp>(Arena*);
template<> ::resource::AddGroupMemberAccountRqst* Arena::CreateMaybeMessage<::resource::AddGroupMemberAccountRqst>(Arena*);
template<> ::resource::AddGroupMemberAccountRsp* Arena::CreateMaybeMessage<::resource::AddGroupMemberAccountRsp>(Arena*);
template<> ::resource::AddOrganizationAccountRqst* Arena::CreateMaybeMessage<::resource::AddOrganizationAccountRqst>(Arena*);
template<> ::resource::AddOrganizationAccountRsp* Arena::CreateMaybeMessage<::resource::AddOrganizationAccountRsp>(Arena*);
template<> ::resource::AddOrganizationApplicationRqst* Arena::CreateMaybeMessage<::resource::AddOrganizationApplicationRqst>(Arena*);
template<> ::resource::AddOrganizationApplicationRsp* Arena::CreateMaybeMessage<::resource::AddOrganizationApplicationRsp>(Arena*);
template<> ::resource::AddOrganizationGroupRqst* Arena::CreateMaybeMessage<::resource::AddOrganizationGroupRqst>(Arena*);
template<> ::resource::AddOrganizationGroupRsp* Arena::CreateMaybeMessage<::resource::AddOrganizationGroupRsp>(Arena*);
template<> ::resource::AddOrganizationRoleRqst* Arena::CreateMaybeMessage<::resource::AddOrganizationRoleRqst>(Arena*);
template<> ::resource::AddOrganizationRoleRsp* Arena::CreateMaybeMessage<::resource::AddOrganizationRoleRsp>(Arena*);
template<> ::resource::AddPeerActionRqst* Arena::CreateMaybeMessage<::resource::AddPeerActionRqst>(Arena*);
template<> ::resource::AddPeerActionRsp* Arena::CreateMaybeMessage<::resource::AddPeerActionRsp>(Arena*);
template<> ::resource::AddRoleActionRqst* Arena::CreateMaybeMessage<::resource::AddRoleActionRqst>(Arena*);
template<> ::resource::AddRoleActionRsp* Arena::CreateMaybeMessage<::resource::AddRoleActionRsp>(Arena*);
template<> ::resource::AuthenticateRqst* Arena::CreateMaybeMessage<::resource::AuthenticateRqst>(Arena*);
template<> ::resource::AuthenticateRsp* Arena::CreateMaybeMessage<::resource::AuthenticateRsp>(Arena*);
template<> ::resource::CreateGroupRqst* Arena::CreateMaybeMessage<::resource::CreateGroupRqst>(Arena*);
template<> ::resource::CreateGroupRsp* Arena::CreateMaybeMessage<::resource::CreateGroupRsp>(Arena*);
template<> ::resource::CreateOrganizationRqst* Arena::CreateMaybeMessage<::resource::CreateOrganizationRqst>(Arena*);
template<> ::resource::CreateOrganizationRsp* Arena::CreateMaybeMessage<::resource::CreateOrganizationRsp>(Arena*);
template<> ::resource::CreateRoleRqst* Arena::CreateMaybeMessage<::resource::CreateRoleRqst>(Arena*);
template<> ::resource::CreateRoleRsp* Arena::CreateMaybeMessage<::resource::CreateRoleRsp>(Arena*);
template<> ::resource::DeleteAccountRqst* Arena::CreateMaybeMessage<::resource::DeleteAccountRqst>(Arena*);
template<> ::resource::DeleteAccountRsp* Arena::CreateMaybeMessage<::resource::DeleteAccountRsp>(Arena*);
template<> ::resource::DeleteApplicationRqst* Arena::CreateMaybeMessage<::resource::DeleteApplicationRqst>(Arena*);
template<> ::resource::DeleteApplicationRsp* Arena::CreateMaybeMessage<::resource::DeleteApplicationRsp>(Arena*);
template<> ::resource::DeleteGroupRqst* Arena::CreateMaybeMessage<::resource::DeleteGroupRqst>(Arena*);
template<> ::resource::DeleteGroupRsp* Arena::CreateMaybeMessage<::resource::DeleteGroupRsp>(Arena*);
template<> ::resource::DeleteOrganizationRqst* Arena::CreateMaybeMessage<::resource::DeleteOrganizationRqst>(Arena*);
template<> ::resource::DeleteOrganizationRsp* Arena::CreateMaybeMessage<::resource::DeleteOrganizationRsp>(Arena*);
template<> ::resource::DeletePeerRqst* Arena::CreateMaybeMessage<::resource::DeletePeerRqst>(Arena*);
template<> ::resource::DeletePeerRsp* Arena::CreateMaybeMessage<::resource::DeletePeerRsp>(Arena*);
template<> ::resource::DeleteRoleRqst* Arena::CreateMaybeMessage<::resource::DeleteRoleRqst>(Arena*);
template<> ::resource::DeleteRoleRsp* Arena::CreateMaybeMessage<::resource::DeleteRoleRsp>(Arena*);
template<> ::resource::GetAllActionsRqst* Arena::CreateMaybeMessage<::resource::GetAllActionsRqst>(Arena*);
template<> ::resource::GetAllActionsRsp* Arena::CreateMaybeMessage<::resource::GetAllActionsRsp>(Arena*);
template<> ::resource::GetAllApplicationsInfoRqst* Arena::CreateMaybeMessage<::resource::GetAllApplicationsInfoRqst>(Arena*);
template<> ::resource::GetAllApplicationsInfoRsp* Arena::CreateMaybeMessage<::resource::GetAllApplicationsInfoRsp>(Arena*);
template<> ::resource::GetGroupsRqst* Arena::CreateMaybeMessage<::resource::GetGroupsRqst>(Arena*);
template<> ::resource::GetGroupsRsp* Arena::CreateMaybeMessage<::resource::GetGroupsRsp>(Arena*);
template<> ::resource::GetOrganizationsRqst* Arena::CreateMaybeMessage<::resource::GetOrganizationsRqst>(Arena*);
template<> ::resource::GetOrganizationsRsp* Arena::CreateMaybeMessage<::resource::GetOrganizationsRsp>(Arena*);
template<> ::resource::GetPeersRqst* Arena::CreateMaybeMessage<::resource::GetPeersRqst>(Arena*);
template<> ::resource::GetPeersRsp* Arena::CreateMaybeMessage<::resource::GetPeersRsp>(Arena*);
template<> ::resource::Group* Arena::CreateMaybeMessage<::resource::Group>(Arena*);
template<> ::resource::GroupSyncInfos* Arena::CreateMaybeMessage<::resource::GroupSyncInfos>(Arena*);
template<> ::resource::LdapSyncInfos* Arena::CreateMaybeMessage<::resource::LdapSyncInfos>(Arena*);
template<> ::resource::Organization* Arena::CreateMaybeMessage<::resource::Organization>(Arena*);
template<> ::resource::Peer* Arena::CreateMaybeMessage<::resource::Peer>(Arena*);
template<> ::resource::RefreshTokenRqst* Arena::CreateMaybeMessage<::resource::RefreshTokenRqst>(Arena*);
template<> ::resource::RefreshTokenRsp* Arena::CreateMaybeMessage<::resource::RefreshTokenRsp>(Arena*);
template<> ::resource::RegisterAccountRqst* Arena::CreateMaybeMessage<::resource::RegisterAccountRqst>(Arena*);
template<> ::resource::RegisterAccountRsp* Arena::CreateMaybeMessage<::resource::RegisterAccountRsp>(Arena*);
template<> ::resource::RegisterPeerRqst* Arena::CreateMaybeMessage<::resource::RegisterPeerRqst>(Arena*);
template<> ::resource::RegisterPeerRsp* Arena::CreateMaybeMessage<::resource::RegisterPeerRsp>(Arena*);
template<> ::resource::RemoveAccountRoleRqst* Arena::CreateMaybeMessage<::resource::RemoveAccountRoleRqst>(Arena*);
template<> ::resource::RemoveAccountRoleRsp* Arena::CreateMaybeMessage<::resource::RemoveAccountRoleRsp>(Arena*);
template<> ::resource::RemoveApplicationActionRqst* Arena::CreateMaybeMessage<::resource::RemoveApplicationActionRqst>(Arena*);
template<> ::resource::RemoveApplicationActionRsp* Arena::CreateMaybeMessage<::resource::RemoveApplicationActionRsp>(Arena*);
template<> ::resource::RemoveGroupMemberAccountRqst* Arena::CreateMaybeMessage<::resource::RemoveGroupMemberAccountRqst>(Arena*);
template<> ::resource::RemoveGroupMemberAccountRsp* Arena::CreateMaybeMessage<::resource::RemoveGroupMemberAccountRsp>(Arena*);
template<> ::resource::RemoveOrganizationAccountRqst* Arena::CreateMaybeMessage<::resource::RemoveOrganizationAccountRqst>(Arena*);
template<> ::resource::RemoveOrganizationAccountRsp* Arena::CreateMaybeMessage<::resource::RemoveOrganizationAccountRsp>(Arena*);
template<> ::resource::RemoveOrganizationApplicationRqst* Arena::CreateMaybeMessage<::resource::RemoveOrganizationApplicationRqst>(Arena*);
template<> ::resource::RemoveOrganizationApplicationRsp* Arena::CreateMaybeMessage<::resource::RemoveOrganizationApplicationRsp>(Arena*);
template<> ::resource::RemoveOrganizationGroupRqst* Arena::CreateMaybeMessage<::resource::RemoveOrganizationGroupRqst>(Arena*);
template<> ::resource::RemoveOrganizationGroupRsp* Arena::CreateMaybeMessage<::resource::RemoveOrganizationGroupRsp>(Arena*);
template<> ::resource::RemoveOrganizationRoleRqst* Arena::CreateMaybeMessage<::resource::RemoveOrganizationRoleRqst>(Arena*);
template<> ::resource::RemoveOrganizationRoleRsp* Arena::CreateMaybeMessage<::resource::RemoveOrganizationRoleRsp>(Arena*);
template<> ::resource::RemovePeerActionRqst* Arena::CreateMaybeMessage<::resource::RemovePeerActionRqst>(Arena*);
template<> ::resource::RemovePeerActionRsp* Arena::CreateMaybeMessage<::resource::RemovePeerActionRsp>(Arena*);
template<> ::resource::RemoveRoleActionRqst* Arena::CreateMaybeMessage<::resource::RemoveRoleActionRqst>(Arena*);
template<> ::resource::RemoveRoleActionRsp* Arena::CreateMaybeMessage<::resource::RemoveRoleActionRsp>(Arena*);
template<> ::resource::Role* Arena::CreateMaybeMessage<::resource::Role>(Arena*);
template<> ::resource::SynchronizeLdapRqst* Arena::CreateMaybeMessage<::resource::SynchronizeLdapRqst>(Arena*);
template<> ::resource::SynchronizeLdapRsp* Arena::CreateMaybeMessage<::resource::SynchronizeLdapRsp>(Arena*);
template<> ::resource::UserSyncInfos* Arena::CreateMaybeMessage<::resource::UserSyncInfos>(Arena*);
template<> ::resource::ValidateTokenRqst* Arena::CreateMaybeMessage<::resource::ValidateTokenRqst>(Arena*);
template<> ::resource::ValidateTokenRsp* Arena::CreateMaybeMessage<::resource::ValidateTokenRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace resource {

// ===================================================================

class UserSyncInfos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.UserSyncInfos) */ {
 public:
  inline UserSyncInfos() : UserSyncInfos(nullptr) {}
  virtual ~UserSyncInfos();

  UserSyncInfos(const UserSyncInfos& from);
  UserSyncInfos(UserSyncInfos&& from) noexcept
    : UserSyncInfos() {
    *this = ::std::move(from);
  }

  inline UserSyncInfos& operator=(const UserSyncInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSyncInfos& operator=(UserSyncInfos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSyncInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSyncInfos* internal_default_instance() {
    return reinterpret_cast<const UserSyncInfos*>(
               &_UserSyncInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserSyncInfos& a, UserSyncInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSyncInfos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSyncInfos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSyncInfos* New() const final {
    return CreateMaybeMessage<UserSyncInfos>(nullptr);
  }

  UserSyncInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSyncInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSyncInfos& from);
  void MergeFrom(const UserSyncInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSyncInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.UserSyncInfos";
  }
  protected:
  explicit UserSyncInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kQueryFieldNumber = 2,
    kIdFieldNumber = 3,
    kEmailFieldNumber = 4,
  };
  // string base = 1;
  void clear_base();
  const std::string& base() const;
  void set_base(const std::string& value);
  void set_base(std::string&& value);
  void set_base(const char* value);
  void set_base(const char* value, size_t size);
  std::string* mutable_base();
  std::string* release_base();
  void set_allocated_base(std::string* base);
  private:
  const std::string& _internal_base() const;
  void _internal_set_base(const std::string& value);
  std::string* _internal_mutable_base();
  public:

  // string query = 2;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string email = 4;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:resource.UserSyncInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class GroupSyncInfos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.GroupSyncInfos) */ {
 public:
  inline GroupSyncInfos() : GroupSyncInfos(nullptr) {}
  virtual ~GroupSyncInfos();

  GroupSyncInfos(const GroupSyncInfos& from);
  GroupSyncInfos(GroupSyncInfos&& from) noexcept
    : GroupSyncInfos() {
    *this = ::std::move(from);
  }

  inline GroupSyncInfos& operator=(const GroupSyncInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupSyncInfos& operator=(GroupSyncInfos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupSyncInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupSyncInfos* internal_default_instance() {
    return reinterpret_cast<const GroupSyncInfos*>(
               &_GroupSyncInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GroupSyncInfos& a, GroupSyncInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupSyncInfos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupSyncInfos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupSyncInfos* New() const final {
    return CreateMaybeMessage<GroupSyncInfos>(nullptr);
  }

  GroupSyncInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupSyncInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupSyncInfos& from);
  void MergeFrom(const GroupSyncInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupSyncInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.GroupSyncInfos";
  }
  protected:
  explicit GroupSyncInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kQueryFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string base = 1;
  void clear_base();
  const std::string& base() const;
  void set_base(const std::string& value);
  void set_base(std::string&& value);
  void set_base(const char* value);
  void set_base(const char* value, size_t size);
  std::string* mutable_base();
  std::string* release_base();
  void set_allocated_base(std::string* base);
  private:
  const std::string& _internal_base() const;
  void _internal_set_base(const std::string& value);
  std::string* _internal_mutable_base();
  public:

  // string query = 2;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:resource.GroupSyncInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class LdapSyncInfos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.LdapSyncInfos) */ {
 public:
  inline LdapSyncInfos() : LdapSyncInfos(nullptr) {}
  virtual ~LdapSyncInfos();

  LdapSyncInfos(const LdapSyncInfos& from);
  LdapSyncInfos(LdapSyncInfos&& from) noexcept
    : LdapSyncInfos() {
    *this = ::std::move(from);
  }

  inline LdapSyncInfos& operator=(const LdapSyncInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline LdapSyncInfos& operator=(LdapSyncInfos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LdapSyncInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LdapSyncInfos* internal_default_instance() {
    return reinterpret_cast<const LdapSyncInfos*>(
               &_LdapSyncInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LdapSyncInfos& a, LdapSyncInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(LdapSyncInfos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LdapSyncInfos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LdapSyncInfos* New() const final {
    return CreateMaybeMessage<LdapSyncInfos>(nullptr);
  }

  LdapSyncInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LdapSyncInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LdapSyncInfos& from);
  void MergeFrom(const LdapSyncInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LdapSyncInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.LdapSyncInfos";
  }
  protected:
  explicit LdapSyncInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLdapSeriveIdFieldNumber = 1,
    kConnectionIdFieldNumber = 2,
    kUserSyncInfosFieldNumber = 4,
    kGroupSyncInfosFieldNumber = 5,
    kRefreshFieldNumber = 3,
  };
  // string ldapSeriveId = 1;
  void clear_ldapseriveid();
  const std::string& ldapseriveid() const;
  void set_ldapseriveid(const std::string& value);
  void set_ldapseriveid(std::string&& value);
  void set_ldapseriveid(const char* value);
  void set_ldapseriveid(const char* value, size_t size);
  std::string* mutable_ldapseriveid();
  std::string* release_ldapseriveid();
  void set_allocated_ldapseriveid(std::string* ldapseriveid);
  private:
  const std::string& _internal_ldapseriveid() const;
  void _internal_set_ldapseriveid(const std::string& value);
  std::string* _internal_mutable_ldapseriveid();
  public:

  // string connectionId = 2;
  void clear_connectionid();
  const std::string& connectionid() const;
  void set_connectionid(const std::string& value);
  void set_connectionid(std::string&& value);
  void set_connectionid(const char* value);
  void set_connectionid(const char* value, size_t size);
  std::string* mutable_connectionid();
  std::string* release_connectionid();
  void set_allocated_connectionid(std::string* connectionid);
  private:
  const std::string& _internal_connectionid() const;
  void _internal_set_connectionid(const std::string& value);
  std::string* _internal_mutable_connectionid();
  public:

  // .resource.UserSyncInfos userSyncInfos = 4;
  bool has_usersyncinfos() const;
  private:
  bool _internal_has_usersyncinfos() const;
  public:
  void clear_usersyncinfos();
  const ::resource::UserSyncInfos& usersyncinfos() const;
  ::resource::UserSyncInfos* release_usersyncinfos();
  ::resource::UserSyncInfos* mutable_usersyncinfos();
  void set_allocated_usersyncinfos(::resource::UserSyncInfos* usersyncinfos);
  private:
  const ::resource::UserSyncInfos& _internal_usersyncinfos() const;
  ::resource::UserSyncInfos* _internal_mutable_usersyncinfos();
  public:
  void unsafe_arena_set_allocated_usersyncinfos(
      ::resource::UserSyncInfos* usersyncinfos);
  ::resource::UserSyncInfos* unsafe_arena_release_usersyncinfos();

  // .resource.GroupSyncInfos groupSyncInfos = 5;
  bool has_groupsyncinfos() const;
  private:
  bool _internal_has_groupsyncinfos() const;
  public:
  void clear_groupsyncinfos();
  const ::resource::GroupSyncInfos& groupsyncinfos() const;
  ::resource::GroupSyncInfos* release_groupsyncinfos();
  ::resource::GroupSyncInfos* mutable_groupsyncinfos();
  void set_allocated_groupsyncinfos(::resource::GroupSyncInfos* groupsyncinfos);
  private:
  const ::resource::GroupSyncInfos& _internal_groupsyncinfos() const;
  ::resource::GroupSyncInfos* _internal_mutable_groupsyncinfos();
  public:
  void unsafe_arena_set_allocated_groupsyncinfos(
      ::resource::GroupSyncInfos* groupsyncinfos);
  ::resource::GroupSyncInfos* unsafe_arena_release_groupsyncinfos();

  // int32 refresh = 3;
  void clear_refresh();
  ::PROTOBUF_NAMESPACE_ID::int32 refresh() const;
  void set_refresh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refresh() const;
  void _internal_set_refresh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:resource.LdapSyncInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ldapseriveid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connectionid_;
  ::resource::UserSyncInfos* usersyncinfos_;
  ::resource::GroupSyncInfos* groupsyncinfos_;
  ::PROTOBUF_NAMESPACE_ID::int32 refresh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class SynchronizeLdapRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.SynchronizeLdapRqst) */ {
 public:
  inline SynchronizeLdapRqst() : SynchronizeLdapRqst(nullptr) {}
  virtual ~SynchronizeLdapRqst();

  SynchronizeLdapRqst(const SynchronizeLdapRqst& from);
  SynchronizeLdapRqst(SynchronizeLdapRqst&& from) noexcept
    : SynchronizeLdapRqst() {
    *this = ::std::move(from);
  }

  inline SynchronizeLdapRqst& operator=(const SynchronizeLdapRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronizeLdapRqst& operator=(SynchronizeLdapRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SynchronizeLdapRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SynchronizeLdapRqst* internal_default_instance() {
    return reinterpret_cast<const SynchronizeLdapRqst*>(
               &_SynchronizeLdapRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SynchronizeLdapRqst& a, SynchronizeLdapRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(SynchronizeLdapRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronizeLdapRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SynchronizeLdapRqst* New() const final {
    return CreateMaybeMessage<SynchronizeLdapRqst>(nullptr);
  }

  SynchronizeLdapRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SynchronizeLdapRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SynchronizeLdapRqst& from);
  void MergeFrom(const SynchronizeLdapRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynchronizeLdapRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.SynchronizeLdapRqst";
  }
  protected:
  explicit SynchronizeLdapRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncInfoFieldNumber = 1,
  };
  // .resource.LdapSyncInfos syncInfo = 1;
  bool has_syncinfo() const;
  private:
  bool _internal_has_syncinfo() const;
  public:
  void clear_syncinfo();
  const ::resource::LdapSyncInfos& syncinfo() const;
  ::resource::LdapSyncInfos* release_syncinfo();
  ::resource::LdapSyncInfos* mutable_syncinfo();
  void set_allocated_syncinfo(::resource::LdapSyncInfos* syncinfo);
  private:
  const ::resource::LdapSyncInfos& _internal_syncinfo() const;
  ::resource::LdapSyncInfos* _internal_mutable_syncinfo();
  public:
  void unsafe_arena_set_allocated_syncinfo(
      ::resource::LdapSyncInfos* syncinfo);
  ::resource::LdapSyncInfos* unsafe_arena_release_syncinfo();

  // @@protoc_insertion_point(class_scope:resource.SynchronizeLdapRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::resource::LdapSyncInfos* syncinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class SynchronizeLdapRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.SynchronizeLdapRsp) */ {
 public:
  inline SynchronizeLdapRsp() : SynchronizeLdapRsp(nullptr) {}
  virtual ~SynchronizeLdapRsp();

  SynchronizeLdapRsp(const SynchronizeLdapRsp& from);
  SynchronizeLdapRsp(SynchronizeLdapRsp&& from) noexcept
    : SynchronizeLdapRsp() {
    *this = ::std::move(from);
  }

  inline SynchronizeLdapRsp& operator=(const SynchronizeLdapRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronizeLdapRsp& operator=(SynchronizeLdapRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SynchronizeLdapRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SynchronizeLdapRsp* internal_default_instance() {
    return reinterpret_cast<const SynchronizeLdapRsp*>(
               &_SynchronizeLdapRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SynchronizeLdapRsp& a, SynchronizeLdapRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SynchronizeLdapRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronizeLdapRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SynchronizeLdapRsp* New() const final {
    return CreateMaybeMessage<SynchronizeLdapRsp>(nullptr);
  }

  SynchronizeLdapRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SynchronizeLdapRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SynchronizeLdapRsp& from);
  void MergeFrom(const SynchronizeLdapRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynchronizeLdapRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.SynchronizeLdapRsp";
  }
  protected:
  explicit SynchronizeLdapRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.SynchronizeLdapRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class ValidateTokenRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.ValidateTokenRqst) */ {
 public:
  inline ValidateTokenRqst() : ValidateTokenRqst(nullptr) {}
  virtual ~ValidateTokenRqst();

  ValidateTokenRqst(const ValidateTokenRqst& from);
  ValidateTokenRqst(ValidateTokenRqst&& from) noexcept
    : ValidateTokenRqst() {
    *this = ::std::move(from);
  }

  inline ValidateTokenRqst& operator=(const ValidateTokenRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateTokenRqst& operator=(ValidateTokenRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateTokenRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateTokenRqst* internal_default_instance() {
    return reinterpret_cast<const ValidateTokenRqst*>(
               &_ValidateTokenRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ValidateTokenRqst& a, ValidateTokenRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateTokenRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateTokenRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateTokenRqst* New() const final {
    return CreateMaybeMessage<ValidateTokenRqst>(nullptr);
  }

  ValidateTokenRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateTokenRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateTokenRqst& from);
  void MergeFrom(const ValidateTokenRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateTokenRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.ValidateTokenRqst";
  }
  protected:
  explicit ValidateTokenRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:resource.ValidateTokenRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class ValidateTokenRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.ValidateTokenRsp) */ {
 public:
  inline ValidateTokenRsp() : ValidateTokenRsp(nullptr) {}
  virtual ~ValidateTokenRsp();

  ValidateTokenRsp(const ValidateTokenRsp& from);
  ValidateTokenRsp(ValidateTokenRsp&& from) noexcept
    : ValidateTokenRsp() {
    *this = ::std::move(from);
  }

  inline ValidateTokenRsp& operator=(const ValidateTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateTokenRsp& operator=(ValidateTokenRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateTokenRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateTokenRsp* internal_default_instance() {
    return reinterpret_cast<const ValidateTokenRsp*>(
               &_ValidateTokenRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ValidateTokenRsp& a, ValidateTokenRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateTokenRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateTokenRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateTokenRsp* New() const final {
    return CreateMaybeMessage<ValidateTokenRsp>(nullptr);
  }

  ValidateTokenRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateTokenRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateTokenRsp& from);
  void MergeFrom(const ValidateTokenRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateTokenRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.ValidateTokenRsp";
  }
  protected:
  explicit ValidateTokenRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kExpiredFieldNumber = 2,
  };
  // string clientId = 1;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // int64 expired = 2;
  void clear_expired();
  ::PROTOBUF_NAMESPACE_ID::int64 expired() const;
  void set_expired(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expired() const;
  void _internal_set_expired(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:resource.ValidateTokenRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::int64 expired_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class GetAllActionsRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.GetAllActionsRqst) */ {
 public:
  inline GetAllActionsRqst() : GetAllActionsRqst(nullptr) {}
  virtual ~GetAllActionsRqst();

  GetAllActionsRqst(const GetAllActionsRqst& from);
  GetAllActionsRqst(GetAllActionsRqst&& from) noexcept
    : GetAllActionsRqst() {
    *this = ::std::move(from);
  }

  inline GetAllActionsRqst& operator=(const GetAllActionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllActionsRqst& operator=(GetAllActionsRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllActionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllActionsRqst* internal_default_instance() {
    return reinterpret_cast<const GetAllActionsRqst*>(
               &_GetAllActionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetAllActionsRqst& a, GetAllActionsRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllActionsRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllActionsRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllActionsRqst* New() const final {
    return CreateMaybeMessage<GetAllActionsRqst>(nullptr);
  }

  GetAllActionsRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllActionsRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllActionsRqst& from);
  void MergeFrom(const GetAllActionsRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllActionsRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.GetAllActionsRqst";
  }
  protected:
  explicit GetAllActionsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:resource.GetAllActionsRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class GetAllActionsRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.GetAllActionsRsp) */ {
 public:
  inline GetAllActionsRsp() : GetAllActionsRsp(nullptr) {}
  virtual ~GetAllActionsRsp();

  GetAllActionsRsp(const GetAllActionsRsp& from);
  GetAllActionsRsp(GetAllActionsRsp&& from) noexcept
    : GetAllActionsRsp() {
    *this = ::std::move(from);
  }

  inline GetAllActionsRsp& operator=(const GetAllActionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllActionsRsp& operator=(GetAllActionsRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllActionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllActionsRsp* internal_default_instance() {
    return reinterpret_cast<const GetAllActionsRsp*>(
               &_GetAllActionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetAllActionsRsp& a, GetAllActionsRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllActionsRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllActionsRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllActionsRsp* New() const final {
    return CreateMaybeMessage<GetAllActionsRsp>(nullptr);
  }

  GetAllActionsRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllActionsRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllActionsRsp& from);
  void MergeFrom(const GetAllActionsRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllActionsRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.GetAllActionsRsp";
  }
  protected:
  explicit GetAllActionsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 1,
  };
  // repeated string actions = 1;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  const std::string& actions(int index) const;
  std::string* mutable_actions(int index);
  void set_actions(int index, const std::string& value);
  void set_actions(int index, std::string&& value);
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  std::string* add_actions();
  void add_actions(const std::string& value);
  void add_actions(std::string&& value);
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& actions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_actions();
  private:
  const std::string& _internal_actions(int index) const;
  std::string* _internal_add_actions();
  public:

  // @@protoc_insertion_point(class_scope:resource.GetAllActionsRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> actions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kPasswordFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:resource.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class Role PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.Role) */ {
 public:
  inline Role() : Role(nullptr) {}
  virtual ~Role();

  Role(const Role& from);
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  inline Role& operator=(Role&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }
  inline void Swap(Role* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Role* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(nullptr);
  }

  Role* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.Role";
  }
  protected:
  explicit Role(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 3,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated string actions = 3;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  const std::string& actions(int index) const;
  std::string* mutable_actions(int index);
  void set_actions(int index, const std::string& value);
  void set_actions(int index, std::string&& value);
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  std::string* add_actions();
  void add_actions(const std::string& value);
  void add_actions(std::string&& value);
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& actions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_actions();
  private:
  const std::string& _internal_actions(int index) const;
  std::string* _internal_add_actions();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:resource.Role)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RegisterAccountRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RegisterAccountRqst) */ {
 public:
  inline RegisterAccountRqst() : RegisterAccountRqst(nullptr) {}
  virtual ~RegisterAccountRqst();

  RegisterAccountRqst(const RegisterAccountRqst& from);
  RegisterAccountRqst(RegisterAccountRqst&& from) noexcept
    : RegisterAccountRqst() {
    *this = ::std::move(from);
  }

  inline RegisterAccountRqst& operator=(const RegisterAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAccountRqst& operator=(RegisterAccountRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountRqst* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountRqst*>(
               &_RegisterAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RegisterAccountRqst& a, RegisterAccountRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAccountRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterAccountRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountRqst* New() const final {
    return CreateMaybeMessage<RegisterAccountRqst>(nullptr);
  }

  RegisterAccountRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterAccountRqst& from);
  void MergeFrom(const RegisterAccountRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RegisterAccountRqst";
  }
  protected:
  explicit RegisterAccountRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfirmPasswordFieldNumber = 3,
    kAccountFieldNumber = 1,
  };
  // string confirm_password = 3;
  void clear_confirm_password();
  const std::string& confirm_password() const;
  void set_confirm_password(const std::string& value);
  void set_confirm_password(std::string&& value);
  void set_confirm_password(const char* value);
  void set_confirm_password(const char* value, size_t size);
  std::string* mutable_confirm_password();
  std::string* release_confirm_password();
  void set_allocated_confirm_password(std::string* confirm_password);
  private:
  const std::string& _internal_confirm_password() const;
  void _internal_set_confirm_password(const std::string& value);
  std::string* _internal_mutable_confirm_password();
  public:

  // .resource.Account account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::resource::Account& account() const;
  ::resource::Account* release_account();
  ::resource::Account* mutable_account();
  void set_allocated_account(::resource::Account* account);
  private:
  const ::resource::Account& _internal_account() const;
  ::resource::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::resource::Account* account);
  ::resource::Account* unsafe_arena_release_account();

  // @@protoc_insertion_point(class_scope:resource.RegisterAccountRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confirm_password_;
  ::resource::Account* account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RegisterAccountRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RegisterAccountRsp) */ {
 public:
  inline RegisterAccountRsp() : RegisterAccountRsp(nullptr) {}
  virtual ~RegisterAccountRsp();

  RegisterAccountRsp(const RegisterAccountRsp& from);
  RegisterAccountRsp(RegisterAccountRsp&& from) noexcept
    : RegisterAccountRsp() {
    *this = ::std::move(from);
  }

  inline RegisterAccountRsp& operator=(const RegisterAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAccountRsp& operator=(RegisterAccountRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountRsp* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountRsp*>(
               &_RegisterAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RegisterAccountRsp& a, RegisterAccountRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAccountRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterAccountRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountRsp* New() const final {
    return CreateMaybeMessage<RegisterAccountRsp>(nullptr);
  }

  RegisterAccountRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterAccountRsp& from);
  void MergeFrom(const RegisterAccountRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RegisterAccountRsp";
  }
  protected:
  explicit RegisterAccountRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:resource.RegisterAccountRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class DeleteAccountRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.DeleteAccountRqst) */ {
 public:
  inline DeleteAccountRqst() : DeleteAccountRqst(nullptr) {}
  virtual ~DeleteAccountRqst();

  DeleteAccountRqst(const DeleteAccountRqst& from);
  DeleteAccountRqst(DeleteAccountRqst&& from) noexcept
    : DeleteAccountRqst() {
    *this = ::std::move(from);
  }

  inline DeleteAccountRqst& operator=(const DeleteAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAccountRqst& operator=(DeleteAccountRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAccountRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteAccountRqst*>(
               &_DeleteAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeleteAccountRqst& a, DeleteAccountRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAccountRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAccountRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAccountRqst* New() const final {
    return CreateMaybeMessage<DeleteAccountRqst>(nullptr);
  }

  DeleteAccountRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAccountRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAccountRqst& from);
  void MergeFrom(const DeleteAccountRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAccountRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.DeleteAccountRqst";
  }
  protected:
  explicit DeleteAccountRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:resource.DeleteAccountRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class DeleteAccountRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.DeleteAccountRsp) */ {
 public:
  inline DeleteAccountRsp() : DeleteAccountRsp(nullptr) {}
  virtual ~DeleteAccountRsp();

  DeleteAccountRsp(const DeleteAccountRsp& from);
  DeleteAccountRsp(DeleteAccountRsp&& from) noexcept
    : DeleteAccountRsp() {
    *this = ::std::move(from);
  }

  inline DeleteAccountRsp& operator=(const DeleteAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAccountRsp& operator=(DeleteAccountRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAccountRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteAccountRsp*>(
               &_DeleteAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeleteAccountRsp& a, DeleteAccountRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAccountRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAccountRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAccountRsp* New() const final {
    return CreateMaybeMessage<DeleteAccountRsp>(nullptr);
  }

  DeleteAccountRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAccountRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAccountRsp& from);
  void MergeFrom(const DeleteAccountRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAccountRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.DeleteAccountRsp";
  }
  protected:
  explicit DeleteAccountRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:resource.DeleteAccountRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AuthenticateRqst) */ {
 public:
  inline AuthenticateRqst() : AuthenticateRqst(nullptr) {}
  virtual ~AuthenticateRqst();

  AuthenticateRqst(const AuthenticateRqst& from);
  AuthenticateRqst(AuthenticateRqst&& from) noexcept
    : AuthenticateRqst() {
    *this = ::std::move(from);
  }

  inline AuthenticateRqst& operator=(const AuthenticateRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateRqst& operator=(AuthenticateRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateRqst* internal_default_instance() {
    return reinterpret_cast<const AuthenticateRqst*>(
               &_AuthenticateRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AuthenticateRqst& a, AuthenticateRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateRqst* New() const final {
    return CreateMaybeMessage<AuthenticateRqst>(nullptr);
  }

  AuthenticateRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateRqst& from);
  void MergeFrom(const AuthenticateRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AuthenticateRqst";
  }
  protected:
  explicit AuthenticateRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:resource.AuthenticateRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AuthenticateRsp) */ {
 public:
  inline AuthenticateRsp() : AuthenticateRsp(nullptr) {}
  virtual ~AuthenticateRsp();

  AuthenticateRsp(const AuthenticateRsp& from);
  AuthenticateRsp(AuthenticateRsp&& from) noexcept
    : AuthenticateRsp() {
    *this = ::std::move(from);
  }

  inline AuthenticateRsp& operator=(const AuthenticateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateRsp& operator=(AuthenticateRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateRsp* internal_default_instance() {
    return reinterpret_cast<const AuthenticateRsp*>(
               &_AuthenticateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AuthenticateRsp& a, AuthenticateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateRsp* New() const final {
    return CreateMaybeMessage<AuthenticateRsp>(nullptr);
  }

  AuthenticateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateRsp& from);
  void MergeFrom(const AuthenticateRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AuthenticateRsp";
  }
  protected:
  explicit AuthenticateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:resource.AuthenticateRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RefreshTokenRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RefreshTokenRqst) */ {
 public:
  inline RefreshTokenRqst() : RefreshTokenRqst(nullptr) {}
  virtual ~RefreshTokenRqst();

  RefreshTokenRqst(const RefreshTokenRqst& from);
  RefreshTokenRqst(RefreshTokenRqst&& from) noexcept
    : RefreshTokenRqst() {
    *this = ::std::move(from);
  }

  inline RefreshTokenRqst& operator=(const RefreshTokenRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshTokenRqst& operator=(RefreshTokenRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshTokenRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshTokenRqst* internal_default_instance() {
    return reinterpret_cast<const RefreshTokenRqst*>(
               &_RefreshTokenRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RefreshTokenRqst& a, RefreshTokenRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshTokenRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshTokenRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshTokenRqst* New() const final {
    return CreateMaybeMessage<RefreshTokenRqst>(nullptr);
  }

  RefreshTokenRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshTokenRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshTokenRqst& from);
  void MergeFrom(const RefreshTokenRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshTokenRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RefreshTokenRqst";
  }
  protected:
  explicit RefreshTokenRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:resource.RefreshTokenRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RefreshTokenRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RefreshTokenRsp) */ {
 public:
  inline RefreshTokenRsp() : RefreshTokenRsp(nullptr) {}
  virtual ~RefreshTokenRsp();

  RefreshTokenRsp(const RefreshTokenRsp& from);
  RefreshTokenRsp(RefreshTokenRsp&& from) noexcept
    : RefreshTokenRsp() {
    *this = ::std::move(from);
  }

  inline RefreshTokenRsp& operator=(const RefreshTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshTokenRsp& operator=(RefreshTokenRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshTokenRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshTokenRsp* internal_default_instance() {
    return reinterpret_cast<const RefreshTokenRsp*>(
               &_RefreshTokenRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RefreshTokenRsp& a, RefreshTokenRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshTokenRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshTokenRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshTokenRsp* New() const final {
    return CreateMaybeMessage<RefreshTokenRsp>(nullptr);
  }

  RefreshTokenRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshTokenRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshTokenRsp& from);
  void MergeFrom(const RefreshTokenRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshTokenRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RefreshTokenRsp";
  }
  protected:
  explicit RefreshTokenRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:resource.RefreshTokenRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddAccountRoleRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddAccountRoleRqst) */ {
 public:
  inline AddAccountRoleRqst() : AddAccountRoleRqst(nullptr) {}
  virtual ~AddAccountRoleRqst();

  AddAccountRoleRqst(const AddAccountRoleRqst& from);
  AddAccountRoleRqst(AddAccountRoleRqst&& from) noexcept
    : AddAccountRoleRqst() {
    *this = ::std::move(from);
  }

  inline AddAccountRoleRqst& operator=(const AddAccountRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAccountRoleRqst& operator=(AddAccountRoleRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddAccountRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddAccountRoleRqst* internal_default_instance() {
    return reinterpret_cast<const AddAccountRoleRqst*>(
               &_AddAccountRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AddAccountRoleRqst& a, AddAccountRoleRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAccountRoleRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAccountRoleRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddAccountRoleRqst* New() const final {
    return CreateMaybeMessage<AddAccountRoleRqst>(nullptr);
  }

  AddAccountRoleRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddAccountRoleRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddAccountRoleRqst& from);
  void MergeFrom(const AddAccountRoleRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddAccountRoleRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddAccountRoleRqst";
  }
  protected:
  explicit AddAccountRoleRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
  };
  // string accountId = 1;
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // string roleId = 2;
  void clear_roleid();
  const std::string& roleid() const;
  void set_roleid(const std::string& value);
  void set_roleid(std::string&& value);
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  std::string* mutable_roleid();
  std::string* release_roleid();
  void set_allocated_roleid(std::string* roleid);
  private:
  const std::string& _internal_roleid() const;
  void _internal_set_roleid(const std::string& value);
  std::string* _internal_mutable_roleid();
  public:

  // @@protoc_insertion_point(class_scope:resource.AddAccountRoleRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddAccountRoleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddAccountRoleRsp) */ {
 public:
  inline AddAccountRoleRsp() : AddAccountRoleRsp(nullptr) {}
  virtual ~AddAccountRoleRsp();

  AddAccountRoleRsp(const AddAccountRoleRsp& from);
  AddAccountRoleRsp(AddAccountRoleRsp&& from) noexcept
    : AddAccountRoleRsp() {
    *this = ::std::move(from);
  }

  inline AddAccountRoleRsp& operator=(const AddAccountRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAccountRoleRsp& operator=(AddAccountRoleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddAccountRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddAccountRoleRsp* internal_default_instance() {
    return reinterpret_cast<const AddAccountRoleRsp*>(
               &_AddAccountRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AddAccountRoleRsp& a, AddAccountRoleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAccountRoleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAccountRoleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddAccountRoleRsp* New() const final {
    return CreateMaybeMessage<AddAccountRoleRsp>(nullptr);
  }

  AddAccountRoleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddAccountRoleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddAccountRoleRsp& from);
  void MergeFrom(const AddAccountRoleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddAccountRoleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddAccountRoleRsp";
  }
  protected:
  explicit AddAccountRoleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.AddAccountRoleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveAccountRoleRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveAccountRoleRqst) */ {
 public:
  inline RemoveAccountRoleRqst() : RemoveAccountRoleRqst(nullptr) {}
  virtual ~RemoveAccountRoleRqst();

  RemoveAccountRoleRqst(const RemoveAccountRoleRqst& from);
  RemoveAccountRoleRqst(RemoveAccountRoleRqst&& from) noexcept
    : RemoveAccountRoleRqst() {
    *this = ::std::move(from);
  }

  inline RemoveAccountRoleRqst& operator=(const RemoveAccountRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAccountRoleRqst& operator=(RemoveAccountRoleRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveAccountRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveAccountRoleRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveAccountRoleRqst*>(
               &_RemoveAccountRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RemoveAccountRoleRqst& a, RemoveAccountRoleRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAccountRoleRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveAccountRoleRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveAccountRoleRqst* New() const final {
    return CreateMaybeMessage<RemoveAccountRoleRqst>(nullptr);
  }

  RemoveAccountRoleRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveAccountRoleRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveAccountRoleRqst& from);
  void MergeFrom(const RemoveAccountRoleRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAccountRoleRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveAccountRoleRqst";
  }
  protected:
  explicit RemoveAccountRoleRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
  };
  // string accountId = 1;
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // string roleId = 2;
  void clear_roleid();
  const std::string& roleid() const;
  void set_roleid(const std::string& value);
  void set_roleid(std::string&& value);
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  std::string* mutable_roleid();
  std::string* release_roleid();
  void set_allocated_roleid(std::string* roleid);
  private:
  const std::string& _internal_roleid() const;
  void _internal_set_roleid(const std::string& value);
  std::string* _internal_mutable_roleid();
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveAccountRoleRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveAccountRoleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveAccountRoleRsp) */ {
 public:
  inline RemoveAccountRoleRsp() : RemoveAccountRoleRsp(nullptr) {}
  virtual ~RemoveAccountRoleRsp();

  RemoveAccountRoleRsp(const RemoveAccountRoleRsp& from);
  RemoveAccountRoleRsp(RemoveAccountRoleRsp&& from) noexcept
    : RemoveAccountRoleRsp() {
    *this = ::std::move(from);
  }

  inline RemoveAccountRoleRsp& operator=(const RemoveAccountRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAccountRoleRsp& operator=(RemoveAccountRoleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveAccountRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveAccountRoleRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveAccountRoleRsp*>(
               &_RemoveAccountRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(RemoveAccountRoleRsp& a, RemoveAccountRoleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAccountRoleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveAccountRoleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveAccountRoleRsp* New() const final {
    return CreateMaybeMessage<RemoveAccountRoleRsp>(nullptr);
  }

  RemoveAccountRoleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveAccountRoleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveAccountRoleRsp& from);
  void MergeFrom(const RemoveAccountRoleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAccountRoleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveAccountRoleRsp";
  }
  protected:
  explicit RemoveAccountRoleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveAccountRoleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.CreateRoleRqst) */ {
 public:
  inline CreateRoleRqst() : CreateRoleRqst(nullptr) {}
  virtual ~CreateRoleRqst();

  CreateRoleRqst(const CreateRoleRqst& from);
  CreateRoleRqst(CreateRoleRqst&& from) noexcept
    : CreateRoleRqst() {
    *this = ::std::move(from);
  }

  inline CreateRoleRqst& operator=(const CreateRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleRqst& operator=(CreateRoleRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoleRqst* internal_default_instance() {
    return reinterpret_cast<const CreateRoleRqst*>(
               &_CreateRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CreateRoleRqst& a, CreateRoleRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleRqst* New() const final {
    return CreateMaybeMessage<CreateRoleRqst>(nullptr);
  }

  CreateRoleRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoleRqst& from);
  void MergeFrom(const CreateRoleRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.CreateRoleRqst";
  }
  protected:
  explicit CreateRoleRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // .resource.Role role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::resource::Role& role() const;
  ::resource::Role* release_role();
  ::resource::Role* mutable_role();
  void set_allocated_role(::resource::Role* role);
  private:
  const ::resource::Role& _internal_role() const;
  ::resource::Role* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::resource::Role* role);
  ::resource::Role* unsafe_arena_release_role();

  // @@protoc_insertion_point(class_scope:resource.CreateRoleRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::resource::Role* role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.CreateRoleRsp) */ {
 public:
  inline CreateRoleRsp() : CreateRoleRsp(nullptr) {}
  virtual ~CreateRoleRsp();

  CreateRoleRsp(const CreateRoleRsp& from);
  CreateRoleRsp(CreateRoleRsp&& from) noexcept
    : CreateRoleRsp() {
    *this = ::std::move(from);
  }

  inline CreateRoleRsp& operator=(const CreateRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleRsp& operator=(CreateRoleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoleRsp* internal_default_instance() {
    return reinterpret_cast<const CreateRoleRsp*>(
               &_CreateRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CreateRoleRsp& a, CreateRoleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleRsp* New() const final {
    return CreateMaybeMessage<CreateRoleRsp>(nullptr);
  }

  CreateRoleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoleRsp& from);
  void MergeFrom(const CreateRoleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.CreateRoleRsp";
  }
  protected:
  explicit CreateRoleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.CreateRoleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class DeleteRoleRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.DeleteRoleRqst) */ {
 public:
  inline DeleteRoleRqst() : DeleteRoleRqst(nullptr) {}
  virtual ~DeleteRoleRqst();

  DeleteRoleRqst(const DeleteRoleRqst& from);
  DeleteRoleRqst(DeleteRoleRqst&& from) noexcept
    : DeleteRoleRqst() {
    *this = ::std::move(from);
  }

  inline DeleteRoleRqst& operator=(const DeleteRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRoleRqst& operator=(DeleteRoleRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRoleRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleRqst*>(
               &_DeleteRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DeleteRoleRqst& a, DeleteRoleRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRoleRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRoleRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleRqst* New() const final {
    return CreateMaybeMessage<DeleteRoleRqst>(nullptr);
  }

  DeleteRoleRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRoleRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRoleRqst& from);
  void MergeFrom(const DeleteRoleRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRoleRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.DeleteRoleRqst";
  }
  protected:
  explicit DeleteRoleRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // string roleId = 1;
  void clear_roleid();
  const std::string& roleid() const;
  void set_roleid(const std::string& value);
  void set_roleid(std::string&& value);
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  std::string* mutable_roleid();
  std::string* release_roleid();
  void set_allocated_roleid(std::string* roleid);
  private:
  const std::string& _internal_roleid() const;
  void _internal_set_roleid(const std::string& value);
  std::string* _internal_mutable_roleid();
  public:

  // @@protoc_insertion_point(class_scope:resource.DeleteRoleRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class DeleteRoleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.DeleteRoleRsp) */ {
 public:
  inline DeleteRoleRsp() : DeleteRoleRsp(nullptr) {}
  virtual ~DeleteRoleRsp();

  DeleteRoleRsp(const DeleteRoleRsp& from);
  DeleteRoleRsp(DeleteRoleRsp&& from) noexcept
    : DeleteRoleRsp() {
    *this = ::std::move(from);
  }

  inline DeleteRoleRsp& operator=(const DeleteRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRoleRsp& operator=(DeleteRoleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRoleRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleRsp*>(
               &_DeleteRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DeleteRoleRsp& a, DeleteRoleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRoleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRoleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleRsp* New() const final {
    return CreateMaybeMessage<DeleteRoleRsp>(nullptr);
  }

  DeleteRoleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRoleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRoleRsp& from);
  void MergeFrom(const DeleteRoleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRoleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.DeleteRoleRsp";
  }
  protected:
  explicit DeleteRoleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.DeleteRoleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class DeleteApplicationRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.DeleteApplicationRqst) */ {
 public:
  inline DeleteApplicationRqst() : DeleteApplicationRqst(nullptr) {}
  virtual ~DeleteApplicationRqst();

  DeleteApplicationRqst(const DeleteApplicationRqst& from);
  DeleteApplicationRqst(DeleteApplicationRqst&& from) noexcept
    : DeleteApplicationRqst() {
    *this = ::std::move(from);
  }

  inline DeleteApplicationRqst& operator=(const DeleteApplicationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteApplicationRqst& operator=(DeleteApplicationRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteApplicationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteApplicationRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteApplicationRqst*>(
               &_DeleteApplicationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DeleteApplicationRqst& a, DeleteApplicationRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteApplicationRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteApplicationRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteApplicationRqst* New() const final {
    return CreateMaybeMessage<DeleteApplicationRqst>(nullptr);
  }

  DeleteApplicationRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteApplicationRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteApplicationRqst& from);
  void MergeFrom(const DeleteApplicationRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteApplicationRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.DeleteApplicationRqst";
  }
  protected:
  explicit DeleteApplicationRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
  };
  // string applicationId = 1;
  void clear_applicationid();
  const std::string& applicationid() const;
  void set_applicationid(const std::string& value);
  void set_applicationid(std::string&& value);
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  std::string* mutable_applicationid();
  std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // @@protoc_insertion_point(class_scope:resource.DeleteApplicationRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class DeleteApplicationRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.DeleteApplicationRsp) */ {
 public:
  inline DeleteApplicationRsp() : DeleteApplicationRsp(nullptr) {}
  virtual ~DeleteApplicationRsp();

  DeleteApplicationRsp(const DeleteApplicationRsp& from);
  DeleteApplicationRsp(DeleteApplicationRsp&& from) noexcept
    : DeleteApplicationRsp() {
    *this = ::std::move(from);
  }

  inline DeleteApplicationRsp& operator=(const DeleteApplicationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteApplicationRsp& operator=(DeleteApplicationRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteApplicationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteApplicationRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteApplicationRsp*>(
               &_DeleteApplicationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DeleteApplicationRsp& a, DeleteApplicationRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteApplicationRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteApplicationRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteApplicationRsp* New() const final {
    return CreateMaybeMessage<DeleteApplicationRsp>(nullptr);
  }

  DeleteApplicationRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteApplicationRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteApplicationRsp& from);
  void MergeFrom(const DeleteApplicationRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteApplicationRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.DeleteApplicationRsp";
  }
  protected:
  explicit DeleteApplicationRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.DeleteApplicationRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class GetAllApplicationsInfoRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.GetAllApplicationsInfoRqst) */ {
 public:
  inline GetAllApplicationsInfoRqst() : GetAllApplicationsInfoRqst(nullptr) {}
  virtual ~GetAllApplicationsInfoRqst();

  GetAllApplicationsInfoRqst(const GetAllApplicationsInfoRqst& from);
  GetAllApplicationsInfoRqst(GetAllApplicationsInfoRqst&& from) noexcept
    : GetAllApplicationsInfoRqst() {
    *this = ::std::move(from);
  }

  inline GetAllApplicationsInfoRqst& operator=(const GetAllApplicationsInfoRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllApplicationsInfoRqst& operator=(GetAllApplicationsInfoRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllApplicationsInfoRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllApplicationsInfoRqst* internal_default_instance() {
    return reinterpret_cast<const GetAllApplicationsInfoRqst*>(
               &_GetAllApplicationsInfoRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetAllApplicationsInfoRqst& a, GetAllApplicationsInfoRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllApplicationsInfoRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllApplicationsInfoRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllApplicationsInfoRqst* New() const final {
    return CreateMaybeMessage<GetAllApplicationsInfoRqst>(nullptr);
  }

  GetAllApplicationsInfoRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllApplicationsInfoRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllApplicationsInfoRqst& from);
  void MergeFrom(const GetAllApplicationsInfoRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllApplicationsInfoRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.GetAllApplicationsInfoRqst";
  }
  protected:
  explicit GetAllApplicationsInfoRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:resource.GetAllApplicationsInfoRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class GetAllApplicationsInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.GetAllApplicationsInfoRsp) */ {
 public:
  inline GetAllApplicationsInfoRsp() : GetAllApplicationsInfoRsp(nullptr) {}
  virtual ~GetAllApplicationsInfoRsp();

  GetAllApplicationsInfoRsp(const GetAllApplicationsInfoRsp& from);
  GetAllApplicationsInfoRsp(GetAllApplicationsInfoRsp&& from) noexcept
    : GetAllApplicationsInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetAllApplicationsInfoRsp& operator=(const GetAllApplicationsInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllApplicationsInfoRsp& operator=(GetAllApplicationsInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllApplicationsInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllApplicationsInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetAllApplicationsInfoRsp*>(
               &_GetAllApplicationsInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetAllApplicationsInfoRsp& a, GetAllApplicationsInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllApplicationsInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllApplicationsInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllApplicationsInfoRsp* New() const final {
    return CreateMaybeMessage<GetAllApplicationsInfoRsp>(nullptr);
  }

  GetAllApplicationsInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllApplicationsInfoRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllApplicationsInfoRsp& from);
  void MergeFrom(const GetAllApplicationsInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllApplicationsInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.GetAllApplicationsInfoRsp";
  }
  protected:
  explicit GetAllApplicationsInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:resource.GetAllApplicationsInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AccountExistRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AccountExistRqst) */ {
 public:
  inline AccountExistRqst() : AccountExistRqst(nullptr) {}
  virtual ~AccountExistRqst();

  AccountExistRqst(const AccountExistRqst& from);
  AccountExistRqst(AccountExistRqst&& from) noexcept
    : AccountExistRqst() {
    *this = ::std::move(from);
  }

  inline AccountExistRqst& operator=(const AccountExistRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountExistRqst& operator=(AccountExistRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountExistRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountExistRqst* internal_default_instance() {
    return reinterpret_cast<const AccountExistRqst*>(
               &_AccountExistRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(AccountExistRqst& a, AccountExistRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountExistRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountExistRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountExistRqst* New() const final {
    return CreateMaybeMessage<AccountExistRqst>(nullptr);
  }

  AccountExistRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountExistRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountExistRqst& from);
  void MergeFrom(const AccountExistRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountExistRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AccountExistRqst";
  }
  protected:
  explicit AccountExistRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:resource.AccountExistRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AccountExistRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AccountExistRsp) */ {
 public:
  inline AccountExistRsp() : AccountExistRsp(nullptr) {}
  virtual ~AccountExistRsp();

  AccountExistRsp(const AccountExistRsp& from);
  AccountExistRsp(AccountExistRsp&& from) noexcept
    : AccountExistRsp() {
    *this = ::std::move(from);
  }

  inline AccountExistRsp& operator=(const AccountExistRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountExistRsp& operator=(AccountExistRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountExistRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountExistRsp* internal_default_instance() {
    return reinterpret_cast<const AccountExistRsp*>(
               &_AccountExistRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(AccountExistRsp& a, AccountExistRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountExistRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountExistRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountExistRsp* New() const final {
    return CreateMaybeMessage<AccountExistRsp>(nullptr);
  }

  AccountExistRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountExistRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountExistRsp& from);
  void MergeFrom(const AccountExistRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountExistRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AccountExistRsp";
  }
  protected:
  explicit AccountExistRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.AccountExistRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class Group PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.Group) */ {
 public:
  inline Group() : Group(nullptr) {}
  virtual ~Group();

  Group(const Group& from);
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Group* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Group* New() const final {
    return CreateMaybeMessage<Group>(nullptr);
  }

  Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Group* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.Group";
  }
  protected:
  explicit Group(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 3,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated string members = 3;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  const std::string& members(int index) const;
  std::string* mutable_members(int index);
  void set_members(int index, const std::string& value);
  void set_members(int index, std::string&& value);
  void set_members(int index, const char* value);
  void set_members(int index, const char* value, size_t size);
  std::string* add_members();
  void add_members(const std::string& value);
  void add_members(std::string&& value);
  void add_members(const char* value);
  void add_members(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_members();
  private:
  const std::string& _internal_members(int index) const;
  std::string* _internal_add_members();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:resource.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.CreateGroupRqst) */ {
 public:
  inline CreateGroupRqst() : CreateGroupRqst(nullptr) {}
  virtual ~CreateGroupRqst();

  CreateGroupRqst(const CreateGroupRqst& from);
  CreateGroupRqst(CreateGroupRqst&& from) noexcept
    : CreateGroupRqst() {
    *this = ::std::move(from);
  }

  inline CreateGroupRqst& operator=(const CreateGroupRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupRqst& operator=(CreateGroupRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGroupRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupRqst* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRqst*>(
               &_CreateGroupRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CreateGroupRqst& a, CreateGroupRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroupRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupRqst* New() const final {
    return CreateMaybeMessage<CreateGroupRqst>(nullptr);
  }

  CreateGroupRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGroupRqst& from);
  void MergeFrom(const CreateGroupRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.CreateGroupRqst";
  }
  protected:
  explicit CreateGroupRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
  };
  // .resource.Group group = 1;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::resource::Group& group() const;
  ::resource::Group* release_group();
  ::resource::Group* mutable_group();
  void set_allocated_group(::resource::Group* group);
  private:
  const ::resource::Group& _internal_group() const;
  ::resource::Group* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::resource::Group* group);
  ::resource::Group* unsafe_arena_release_group();

  // @@protoc_insertion_point(class_scope:resource.CreateGroupRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::resource::Group* group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.CreateGroupRsp) */ {
 public:
  inline CreateGroupRsp() : CreateGroupRsp(nullptr) {}
  virtual ~CreateGroupRsp();

  CreateGroupRsp(const CreateGroupRsp& from);
  CreateGroupRsp(CreateGroupRsp&& from) noexcept
    : CreateGroupRsp() {
    *this = ::std::move(from);
  }

  inline CreateGroupRsp& operator=(const CreateGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupRsp& operator=(CreateGroupRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGroupRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupRsp* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRsp*>(
               &_CreateGroupRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CreateGroupRsp& a, CreateGroupRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroupRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupRsp* New() const final {
    return CreateMaybeMessage<CreateGroupRsp>(nullptr);
  }

  CreateGroupRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGroupRsp& from);
  void MergeFrom(const CreateGroupRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.CreateGroupRsp";
  }
  protected:
  explicit CreateGroupRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.CreateGroupRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class GetGroupsRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.GetGroupsRqst) */ {
 public:
  inline GetGroupsRqst() : GetGroupsRqst(nullptr) {}
  virtual ~GetGroupsRqst();

  GetGroupsRqst(const GetGroupsRqst& from);
  GetGroupsRqst(GetGroupsRqst&& from) noexcept
    : GetGroupsRqst() {
    *this = ::std::move(from);
  }

  inline GetGroupsRqst& operator=(const GetGroupsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupsRqst& operator=(GetGroupsRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupsRqst* internal_default_instance() {
    return reinterpret_cast<const GetGroupsRqst*>(
               &_GetGroupsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetGroupsRqst& a, GetGroupsRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupsRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupsRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupsRqst* New() const final {
    return CreateMaybeMessage<GetGroupsRqst>(nullptr);
  }

  GetGroupsRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupsRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupsRqst& from);
  void MergeFrom(const GetGroupsRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupsRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.GetGroupsRqst";
  }
  protected:
  explicit GetGroupsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:resource.GetGroupsRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class GetGroupsRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.GetGroupsRsp) */ {
 public:
  inline GetGroupsRsp() : GetGroupsRsp(nullptr) {}
  virtual ~GetGroupsRsp();

  GetGroupsRsp(const GetGroupsRsp& from);
  GetGroupsRsp(GetGroupsRsp&& from) noexcept
    : GetGroupsRsp() {
    *this = ::std::move(from);
  }

  inline GetGroupsRsp& operator=(const GetGroupsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupsRsp& operator=(GetGroupsRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGroupsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupsRsp* internal_default_instance() {
    return reinterpret_cast<const GetGroupsRsp*>(
               &_GetGroupsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetGroupsRsp& a, GetGroupsRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupsRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupsRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGroupsRsp* New() const final {
    return CreateMaybeMessage<GetGroupsRsp>(nullptr);
  }

  GetGroupsRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupsRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGroupsRsp& from);
  void MergeFrom(const GetGroupsRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupsRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.GetGroupsRsp";
  }
  protected:
  explicit GetGroupsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .resource.Group groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::resource::Group* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Group >*
      mutable_groups();
  private:
  const ::resource::Group& _internal_groups(int index) const;
  ::resource::Group* _internal_add_groups();
  public:
  const ::resource::Group& groups(int index) const;
  ::resource::Group* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Group >&
      groups() const;

  // @@protoc_insertion_point(class_scope:resource.GetGroupsRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Group > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class DeleteGroupRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.DeleteGroupRqst) */ {
 public:
  inline DeleteGroupRqst() : DeleteGroupRqst(nullptr) {}
  virtual ~DeleteGroupRqst();

  DeleteGroupRqst(const DeleteGroupRqst& from);
  DeleteGroupRqst(DeleteGroupRqst&& from) noexcept
    : DeleteGroupRqst() {
    *this = ::std::move(from);
  }

  inline DeleteGroupRqst& operator=(const DeleteGroupRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGroupRqst& operator=(DeleteGroupRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGroupRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGroupRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupRqst*>(
               &_DeleteGroupRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DeleteGroupRqst& a, DeleteGroupRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGroupRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGroupRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGroupRqst* New() const final {
    return CreateMaybeMessage<DeleteGroupRqst>(nullptr);
  }

  DeleteGroupRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGroupRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGroupRqst& from);
  void MergeFrom(const DeleteGroupRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.DeleteGroupRqst";
  }
  protected:
  explicit DeleteGroupRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
  };
  // string group = 1;
  void clear_group();
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // @@protoc_insertion_point(class_scope:resource.DeleteGroupRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class DeleteGroupRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.DeleteGroupRsp) */ {
 public:
  inline DeleteGroupRsp() : DeleteGroupRsp(nullptr) {}
  virtual ~DeleteGroupRsp();

  DeleteGroupRsp(const DeleteGroupRsp& from);
  DeleteGroupRsp(DeleteGroupRsp&& from) noexcept
    : DeleteGroupRsp() {
    *this = ::std::move(from);
  }

  inline DeleteGroupRsp& operator=(const DeleteGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGroupRsp& operator=(DeleteGroupRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGroupRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGroupRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupRsp*>(
               &_DeleteGroupRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(DeleteGroupRsp& a, DeleteGroupRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGroupRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGroupRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGroupRsp* New() const final {
    return CreateMaybeMessage<DeleteGroupRsp>(nullptr);
  }

  DeleteGroupRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGroupRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGroupRsp& from);
  void MergeFrom(const DeleteGroupRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.DeleteGroupRsp";
  }
  protected:
  explicit DeleteGroupRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.DeleteGroupRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddGroupMemberAccountRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddGroupMemberAccountRqst) */ {
 public:
  inline AddGroupMemberAccountRqst() : AddGroupMemberAccountRqst(nullptr) {}
  virtual ~AddGroupMemberAccountRqst();

  AddGroupMemberAccountRqst(const AddGroupMemberAccountRqst& from);
  AddGroupMemberAccountRqst(AddGroupMemberAccountRqst&& from) noexcept
    : AddGroupMemberAccountRqst() {
    *this = ::std::move(from);
  }

  inline AddGroupMemberAccountRqst& operator=(const AddGroupMemberAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupMemberAccountRqst& operator=(AddGroupMemberAccountRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGroupMemberAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGroupMemberAccountRqst* internal_default_instance() {
    return reinterpret_cast<const AddGroupMemberAccountRqst*>(
               &_AddGroupMemberAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(AddGroupMemberAccountRqst& a, AddGroupMemberAccountRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupMemberAccountRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGroupMemberAccountRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGroupMemberAccountRqst* New() const final {
    return CreateMaybeMessage<AddGroupMemberAccountRqst>(nullptr);
  }

  AddGroupMemberAccountRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupMemberAccountRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGroupMemberAccountRqst& from);
  void MergeFrom(const AddGroupMemberAccountRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupMemberAccountRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddGroupMemberAccountRqst";
  }
  protected:
  explicit AddGroupMemberAccountRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // string accountId = 2;
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // @@protoc_insertion_point(class_scope:resource.AddGroupMemberAccountRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddGroupMemberAccountRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddGroupMemberAccountRsp) */ {
 public:
  inline AddGroupMemberAccountRsp() : AddGroupMemberAccountRsp(nullptr) {}
  virtual ~AddGroupMemberAccountRsp();

  AddGroupMemberAccountRsp(const AddGroupMemberAccountRsp& from);
  AddGroupMemberAccountRsp(AddGroupMemberAccountRsp&& from) noexcept
    : AddGroupMemberAccountRsp() {
    *this = ::std::move(from);
  }

  inline AddGroupMemberAccountRsp& operator=(const AddGroupMemberAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupMemberAccountRsp& operator=(AddGroupMemberAccountRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGroupMemberAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGroupMemberAccountRsp* internal_default_instance() {
    return reinterpret_cast<const AddGroupMemberAccountRsp*>(
               &_AddGroupMemberAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(AddGroupMemberAccountRsp& a, AddGroupMemberAccountRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupMemberAccountRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGroupMemberAccountRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGroupMemberAccountRsp* New() const final {
    return CreateMaybeMessage<AddGroupMemberAccountRsp>(nullptr);
  }

  AddGroupMemberAccountRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupMemberAccountRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGroupMemberAccountRsp& from);
  void MergeFrom(const AddGroupMemberAccountRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupMemberAccountRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddGroupMemberAccountRsp";
  }
  protected:
  explicit AddGroupMemberAccountRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.AddGroupMemberAccountRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveGroupMemberAccountRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveGroupMemberAccountRqst) */ {
 public:
  inline RemoveGroupMemberAccountRqst() : RemoveGroupMemberAccountRqst(nullptr) {}
  virtual ~RemoveGroupMemberAccountRqst();

  RemoveGroupMemberAccountRqst(const RemoveGroupMemberAccountRqst& from);
  RemoveGroupMemberAccountRqst(RemoveGroupMemberAccountRqst&& from) noexcept
    : RemoveGroupMemberAccountRqst() {
    *this = ::std::move(from);
  }

  inline RemoveGroupMemberAccountRqst& operator=(const RemoveGroupMemberAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveGroupMemberAccountRqst& operator=(RemoveGroupMemberAccountRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveGroupMemberAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveGroupMemberAccountRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveGroupMemberAccountRqst*>(
               &_RemoveGroupMemberAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(RemoveGroupMemberAccountRqst& a, RemoveGroupMemberAccountRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveGroupMemberAccountRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveGroupMemberAccountRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveGroupMemberAccountRqst* New() const final {
    return CreateMaybeMessage<RemoveGroupMemberAccountRqst>(nullptr);
  }

  RemoveGroupMemberAccountRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveGroupMemberAccountRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveGroupMemberAccountRqst& from);
  void MergeFrom(const RemoveGroupMemberAccountRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveGroupMemberAccountRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveGroupMemberAccountRqst";
  }
  protected:
  explicit RemoveGroupMemberAccountRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // string groupId = 1;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // string accountId = 2;
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveGroupMemberAccountRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveGroupMemberAccountRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveGroupMemberAccountRsp) */ {
 public:
  inline RemoveGroupMemberAccountRsp() : RemoveGroupMemberAccountRsp(nullptr) {}
  virtual ~RemoveGroupMemberAccountRsp();

  RemoveGroupMemberAccountRsp(const RemoveGroupMemberAccountRsp& from);
  RemoveGroupMemberAccountRsp(RemoveGroupMemberAccountRsp&& from) noexcept
    : RemoveGroupMemberAccountRsp() {
    *this = ::std::move(from);
  }

  inline RemoveGroupMemberAccountRsp& operator=(const RemoveGroupMemberAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveGroupMemberAccountRsp& operator=(RemoveGroupMemberAccountRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveGroupMemberAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveGroupMemberAccountRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveGroupMemberAccountRsp*>(
               &_RemoveGroupMemberAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(RemoveGroupMemberAccountRsp& a, RemoveGroupMemberAccountRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveGroupMemberAccountRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveGroupMemberAccountRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveGroupMemberAccountRsp* New() const final {
    return CreateMaybeMessage<RemoveGroupMemberAccountRsp>(nullptr);
  }

  RemoveGroupMemberAccountRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveGroupMemberAccountRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveGroupMemberAccountRsp& from);
  void MergeFrom(const RemoveGroupMemberAccountRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveGroupMemberAccountRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveGroupMemberAccountRsp";
  }
  protected:
  explicit RemoveGroupMemberAccountRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveGroupMemberAccountRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class Organization PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.Organization) */ {
 public:
  inline Organization() : Organization(nullptr) {}
  virtual ~Organization();

  Organization(const Organization& from);
  Organization(Organization&& from) noexcept
    : Organization() {
    *this = ::std::move(from);
  }

  inline Organization& operator=(const Organization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Organization& operator=(Organization&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Organization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Organization* internal_default_instance() {
    return reinterpret_cast<const Organization*>(
               &_Organization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Organization& a, Organization& b) {
    a.Swap(&b);
  }
  inline void Swap(Organization* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Organization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Organization* New() const final {
    return CreateMaybeMessage<Organization>(nullptr);
  }

  Organization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Organization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Organization& from);
  void MergeFrom(const Organization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Organization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.Organization";
  }
  protected:
  explicit Organization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 3,
    kGroupsFieldNumber = 4,
    kRolesFieldNumber = 5,
    kApplicationsFieldNumber = 6,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated string accounts = 3;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  const std::string& accounts(int index) const;
  std::string* mutable_accounts(int index);
  void set_accounts(int index, const std::string& value);
  void set_accounts(int index, std::string&& value);
  void set_accounts(int index, const char* value);
  void set_accounts(int index, const char* value, size_t size);
  std::string* add_accounts();
  void add_accounts(const std::string& value);
  void add_accounts(std::string&& value);
  void add_accounts(const char* value);
  void add_accounts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_accounts();
  private:
  const std::string& _internal_accounts(int index) const;
  std::string* _internal_add_accounts();
  public:

  // repeated string groups = 4;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  const std::string& groups(int index) const;
  std::string* mutable_groups(int index);
  void set_groups(int index, const std::string& value);
  void set_groups(int index, std::string&& value);
  void set_groups(int index, const char* value);
  void set_groups(int index, const char* value, size_t size);
  std::string* add_groups();
  void add_groups(const std::string& value);
  void add_groups(std::string&& value);
  void add_groups(const char* value);
  void add_groups(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_groups();
  private:
  const std::string& _internal_groups(int index) const;
  std::string* _internal_add_groups();
  public:

  // repeated string roles = 5;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  const std::string& roles(int index) const;
  std::string* mutable_roles(int index);
  void set_roles(int index, const std::string& value);
  void set_roles(int index, std::string&& value);
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, size_t size);
  std::string* add_roles();
  void add_roles(const std::string& value);
  void add_roles(std::string&& value);
  void add_roles(const char* value);
  void add_roles(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_roles();
  private:
  const std::string& _internal_roles(int index) const;
  std::string* _internal_add_roles();
  public:

  // repeated string applications = 6;
  int applications_size() const;
  private:
  int _internal_applications_size() const;
  public:
  void clear_applications();
  const std::string& applications(int index) const;
  std::string* mutable_applications(int index);
  void set_applications(int index, const std::string& value);
  void set_applications(int index, std::string&& value);
  void set_applications(int index, const char* value);
  void set_applications(int index, const char* value, size_t size);
  std::string* add_applications();
  void add_applications(const std::string& value);
  void add_applications(std::string&& value);
  void add_applications(const char* value);
  void add_applications(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& applications() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_applications();
  private:
  const std::string& _internal_applications(int index) const;
  std::string* _internal_add_applications();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:resource.Organization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> accounts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> groups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> roles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> applications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class CreateOrganizationRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.CreateOrganizationRqst) */ {
 public:
  inline CreateOrganizationRqst() : CreateOrganizationRqst(nullptr) {}
  virtual ~CreateOrganizationRqst();

  CreateOrganizationRqst(const CreateOrganizationRqst& from);
  CreateOrganizationRqst(CreateOrganizationRqst&& from) noexcept
    : CreateOrganizationRqst() {
    *this = ::std::move(from);
  }

  inline CreateOrganizationRqst& operator=(const CreateOrganizationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrganizationRqst& operator=(CreateOrganizationRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateOrganizationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOrganizationRqst* internal_default_instance() {
    return reinterpret_cast<const CreateOrganizationRqst*>(
               &_CreateOrganizationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CreateOrganizationRqst& a, CreateOrganizationRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrganizationRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrganizationRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOrganizationRqst* New() const final {
    return CreateMaybeMessage<CreateOrganizationRqst>(nullptr);
  }

  CreateOrganizationRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrganizationRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateOrganizationRqst& from);
  void MergeFrom(const CreateOrganizationRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrganizationRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.CreateOrganizationRqst";
  }
  protected:
  explicit CreateOrganizationRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationFieldNumber = 1,
  };
  // .resource.Organization organization = 1;
  bool has_organization() const;
  private:
  bool _internal_has_organization() const;
  public:
  void clear_organization();
  const ::resource::Organization& organization() const;
  ::resource::Organization* release_organization();
  ::resource::Organization* mutable_organization();
  void set_allocated_organization(::resource::Organization* organization);
  private:
  const ::resource::Organization& _internal_organization() const;
  ::resource::Organization* _internal_mutable_organization();
  public:
  void unsafe_arena_set_allocated_organization(
      ::resource::Organization* organization);
  ::resource::Organization* unsafe_arena_release_organization();

  // @@protoc_insertion_point(class_scope:resource.CreateOrganizationRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::resource::Organization* organization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class CreateOrganizationRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.CreateOrganizationRsp) */ {
 public:
  inline CreateOrganizationRsp() : CreateOrganizationRsp(nullptr) {}
  virtual ~CreateOrganizationRsp();

  CreateOrganizationRsp(const CreateOrganizationRsp& from);
  CreateOrganizationRsp(CreateOrganizationRsp&& from) noexcept
    : CreateOrganizationRsp() {
    *this = ::std::move(from);
  }

  inline CreateOrganizationRsp& operator=(const CreateOrganizationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrganizationRsp& operator=(CreateOrganizationRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateOrganizationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOrganizationRsp* internal_default_instance() {
    return reinterpret_cast<const CreateOrganizationRsp*>(
               &_CreateOrganizationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CreateOrganizationRsp& a, CreateOrganizationRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrganizationRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrganizationRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateOrganizationRsp* New() const final {
    return CreateMaybeMessage<CreateOrganizationRsp>(nullptr);
  }

  CreateOrganizationRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrganizationRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateOrganizationRsp& from);
  void MergeFrom(const CreateOrganizationRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrganizationRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.CreateOrganizationRsp";
  }
  protected:
  explicit CreateOrganizationRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.CreateOrganizationRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class GetOrganizationsRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.GetOrganizationsRqst) */ {
 public:
  inline GetOrganizationsRqst() : GetOrganizationsRqst(nullptr) {}
  virtual ~GetOrganizationsRqst();

  GetOrganizationsRqst(const GetOrganizationsRqst& from);
  GetOrganizationsRqst(GetOrganizationsRqst&& from) noexcept
    : GetOrganizationsRqst() {
    *this = ::std::move(from);
  }

  inline GetOrganizationsRqst& operator=(const GetOrganizationsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrganizationsRqst& operator=(GetOrganizationsRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOrganizationsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOrganizationsRqst* internal_default_instance() {
    return reinterpret_cast<const GetOrganizationsRqst*>(
               &_GetOrganizationsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetOrganizationsRqst& a, GetOrganizationsRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrganizationsRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrganizationsRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOrganizationsRqst* New() const final {
    return CreateMaybeMessage<GetOrganizationsRqst>(nullptr);
  }

  GetOrganizationsRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOrganizationsRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOrganizationsRqst& from);
  void MergeFrom(const GetOrganizationsRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrganizationsRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.GetOrganizationsRqst";
  }
  protected:
  explicit GetOrganizationsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:resource.GetOrganizationsRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class GetOrganizationsRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.GetOrganizationsRsp) */ {
 public:
  inline GetOrganizationsRsp() : GetOrganizationsRsp(nullptr) {}
  virtual ~GetOrganizationsRsp();

  GetOrganizationsRsp(const GetOrganizationsRsp& from);
  GetOrganizationsRsp(GetOrganizationsRsp&& from) noexcept
    : GetOrganizationsRsp() {
    *this = ::std::move(from);
  }

  inline GetOrganizationsRsp& operator=(const GetOrganizationsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrganizationsRsp& operator=(GetOrganizationsRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOrganizationsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOrganizationsRsp* internal_default_instance() {
    return reinterpret_cast<const GetOrganizationsRsp*>(
               &_GetOrganizationsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetOrganizationsRsp& a, GetOrganizationsRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrganizationsRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrganizationsRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOrganizationsRsp* New() const final {
    return CreateMaybeMessage<GetOrganizationsRsp>(nullptr);
  }

  GetOrganizationsRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOrganizationsRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOrganizationsRsp& from);
  void MergeFrom(const GetOrganizationsRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrganizationsRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.GetOrganizationsRsp";
  }
  protected:
  explicit GetOrganizationsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationsFieldNumber = 1,
  };
  // repeated .resource.Organization organizations = 1;
  int organizations_size() const;
  private:
  int _internal_organizations_size() const;
  public:
  void clear_organizations();
  ::resource::Organization* mutable_organizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Organization >*
      mutable_organizations();
  private:
  const ::resource::Organization& _internal_organizations(int index) const;
  ::resource::Organization* _internal_add_organizations();
  public:
  const ::resource::Organization& organizations(int index) const;
  ::resource::Organization* add_organizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Organization >&
      organizations() const;

  // @@protoc_insertion_point(class_scope:resource.GetOrganizationsRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Organization > organizations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class DeleteOrganizationRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.DeleteOrganizationRqst) */ {
 public:
  inline DeleteOrganizationRqst() : DeleteOrganizationRqst(nullptr) {}
  virtual ~DeleteOrganizationRqst();

  DeleteOrganizationRqst(const DeleteOrganizationRqst& from);
  DeleteOrganizationRqst(DeleteOrganizationRqst&& from) noexcept
    : DeleteOrganizationRqst() {
    *this = ::std::move(from);
  }

  inline DeleteOrganizationRqst& operator=(const DeleteOrganizationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteOrganizationRqst& operator=(DeleteOrganizationRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteOrganizationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteOrganizationRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteOrganizationRqst*>(
               &_DeleteOrganizationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(DeleteOrganizationRqst& a, DeleteOrganizationRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteOrganizationRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteOrganizationRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteOrganizationRqst* New() const final {
    return CreateMaybeMessage<DeleteOrganizationRqst>(nullptr);
  }

  DeleteOrganizationRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOrganizationRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteOrganizationRqst& from);
  void MergeFrom(const DeleteOrganizationRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOrganizationRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.DeleteOrganizationRqst";
  }
  protected:
  explicit DeleteOrganizationRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationFieldNumber = 1,
  };
  // string organization = 1;
  void clear_organization();
  const std::string& organization() const;
  void set_organization(const std::string& value);
  void set_organization(std::string&& value);
  void set_organization(const char* value);
  void set_organization(const char* value, size_t size);
  std::string* mutable_organization();
  std::string* release_organization();
  void set_allocated_organization(std::string* organization);
  private:
  const std::string& _internal_organization() const;
  void _internal_set_organization(const std::string& value);
  std::string* _internal_mutable_organization();
  public:

  // @@protoc_insertion_point(class_scope:resource.DeleteOrganizationRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class DeleteOrganizationRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.DeleteOrganizationRsp) */ {
 public:
  inline DeleteOrganizationRsp() : DeleteOrganizationRsp(nullptr) {}
  virtual ~DeleteOrganizationRsp();

  DeleteOrganizationRsp(const DeleteOrganizationRsp& from);
  DeleteOrganizationRsp(DeleteOrganizationRsp&& from) noexcept
    : DeleteOrganizationRsp() {
    *this = ::std::move(from);
  }

  inline DeleteOrganizationRsp& operator=(const DeleteOrganizationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteOrganizationRsp& operator=(DeleteOrganizationRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteOrganizationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteOrganizationRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteOrganizationRsp*>(
               &_DeleteOrganizationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(DeleteOrganizationRsp& a, DeleteOrganizationRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteOrganizationRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteOrganizationRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteOrganizationRsp* New() const final {
    return CreateMaybeMessage<DeleteOrganizationRsp>(nullptr);
  }

  DeleteOrganizationRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOrganizationRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteOrganizationRsp& from);
  void MergeFrom(const DeleteOrganizationRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOrganizationRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.DeleteOrganizationRsp";
  }
  protected:
  explicit DeleteOrganizationRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.DeleteOrganizationRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class Peer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.Peer) */ {
 public:
  inline Peer() : Peer(nullptr) {}
  virtual ~Peer();

  Peer(const Peer& from);
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Peer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(Peer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Peer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const final {
    return CreateMaybeMessage<Peer>(nullptr);
  }

  Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Peer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Peer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.Peer";
  }
  protected:
  explicit Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 2,
    kDomainFieldNumber = 1,
  };
  // repeated string actions = 2;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  const std::string& actions(int index) const;
  std::string* mutable_actions(int index);
  void set_actions(int index, const std::string& value);
  void set_actions(int index, std::string&& value);
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  std::string* add_actions();
  void add_actions(const std::string& value);
  void add_actions(std::string&& value);
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& actions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_actions();
  private:
  const std::string& _internal_actions(int index) const;
  std::string* _internal_add_actions();
  public:

  // string domain = 1;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // @@protoc_insertion_point(class_scope:resource.Peer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RegisterPeerRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RegisterPeerRqst) */ {
 public:
  inline RegisterPeerRqst() : RegisterPeerRqst(nullptr) {}
  virtual ~RegisterPeerRqst();

  RegisterPeerRqst(const RegisterPeerRqst& from);
  RegisterPeerRqst(RegisterPeerRqst&& from) noexcept
    : RegisterPeerRqst() {
    *this = ::std::move(from);
  }

  inline RegisterPeerRqst& operator=(const RegisterPeerRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPeerRqst& operator=(RegisterPeerRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterPeerRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterPeerRqst* internal_default_instance() {
    return reinterpret_cast<const RegisterPeerRqst*>(
               &_RegisterPeerRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(RegisterPeerRqst& a, RegisterPeerRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterPeerRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterPeerRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterPeerRqst* New() const final {
    return CreateMaybeMessage<RegisterPeerRqst>(nullptr);
  }

  RegisterPeerRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPeerRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterPeerRqst& from);
  void MergeFrom(const RegisterPeerRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPeerRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RegisterPeerRqst";
  }
  protected:
  explicit RegisterPeerRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerFieldNumber = 1,
  };
  // .resource.Peer peer = 1;
  bool has_peer() const;
  private:
  bool _internal_has_peer() const;
  public:
  void clear_peer();
  const ::resource::Peer& peer() const;
  ::resource::Peer* release_peer();
  ::resource::Peer* mutable_peer();
  void set_allocated_peer(::resource::Peer* peer);
  private:
  const ::resource::Peer& _internal_peer() const;
  ::resource::Peer* _internal_mutable_peer();
  public:
  void unsafe_arena_set_allocated_peer(
      ::resource::Peer* peer);
  ::resource::Peer* unsafe_arena_release_peer();

  // @@protoc_insertion_point(class_scope:resource.RegisterPeerRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::resource::Peer* peer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RegisterPeerRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RegisterPeerRsp) */ {
 public:
  inline RegisterPeerRsp() : RegisterPeerRsp(nullptr) {}
  virtual ~RegisterPeerRsp();

  RegisterPeerRsp(const RegisterPeerRsp& from);
  RegisterPeerRsp(RegisterPeerRsp&& from) noexcept
    : RegisterPeerRsp() {
    *this = ::std::move(from);
  }

  inline RegisterPeerRsp& operator=(const RegisterPeerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPeerRsp& operator=(RegisterPeerRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterPeerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterPeerRsp* internal_default_instance() {
    return reinterpret_cast<const RegisterPeerRsp*>(
               &_RegisterPeerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(RegisterPeerRsp& a, RegisterPeerRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterPeerRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterPeerRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterPeerRsp* New() const final {
    return CreateMaybeMessage<RegisterPeerRsp>(nullptr);
  }

  RegisterPeerRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPeerRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterPeerRsp& from);
  void MergeFrom(const RegisterPeerRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPeerRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RegisterPeerRsp";
  }
  protected:
  explicit RegisterPeerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.RegisterPeerRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class GetPeersRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.GetPeersRqst) */ {
 public:
  inline GetPeersRqst() : GetPeersRqst(nullptr) {}
  virtual ~GetPeersRqst();

  GetPeersRqst(const GetPeersRqst& from);
  GetPeersRqst(GetPeersRqst&& from) noexcept
    : GetPeersRqst() {
    *this = ::std::move(from);
  }

  inline GetPeersRqst& operator=(const GetPeersRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeersRqst& operator=(GetPeersRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeersRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeersRqst* internal_default_instance() {
    return reinterpret_cast<const GetPeersRqst*>(
               &_GetPeersRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetPeersRqst& a, GetPeersRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeersRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPeersRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeersRqst* New() const final {
    return CreateMaybeMessage<GetPeersRqst>(nullptr);
  }

  GetPeersRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeersRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeersRqst& from);
  void MergeFrom(const GetPeersRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeersRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.GetPeersRqst";
  }
  protected:
  explicit GetPeersRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:resource.GetPeersRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class GetPeersRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.GetPeersRsp) */ {
 public:
  inline GetPeersRsp() : GetPeersRsp(nullptr) {}
  virtual ~GetPeersRsp();

  GetPeersRsp(const GetPeersRsp& from);
  GetPeersRsp(GetPeersRsp&& from) noexcept
    : GetPeersRsp() {
    *this = ::std::move(from);
  }

  inline GetPeersRsp& operator=(const GetPeersRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeersRsp& operator=(GetPeersRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeersRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeersRsp* internal_default_instance() {
    return reinterpret_cast<const GetPeersRsp*>(
               &_GetPeersRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetPeersRsp& a, GetPeersRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeersRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPeersRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeersRsp* New() const final {
    return CreateMaybeMessage<GetPeersRsp>(nullptr);
  }

  GetPeersRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeersRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeersRsp& from);
  void MergeFrom(const GetPeersRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeersRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.GetPeersRsp";
  }
  protected:
  explicit GetPeersRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 1,
  };
  // repeated .resource.Peer peers = 1;
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::resource::Peer* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Peer >*
      mutable_peers();
  private:
  const ::resource::Peer& _internal_peers(int index) const;
  ::resource::Peer* _internal_add_peers();
  public:
  const ::resource::Peer& peers(int index) const;
  ::resource::Peer* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Peer >&
      peers() const;

  // @@protoc_insertion_point(class_scope:resource.GetPeersRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Peer > peers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class DeletePeerRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.DeletePeerRqst) */ {
 public:
  inline DeletePeerRqst() : DeletePeerRqst(nullptr) {}
  virtual ~DeletePeerRqst();

  DeletePeerRqst(const DeletePeerRqst& from);
  DeletePeerRqst(DeletePeerRqst&& from) noexcept
    : DeletePeerRqst() {
    *this = ::std::move(from);
  }

  inline DeletePeerRqst& operator=(const DeletePeerRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePeerRqst& operator=(DeletePeerRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePeerRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePeerRqst* internal_default_instance() {
    return reinterpret_cast<const DeletePeerRqst*>(
               &_DeletePeerRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(DeletePeerRqst& a, DeletePeerRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePeerRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePeerRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePeerRqst* New() const final {
    return CreateMaybeMessage<DeletePeerRqst>(nullptr);
  }

  DeletePeerRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePeerRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePeerRqst& from);
  void MergeFrom(const DeletePeerRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePeerRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.DeletePeerRqst";
  }
  protected:
  explicit DeletePeerRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerFieldNumber = 1,
  };
  // .resource.Peer peer = 1;
  bool has_peer() const;
  private:
  bool _internal_has_peer() const;
  public:
  void clear_peer();
  const ::resource::Peer& peer() const;
  ::resource::Peer* release_peer();
  ::resource::Peer* mutable_peer();
  void set_allocated_peer(::resource::Peer* peer);
  private:
  const ::resource::Peer& _internal_peer() const;
  ::resource::Peer* _internal_mutable_peer();
  public:
  void unsafe_arena_set_allocated_peer(
      ::resource::Peer* peer);
  ::resource::Peer* unsafe_arena_release_peer();

  // @@protoc_insertion_point(class_scope:resource.DeletePeerRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::resource::Peer* peer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class DeletePeerRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.DeletePeerRsp) */ {
 public:
  inline DeletePeerRsp() : DeletePeerRsp(nullptr) {}
  virtual ~DeletePeerRsp();

  DeletePeerRsp(const DeletePeerRsp& from);
  DeletePeerRsp(DeletePeerRsp&& from) noexcept
    : DeletePeerRsp() {
    *this = ::std::move(from);
  }

  inline DeletePeerRsp& operator=(const DeletePeerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePeerRsp& operator=(DeletePeerRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePeerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePeerRsp* internal_default_instance() {
    return reinterpret_cast<const DeletePeerRsp*>(
               &_DeletePeerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(DeletePeerRsp& a, DeletePeerRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePeerRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePeerRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePeerRsp* New() const final {
    return CreateMaybeMessage<DeletePeerRsp>(nullptr);
  }

  DeletePeerRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePeerRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePeerRsp& from);
  void MergeFrom(const DeletePeerRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePeerRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.DeletePeerRsp";
  }
  protected:
  explicit DeletePeerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.DeletePeerRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddRoleActionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddRoleActionRqst) */ {
 public:
  inline AddRoleActionRqst() : AddRoleActionRqst(nullptr) {}
  virtual ~AddRoleActionRqst();

  AddRoleActionRqst(const AddRoleActionRqst& from);
  AddRoleActionRqst(AddRoleActionRqst&& from) noexcept
    : AddRoleActionRqst() {
    *this = ::std::move(from);
  }

  inline AddRoleActionRqst& operator=(const AddRoleActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRoleActionRqst& operator=(AddRoleActionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRoleActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRoleActionRqst* internal_default_instance() {
    return reinterpret_cast<const AddRoleActionRqst*>(
               &_AddRoleActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(AddRoleActionRqst& a, AddRoleActionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRoleActionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRoleActionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRoleActionRqst* New() const final {
    return CreateMaybeMessage<AddRoleActionRqst>(nullptr);
  }

  AddRoleActionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRoleActionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRoleActionRqst& from);
  void MergeFrom(const AddRoleActionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRoleActionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddRoleActionRqst";
  }
  protected:
  explicit AddRoleActionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string roleId = 1;
  void clear_roleid();
  const std::string& roleid() const;
  void set_roleid(const std::string& value);
  void set_roleid(std::string&& value);
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  std::string* mutable_roleid();
  std::string* release_roleid();
  void set_allocated_roleid(std::string* roleid);
  private:
  const std::string& _internal_roleid() const;
  void _internal_set_roleid(const std::string& value);
  std::string* _internal_mutable_roleid();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:resource.AddRoleActionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roleid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddRoleActionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddRoleActionRsp) */ {
 public:
  inline AddRoleActionRsp() : AddRoleActionRsp(nullptr) {}
  virtual ~AddRoleActionRsp();

  AddRoleActionRsp(const AddRoleActionRsp& from);
  AddRoleActionRsp(AddRoleActionRsp&& from) noexcept
    : AddRoleActionRsp() {
    *this = ::std::move(from);
  }

  inline AddRoleActionRsp& operator=(const AddRoleActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRoleActionRsp& operator=(AddRoleActionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRoleActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRoleActionRsp* internal_default_instance() {
    return reinterpret_cast<const AddRoleActionRsp*>(
               &_AddRoleActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(AddRoleActionRsp& a, AddRoleActionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRoleActionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRoleActionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRoleActionRsp* New() const final {
    return CreateMaybeMessage<AddRoleActionRsp>(nullptr);
  }

  AddRoleActionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRoleActionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRoleActionRsp& from);
  void MergeFrom(const AddRoleActionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRoleActionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddRoleActionRsp";
  }
  protected:
  explicit AddRoleActionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.AddRoleActionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveRoleActionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveRoleActionRqst) */ {
 public:
  inline RemoveRoleActionRqst() : RemoveRoleActionRqst(nullptr) {}
  virtual ~RemoveRoleActionRqst();

  RemoveRoleActionRqst(const RemoveRoleActionRqst& from);
  RemoveRoleActionRqst(RemoveRoleActionRqst&& from) noexcept
    : RemoveRoleActionRqst() {
    *this = ::std::move(from);
  }

  inline RemoveRoleActionRqst& operator=(const RemoveRoleActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRoleActionRqst& operator=(RemoveRoleActionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveRoleActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRoleActionRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveRoleActionRqst*>(
               &_RemoveRoleActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(RemoveRoleActionRqst& a, RemoveRoleActionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRoleActionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRoleActionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveRoleActionRqst* New() const final {
    return CreateMaybeMessage<RemoveRoleActionRqst>(nullptr);
  }

  RemoveRoleActionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRoleActionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveRoleActionRqst& from);
  void MergeFrom(const RemoveRoleActionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRoleActionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveRoleActionRqst";
  }
  protected:
  explicit RemoveRoleActionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string roleId = 1;
  void clear_roleid();
  const std::string& roleid() const;
  void set_roleid(const std::string& value);
  void set_roleid(std::string&& value);
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  std::string* mutable_roleid();
  std::string* release_roleid();
  void set_allocated_roleid(std::string* roleid);
  private:
  const std::string& _internal_roleid() const;
  void _internal_set_roleid(const std::string& value);
  std::string* _internal_mutable_roleid();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveRoleActionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roleid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveRoleActionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveRoleActionRsp) */ {
 public:
  inline RemoveRoleActionRsp() : RemoveRoleActionRsp(nullptr) {}
  virtual ~RemoveRoleActionRsp();

  RemoveRoleActionRsp(const RemoveRoleActionRsp& from);
  RemoveRoleActionRsp(RemoveRoleActionRsp&& from) noexcept
    : RemoveRoleActionRsp() {
    *this = ::std::move(from);
  }

  inline RemoveRoleActionRsp& operator=(const RemoveRoleActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRoleActionRsp& operator=(RemoveRoleActionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveRoleActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRoleActionRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveRoleActionRsp*>(
               &_RemoveRoleActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(RemoveRoleActionRsp& a, RemoveRoleActionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRoleActionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRoleActionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveRoleActionRsp* New() const final {
    return CreateMaybeMessage<RemoveRoleActionRsp>(nullptr);
  }

  RemoveRoleActionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRoleActionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveRoleActionRsp& from);
  void MergeFrom(const RemoveRoleActionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRoleActionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveRoleActionRsp";
  }
  protected:
  explicit RemoveRoleActionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveRoleActionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddApplicationActionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddApplicationActionRqst) */ {
 public:
  inline AddApplicationActionRqst() : AddApplicationActionRqst(nullptr) {}
  virtual ~AddApplicationActionRqst();

  AddApplicationActionRqst(const AddApplicationActionRqst& from);
  AddApplicationActionRqst(AddApplicationActionRqst&& from) noexcept
    : AddApplicationActionRqst() {
    *this = ::std::move(from);
  }

  inline AddApplicationActionRqst& operator=(const AddApplicationActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddApplicationActionRqst& operator=(AddApplicationActionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddApplicationActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddApplicationActionRqst* internal_default_instance() {
    return reinterpret_cast<const AddApplicationActionRqst*>(
               &_AddApplicationActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(AddApplicationActionRqst& a, AddApplicationActionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AddApplicationActionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddApplicationActionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddApplicationActionRqst* New() const final {
    return CreateMaybeMessage<AddApplicationActionRqst>(nullptr);
  }

  AddApplicationActionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddApplicationActionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddApplicationActionRqst& from);
  void MergeFrom(const AddApplicationActionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddApplicationActionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddApplicationActionRqst";
  }
  protected:
  explicit AddApplicationActionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string applicationId = 1;
  void clear_applicationid();
  const std::string& applicationid() const;
  void set_applicationid(const std::string& value);
  void set_applicationid(std::string&& value);
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  std::string* mutable_applicationid();
  std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:resource.AddApplicationActionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddApplicationActionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddApplicationActionRsp) */ {
 public:
  inline AddApplicationActionRsp() : AddApplicationActionRsp(nullptr) {}
  virtual ~AddApplicationActionRsp();

  AddApplicationActionRsp(const AddApplicationActionRsp& from);
  AddApplicationActionRsp(AddApplicationActionRsp&& from) noexcept
    : AddApplicationActionRsp() {
    *this = ::std::move(from);
  }

  inline AddApplicationActionRsp& operator=(const AddApplicationActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddApplicationActionRsp& operator=(AddApplicationActionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddApplicationActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddApplicationActionRsp* internal_default_instance() {
    return reinterpret_cast<const AddApplicationActionRsp*>(
               &_AddApplicationActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(AddApplicationActionRsp& a, AddApplicationActionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddApplicationActionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddApplicationActionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddApplicationActionRsp* New() const final {
    return CreateMaybeMessage<AddApplicationActionRsp>(nullptr);
  }

  AddApplicationActionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddApplicationActionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddApplicationActionRsp& from);
  void MergeFrom(const AddApplicationActionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddApplicationActionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddApplicationActionRsp";
  }
  protected:
  explicit AddApplicationActionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.AddApplicationActionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveApplicationActionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveApplicationActionRqst) */ {
 public:
  inline RemoveApplicationActionRqst() : RemoveApplicationActionRqst(nullptr) {}
  virtual ~RemoveApplicationActionRqst();

  RemoveApplicationActionRqst(const RemoveApplicationActionRqst& from);
  RemoveApplicationActionRqst(RemoveApplicationActionRqst&& from) noexcept
    : RemoveApplicationActionRqst() {
    *this = ::std::move(from);
  }

  inline RemoveApplicationActionRqst& operator=(const RemoveApplicationActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveApplicationActionRqst& operator=(RemoveApplicationActionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveApplicationActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveApplicationActionRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveApplicationActionRqst*>(
               &_RemoveApplicationActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(RemoveApplicationActionRqst& a, RemoveApplicationActionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveApplicationActionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveApplicationActionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveApplicationActionRqst* New() const final {
    return CreateMaybeMessage<RemoveApplicationActionRqst>(nullptr);
  }

  RemoveApplicationActionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveApplicationActionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveApplicationActionRqst& from);
  void MergeFrom(const RemoveApplicationActionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveApplicationActionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveApplicationActionRqst";
  }
  protected:
  explicit RemoveApplicationActionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string applicationId = 1;
  void clear_applicationid();
  const std::string& applicationid() const;
  void set_applicationid(const std::string& value);
  void set_applicationid(std::string&& value);
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  std::string* mutable_applicationid();
  std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveApplicationActionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveApplicationActionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveApplicationActionRsp) */ {
 public:
  inline RemoveApplicationActionRsp() : RemoveApplicationActionRsp(nullptr) {}
  virtual ~RemoveApplicationActionRsp();

  RemoveApplicationActionRsp(const RemoveApplicationActionRsp& from);
  RemoveApplicationActionRsp(RemoveApplicationActionRsp&& from) noexcept
    : RemoveApplicationActionRsp() {
    *this = ::std::move(from);
  }

  inline RemoveApplicationActionRsp& operator=(const RemoveApplicationActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveApplicationActionRsp& operator=(RemoveApplicationActionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveApplicationActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveApplicationActionRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveApplicationActionRsp*>(
               &_RemoveApplicationActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(RemoveApplicationActionRsp& a, RemoveApplicationActionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveApplicationActionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveApplicationActionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveApplicationActionRsp* New() const final {
    return CreateMaybeMessage<RemoveApplicationActionRsp>(nullptr);
  }

  RemoveApplicationActionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveApplicationActionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveApplicationActionRsp& from);
  void MergeFrom(const RemoveApplicationActionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveApplicationActionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveApplicationActionRsp";
  }
  protected:
  explicit RemoveApplicationActionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveApplicationActionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddPeerActionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddPeerActionRqst) */ {
 public:
  inline AddPeerActionRqst() : AddPeerActionRqst(nullptr) {}
  virtual ~AddPeerActionRqst();

  AddPeerActionRqst(const AddPeerActionRqst& from);
  AddPeerActionRqst(AddPeerActionRqst&& from) noexcept
    : AddPeerActionRqst() {
    *this = ::std::move(from);
  }

  inline AddPeerActionRqst& operator=(const AddPeerActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerActionRqst& operator=(AddPeerActionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPeerActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPeerActionRqst* internal_default_instance() {
    return reinterpret_cast<const AddPeerActionRqst*>(
               &_AddPeerActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(AddPeerActionRqst& a, AddPeerActionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerActionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPeerActionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPeerActionRqst* New() const final {
    return CreateMaybeMessage<AddPeerActionRqst>(nullptr);
  }

  AddPeerActionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerActionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPeerActionRqst& from);
  void MergeFrom(const AddPeerActionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerActionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddPeerActionRqst";
  }
  protected:
  explicit AddPeerActionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string domain = 1;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:resource.AddPeerActionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddPeerActionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddPeerActionRsp) */ {
 public:
  inline AddPeerActionRsp() : AddPeerActionRsp(nullptr) {}
  virtual ~AddPeerActionRsp();

  AddPeerActionRsp(const AddPeerActionRsp& from);
  AddPeerActionRsp(AddPeerActionRsp&& from) noexcept
    : AddPeerActionRsp() {
    *this = ::std::move(from);
  }

  inline AddPeerActionRsp& operator=(const AddPeerActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerActionRsp& operator=(AddPeerActionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPeerActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPeerActionRsp* internal_default_instance() {
    return reinterpret_cast<const AddPeerActionRsp*>(
               &_AddPeerActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(AddPeerActionRsp& a, AddPeerActionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerActionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPeerActionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPeerActionRsp* New() const final {
    return CreateMaybeMessage<AddPeerActionRsp>(nullptr);
  }

  AddPeerActionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerActionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPeerActionRsp& from);
  void MergeFrom(const AddPeerActionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerActionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddPeerActionRsp";
  }
  protected:
  explicit AddPeerActionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.AddPeerActionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemovePeerActionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemovePeerActionRqst) */ {
 public:
  inline RemovePeerActionRqst() : RemovePeerActionRqst(nullptr) {}
  virtual ~RemovePeerActionRqst();

  RemovePeerActionRqst(const RemovePeerActionRqst& from);
  RemovePeerActionRqst(RemovePeerActionRqst&& from) noexcept
    : RemovePeerActionRqst() {
    *this = ::std::move(from);
  }

  inline RemovePeerActionRqst& operator=(const RemovePeerActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePeerActionRqst& operator=(RemovePeerActionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePeerActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePeerActionRqst* internal_default_instance() {
    return reinterpret_cast<const RemovePeerActionRqst*>(
               &_RemovePeerActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(RemovePeerActionRqst& a, RemovePeerActionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePeerActionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovePeerActionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePeerActionRqst* New() const final {
    return CreateMaybeMessage<RemovePeerActionRqst>(nullptr);
  }

  RemovePeerActionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePeerActionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePeerActionRqst& from);
  void MergeFrom(const RemovePeerActionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePeerActionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemovePeerActionRqst";
  }
  protected:
  explicit RemovePeerActionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string domain = 1;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:resource.RemovePeerActionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemovePeerActionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemovePeerActionRsp) */ {
 public:
  inline RemovePeerActionRsp() : RemovePeerActionRsp(nullptr) {}
  virtual ~RemovePeerActionRsp();

  RemovePeerActionRsp(const RemovePeerActionRsp& from);
  RemovePeerActionRsp(RemovePeerActionRsp&& from) noexcept
    : RemovePeerActionRsp() {
    *this = ::std::move(from);
  }

  inline RemovePeerActionRsp& operator=(const RemovePeerActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePeerActionRsp& operator=(RemovePeerActionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePeerActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePeerActionRsp* internal_default_instance() {
    return reinterpret_cast<const RemovePeerActionRsp*>(
               &_RemovePeerActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(RemovePeerActionRsp& a, RemovePeerActionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePeerActionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovePeerActionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePeerActionRsp* New() const final {
    return CreateMaybeMessage<RemovePeerActionRsp>(nullptr);
  }

  RemovePeerActionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePeerActionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePeerActionRsp& from);
  void MergeFrom(const RemovePeerActionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePeerActionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemovePeerActionRsp";
  }
  protected:
  explicit RemovePeerActionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.RemovePeerActionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddOrganizationAccountRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationAccountRqst) */ {
 public:
  inline AddOrganizationAccountRqst() : AddOrganizationAccountRqst(nullptr) {}
  virtual ~AddOrganizationAccountRqst();

  AddOrganizationAccountRqst(const AddOrganizationAccountRqst& from);
  AddOrganizationAccountRqst(AddOrganizationAccountRqst&& from) noexcept
    : AddOrganizationAccountRqst() {
    *this = ::std::move(from);
  }

  inline AddOrganizationAccountRqst& operator=(const AddOrganizationAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrganizationAccountRqst& operator=(AddOrganizationAccountRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOrganizationAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationAccountRqst* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationAccountRqst*>(
               &_AddOrganizationAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(AddOrganizationAccountRqst& a, AddOrganizationAccountRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrganizationAccountRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrganizationAccountRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationAccountRqst* New() const final {
    return CreateMaybeMessage<AddOrganizationAccountRqst>(nullptr);
  }

  AddOrganizationAccountRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationAccountRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOrganizationAccountRqst& from);
  void MergeFrom(const AddOrganizationAccountRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationAccountRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddOrganizationAccountRqst";
  }
  protected:
  explicit AddOrganizationAccountRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // string organizationId = 1;
  void clear_organizationid();
  const std::string& organizationid() const;
  void set_organizationid(const std::string& value);
  void set_organizationid(std::string&& value);
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  std::string* mutable_organizationid();
  std::string* release_organizationid();
  void set_allocated_organizationid(std::string* organizationid);
  private:
  const std::string& _internal_organizationid() const;
  void _internal_set_organizationid(const std::string& value);
  std::string* _internal_mutable_organizationid();
  public:

  // string accountId = 2;
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationAccountRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organizationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddOrganizationAccountRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationAccountRsp) */ {
 public:
  inline AddOrganizationAccountRsp() : AddOrganizationAccountRsp(nullptr) {}
  virtual ~AddOrganizationAccountRsp();

  AddOrganizationAccountRsp(const AddOrganizationAccountRsp& from);
  AddOrganizationAccountRsp(AddOrganizationAccountRsp&& from) noexcept
    : AddOrganizationAccountRsp() {
    *this = ::std::move(from);
  }

  inline AddOrganizationAccountRsp& operator=(const AddOrganizationAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrganizationAccountRsp& operator=(AddOrganizationAccountRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOrganizationAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationAccountRsp* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationAccountRsp*>(
               &_AddOrganizationAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(AddOrganizationAccountRsp& a, AddOrganizationAccountRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrganizationAccountRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrganizationAccountRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationAccountRsp* New() const final {
    return CreateMaybeMessage<AddOrganizationAccountRsp>(nullptr);
  }

  AddOrganizationAccountRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationAccountRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOrganizationAccountRsp& from);
  void MergeFrom(const AddOrganizationAccountRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationAccountRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddOrganizationAccountRsp";
  }
  protected:
  explicit AddOrganizationAccountRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationAccountRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddOrganizationGroupRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationGroupRqst) */ {
 public:
  inline AddOrganizationGroupRqst() : AddOrganizationGroupRqst(nullptr) {}
  virtual ~AddOrganizationGroupRqst();

  AddOrganizationGroupRqst(const AddOrganizationGroupRqst& from);
  AddOrganizationGroupRqst(AddOrganizationGroupRqst&& from) noexcept
    : AddOrganizationGroupRqst() {
    *this = ::std::move(from);
  }

  inline AddOrganizationGroupRqst& operator=(const AddOrganizationGroupRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrganizationGroupRqst& operator=(AddOrganizationGroupRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOrganizationGroupRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationGroupRqst* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationGroupRqst*>(
               &_AddOrganizationGroupRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(AddOrganizationGroupRqst& a, AddOrganizationGroupRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrganizationGroupRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrganizationGroupRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationGroupRqst* New() const final {
    return CreateMaybeMessage<AddOrganizationGroupRqst>(nullptr);
  }

  AddOrganizationGroupRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationGroupRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOrganizationGroupRqst& from);
  void MergeFrom(const AddOrganizationGroupRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationGroupRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddOrganizationGroupRqst";
  }
  protected:
  explicit AddOrganizationGroupRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // string organizationId = 1;
  void clear_organizationid();
  const std::string& organizationid() const;
  void set_organizationid(const std::string& value);
  void set_organizationid(std::string&& value);
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  std::string* mutable_organizationid();
  std::string* release_organizationid();
  void set_allocated_organizationid(std::string* organizationid);
  private:
  const std::string& _internal_organizationid() const;
  void _internal_set_organizationid(const std::string& value);
  std::string* _internal_mutable_organizationid();
  public:

  // string groupId = 2;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationGroupRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organizationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddOrganizationGroupRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationGroupRsp) */ {
 public:
  inline AddOrganizationGroupRsp() : AddOrganizationGroupRsp(nullptr) {}
  virtual ~AddOrganizationGroupRsp();

  AddOrganizationGroupRsp(const AddOrganizationGroupRsp& from);
  AddOrganizationGroupRsp(AddOrganizationGroupRsp&& from) noexcept
    : AddOrganizationGroupRsp() {
    *this = ::std::move(from);
  }

  inline AddOrganizationGroupRsp& operator=(const AddOrganizationGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrganizationGroupRsp& operator=(AddOrganizationGroupRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOrganizationGroupRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationGroupRsp* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationGroupRsp*>(
               &_AddOrganizationGroupRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(AddOrganizationGroupRsp& a, AddOrganizationGroupRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrganizationGroupRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrganizationGroupRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationGroupRsp* New() const final {
    return CreateMaybeMessage<AddOrganizationGroupRsp>(nullptr);
  }

  AddOrganizationGroupRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationGroupRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOrganizationGroupRsp& from);
  void MergeFrom(const AddOrganizationGroupRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationGroupRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddOrganizationGroupRsp";
  }
  protected:
  explicit AddOrganizationGroupRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationGroupRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddOrganizationRoleRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationRoleRqst) */ {
 public:
  inline AddOrganizationRoleRqst() : AddOrganizationRoleRqst(nullptr) {}
  virtual ~AddOrganizationRoleRqst();

  AddOrganizationRoleRqst(const AddOrganizationRoleRqst& from);
  AddOrganizationRoleRqst(AddOrganizationRoleRqst&& from) noexcept
    : AddOrganizationRoleRqst() {
    *this = ::std::move(from);
  }

  inline AddOrganizationRoleRqst& operator=(const AddOrganizationRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrganizationRoleRqst& operator=(AddOrganizationRoleRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOrganizationRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationRoleRqst* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationRoleRqst*>(
               &_AddOrganizationRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(AddOrganizationRoleRqst& a, AddOrganizationRoleRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrganizationRoleRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrganizationRoleRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationRoleRqst* New() const final {
    return CreateMaybeMessage<AddOrganizationRoleRqst>(nullptr);
  }

  AddOrganizationRoleRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationRoleRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOrganizationRoleRqst& from);
  void MergeFrom(const AddOrganizationRoleRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationRoleRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddOrganizationRoleRqst";
  }
  protected:
  explicit AddOrganizationRoleRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
  };
  // string organizationId = 1;
  void clear_organizationid();
  const std::string& organizationid() const;
  void set_organizationid(const std::string& value);
  void set_organizationid(std::string&& value);
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  std::string* mutable_organizationid();
  std::string* release_organizationid();
  void set_allocated_organizationid(std::string* organizationid);
  private:
  const std::string& _internal_organizationid() const;
  void _internal_set_organizationid(const std::string& value);
  std::string* _internal_mutable_organizationid();
  public:

  // string roleId = 2;
  void clear_roleid();
  const std::string& roleid() const;
  void set_roleid(const std::string& value);
  void set_roleid(std::string&& value);
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  std::string* mutable_roleid();
  std::string* release_roleid();
  void set_allocated_roleid(std::string* roleid);
  private:
  const std::string& _internal_roleid() const;
  void _internal_set_roleid(const std::string& value);
  std::string* _internal_mutable_roleid();
  public:

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationRoleRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organizationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddOrganizationRoleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationRoleRsp) */ {
 public:
  inline AddOrganizationRoleRsp() : AddOrganizationRoleRsp(nullptr) {}
  virtual ~AddOrganizationRoleRsp();

  AddOrganizationRoleRsp(const AddOrganizationRoleRsp& from);
  AddOrganizationRoleRsp(AddOrganizationRoleRsp&& from) noexcept
    : AddOrganizationRoleRsp() {
    *this = ::std::move(from);
  }

  inline AddOrganizationRoleRsp& operator=(const AddOrganizationRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrganizationRoleRsp& operator=(AddOrganizationRoleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOrganizationRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationRoleRsp* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationRoleRsp*>(
               &_AddOrganizationRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(AddOrganizationRoleRsp& a, AddOrganizationRoleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrganizationRoleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrganizationRoleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationRoleRsp* New() const final {
    return CreateMaybeMessage<AddOrganizationRoleRsp>(nullptr);
  }

  AddOrganizationRoleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationRoleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOrganizationRoleRsp& from);
  void MergeFrom(const AddOrganizationRoleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationRoleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddOrganizationRoleRsp";
  }
  protected:
  explicit AddOrganizationRoleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationRoleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddOrganizationApplicationRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationApplicationRqst) */ {
 public:
  inline AddOrganizationApplicationRqst() : AddOrganizationApplicationRqst(nullptr) {}
  virtual ~AddOrganizationApplicationRqst();

  AddOrganizationApplicationRqst(const AddOrganizationApplicationRqst& from);
  AddOrganizationApplicationRqst(AddOrganizationApplicationRqst&& from) noexcept
    : AddOrganizationApplicationRqst() {
    *this = ::std::move(from);
  }

  inline AddOrganizationApplicationRqst& operator=(const AddOrganizationApplicationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrganizationApplicationRqst& operator=(AddOrganizationApplicationRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOrganizationApplicationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationApplicationRqst* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationApplicationRqst*>(
               &_AddOrganizationApplicationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(AddOrganizationApplicationRqst& a, AddOrganizationApplicationRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrganizationApplicationRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrganizationApplicationRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationApplicationRqst* New() const final {
    return CreateMaybeMessage<AddOrganizationApplicationRqst>(nullptr);
  }

  AddOrganizationApplicationRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationApplicationRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOrganizationApplicationRqst& from);
  void MergeFrom(const AddOrganizationApplicationRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationApplicationRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddOrganizationApplicationRqst";
  }
  protected:
  explicit AddOrganizationApplicationRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kApplicationIdFieldNumber = 2,
  };
  // string organizationId = 1;
  void clear_organizationid();
  const std::string& organizationid() const;
  void set_organizationid(const std::string& value);
  void set_organizationid(std::string&& value);
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  std::string* mutable_organizationid();
  std::string* release_organizationid();
  void set_allocated_organizationid(std::string* organizationid);
  private:
  const std::string& _internal_organizationid() const;
  void _internal_set_organizationid(const std::string& value);
  std::string* _internal_mutable_organizationid();
  public:

  // string applicationId = 2;
  void clear_applicationid();
  const std::string& applicationid() const;
  void set_applicationid(const std::string& value);
  void set_applicationid(std::string&& value);
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  std::string* mutable_applicationid();
  std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationApplicationRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organizationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class AddOrganizationApplicationRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationApplicationRsp) */ {
 public:
  inline AddOrganizationApplicationRsp() : AddOrganizationApplicationRsp(nullptr) {}
  virtual ~AddOrganizationApplicationRsp();

  AddOrganizationApplicationRsp(const AddOrganizationApplicationRsp& from);
  AddOrganizationApplicationRsp(AddOrganizationApplicationRsp&& from) noexcept
    : AddOrganizationApplicationRsp() {
    *this = ::std::move(from);
  }

  inline AddOrganizationApplicationRsp& operator=(const AddOrganizationApplicationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrganizationApplicationRsp& operator=(AddOrganizationApplicationRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOrganizationApplicationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationApplicationRsp* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationApplicationRsp*>(
               &_AddOrganizationApplicationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(AddOrganizationApplicationRsp& a, AddOrganizationApplicationRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrganizationApplicationRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrganizationApplicationRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationApplicationRsp* New() const final {
    return CreateMaybeMessage<AddOrganizationApplicationRsp>(nullptr);
  }

  AddOrganizationApplicationRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationApplicationRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOrganizationApplicationRsp& from);
  void MergeFrom(const AddOrganizationApplicationRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationApplicationRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.AddOrganizationApplicationRsp";
  }
  protected:
  explicit AddOrganizationApplicationRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationApplicationRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrganizationGroupRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationGroupRqst) */ {
 public:
  inline RemoveOrganizationGroupRqst() : RemoveOrganizationGroupRqst(nullptr) {}
  virtual ~RemoveOrganizationGroupRqst();

  RemoveOrganizationGroupRqst(const RemoveOrganizationGroupRqst& from);
  RemoveOrganizationGroupRqst(RemoveOrganizationGroupRqst&& from) noexcept
    : RemoveOrganizationGroupRqst() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationGroupRqst& operator=(const RemoveOrganizationGroupRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrganizationGroupRqst& operator=(RemoveOrganizationGroupRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveOrganizationGroupRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationGroupRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationGroupRqst*>(
               &_RemoveOrganizationGroupRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(RemoveOrganizationGroupRqst& a, RemoveOrganizationGroupRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrganizationGroupRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrganizationGroupRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationGroupRqst* New() const final {
    return CreateMaybeMessage<RemoveOrganizationGroupRqst>(nullptr);
  }

  RemoveOrganizationGroupRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationGroupRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveOrganizationGroupRqst& from);
  void MergeFrom(const RemoveOrganizationGroupRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationGroupRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveOrganizationGroupRqst";
  }
  protected:
  explicit RemoveOrganizationGroupRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // string organizationId = 1;
  void clear_organizationid();
  const std::string& organizationid() const;
  void set_organizationid(const std::string& value);
  void set_organizationid(std::string&& value);
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  std::string* mutable_organizationid();
  std::string* release_organizationid();
  void set_allocated_organizationid(std::string* organizationid);
  private:
  const std::string& _internal_organizationid() const;
  void _internal_set_organizationid(const std::string& value);
  std::string* _internal_mutable_organizationid();
  public:

  // string groupId = 2;
  void clear_groupid();
  const std::string& groupid() const;
  void set_groupid(const std::string& value);
  void set_groupid(std::string&& value);
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  std::string* mutable_groupid();
  std::string* release_groupid();
  void set_allocated_groupid(std::string* groupid);
  private:
  const std::string& _internal_groupid() const;
  void _internal_set_groupid(const std::string& value);
  std::string* _internal_mutable_groupid();
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationGroupRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organizationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrganizationGroupRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationGroupRsp) */ {
 public:
  inline RemoveOrganizationGroupRsp() : RemoveOrganizationGroupRsp(nullptr) {}
  virtual ~RemoveOrganizationGroupRsp();

  RemoveOrganizationGroupRsp(const RemoveOrganizationGroupRsp& from);
  RemoveOrganizationGroupRsp(RemoveOrganizationGroupRsp&& from) noexcept
    : RemoveOrganizationGroupRsp() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationGroupRsp& operator=(const RemoveOrganizationGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrganizationGroupRsp& operator=(RemoveOrganizationGroupRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveOrganizationGroupRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationGroupRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationGroupRsp*>(
               &_RemoveOrganizationGroupRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(RemoveOrganizationGroupRsp& a, RemoveOrganizationGroupRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrganizationGroupRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrganizationGroupRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationGroupRsp* New() const final {
    return CreateMaybeMessage<RemoveOrganizationGroupRsp>(nullptr);
  }

  RemoveOrganizationGroupRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationGroupRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveOrganizationGroupRsp& from);
  void MergeFrom(const RemoveOrganizationGroupRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationGroupRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveOrganizationGroupRsp";
  }
  protected:
  explicit RemoveOrganizationGroupRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationGroupRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrganizationRoleRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationRoleRqst) */ {
 public:
  inline RemoveOrganizationRoleRqst() : RemoveOrganizationRoleRqst(nullptr) {}
  virtual ~RemoveOrganizationRoleRqst();

  RemoveOrganizationRoleRqst(const RemoveOrganizationRoleRqst& from);
  RemoveOrganizationRoleRqst(RemoveOrganizationRoleRqst&& from) noexcept
    : RemoveOrganizationRoleRqst() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationRoleRqst& operator=(const RemoveOrganizationRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrganizationRoleRqst& operator=(RemoveOrganizationRoleRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveOrganizationRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationRoleRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationRoleRqst*>(
               &_RemoveOrganizationRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(RemoveOrganizationRoleRqst& a, RemoveOrganizationRoleRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrganizationRoleRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrganizationRoleRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationRoleRqst* New() const final {
    return CreateMaybeMessage<RemoveOrganizationRoleRqst>(nullptr);
  }

  RemoveOrganizationRoleRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationRoleRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveOrganizationRoleRqst& from);
  void MergeFrom(const RemoveOrganizationRoleRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationRoleRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveOrganizationRoleRqst";
  }
  protected:
  explicit RemoveOrganizationRoleRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
  };
  // string organizationId = 1;
  void clear_organizationid();
  const std::string& organizationid() const;
  void set_organizationid(const std::string& value);
  void set_organizationid(std::string&& value);
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  std::string* mutable_organizationid();
  std::string* release_organizationid();
  void set_allocated_organizationid(std::string* organizationid);
  private:
  const std::string& _internal_organizationid() const;
  void _internal_set_organizationid(const std::string& value);
  std::string* _internal_mutable_organizationid();
  public:

  // string roleId = 2;
  void clear_roleid();
  const std::string& roleid() const;
  void set_roleid(const std::string& value);
  void set_roleid(std::string&& value);
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  std::string* mutable_roleid();
  std::string* release_roleid();
  void set_allocated_roleid(std::string* roleid);
  private:
  const std::string& _internal_roleid() const;
  void _internal_set_roleid(const std::string& value);
  std::string* _internal_mutable_roleid();
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationRoleRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organizationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrganizationRoleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationRoleRsp) */ {
 public:
  inline RemoveOrganizationRoleRsp() : RemoveOrganizationRoleRsp(nullptr) {}
  virtual ~RemoveOrganizationRoleRsp();

  RemoveOrganizationRoleRsp(const RemoveOrganizationRoleRsp& from);
  RemoveOrganizationRoleRsp(RemoveOrganizationRoleRsp&& from) noexcept
    : RemoveOrganizationRoleRsp() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationRoleRsp& operator=(const RemoveOrganizationRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrganizationRoleRsp& operator=(RemoveOrganizationRoleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveOrganizationRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationRoleRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationRoleRsp*>(
               &_RemoveOrganizationRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(RemoveOrganizationRoleRsp& a, RemoveOrganizationRoleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrganizationRoleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrganizationRoleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationRoleRsp* New() const final {
    return CreateMaybeMessage<RemoveOrganizationRoleRsp>(nullptr);
  }

  RemoveOrganizationRoleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationRoleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveOrganizationRoleRsp& from);
  void MergeFrom(const RemoveOrganizationRoleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationRoleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveOrganizationRoleRsp";
  }
  protected:
  explicit RemoveOrganizationRoleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationRoleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrganizationApplicationRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationApplicationRqst) */ {
 public:
  inline RemoveOrganizationApplicationRqst() : RemoveOrganizationApplicationRqst(nullptr) {}
  virtual ~RemoveOrganizationApplicationRqst();

  RemoveOrganizationApplicationRqst(const RemoveOrganizationApplicationRqst& from);
  RemoveOrganizationApplicationRqst(RemoveOrganizationApplicationRqst&& from) noexcept
    : RemoveOrganizationApplicationRqst() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationApplicationRqst& operator=(const RemoveOrganizationApplicationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrganizationApplicationRqst& operator=(RemoveOrganizationApplicationRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveOrganizationApplicationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationApplicationRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationApplicationRqst*>(
               &_RemoveOrganizationApplicationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(RemoveOrganizationApplicationRqst& a, RemoveOrganizationApplicationRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrganizationApplicationRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrganizationApplicationRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationApplicationRqst* New() const final {
    return CreateMaybeMessage<RemoveOrganizationApplicationRqst>(nullptr);
  }

  RemoveOrganizationApplicationRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationApplicationRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveOrganizationApplicationRqst& from);
  void MergeFrom(const RemoveOrganizationApplicationRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationApplicationRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveOrganizationApplicationRqst";
  }
  protected:
  explicit RemoveOrganizationApplicationRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kApplicationIdFieldNumber = 2,
  };
  // string organizationId = 1;
  void clear_organizationid();
  const std::string& organizationid() const;
  void set_organizationid(const std::string& value);
  void set_organizationid(std::string&& value);
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  std::string* mutable_organizationid();
  std::string* release_organizationid();
  void set_allocated_organizationid(std::string* organizationid);
  private:
  const std::string& _internal_organizationid() const;
  void _internal_set_organizationid(const std::string& value);
  std::string* _internal_mutable_organizationid();
  public:

  // string applicationId = 2;
  void clear_applicationid();
  const std::string& applicationid() const;
  void set_applicationid(const std::string& value);
  void set_applicationid(std::string&& value);
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  std::string* mutable_applicationid();
  std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationApplicationRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organizationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrganizationApplicationRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationApplicationRsp) */ {
 public:
  inline RemoveOrganizationApplicationRsp() : RemoveOrganizationApplicationRsp(nullptr) {}
  virtual ~RemoveOrganizationApplicationRsp();

  RemoveOrganizationApplicationRsp(const RemoveOrganizationApplicationRsp& from);
  RemoveOrganizationApplicationRsp(RemoveOrganizationApplicationRsp&& from) noexcept
    : RemoveOrganizationApplicationRsp() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationApplicationRsp& operator=(const RemoveOrganizationApplicationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrganizationApplicationRsp& operator=(RemoveOrganizationApplicationRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveOrganizationApplicationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationApplicationRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationApplicationRsp*>(
               &_RemoveOrganizationApplicationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(RemoveOrganizationApplicationRsp& a, RemoveOrganizationApplicationRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrganizationApplicationRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrganizationApplicationRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationApplicationRsp* New() const final {
    return CreateMaybeMessage<RemoveOrganizationApplicationRsp>(nullptr);
  }

  RemoveOrganizationApplicationRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationApplicationRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveOrganizationApplicationRsp& from);
  void MergeFrom(const RemoveOrganizationApplicationRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationApplicationRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveOrganizationApplicationRsp";
  }
  protected:
  explicit RemoveOrganizationApplicationRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationApplicationRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrganizationAccountRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationAccountRqst) */ {
 public:
  inline RemoveOrganizationAccountRqst() : RemoveOrganizationAccountRqst(nullptr) {}
  virtual ~RemoveOrganizationAccountRqst();

  RemoveOrganizationAccountRqst(const RemoveOrganizationAccountRqst& from);
  RemoveOrganizationAccountRqst(RemoveOrganizationAccountRqst&& from) noexcept
    : RemoveOrganizationAccountRqst() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationAccountRqst& operator=(const RemoveOrganizationAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrganizationAccountRqst& operator=(RemoveOrganizationAccountRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveOrganizationAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationAccountRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationAccountRqst*>(
               &_RemoveOrganizationAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(RemoveOrganizationAccountRqst& a, RemoveOrganizationAccountRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrganizationAccountRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrganizationAccountRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationAccountRqst* New() const final {
    return CreateMaybeMessage<RemoveOrganizationAccountRqst>(nullptr);
  }

  RemoveOrganizationAccountRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationAccountRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveOrganizationAccountRqst& from);
  void MergeFrom(const RemoveOrganizationAccountRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationAccountRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveOrganizationAccountRqst";
  }
  protected:
  explicit RemoveOrganizationAccountRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // string organizationId = 1;
  void clear_organizationid();
  const std::string& organizationid() const;
  void set_organizationid(const std::string& value);
  void set_organizationid(std::string&& value);
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  std::string* mutable_organizationid();
  std::string* release_organizationid();
  void set_allocated_organizationid(std::string* organizationid);
  private:
  const std::string& _internal_organizationid() const;
  void _internal_set_organizationid(const std::string& value);
  std::string* _internal_mutable_organizationid();
  public:

  // string accountId = 2;
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationAccountRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organizationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrganizationAccountRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationAccountRsp) */ {
 public:
  inline RemoveOrganizationAccountRsp() : RemoveOrganizationAccountRsp(nullptr) {}
  virtual ~RemoveOrganizationAccountRsp();

  RemoveOrganizationAccountRsp(const RemoveOrganizationAccountRsp& from);
  RemoveOrganizationAccountRsp(RemoveOrganizationAccountRsp&& from) noexcept
    : RemoveOrganizationAccountRsp() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationAccountRsp& operator=(const RemoveOrganizationAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrganizationAccountRsp& operator=(RemoveOrganizationAccountRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveOrganizationAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationAccountRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationAccountRsp*>(
               &_RemoveOrganizationAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(RemoveOrganizationAccountRsp& a, RemoveOrganizationAccountRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrganizationAccountRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrganizationAccountRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationAccountRsp* New() const final {
    return CreateMaybeMessage<RemoveOrganizationAccountRsp>(nullptr);
  }

  RemoveOrganizationAccountRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationAccountRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveOrganizationAccountRsp& from);
  void MergeFrom(const RemoveOrganizationAccountRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationAccountRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.RemoveOrganizationAccountRsp";
  }
  protected:
  explicit RemoveOrganizationAccountRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_resource_2eproto);
    return ::descriptor_table_resource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationAccountRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserSyncInfos

// string base = 1;
inline void UserSyncInfos::clear_base() {
  base_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserSyncInfos::base() const {
  // @@protoc_insertion_point(field_get:resource.UserSyncInfos.base)
  return _internal_base();
}
inline void UserSyncInfos::set_base(const std::string& value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:resource.UserSyncInfos.base)
}
inline std::string* UserSyncInfos::mutable_base() {
  // @@protoc_insertion_point(field_mutable:resource.UserSyncInfos.base)
  return _internal_mutable_base();
}
inline const std::string& UserSyncInfos::_internal_base() const {
  return base_.Get();
}
inline void UserSyncInfos::_internal_set_base(const std::string& value) {
  
  base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserSyncInfos::set_base(std::string&& value) {
  
  base_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.UserSyncInfos.base)
}
inline void UserSyncInfos::set_base(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.UserSyncInfos.base)
}
inline void UserSyncInfos::set_base(const char* value,
    size_t size) {
  
  base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.UserSyncInfos.base)
}
inline std::string* UserSyncInfos::_internal_mutable_base() {
  
  return base_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserSyncInfos::release_base() {
  // @@protoc_insertion_point(field_release:resource.UserSyncInfos.base)
  return base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSyncInfos::set_allocated_base(std::string* base) {
  if (base != nullptr) {
    
  } else {
    
  }
  base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.UserSyncInfos.base)
}

// string query = 2;
inline void UserSyncInfos::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserSyncInfos::query() const {
  // @@protoc_insertion_point(field_get:resource.UserSyncInfos.query)
  return _internal_query();
}
inline void UserSyncInfos::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:resource.UserSyncInfos.query)
}
inline std::string* UserSyncInfos::mutable_query() {
  // @@protoc_insertion_point(field_mutable:resource.UserSyncInfos.query)
  return _internal_mutable_query();
}
inline const std::string& UserSyncInfos::_internal_query() const {
  return query_.Get();
}
inline void UserSyncInfos::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserSyncInfos::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.UserSyncInfos.query)
}
inline void UserSyncInfos::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.UserSyncInfos.query)
}
inline void UserSyncInfos::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.UserSyncInfos.query)
}
inline std::string* UserSyncInfos::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserSyncInfos::release_query() {
  // @@protoc_insertion_point(field_release:resource.UserSyncInfos.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSyncInfos::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.UserSyncInfos.query)
}

// string id = 3;
inline void UserSyncInfos::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserSyncInfos::id() const {
  // @@protoc_insertion_point(field_get:resource.UserSyncInfos.id)
  return _internal_id();
}
inline void UserSyncInfos::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resource.UserSyncInfos.id)
}
inline std::string* UserSyncInfos::mutable_id() {
  // @@protoc_insertion_point(field_mutable:resource.UserSyncInfos.id)
  return _internal_mutable_id();
}
inline const std::string& UserSyncInfos::_internal_id() const {
  return id_.Get();
}
inline void UserSyncInfos::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserSyncInfos::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.UserSyncInfos.id)
}
inline void UserSyncInfos::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.UserSyncInfos.id)
}
inline void UserSyncInfos::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.UserSyncInfos.id)
}
inline std::string* UserSyncInfos::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserSyncInfos::release_id() {
  // @@protoc_insertion_point(field_release:resource.UserSyncInfos.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSyncInfos::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.UserSyncInfos.id)
}

// string email = 4;
inline void UserSyncInfos::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserSyncInfos::email() const {
  // @@protoc_insertion_point(field_get:resource.UserSyncInfos.email)
  return _internal_email();
}
inline void UserSyncInfos::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:resource.UserSyncInfos.email)
}
inline std::string* UserSyncInfos::mutable_email() {
  // @@protoc_insertion_point(field_mutable:resource.UserSyncInfos.email)
  return _internal_mutable_email();
}
inline const std::string& UserSyncInfos::_internal_email() const {
  return email_.Get();
}
inline void UserSyncInfos::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserSyncInfos::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.UserSyncInfos.email)
}
inline void UserSyncInfos::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.UserSyncInfos.email)
}
inline void UserSyncInfos::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.UserSyncInfos.email)
}
inline std::string* UserSyncInfos::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserSyncInfos::release_email() {
  // @@protoc_insertion_point(field_release:resource.UserSyncInfos.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSyncInfos::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.UserSyncInfos.email)
}

// -------------------------------------------------------------------

// GroupSyncInfos

// string base = 1;
inline void GroupSyncInfos::clear_base() {
  base_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupSyncInfos::base() const {
  // @@protoc_insertion_point(field_get:resource.GroupSyncInfos.base)
  return _internal_base();
}
inline void GroupSyncInfos::set_base(const std::string& value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:resource.GroupSyncInfos.base)
}
inline std::string* GroupSyncInfos::mutable_base() {
  // @@protoc_insertion_point(field_mutable:resource.GroupSyncInfos.base)
  return _internal_mutable_base();
}
inline const std::string& GroupSyncInfos::_internal_base() const {
  return base_.Get();
}
inline void GroupSyncInfos::_internal_set_base(const std::string& value) {
  
  base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupSyncInfos::set_base(std::string&& value) {
  
  base_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.GroupSyncInfos.base)
}
inline void GroupSyncInfos::set_base(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.GroupSyncInfos.base)
}
inline void GroupSyncInfos::set_base(const char* value,
    size_t size) {
  
  base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.GroupSyncInfos.base)
}
inline std::string* GroupSyncInfos::_internal_mutable_base() {
  
  return base_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupSyncInfos::release_base() {
  // @@protoc_insertion_point(field_release:resource.GroupSyncInfos.base)
  return base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupSyncInfos::set_allocated_base(std::string* base) {
  if (base != nullptr) {
    
  } else {
    
  }
  base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.GroupSyncInfos.base)
}

// string query = 2;
inline void GroupSyncInfos::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupSyncInfos::query() const {
  // @@protoc_insertion_point(field_get:resource.GroupSyncInfos.query)
  return _internal_query();
}
inline void GroupSyncInfos::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:resource.GroupSyncInfos.query)
}
inline std::string* GroupSyncInfos::mutable_query() {
  // @@protoc_insertion_point(field_mutable:resource.GroupSyncInfos.query)
  return _internal_mutable_query();
}
inline const std::string& GroupSyncInfos::_internal_query() const {
  return query_.Get();
}
inline void GroupSyncInfos::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupSyncInfos::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.GroupSyncInfos.query)
}
inline void GroupSyncInfos::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.GroupSyncInfos.query)
}
inline void GroupSyncInfos::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.GroupSyncInfos.query)
}
inline std::string* GroupSyncInfos::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupSyncInfos::release_query() {
  // @@protoc_insertion_point(field_release:resource.GroupSyncInfos.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupSyncInfos::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.GroupSyncInfos.query)
}

// string id = 3;
inline void GroupSyncInfos::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupSyncInfos::id() const {
  // @@protoc_insertion_point(field_get:resource.GroupSyncInfos.id)
  return _internal_id();
}
inline void GroupSyncInfos::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resource.GroupSyncInfos.id)
}
inline std::string* GroupSyncInfos::mutable_id() {
  // @@protoc_insertion_point(field_mutable:resource.GroupSyncInfos.id)
  return _internal_mutable_id();
}
inline const std::string& GroupSyncInfos::_internal_id() const {
  return id_.Get();
}
inline void GroupSyncInfos::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupSyncInfos::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.GroupSyncInfos.id)
}
inline void GroupSyncInfos::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.GroupSyncInfos.id)
}
inline void GroupSyncInfos::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.GroupSyncInfos.id)
}
inline std::string* GroupSyncInfos::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupSyncInfos::release_id() {
  // @@protoc_insertion_point(field_release:resource.GroupSyncInfos.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupSyncInfos::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.GroupSyncInfos.id)
}

// -------------------------------------------------------------------

// LdapSyncInfos

// string ldapSeriveId = 1;
inline void LdapSyncInfos::clear_ldapseriveid() {
  ldapseriveid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LdapSyncInfos::ldapseriveid() const {
  // @@protoc_insertion_point(field_get:resource.LdapSyncInfos.ldapSeriveId)
  return _internal_ldapseriveid();
}
inline void LdapSyncInfos::set_ldapseriveid(const std::string& value) {
  _internal_set_ldapseriveid(value);
  // @@protoc_insertion_point(field_set:resource.LdapSyncInfos.ldapSeriveId)
}
inline std::string* LdapSyncInfos::mutable_ldapseriveid() {
  // @@protoc_insertion_point(field_mutable:resource.LdapSyncInfos.ldapSeriveId)
  return _internal_mutable_ldapseriveid();
}
inline const std::string& LdapSyncInfos::_internal_ldapseriveid() const {
  return ldapseriveid_.Get();
}
inline void LdapSyncInfos::_internal_set_ldapseriveid(const std::string& value) {
  
  ldapseriveid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LdapSyncInfos::set_ldapseriveid(std::string&& value) {
  
  ldapseriveid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.LdapSyncInfos.ldapSeriveId)
}
inline void LdapSyncInfos::set_ldapseriveid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ldapseriveid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.LdapSyncInfos.ldapSeriveId)
}
inline void LdapSyncInfos::set_ldapseriveid(const char* value,
    size_t size) {
  
  ldapseriveid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.LdapSyncInfos.ldapSeriveId)
}
inline std::string* LdapSyncInfos::_internal_mutable_ldapseriveid() {
  
  return ldapseriveid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LdapSyncInfos::release_ldapseriveid() {
  // @@protoc_insertion_point(field_release:resource.LdapSyncInfos.ldapSeriveId)
  return ldapseriveid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LdapSyncInfos::set_allocated_ldapseriveid(std::string* ldapseriveid) {
  if (ldapseriveid != nullptr) {
    
  } else {
    
  }
  ldapseriveid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ldapseriveid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.LdapSyncInfos.ldapSeriveId)
}

// string connectionId = 2;
inline void LdapSyncInfos::clear_connectionid() {
  connectionid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LdapSyncInfos::connectionid() const {
  // @@protoc_insertion_point(field_get:resource.LdapSyncInfos.connectionId)
  return _internal_connectionid();
}
inline void LdapSyncInfos::set_connectionid(const std::string& value) {
  _internal_set_connectionid(value);
  // @@protoc_insertion_point(field_set:resource.LdapSyncInfos.connectionId)
}
inline std::string* LdapSyncInfos::mutable_connectionid() {
  // @@protoc_insertion_point(field_mutable:resource.LdapSyncInfos.connectionId)
  return _internal_mutable_connectionid();
}
inline const std::string& LdapSyncInfos::_internal_connectionid() const {
  return connectionid_.Get();
}
inline void LdapSyncInfos::_internal_set_connectionid(const std::string& value) {
  
  connectionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LdapSyncInfos::set_connectionid(std::string&& value) {
  
  connectionid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.LdapSyncInfos.connectionId)
}
inline void LdapSyncInfos::set_connectionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connectionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.LdapSyncInfos.connectionId)
}
inline void LdapSyncInfos::set_connectionid(const char* value,
    size_t size) {
  
  connectionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.LdapSyncInfos.connectionId)
}
inline std::string* LdapSyncInfos::_internal_mutable_connectionid() {
  
  return connectionid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LdapSyncInfos::release_connectionid() {
  // @@protoc_insertion_point(field_release:resource.LdapSyncInfos.connectionId)
  return connectionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LdapSyncInfos::set_allocated_connectionid(std::string* connectionid) {
  if (connectionid != nullptr) {
    
  } else {
    
  }
  connectionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connectionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.LdapSyncInfos.connectionId)
}

// int32 refresh = 3;
inline void LdapSyncInfos::clear_refresh() {
  refresh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LdapSyncInfos::_internal_refresh() const {
  return refresh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LdapSyncInfos::refresh() const {
  // @@protoc_insertion_point(field_get:resource.LdapSyncInfos.refresh)
  return _internal_refresh();
}
inline void LdapSyncInfos::_internal_set_refresh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  refresh_ = value;
}
inline void LdapSyncInfos::set_refresh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refresh(value);
  // @@protoc_insertion_point(field_set:resource.LdapSyncInfos.refresh)
}

// .resource.UserSyncInfos userSyncInfos = 4;
inline bool LdapSyncInfos::_internal_has_usersyncinfos() const {
  return this != internal_default_instance() && usersyncinfos_ != nullptr;
}
inline bool LdapSyncInfos::has_usersyncinfos() const {
  return _internal_has_usersyncinfos();
}
inline void LdapSyncInfos::clear_usersyncinfos() {
  if (GetArena() == nullptr && usersyncinfos_ != nullptr) {
    delete usersyncinfos_;
  }
  usersyncinfos_ = nullptr;
}
inline const ::resource::UserSyncInfos& LdapSyncInfos::_internal_usersyncinfos() const {
  const ::resource::UserSyncInfos* p = usersyncinfos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::resource::UserSyncInfos*>(
      &::resource::_UserSyncInfos_default_instance_);
}
inline const ::resource::UserSyncInfos& LdapSyncInfos::usersyncinfos() const {
  // @@protoc_insertion_point(field_get:resource.LdapSyncInfos.userSyncInfos)
  return _internal_usersyncinfos();
}
inline void LdapSyncInfos::unsafe_arena_set_allocated_usersyncinfos(
    ::resource::UserSyncInfos* usersyncinfos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usersyncinfos_);
  }
  usersyncinfos_ = usersyncinfos;
  if (usersyncinfos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resource.LdapSyncInfos.userSyncInfos)
}
inline ::resource::UserSyncInfos* LdapSyncInfos::release_usersyncinfos() {
  
  ::resource::UserSyncInfos* temp = usersyncinfos_;
  usersyncinfos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resource::UserSyncInfos* LdapSyncInfos::unsafe_arena_release_usersyncinfos() {
  // @@protoc_insertion_point(field_release:resource.LdapSyncInfos.userSyncInfos)
  
  ::resource::UserSyncInfos* temp = usersyncinfos_;
  usersyncinfos_ = nullptr;
  return temp;
}
inline ::resource::UserSyncInfos* LdapSyncInfos::_internal_mutable_usersyncinfos() {
  
  if (usersyncinfos_ == nullptr) {
    auto* p = CreateMaybeMessage<::resource::UserSyncInfos>(GetArena());
    usersyncinfos_ = p;
  }
  return usersyncinfos_;
}
inline ::resource::UserSyncInfos* LdapSyncInfos::mutable_usersyncinfos() {
  // @@protoc_insertion_point(field_mutable:resource.LdapSyncInfos.userSyncInfos)
  return _internal_mutable_usersyncinfos();
}
inline void LdapSyncInfos::set_allocated_usersyncinfos(::resource::UserSyncInfos* usersyncinfos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete usersyncinfos_;
  }
  if (usersyncinfos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(usersyncinfos);
    if (message_arena != submessage_arena) {
      usersyncinfos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usersyncinfos, submessage_arena);
    }
    
  } else {
    
  }
  usersyncinfos_ = usersyncinfos;
  // @@protoc_insertion_point(field_set_allocated:resource.LdapSyncInfos.userSyncInfos)
}

// .resource.GroupSyncInfos groupSyncInfos = 5;
inline bool LdapSyncInfos::_internal_has_groupsyncinfos() const {
  return this != internal_default_instance() && groupsyncinfos_ != nullptr;
}
inline bool LdapSyncInfos::has_groupsyncinfos() const {
  return _internal_has_groupsyncinfos();
}
inline void LdapSyncInfos::clear_groupsyncinfos() {
  if (GetArena() == nullptr && groupsyncinfos_ != nullptr) {
    delete groupsyncinfos_;
  }
  groupsyncinfos_ = nullptr;
}
inline const ::resource::GroupSyncInfos& LdapSyncInfos::_internal_groupsyncinfos() const {
  const ::resource::GroupSyncInfos* p = groupsyncinfos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::resource::GroupSyncInfos*>(
      &::resource::_GroupSyncInfos_default_instance_);
}
inline const ::resource::GroupSyncInfos& LdapSyncInfos::groupsyncinfos() const {
  // @@protoc_insertion_point(field_get:resource.LdapSyncInfos.groupSyncInfos)
  return _internal_groupsyncinfos();
}
inline void LdapSyncInfos::unsafe_arena_set_allocated_groupsyncinfos(
    ::resource::GroupSyncInfos* groupsyncinfos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupsyncinfos_);
  }
  groupsyncinfos_ = groupsyncinfos;
  if (groupsyncinfos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resource.LdapSyncInfos.groupSyncInfos)
}
inline ::resource::GroupSyncInfos* LdapSyncInfos::release_groupsyncinfos() {
  
  ::resource::GroupSyncInfos* temp = groupsyncinfos_;
  groupsyncinfos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resource::GroupSyncInfos* LdapSyncInfos::unsafe_arena_release_groupsyncinfos() {
  // @@protoc_insertion_point(field_release:resource.LdapSyncInfos.groupSyncInfos)
  
  ::resource::GroupSyncInfos* temp = groupsyncinfos_;
  groupsyncinfos_ = nullptr;
  return temp;
}
inline ::resource::GroupSyncInfos* LdapSyncInfos::_internal_mutable_groupsyncinfos() {
  
  if (groupsyncinfos_ == nullptr) {
    auto* p = CreateMaybeMessage<::resource::GroupSyncInfos>(GetArena());
    groupsyncinfos_ = p;
  }
  return groupsyncinfos_;
}
inline ::resource::GroupSyncInfos* LdapSyncInfos::mutable_groupsyncinfos() {
  // @@protoc_insertion_point(field_mutable:resource.LdapSyncInfos.groupSyncInfos)
  return _internal_mutable_groupsyncinfos();
}
inline void LdapSyncInfos::set_allocated_groupsyncinfos(::resource::GroupSyncInfos* groupsyncinfos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete groupsyncinfos_;
  }
  if (groupsyncinfos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groupsyncinfos);
    if (message_arena != submessage_arena) {
      groupsyncinfos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupsyncinfos, submessage_arena);
    }
    
  } else {
    
  }
  groupsyncinfos_ = groupsyncinfos;
  // @@protoc_insertion_point(field_set_allocated:resource.LdapSyncInfos.groupSyncInfos)
}

// -------------------------------------------------------------------

// SynchronizeLdapRqst

// .resource.LdapSyncInfos syncInfo = 1;
inline bool SynchronizeLdapRqst::_internal_has_syncinfo() const {
  return this != internal_default_instance() && syncinfo_ != nullptr;
}
inline bool SynchronizeLdapRqst::has_syncinfo() const {
  return _internal_has_syncinfo();
}
inline void SynchronizeLdapRqst::clear_syncinfo() {
  if (GetArena() == nullptr && syncinfo_ != nullptr) {
    delete syncinfo_;
  }
  syncinfo_ = nullptr;
}
inline const ::resource::LdapSyncInfos& SynchronizeLdapRqst::_internal_syncinfo() const {
  const ::resource::LdapSyncInfos* p = syncinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::resource::LdapSyncInfos*>(
      &::resource::_LdapSyncInfos_default_instance_);
}
inline const ::resource::LdapSyncInfos& SynchronizeLdapRqst::syncinfo() const {
  // @@protoc_insertion_point(field_get:resource.SynchronizeLdapRqst.syncInfo)
  return _internal_syncinfo();
}
inline void SynchronizeLdapRqst::unsafe_arena_set_allocated_syncinfo(
    ::resource::LdapSyncInfos* syncinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(syncinfo_);
  }
  syncinfo_ = syncinfo;
  if (syncinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resource.SynchronizeLdapRqst.syncInfo)
}
inline ::resource::LdapSyncInfos* SynchronizeLdapRqst::release_syncinfo() {
  
  ::resource::LdapSyncInfos* temp = syncinfo_;
  syncinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resource::LdapSyncInfos* SynchronizeLdapRqst::unsafe_arena_release_syncinfo() {
  // @@protoc_insertion_point(field_release:resource.SynchronizeLdapRqst.syncInfo)
  
  ::resource::LdapSyncInfos* temp = syncinfo_;
  syncinfo_ = nullptr;
  return temp;
}
inline ::resource::LdapSyncInfos* SynchronizeLdapRqst::_internal_mutable_syncinfo() {
  
  if (syncinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::resource::LdapSyncInfos>(GetArena());
    syncinfo_ = p;
  }
  return syncinfo_;
}
inline ::resource::LdapSyncInfos* SynchronizeLdapRqst::mutable_syncinfo() {
  // @@protoc_insertion_point(field_mutable:resource.SynchronizeLdapRqst.syncInfo)
  return _internal_mutable_syncinfo();
}
inline void SynchronizeLdapRqst::set_allocated_syncinfo(::resource::LdapSyncInfos* syncinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete syncinfo_;
  }
  if (syncinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(syncinfo);
    if (message_arena != submessage_arena) {
      syncinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncinfo, submessage_arena);
    }
    
  } else {
    
  }
  syncinfo_ = syncinfo;
  // @@protoc_insertion_point(field_set_allocated:resource.SynchronizeLdapRqst.syncInfo)
}

// -------------------------------------------------------------------

// SynchronizeLdapRsp

// bool result = 1;
inline void SynchronizeLdapRsp::clear_result() {
  result_ = false;
}
inline bool SynchronizeLdapRsp::_internal_result() const {
  return result_;
}
inline bool SynchronizeLdapRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.SynchronizeLdapRsp.result)
  return _internal_result();
}
inline void SynchronizeLdapRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void SynchronizeLdapRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.SynchronizeLdapRsp.result)
}

// -------------------------------------------------------------------

// ValidateTokenRqst

// string token = 1;
inline void ValidateTokenRqst::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateTokenRqst::token() const {
  // @@protoc_insertion_point(field_get:resource.ValidateTokenRqst.token)
  return _internal_token();
}
inline void ValidateTokenRqst::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:resource.ValidateTokenRqst.token)
}
inline std::string* ValidateTokenRqst::mutable_token() {
  // @@protoc_insertion_point(field_mutable:resource.ValidateTokenRqst.token)
  return _internal_mutable_token();
}
inline const std::string& ValidateTokenRqst::_internal_token() const {
  return token_.Get();
}
inline void ValidateTokenRqst::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateTokenRqst::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.ValidateTokenRqst.token)
}
inline void ValidateTokenRqst::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.ValidateTokenRqst.token)
}
inline void ValidateTokenRqst::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.ValidateTokenRqst.token)
}
inline std::string* ValidateTokenRqst::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateTokenRqst::release_token() {
  // @@protoc_insertion_point(field_release:resource.ValidateTokenRqst.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateTokenRqst::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.ValidateTokenRqst.token)
}

// -------------------------------------------------------------------

// ValidateTokenRsp

// string clientId = 1;
inline void ValidateTokenRsp::clear_clientid() {
  clientid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateTokenRsp::clientid() const {
  // @@protoc_insertion_point(field_get:resource.ValidateTokenRsp.clientId)
  return _internal_clientid();
}
inline void ValidateTokenRsp::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:resource.ValidateTokenRsp.clientId)
}
inline std::string* ValidateTokenRsp::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:resource.ValidateTokenRsp.clientId)
  return _internal_mutable_clientid();
}
inline const std::string& ValidateTokenRsp::_internal_clientid() const {
  return clientid_.Get();
}
inline void ValidateTokenRsp::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateTokenRsp::set_clientid(std::string&& value) {
  
  clientid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.ValidateTokenRsp.clientId)
}
inline void ValidateTokenRsp::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.ValidateTokenRsp.clientId)
}
inline void ValidateTokenRsp::set_clientid(const char* value,
    size_t size) {
  
  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.ValidateTokenRsp.clientId)
}
inline std::string* ValidateTokenRsp::_internal_mutable_clientid() {
  
  return clientid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateTokenRsp::release_clientid() {
  // @@protoc_insertion_point(field_release:resource.ValidateTokenRsp.clientId)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateTokenRsp::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.ValidateTokenRsp.clientId)
}

// int64 expired = 2;
inline void ValidateTokenRsp::clear_expired() {
  expired_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValidateTokenRsp::_internal_expired() const {
  return expired_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValidateTokenRsp::expired() const {
  // @@protoc_insertion_point(field_get:resource.ValidateTokenRsp.expired)
  return _internal_expired();
}
inline void ValidateTokenRsp::_internal_set_expired(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expired_ = value;
}
inline void ValidateTokenRsp::set_expired(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expired(value);
  // @@protoc_insertion_point(field_set:resource.ValidateTokenRsp.expired)
}

// -------------------------------------------------------------------

// GetAllActionsRqst

// -------------------------------------------------------------------

// GetAllActionsRsp

// repeated string actions = 1;
inline int GetAllActionsRsp::_internal_actions_size() const {
  return actions_.size();
}
inline int GetAllActionsRsp::actions_size() const {
  return _internal_actions_size();
}
inline void GetAllActionsRsp::clear_actions() {
  actions_.Clear();
}
inline std::string* GetAllActionsRsp::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:resource.GetAllActionsRsp.actions)
  return _internal_add_actions();
}
inline const std::string& GetAllActionsRsp::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const std::string& GetAllActionsRsp::actions(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetAllActionsRsp.actions)
  return _internal_actions(index);
}
inline std::string* GetAllActionsRsp::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetAllActionsRsp.actions)
  return actions_.Mutable(index);
}
inline void GetAllActionsRsp::set_actions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:resource.GetAllActionsRsp.actions)
  actions_.Mutable(index)->assign(value);
}
inline void GetAllActionsRsp::set_actions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.GetAllActionsRsp.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
inline void GetAllActionsRsp::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.GetAllActionsRsp.actions)
}
inline void GetAllActionsRsp::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.GetAllActionsRsp.actions)
}
inline std::string* GetAllActionsRsp::_internal_add_actions() {
  return actions_.Add();
}
inline void GetAllActionsRsp::add_actions(const std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.GetAllActionsRsp.actions)
}
inline void GetAllActionsRsp::add_actions(std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.GetAllActionsRsp.actions)
}
inline void GetAllActionsRsp::add_actions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.GetAllActionsRsp.actions)
}
inline void GetAllActionsRsp::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.GetAllActionsRsp.actions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAllActionsRsp::actions() const {
  // @@protoc_insertion_point(field_list:resource.GetAllActionsRsp.actions)
  return actions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAllActionsRsp::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetAllActionsRsp.actions)
  return &actions_;
}

// -------------------------------------------------------------------

// Account

// string id = 1;
inline void Account::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Account::id() const {
  // @@protoc_insertion_point(field_get:resource.Account.id)
  return _internal_id();
}
inline void Account::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resource.Account.id)
}
inline std::string* Account::mutable_id() {
  // @@protoc_insertion_point(field_mutable:resource.Account.id)
  return _internal_mutable_id();
}
inline const std::string& Account::_internal_id() const {
  return id_.Get();
}
inline void Account::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Account::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.Account.id)
}
inline void Account::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.Account.id)
}
inline void Account::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.Account.id)
}
inline std::string* Account::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Account::release_id() {
  // @@protoc_insertion_point(field_release:resource.Account.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.Account.id)
}

// string name = 2;
inline void Account::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Account::name() const {
  // @@protoc_insertion_point(field_get:resource.Account.name)
  return _internal_name();
}
inline void Account::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:resource.Account.name)
}
inline std::string* Account::mutable_name() {
  // @@protoc_insertion_point(field_mutable:resource.Account.name)
  return _internal_mutable_name();
}
inline const std::string& Account::_internal_name() const {
  return name_.Get();
}
inline void Account::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Account::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.Account.name)
}
inline void Account::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.Account.name)
}
inline void Account::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.Account.name)
}
inline std::string* Account::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Account::release_name() {
  // @@protoc_insertion_point(field_release:resource.Account.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.Account.name)
}

// string email = 3;
inline void Account::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Account::email() const {
  // @@protoc_insertion_point(field_get:resource.Account.email)
  return _internal_email();
}
inline void Account::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:resource.Account.email)
}
inline std::string* Account::mutable_email() {
  // @@protoc_insertion_point(field_mutable:resource.Account.email)
  return _internal_mutable_email();
}
inline const std::string& Account::_internal_email() const {
  return email_.Get();
}
inline void Account::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Account::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.Account.email)
}
inline void Account::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.Account.email)
}
inline void Account::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.Account.email)
}
inline std::string* Account::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Account::release_email() {
  // @@protoc_insertion_point(field_release:resource.Account.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.Account.email)
}

// string password = 4;
inline void Account::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Account::password() const {
  // @@protoc_insertion_point(field_get:resource.Account.password)
  return _internal_password();
}
inline void Account::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:resource.Account.password)
}
inline std::string* Account::mutable_password() {
  // @@protoc_insertion_point(field_mutable:resource.Account.password)
  return _internal_mutable_password();
}
inline const std::string& Account::_internal_password() const {
  return password_.Get();
}
inline void Account::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Account::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.Account.password)
}
inline void Account::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.Account.password)
}
inline void Account::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.Account.password)
}
inline std::string* Account::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Account::release_password() {
  // @@protoc_insertion_point(field_release:resource.Account.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.Account.password)
}

// -------------------------------------------------------------------

// Role

// string id = 1;
inline void Role::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Role::id() const {
  // @@protoc_insertion_point(field_get:resource.Role.id)
  return _internal_id();
}
inline void Role::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resource.Role.id)
}
inline std::string* Role::mutable_id() {
  // @@protoc_insertion_point(field_mutable:resource.Role.id)
  return _internal_mutable_id();
}
inline const std::string& Role::_internal_id() const {
  return id_.Get();
}
inline void Role::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Role::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.Role.id)
}
inline void Role::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.Role.id)
}
inline void Role::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.Role.id)
}
inline std::string* Role::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Role::release_id() {
  // @@protoc_insertion_point(field_release:resource.Role.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Role::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.Role.id)
}

// string name = 2;
inline void Role::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:resource.Role.name)
  return _internal_name();
}
inline void Role::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:resource.Role.name)
}
inline std::string* Role::mutable_name() {
  // @@protoc_insertion_point(field_mutable:resource.Role.name)
  return _internal_mutable_name();
}
inline const std::string& Role::_internal_name() const {
  return name_.Get();
}
inline void Role::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Role::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.Role.name)
}
inline void Role::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.Role.name)
}
inline void Role::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.Role.name)
}
inline std::string* Role::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:resource.Role.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Role::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.Role.name)
}

// repeated string actions = 3;
inline int Role::_internal_actions_size() const {
  return actions_.size();
}
inline int Role::actions_size() const {
  return _internal_actions_size();
}
inline void Role::clear_actions() {
  actions_.Clear();
}
inline std::string* Role::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:resource.Role.actions)
  return _internal_add_actions();
}
inline const std::string& Role::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const std::string& Role::actions(int index) const {
  // @@protoc_insertion_point(field_get:resource.Role.actions)
  return _internal_actions(index);
}
inline std::string* Role::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Role.actions)
  return actions_.Mutable(index);
}
inline void Role::set_actions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Role.actions)
  actions_.Mutable(index)->assign(value);
}
inline void Role::set_actions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Role.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
inline void Role::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Role.actions)
}
inline void Role::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Role.actions)
}
inline std::string* Role::_internal_add_actions() {
  return actions_.Add();
}
inline void Role::add_actions(const std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Role.actions)
}
inline void Role::add_actions(std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Role.actions)
}
inline void Role::add_actions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Role.actions)
}
inline void Role::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Role.actions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Role::actions() const {
  // @@protoc_insertion_point(field_list:resource.Role.actions)
  return actions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Role::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:resource.Role.actions)
  return &actions_;
}

// -------------------------------------------------------------------

// RegisterAccountRqst

// .resource.Account account = 1;
inline bool RegisterAccountRqst::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool RegisterAccountRqst::has_account() const {
  return _internal_has_account();
}
inline void RegisterAccountRqst::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::resource::Account& RegisterAccountRqst::_internal_account() const {
  const ::resource::Account* p = account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::resource::Account*>(
      &::resource::_Account_default_instance_);
}
inline const ::resource::Account& RegisterAccountRqst::account() const {
  // @@protoc_insertion_point(field_get:resource.RegisterAccountRqst.account)
  return _internal_account();
}
inline void RegisterAccountRqst::unsafe_arena_set_allocated_account(
    ::resource::Account* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resource.RegisterAccountRqst.account)
}
inline ::resource::Account* RegisterAccountRqst::release_account() {
  
  ::resource::Account* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resource::Account* RegisterAccountRqst::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:resource.RegisterAccountRqst.account)
  
  ::resource::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::resource::Account* RegisterAccountRqst::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::resource::Account>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::resource::Account* RegisterAccountRqst::mutable_account() {
  // @@protoc_insertion_point(field_mutable:resource.RegisterAccountRqst.account)
  return _internal_mutable_account();
}
inline void RegisterAccountRqst::set_allocated_account(::resource::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:resource.RegisterAccountRqst.account)
}

// string confirm_password = 3;
inline void RegisterAccountRqst::clear_confirm_password() {
  confirm_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterAccountRqst::confirm_password() const {
  // @@protoc_insertion_point(field_get:resource.RegisterAccountRqst.confirm_password)
  return _internal_confirm_password();
}
inline void RegisterAccountRqst::set_confirm_password(const std::string& value) {
  _internal_set_confirm_password(value);
  // @@protoc_insertion_point(field_set:resource.RegisterAccountRqst.confirm_password)
}
inline std::string* RegisterAccountRqst::mutable_confirm_password() {
  // @@protoc_insertion_point(field_mutable:resource.RegisterAccountRqst.confirm_password)
  return _internal_mutable_confirm_password();
}
inline const std::string& RegisterAccountRqst::_internal_confirm_password() const {
  return confirm_password_.Get();
}
inline void RegisterAccountRqst::_internal_set_confirm_password(const std::string& value) {
  
  confirm_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterAccountRqst::set_confirm_password(std::string&& value) {
  
  confirm_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RegisterAccountRqst.confirm_password)
}
inline void RegisterAccountRqst::set_confirm_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  confirm_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RegisterAccountRqst.confirm_password)
}
inline void RegisterAccountRqst::set_confirm_password(const char* value,
    size_t size) {
  
  confirm_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RegisterAccountRqst.confirm_password)
}
inline std::string* RegisterAccountRqst::_internal_mutable_confirm_password() {
  
  return confirm_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterAccountRqst::release_confirm_password() {
  // @@protoc_insertion_point(field_release:resource.RegisterAccountRqst.confirm_password)
  return confirm_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterAccountRqst::set_allocated_confirm_password(std::string* confirm_password) {
  if (confirm_password != nullptr) {
    
  } else {
    
  }
  confirm_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), confirm_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RegisterAccountRqst.confirm_password)
}

// -------------------------------------------------------------------

// RegisterAccountRsp

// string result = 1;
inline void RegisterAccountRsp::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RegisterAccountRsp.result)
  return _internal_result();
}
inline void RegisterAccountRsp::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.RegisterAccountRsp.result)
}
inline std::string* RegisterAccountRsp::mutable_result() {
  // @@protoc_insertion_point(field_mutable:resource.RegisterAccountRsp.result)
  return _internal_mutable_result();
}
inline const std::string& RegisterAccountRsp::_internal_result() const {
  return result_.Get();
}
inline void RegisterAccountRsp::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterAccountRsp::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RegisterAccountRsp.result)
}
inline void RegisterAccountRsp::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RegisterAccountRsp.result)
}
inline void RegisterAccountRsp::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RegisterAccountRsp.result)
}
inline std::string* RegisterAccountRsp::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterAccountRsp::release_result() {
  // @@protoc_insertion_point(field_release:resource.RegisterAccountRsp.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterAccountRsp::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RegisterAccountRsp.result)
}

// -------------------------------------------------------------------

// DeleteAccountRqst

// string id = 1;
inline void DeleteAccountRqst::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteAccountRqst::id() const {
  // @@protoc_insertion_point(field_get:resource.DeleteAccountRqst.id)
  return _internal_id();
}
inline void DeleteAccountRqst::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resource.DeleteAccountRqst.id)
}
inline std::string* DeleteAccountRqst::mutable_id() {
  // @@protoc_insertion_point(field_mutable:resource.DeleteAccountRqst.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteAccountRqst::_internal_id() const {
  return id_.Get();
}
inline void DeleteAccountRqst::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteAccountRqst::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteAccountRqst.id)
}
inline void DeleteAccountRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.DeleteAccountRqst.id)
}
inline void DeleteAccountRqst::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteAccountRqst.id)
}
inline std::string* DeleteAccountRqst::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteAccountRqst::release_id() {
  // @@protoc_insertion_point(field_release:resource.DeleteAccountRqst.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteAccountRqst::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteAccountRqst.id)
}

// -------------------------------------------------------------------

// DeleteAccountRsp

// string result = 1;
inline void DeleteAccountRsp::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.DeleteAccountRsp.result)
  return _internal_result();
}
inline void DeleteAccountRsp::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.DeleteAccountRsp.result)
}
inline std::string* DeleteAccountRsp::mutable_result() {
  // @@protoc_insertion_point(field_mutable:resource.DeleteAccountRsp.result)
  return _internal_mutable_result();
}
inline const std::string& DeleteAccountRsp::_internal_result() const {
  return result_.Get();
}
inline void DeleteAccountRsp::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteAccountRsp::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteAccountRsp.result)
}
inline void DeleteAccountRsp::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.DeleteAccountRsp.result)
}
inline void DeleteAccountRsp::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteAccountRsp.result)
}
inline std::string* DeleteAccountRsp::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteAccountRsp::release_result() {
  // @@protoc_insertion_point(field_release:resource.DeleteAccountRsp.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteAccountRsp::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteAccountRsp.result)
}

// -------------------------------------------------------------------

// AuthenticateRqst

// string name = 1;
inline void AuthenticateRqst::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRqst::name() const {
  // @@protoc_insertion_point(field_get:resource.AuthenticateRqst.name)
  return _internal_name();
}
inline void AuthenticateRqst::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:resource.AuthenticateRqst.name)
}
inline std::string* AuthenticateRqst::mutable_name() {
  // @@protoc_insertion_point(field_mutable:resource.AuthenticateRqst.name)
  return _internal_mutable_name();
}
inline const std::string& AuthenticateRqst::_internal_name() const {
  return name_.Get();
}
inline void AuthenticateRqst::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRqst::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AuthenticateRqst.name)
}
inline void AuthenticateRqst::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AuthenticateRqst.name)
}
inline void AuthenticateRqst::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AuthenticateRqst.name)
}
inline std::string* AuthenticateRqst::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRqst::release_name() {
  // @@protoc_insertion_point(field_release:resource.AuthenticateRqst.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRqst::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AuthenticateRqst.name)
}

// string password = 2;
inline void AuthenticateRqst::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRqst::password() const {
  // @@protoc_insertion_point(field_get:resource.AuthenticateRqst.password)
  return _internal_password();
}
inline void AuthenticateRqst::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:resource.AuthenticateRqst.password)
}
inline std::string* AuthenticateRqst::mutable_password() {
  // @@protoc_insertion_point(field_mutable:resource.AuthenticateRqst.password)
  return _internal_mutable_password();
}
inline const std::string& AuthenticateRqst::_internal_password() const {
  return password_.Get();
}
inline void AuthenticateRqst::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRqst::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AuthenticateRqst.password)
}
inline void AuthenticateRqst::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AuthenticateRqst.password)
}
inline void AuthenticateRqst::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AuthenticateRqst.password)
}
inline std::string* AuthenticateRqst::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRqst::release_password() {
  // @@protoc_insertion_point(field_release:resource.AuthenticateRqst.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRqst::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AuthenticateRqst.password)
}

// -------------------------------------------------------------------

// AuthenticateRsp

// string token = 1;
inline void AuthenticateRsp::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRsp::token() const {
  // @@protoc_insertion_point(field_get:resource.AuthenticateRsp.token)
  return _internal_token();
}
inline void AuthenticateRsp::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:resource.AuthenticateRsp.token)
}
inline std::string* AuthenticateRsp::mutable_token() {
  // @@protoc_insertion_point(field_mutable:resource.AuthenticateRsp.token)
  return _internal_mutable_token();
}
inline const std::string& AuthenticateRsp::_internal_token() const {
  return token_.Get();
}
inline void AuthenticateRsp::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRsp::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AuthenticateRsp.token)
}
inline void AuthenticateRsp::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AuthenticateRsp.token)
}
inline void AuthenticateRsp::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AuthenticateRsp.token)
}
inline std::string* AuthenticateRsp::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRsp::release_token() {
  // @@protoc_insertion_point(field_release:resource.AuthenticateRsp.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRsp::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AuthenticateRsp.token)
}

// -------------------------------------------------------------------

// RefreshTokenRqst

// string token = 1;
inline void RefreshTokenRqst::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RefreshTokenRqst::token() const {
  // @@protoc_insertion_point(field_get:resource.RefreshTokenRqst.token)
  return _internal_token();
}
inline void RefreshTokenRqst::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:resource.RefreshTokenRqst.token)
}
inline std::string* RefreshTokenRqst::mutable_token() {
  // @@protoc_insertion_point(field_mutable:resource.RefreshTokenRqst.token)
  return _internal_mutable_token();
}
inline const std::string& RefreshTokenRqst::_internal_token() const {
  return token_.Get();
}
inline void RefreshTokenRqst::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RefreshTokenRqst::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RefreshTokenRqst.token)
}
inline void RefreshTokenRqst::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RefreshTokenRqst.token)
}
inline void RefreshTokenRqst::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RefreshTokenRqst.token)
}
inline std::string* RefreshTokenRqst::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RefreshTokenRqst::release_token() {
  // @@protoc_insertion_point(field_release:resource.RefreshTokenRqst.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshTokenRqst::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RefreshTokenRqst.token)
}

// -------------------------------------------------------------------

// RefreshTokenRsp

// string token = 1;
inline void RefreshTokenRsp::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RefreshTokenRsp::token() const {
  // @@protoc_insertion_point(field_get:resource.RefreshTokenRsp.token)
  return _internal_token();
}
inline void RefreshTokenRsp::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:resource.RefreshTokenRsp.token)
}
inline std::string* RefreshTokenRsp::mutable_token() {
  // @@protoc_insertion_point(field_mutable:resource.RefreshTokenRsp.token)
  return _internal_mutable_token();
}
inline const std::string& RefreshTokenRsp::_internal_token() const {
  return token_.Get();
}
inline void RefreshTokenRsp::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RefreshTokenRsp::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RefreshTokenRsp.token)
}
inline void RefreshTokenRsp::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RefreshTokenRsp.token)
}
inline void RefreshTokenRsp::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RefreshTokenRsp.token)
}
inline std::string* RefreshTokenRsp::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RefreshTokenRsp::release_token() {
  // @@protoc_insertion_point(field_release:resource.RefreshTokenRsp.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshTokenRsp::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RefreshTokenRsp.token)
}

// -------------------------------------------------------------------

// AddAccountRoleRqst

// string accountId = 1;
inline void AddAccountRoleRqst::clear_accountid() {
  accountid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddAccountRoleRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.AddAccountRoleRqst.accountId)
  return _internal_accountid();
}
inline void AddAccountRoleRqst::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:resource.AddAccountRoleRqst.accountId)
}
inline std::string* AddAccountRoleRqst::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:resource.AddAccountRoleRqst.accountId)
  return _internal_mutable_accountid();
}
inline const std::string& AddAccountRoleRqst::_internal_accountid() const {
  return accountid_.Get();
}
inline void AddAccountRoleRqst::_internal_set_accountid(const std::string& value) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddAccountRoleRqst::set_accountid(std::string&& value) {
  
  accountid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddAccountRoleRqst.accountId)
}
inline void AddAccountRoleRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddAccountRoleRqst.accountId)
}
inline void AddAccountRoleRqst::set_accountid(const char* value,
    size_t size) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddAccountRoleRqst.accountId)
}
inline std::string* AddAccountRoleRqst::_internal_mutable_accountid() {
  
  return accountid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddAccountRoleRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.AddAccountRoleRqst.accountId)
  return accountid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddAccountRoleRqst::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    
  } else {
    
  }
  accountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddAccountRoleRqst.accountId)
}

// string roleId = 2;
inline void AddAccountRoleRqst::clear_roleid() {
  roleid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddAccountRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.AddAccountRoleRqst.roleId)
  return _internal_roleid();
}
inline void AddAccountRoleRqst::set_roleid(const std::string& value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:resource.AddAccountRoleRqst.roleId)
}
inline std::string* AddAccountRoleRqst::mutable_roleid() {
  // @@protoc_insertion_point(field_mutable:resource.AddAccountRoleRqst.roleId)
  return _internal_mutable_roleid();
}
inline const std::string& AddAccountRoleRqst::_internal_roleid() const {
  return roleid_.Get();
}
inline void AddAccountRoleRqst::_internal_set_roleid(const std::string& value) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddAccountRoleRqst::set_roleid(std::string&& value) {
  
  roleid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddAccountRoleRqst.roleId)
}
inline void AddAccountRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddAccountRoleRqst.roleId)
}
inline void AddAccountRoleRqst::set_roleid(const char* value,
    size_t size) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddAccountRoleRqst.roleId)
}
inline std::string* AddAccountRoleRqst::_internal_mutable_roleid() {
  
  return roleid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddAccountRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.AddAccountRoleRqst.roleId)
  return roleid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddAccountRoleRqst::set_allocated_roleid(std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddAccountRoleRqst.roleId)
}

// -------------------------------------------------------------------

// AddAccountRoleRsp

// bool result = 1;
inline void AddAccountRoleRsp::clear_result() {
  result_ = false;
}
inline bool AddAccountRoleRsp::_internal_result() const {
  return result_;
}
inline bool AddAccountRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddAccountRoleRsp.result)
  return _internal_result();
}
inline void AddAccountRoleRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddAccountRoleRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.AddAccountRoleRsp.result)
}

// -------------------------------------------------------------------

// RemoveAccountRoleRqst

// string accountId = 1;
inline void RemoveAccountRoleRqst::clear_accountid() {
  accountid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveAccountRoleRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveAccountRoleRqst.accountId)
  return _internal_accountid();
}
inline void RemoveAccountRoleRqst::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveAccountRoleRqst.accountId)
}
inline std::string* RemoveAccountRoleRqst::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveAccountRoleRqst.accountId)
  return _internal_mutable_accountid();
}
inline const std::string& RemoveAccountRoleRqst::_internal_accountid() const {
  return accountid_.Get();
}
inline void RemoveAccountRoleRqst::_internal_set_accountid(const std::string& value) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveAccountRoleRqst::set_accountid(std::string&& value) {
  
  accountid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveAccountRoleRqst.accountId)
}
inline void RemoveAccountRoleRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveAccountRoleRqst.accountId)
}
inline void RemoveAccountRoleRqst::set_accountid(const char* value,
    size_t size) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveAccountRoleRqst.accountId)
}
inline std::string* RemoveAccountRoleRqst::_internal_mutable_accountid() {
  
  return accountid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveAccountRoleRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.RemoveAccountRoleRqst.accountId)
  return accountid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveAccountRoleRqst::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    
  } else {
    
  }
  accountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveAccountRoleRqst.accountId)
}

// string roleId = 2;
inline void RemoveAccountRoleRqst::clear_roleid() {
  roleid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveAccountRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveAccountRoleRqst.roleId)
  return _internal_roleid();
}
inline void RemoveAccountRoleRqst::set_roleid(const std::string& value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveAccountRoleRqst.roleId)
}
inline std::string* RemoveAccountRoleRqst::mutable_roleid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveAccountRoleRqst.roleId)
  return _internal_mutable_roleid();
}
inline const std::string& RemoveAccountRoleRqst::_internal_roleid() const {
  return roleid_.Get();
}
inline void RemoveAccountRoleRqst::_internal_set_roleid(const std::string& value) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveAccountRoleRqst::set_roleid(std::string&& value) {
  
  roleid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveAccountRoleRqst.roleId)
}
inline void RemoveAccountRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveAccountRoleRqst.roleId)
}
inline void RemoveAccountRoleRqst::set_roleid(const char* value,
    size_t size) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveAccountRoleRqst.roleId)
}
inline std::string* RemoveAccountRoleRqst::_internal_mutable_roleid() {
  
  return roleid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveAccountRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.RemoveAccountRoleRqst.roleId)
  return roleid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveAccountRoleRqst::set_allocated_roleid(std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveAccountRoleRqst.roleId)
}

// -------------------------------------------------------------------

// RemoveAccountRoleRsp

// bool result = 1;
inline void RemoveAccountRoleRsp::clear_result() {
  result_ = false;
}
inline bool RemoveAccountRoleRsp::_internal_result() const {
  return result_;
}
inline bool RemoveAccountRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveAccountRoleRsp.result)
  return _internal_result();
}
inline void RemoveAccountRoleRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveAccountRoleRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.RemoveAccountRoleRsp.result)
}

// -------------------------------------------------------------------

// CreateRoleRqst

// .resource.Role role = 1;
inline bool CreateRoleRqst::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool CreateRoleRqst::has_role() const {
  return _internal_has_role();
}
inline void CreateRoleRqst::clear_role() {
  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
inline const ::resource::Role& CreateRoleRqst::_internal_role() const {
  const ::resource::Role* p = role_;
  return p != nullptr ? *p : *reinterpret_cast<const ::resource::Role*>(
      &::resource::_Role_default_instance_);
}
inline const ::resource::Role& CreateRoleRqst::role() const {
  // @@protoc_insertion_point(field_get:resource.CreateRoleRqst.role)
  return _internal_role();
}
inline void CreateRoleRqst::unsafe_arena_set_allocated_role(
    ::resource::Role* role) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resource.CreateRoleRqst.role)
}
inline ::resource::Role* CreateRoleRqst::release_role() {
  
  ::resource::Role* temp = role_;
  role_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resource::Role* CreateRoleRqst::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:resource.CreateRoleRqst.role)
  
  ::resource::Role* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::resource::Role* CreateRoleRqst::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::resource::Role>(GetArena());
    role_ = p;
  }
  return role_;
}
inline ::resource::Role* CreateRoleRqst::mutable_role() {
  // @@protoc_insertion_point(field_mutable:resource.CreateRoleRqst.role)
  return _internal_mutable_role();
}
inline void CreateRoleRqst::set_allocated_role(::resource::Role* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:resource.CreateRoleRqst.role)
}

// -------------------------------------------------------------------

// CreateRoleRsp

// bool result = 1;
inline void CreateRoleRsp::clear_result() {
  result_ = false;
}
inline bool CreateRoleRsp::_internal_result() const {
  return result_;
}
inline bool CreateRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.CreateRoleRsp.result)
  return _internal_result();
}
inline void CreateRoleRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void CreateRoleRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.CreateRoleRsp.result)
}

// -------------------------------------------------------------------

// DeleteRoleRqst

// string roleId = 1;
inline void DeleteRoleRqst::clear_roleid() {
  roleid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.DeleteRoleRqst.roleId)
  return _internal_roleid();
}
inline void DeleteRoleRqst::set_roleid(const std::string& value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:resource.DeleteRoleRqst.roleId)
}
inline std::string* DeleteRoleRqst::mutable_roleid() {
  // @@protoc_insertion_point(field_mutable:resource.DeleteRoleRqst.roleId)
  return _internal_mutable_roleid();
}
inline const std::string& DeleteRoleRqst::_internal_roleid() const {
  return roleid_.Get();
}
inline void DeleteRoleRqst::_internal_set_roleid(const std::string& value) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRoleRqst::set_roleid(std::string&& value) {
  
  roleid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteRoleRqst.roleId)
}
inline void DeleteRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.DeleteRoleRqst.roleId)
}
inline void DeleteRoleRqst::set_roleid(const char* value,
    size_t size) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteRoleRqst.roleId)
}
inline std::string* DeleteRoleRqst::_internal_mutable_roleid() {
  
  return roleid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.DeleteRoleRqst.roleId)
  return roleid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRoleRqst::set_allocated_roleid(std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteRoleRqst.roleId)
}

// -------------------------------------------------------------------

// DeleteRoleRsp

// bool result = 1;
inline void DeleteRoleRsp::clear_result() {
  result_ = false;
}
inline bool DeleteRoleRsp::_internal_result() const {
  return result_;
}
inline bool DeleteRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.DeleteRoleRsp.result)
  return _internal_result();
}
inline void DeleteRoleRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteRoleRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.DeleteRoleRsp.result)
}

// -------------------------------------------------------------------

// DeleteApplicationRqst

// string applicationId = 1;
inline void DeleteApplicationRqst::clear_applicationid() {
  applicationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteApplicationRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:resource.DeleteApplicationRqst.applicationId)
  return _internal_applicationid();
}
inline void DeleteApplicationRqst::set_applicationid(const std::string& value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:resource.DeleteApplicationRqst.applicationId)
}
inline std::string* DeleteApplicationRqst::mutable_applicationid() {
  // @@protoc_insertion_point(field_mutable:resource.DeleteApplicationRqst.applicationId)
  return _internal_mutable_applicationid();
}
inline const std::string& DeleteApplicationRqst::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void DeleteApplicationRqst::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteApplicationRqst::set_applicationid(std::string&& value) {
  
  applicationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteApplicationRqst.applicationId)
}
inline void DeleteApplicationRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.DeleteApplicationRqst.applicationId)
}
inline void DeleteApplicationRqst::set_applicationid(const char* value,
    size_t size) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteApplicationRqst.applicationId)
}
inline std::string* DeleteApplicationRqst::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteApplicationRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:resource.DeleteApplicationRqst.applicationId)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteApplicationRqst::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteApplicationRqst.applicationId)
}

// -------------------------------------------------------------------

// DeleteApplicationRsp

// bool result = 1;
inline void DeleteApplicationRsp::clear_result() {
  result_ = false;
}
inline bool DeleteApplicationRsp::_internal_result() const {
  return result_;
}
inline bool DeleteApplicationRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.DeleteApplicationRsp.result)
  return _internal_result();
}
inline void DeleteApplicationRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteApplicationRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.DeleteApplicationRsp.result)
}

// -------------------------------------------------------------------

// GetAllApplicationsInfoRqst

// -------------------------------------------------------------------

// GetAllApplicationsInfoRsp

// string result = 1;
inline void GetAllApplicationsInfoRsp::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAllApplicationsInfoRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.GetAllApplicationsInfoRsp.result)
  return _internal_result();
}
inline void GetAllApplicationsInfoRsp::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.GetAllApplicationsInfoRsp.result)
}
inline std::string* GetAllApplicationsInfoRsp::mutable_result() {
  // @@protoc_insertion_point(field_mutable:resource.GetAllApplicationsInfoRsp.result)
  return _internal_mutable_result();
}
inline const std::string& GetAllApplicationsInfoRsp::_internal_result() const {
  return result_.Get();
}
inline void GetAllApplicationsInfoRsp::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAllApplicationsInfoRsp::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.GetAllApplicationsInfoRsp.result)
}
inline void GetAllApplicationsInfoRsp::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.GetAllApplicationsInfoRsp.result)
}
inline void GetAllApplicationsInfoRsp::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.GetAllApplicationsInfoRsp.result)
}
inline std::string* GetAllApplicationsInfoRsp::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAllApplicationsInfoRsp::release_result() {
  // @@protoc_insertion_point(field_release:resource.GetAllApplicationsInfoRsp.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAllApplicationsInfoRsp::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.GetAllApplicationsInfoRsp.result)
}

// -------------------------------------------------------------------

// AccountExistRqst

// string id = 1;
inline void AccountExistRqst::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountExistRqst::id() const {
  // @@protoc_insertion_point(field_get:resource.AccountExistRqst.id)
  return _internal_id();
}
inline void AccountExistRqst::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resource.AccountExistRqst.id)
}
inline std::string* AccountExistRqst::mutable_id() {
  // @@protoc_insertion_point(field_mutable:resource.AccountExistRqst.id)
  return _internal_mutable_id();
}
inline const std::string& AccountExistRqst::_internal_id() const {
  return id_.Get();
}
inline void AccountExistRqst::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountExistRqst::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AccountExistRqst.id)
}
inline void AccountExistRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AccountExistRqst.id)
}
inline void AccountExistRqst::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AccountExistRqst.id)
}
inline std::string* AccountExistRqst::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountExistRqst::release_id() {
  // @@protoc_insertion_point(field_release:resource.AccountExistRqst.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountExistRqst::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AccountExistRqst.id)
}

// -------------------------------------------------------------------

// AccountExistRsp

// bool result = 1;
inline void AccountExistRsp::clear_result() {
  result_ = false;
}
inline bool AccountExistRsp::_internal_result() const {
  return result_;
}
inline bool AccountExistRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AccountExistRsp.result)
  return _internal_result();
}
inline void AccountExistRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AccountExistRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.AccountExistRsp.result)
}

// -------------------------------------------------------------------

// Group

// string id = 1;
inline void Group::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Group::id() const {
  // @@protoc_insertion_point(field_get:resource.Group.id)
  return _internal_id();
}
inline void Group::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resource.Group.id)
}
inline std::string* Group::mutable_id() {
  // @@protoc_insertion_point(field_mutable:resource.Group.id)
  return _internal_mutable_id();
}
inline const std::string& Group::_internal_id() const {
  return id_.Get();
}
inline void Group::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Group::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.Group.id)
}
inline void Group::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.Group.id)
}
inline void Group::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.Group.id)
}
inline std::string* Group::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Group::release_id() {
  // @@protoc_insertion_point(field_release:resource.Group.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.Group.id)
}

// string name = 2;
inline void Group::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:resource.Group.name)
  return _internal_name();
}
inline void Group::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:resource.Group.name)
}
inline std::string* Group::mutable_name() {
  // @@protoc_insertion_point(field_mutable:resource.Group.name)
  return _internal_mutable_name();
}
inline const std::string& Group::_internal_name() const {
  return name_.Get();
}
inline void Group::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Group::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.Group.name)
}
inline void Group::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.Group.name)
}
inline void Group::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.Group.name)
}
inline std::string* Group::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Group::release_name() {
  // @@protoc_insertion_point(field_release:resource.Group.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.Group.name)
}

// repeated string members = 3;
inline int Group::_internal_members_size() const {
  return members_.size();
}
inline int Group::members_size() const {
  return _internal_members_size();
}
inline void Group::clear_members() {
  members_.Clear();
}
inline std::string* Group::add_members() {
  // @@protoc_insertion_point(field_add_mutable:resource.Group.members)
  return _internal_add_members();
}
inline const std::string& Group::_internal_members(int index) const {
  return members_.Get(index);
}
inline const std::string& Group::members(int index) const {
  // @@protoc_insertion_point(field_get:resource.Group.members)
  return _internal_members(index);
}
inline std::string* Group::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Group.members)
  return members_.Mutable(index);
}
inline void Group::set_members(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Group.members)
  members_.Mutable(index)->assign(value);
}
inline void Group::set_members(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Group.members)
  members_.Mutable(index)->assign(std::move(value));
}
inline void Group::set_members(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Group.members)
}
inline void Group::set_members(int index, const char* value, size_t size) {
  members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Group.members)
}
inline std::string* Group::_internal_add_members() {
  return members_.Add();
}
inline void Group::add_members(const std::string& value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Group.members)
}
inline void Group::add_members(std::string&& value) {
  members_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Group.members)
}
inline void Group::add_members(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Group.members)
}
inline void Group::add_members(const char* value, size_t size) {
  members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Group.members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Group::members() const {
  // @@protoc_insertion_point(field_list:resource.Group.members)
  return members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Group::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:resource.Group.members)
  return &members_;
}

// -------------------------------------------------------------------

// CreateGroupRqst

// .resource.Group group = 1;
inline bool CreateGroupRqst::_internal_has_group() const {
  return this != internal_default_instance() && group_ != nullptr;
}
inline bool CreateGroupRqst::has_group() const {
  return _internal_has_group();
}
inline void CreateGroupRqst::clear_group() {
  if (GetArena() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
inline const ::resource::Group& CreateGroupRqst::_internal_group() const {
  const ::resource::Group* p = group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::resource::Group*>(
      &::resource::_Group_default_instance_);
}
inline const ::resource::Group& CreateGroupRqst::group() const {
  // @@protoc_insertion_point(field_get:resource.CreateGroupRqst.group)
  return _internal_group();
}
inline void CreateGroupRqst::unsafe_arena_set_allocated_group(
    ::resource::Group* group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resource.CreateGroupRqst.group)
}
inline ::resource::Group* CreateGroupRqst::release_group() {
  
  ::resource::Group* temp = group_;
  group_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resource::Group* CreateGroupRqst::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:resource.CreateGroupRqst.group)
  
  ::resource::Group* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::resource::Group* CreateGroupRqst::_internal_mutable_group() {
  
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::resource::Group>(GetArena());
    group_ = p;
  }
  return group_;
}
inline ::resource::Group* CreateGroupRqst::mutable_group() {
  // @@protoc_insertion_point(field_mutable:resource.CreateGroupRqst.group)
  return _internal_mutable_group();
}
inline void CreateGroupRqst::set_allocated_group(::resource::Group* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_;
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group);
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:resource.CreateGroupRqst.group)
}

// -------------------------------------------------------------------

// CreateGroupRsp

// bool result = 1;
inline void CreateGroupRsp::clear_result() {
  result_ = false;
}
inline bool CreateGroupRsp::_internal_result() const {
  return result_;
}
inline bool CreateGroupRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.CreateGroupRsp.result)
  return _internal_result();
}
inline void CreateGroupRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void CreateGroupRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.CreateGroupRsp.result)
}

// -------------------------------------------------------------------

// GetGroupsRqst

// string query = 1;
inline void GetGroupsRqst::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGroupsRqst::query() const {
  // @@protoc_insertion_point(field_get:resource.GetGroupsRqst.query)
  return _internal_query();
}
inline void GetGroupsRqst::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:resource.GetGroupsRqst.query)
}
inline std::string* GetGroupsRqst::mutable_query() {
  // @@protoc_insertion_point(field_mutable:resource.GetGroupsRqst.query)
  return _internal_mutable_query();
}
inline const std::string& GetGroupsRqst::_internal_query() const {
  return query_.Get();
}
inline void GetGroupsRqst::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGroupsRqst::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.GetGroupsRqst.query)
}
inline void GetGroupsRqst::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.GetGroupsRqst.query)
}
inline void GetGroupsRqst::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.GetGroupsRqst.query)
}
inline std::string* GetGroupsRqst::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGroupsRqst::release_query() {
  // @@protoc_insertion_point(field_release:resource.GetGroupsRqst.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGroupsRqst::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.GetGroupsRqst.query)
}

// -------------------------------------------------------------------

// GetGroupsRsp

// repeated .resource.Group groups = 1;
inline int GetGroupsRsp::_internal_groups_size() const {
  return groups_.size();
}
inline int GetGroupsRsp::groups_size() const {
  return _internal_groups_size();
}
inline void GetGroupsRsp::clear_groups() {
  groups_.Clear();
}
inline ::resource::Group* GetGroupsRsp::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetGroupsRsp.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Group >*
GetGroupsRsp::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetGroupsRsp.groups)
  return &groups_;
}
inline const ::resource::Group& GetGroupsRsp::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::resource::Group& GetGroupsRsp::groups(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetGroupsRsp.groups)
  return _internal_groups(index);
}
inline ::resource::Group* GetGroupsRsp::_internal_add_groups() {
  return groups_.Add();
}
inline ::resource::Group* GetGroupsRsp::add_groups() {
  // @@protoc_insertion_point(field_add:resource.GetGroupsRsp.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Group >&
GetGroupsRsp::groups() const {
  // @@protoc_insertion_point(field_list:resource.GetGroupsRsp.groups)
  return groups_;
}

// -------------------------------------------------------------------

// DeleteGroupRqst

// string group = 1;
inline void DeleteGroupRqst::clear_group() {
  group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteGroupRqst::group() const {
  // @@protoc_insertion_point(field_get:resource.DeleteGroupRqst.group)
  return _internal_group();
}
inline void DeleteGroupRqst::set_group(const std::string& value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:resource.DeleteGroupRqst.group)
}
inline std::string* DeleteGroupRqst::mutable_group() {
  // @@protoc_insertion_point(field_mutable:resource.DeleteGroupRqst.group)
  return _internal_mutable_group();
}
inline const std::string& DeleteGroupRqst::_internal_group() const {
  return group_.Get();
}
inline void DeleteGroupRqst::_internal_set_group(const std::string& value) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteGroupRqst::set_group(std::string&& value) {
  
  group_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteGroupRqst.group)
}
inline void DeleteGroupRqst::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.DeleteGroupRqst.group)
}
inline void DeleteGroupRqst::set_group(const char* value,
    size_t size) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteGroupRqst.group)
}
inline std::string* DeleteGroupRqst::_internal_mutable_group() {
  
  return group_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteGroupRqst::release_group() {
  // @@protoc_insertion_point(field_release:resource.DeleteGroupRqst.group)
  return group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteGroupRqst::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteGroupRqst.group)
}

// -------------------------------------------------------------------

// DeleteGroupRsp

// bool result = 1;
inline void DeleteGroupRsp::clear_result() {
  result_ = false;
}
inline bool DeleteGroupRsp::_internal_result() const {
  return result_;
}
inline bool DeleteGroupRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.DeleteGroupRsp.result)
  return _internal_result();
}
inline void DeleteGroupRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteGroupRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.DeleteGroupRsp.result)
}

// -------------------------------------------------------------------

// AddGroupMemberAccountRqst

// string groupId = 1;
inline void AddGroupMemberAccountRqst::clear_groupid() {
  groupid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddGroupMemberAccountRqst::groupid() const {
  // @@protoc_insertion_point(field_get:resource.AddGroupMemberAccountRqst.groupId)
  return _internal_groupid();
}
inline void AddGroupMemberAccountRqst::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:resource.AddGroupMemberAccountRqst.groupId)
}
inline std::string* AddGroupMemberAccountRqst::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:resource.AddGroupMemberAccountRqst.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& AddGroupMemberAccountRqst::_internal_groupid() const {
  return groupid_.Get();
}
inline void AddGroupMemberAccountRqst::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddGroupMemberAccountRqst::set_groupid(std::string&& value) {
  
  groupid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddGroupMemberAccountRqst.groupId)
}
inline void AddGroupMemberAccountRqst::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddGroupMemberAccountRqst.groupId)
}
inline void AddGroupMemberAccountRqst::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddGroupMemberAccountRqst.groupId)
}
inline std::string* AddGroupMemberAccountRqst::_internal_mutable_groupid() {
  
  return groupid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddGroupMemberAccountRqst::release_groupid() {
  // @@protoc_insertion_point(field_release:resource.AddGroupMemberAccountRqst.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddGroupMemberAccountRqst::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddGroupMemberAccountRqst.groupId)
}

// string accountId = 2;
inline void AddGroupMemberAccountRqst::clear_accountid() {
  accountid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddGroupMemberAccountRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.AddGroupMemberAccountRqst.accountId)
  return _internal_accountid();
}
inline void AddGroupMemberAccountRqst::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:resource.AddGroupMemberAccountRqst.accountId)
}
inline std::string* AddGroupMemberAccountRqst::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:resource.AddGroupMemberAccountRqst.accountId)
  return _internal_mutable_accountid();
}
inline const std::string& AddGroupMemberAccountRqst::_internal_accountid() const {
  return accountid_.Get();
}
inline void AddGroupMemberAccountRqst::_internal_set_accountid(const std::string& value) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddGroupMemberAccountRqst::set_accountid(std::string&& value) {
  
  accountid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddGroupMemberAccountRqst.accountId)
}
inline void AddGroupMemberAccountRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddGroupMemberAccountRqst.accountId)
}
inline void AddGroupMemberAccountRqst::set_accountid(const char* value,
    size_t size) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddGroupMemberAccountRqst.accountId)
}
inline std::string* AddGroupMemberAccountRqst::_internal_mutable_accountid() {
  
  return accountid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddGroupMemberAccountRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.AddGroupMemberAccountRqst.accountId)
  return accountid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddGroupMemberAccountRqst::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    
  } else {
    
  }
  accountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddGroupMemberAccountRqst.accountId)
}

// -------------------------------------------------------------------

// AddGroupMemberAccountRsp

// bool result = 1;
inline void AddGroupMemberAccountRsp::clear_result() {
  result_ = false;
}
inline bool AddGroupMemberAccountRsp::_internal_result() const {
  return result_;
}
inline bool AddGroupMemberAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddGroupMemberAccountRsp.result)
  return _internal_result();
}
inline void AddGroupMemberAccountRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddGroupMemberAccountRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.AddGroupMemberAccountRsp.result)
}

// -------------------------------------------------------------------

// RemoveGroupMemberAccountRqst

// string groupId = 1;
inline void RemoveGroupMemberAccountRqst::clear_groupid() {
  groupid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveGroupMemberAccountRqst::groupid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveGroupMemberAccountRqst.groupId)
  return _internal_groupid();
}
inline void RemoveGroupMemberAccountRqst::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveGroupMemberAccountRqst.groupId)
}
inline std::string* RemoveGroupMemberAccountRqst::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveGroupMemberAccountRqst.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& RemoveGroupMemberAccountRqst::_internal_groupid() const {
  return groupid_.Get();
}
inline void RemoveGroupMemberAccountRqst::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveGroupMemberAccountRqst::set_groupid(std::string&& value) {
  
  groupid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveGroupMemberAccountRqst.groupId)
}
inline void RemoveGroupMemberAccountRqst::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveGroupMemberAccountRqst.groupId)
}
inline void RemoveGroupMemberAccountRqst::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveGroupMemberAccountRqst.groupId)
}
inline std::string* RemoveGroupMemberAccountRqst::_internal_mutable_groupid() {
  
  return groupid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveGroupMemberAccountRqst::release_groupid() {
  // @@protoc_insertion_point(field_release:resource.RemoveGroupMemberAccountRqst.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveGroupMemberAccountRqst::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveGroupMemberAccountRqst.groupId)
}

// string accountId = 2;
inline void RemoveGroupMemberAccountRqst::clear_accountid() {
  accountid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveGroupMemberAccountRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveGroupMemberAccountRqst.accountId)
  return _internal_accountid();
}
inline void RemoveGroupMemberAccountRqst::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveGroupMemberAccountRqst.accountId)
}
inline std::string* RemoveGroupMemberAccountRqst::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveGroupMemberAccountRqst.accountId)
  return _internal_mutable_accountid();
}
inline const std::string& RemoveGroupMemberAccountRqst::_internal_accountid() const {
  return accountid_.Get();
}
inline void RemoveGroupMemberAccountRqst::_internal_set_accountid(const std::string& value) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveGroupMemberAccountRqst::set_accountid(std::string&& value) {
  
  accountid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveGroupMemberAccountRqst.accountId)
}
inline void RemoveGroupMemberAccountRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveGroupMemberAccountRqst.accountId)
}
inline void RemoveGroupMemberAccountRqst::set_accountid(const char* value,
    size_t size) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveGroupMemberAccountRqst.accountId)
}
inline std::string* RemoveGroupMemberAccountRqst::_internal_mutable_accountid() {
  
  return accountid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveGroupMemberAccountRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.RemoveGroupMemberAccountRqst.accountId)
  return accountid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveGroupMemberAccountRqst::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    
  } else {
    
  }
  accountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveGroupMemberAccountRqst.accountId)
}

// -------------------------------------------------------------------

// RemoveGroupMemberAccountRsp

// bool result = 1;
inline void RemoveGroupMemberAccountRsp::clear_result() {
  result_ = false;
}
inline bool RemoveGroupMemberAccountRsp::_internal_result() const {
  return result_;
}
inline bool RemoveGroupMemberAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveGroupMemberAccountRsp.result)
  return _internal_result();
}
inline void RemoveGroupMemberAccountRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveGroupMemberAccountRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.RemoveGroupMemberAccountRsp.result)
}

// -------------------------------------------------------------------

// Organization

// string id = 1;
inline void Organization::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Organization::id() const {
  // @@protoc_insertion_point(field_get:resource.Organization.id)
  return _internal_id();
}
inline void Organization::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resource.Organization.id)
}
inline std::string* Organization::mutable_id() {
  // @@protoc_insertion_point(field_mutable:resource.Organization.id)
  return _internal_mutable_id();
}
inline const std::string& Organization::_internal_id() const {
  return id_.Get();
}
inline void Organization::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Organization::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.Organization.id)
}
inline void Organization::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.Organization.id)
}
inline void Organization::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.id)
}
inline std::string* Organization::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Organization::release_id() {
  // @@protoc_insertion_point(field_release:resource.Organization.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Organization::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.Organization.id)
}

// string name = 2;
inline void Organization::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Organization::name() const {
  // @@protoc_insertion_point(field_get:resource.Organization.name)
  return _internal_name();
}
inline void Organization::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:resource.Organization.name)
}
inline std::string* Organization::mutable_name() {
  // @@protoc_insertion_point(field_mutable:resource.Organization.name)
  return _internal_mutable_name();
}
inline const std::string& Organization::_internal_name() const {
  return name_.Get();
}
inline void Organization::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Organization::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.Organization.name)
}
inline void Organization::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.Organization.name)
}
inline void Organization::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.name)
}
inline std::string* Organization::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Organization::release_name() {
  // @@protoc_insertion_point(field_release:resource.Organization.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Organization::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.Organization.name)
}

// repeated string accounts = 3;
inline int Organization::_internal_accounts_size() const {
  return accounts_.size();
}
inline int Organization::accounts_size() const {
  return _internal_accounts_size();
}
inline void Organization::clear_accounts() {
  accounts_.Clear();
}
inline std::string* Organization::add_accounts() {
  // @@protoc_insertion_point(field_add_mutable:resource.Organization.accounts)
  return _internal_add_accounts();
}
inline const std::string& Organization::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const std::string& Organization::accounts(int index) const {
  // @@protoc_insertion_point(field_get:resource.Organization.accounts)
  return _internal_accounts(index);
}
inline std::string* Organization::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Organization.accounts)
  return accounts_.Mutable(index);
}
inline void Organization::set_accounts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.accounts)
  accounts_.Mutable(index)->assign(value);
}
inline void Organization::set_accounts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.accounts)
  accounts_.Mutable(index)->assign(std::move(value));
}
inline void Organization::set_accounts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Organization.accounts)
}
inline void Organization::set_accounts(int index, const char* value, size_t size) {
  accounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.accounts)
}
inline std::string* Organization::_internal_add_accounts() {
  return accounts_.Add();
}
inline void Organization::add_accounts(const std::string& value) {
  accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Organization.accounts)
}
inline void Organization::add_accounts(std::string&& value) {
  accounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Organization.accounts)
}
inline void Organization::add_accounts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Organization.accounts)
}
inline void Organization::add_accounts(const char* value, size_t size) {
  accounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Organization.accounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Organization::accounts() const {
  // @@protoc_insertion_point(field_list:resource.Organization.accounts)
  return accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Organization::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:resource.Organization.accounts)
  return &accounts_;
}

// repeated string groups = 4;
inline int Organization::_internal_groups_size() const {
  return groups_.size();
}
inline int Organization::groups_size() const {
  return _internal_groups_size();
}
inline void Organization::clear_groups() {
  groups_.Clear();
}
inline std::string* Organization::add_groups() {
  // @@protoc_insertion_point(field_add_mutable:resource.Organization.groups)
  return _internal_add_groups();
}
inline const std::string& Organization::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const std::string& Organization::groups(int index) const {
  // @@protoc_insertion_point(field_get:resource.Organization.groups)
  return _internal_groups(index);
}
inline std::string* Organization::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Organization.groups)
  return groups_.Mutable(index);
}
inline void Organization::set_groups(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.groups)
  groups_.Mutable(index)->assign(value);
}
inline void Organization::set_groups(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.groups)
  groups_.Mutable(index)->assign(std::move(value));
}
inline void Organization::set_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Organization.groups)
}
inline void Organization::set_groups(int index, const char* value, size_t size) {
  groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.groups)
}
inline std::string* Organization::_internal_add_groups() {
  return groups_.Add();
}
inline void Organization::add_groups(const std::string& value) {
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Organization.groups)
}
inline void Organization::add_groups(std::string&& value) {
  groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Organization.groups)
}
inline void Organization::add_groups(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Organization.groups)
}
inline void Organization::add_groups(const char* value, size_t size) {
  groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Organization.groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Organization::groups() const {
  // @@protoc_insertion_point(field_list:resource.Organization.groups)
  return groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Organization::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:resource.Organization.groups)
  return &groups_;
}

// repeated string roles = 5;
inline int Organization::_internal_roles_size() const {
  return roles_.size();
}
inline int Organization::roles_size() const {
  return _internal_roles_size();
}
inline void Organization::clear_roles() {
  roles_.Clear();
}
inline std::string* Organization::add_roles() {
  // @@protoc_insertion_point(field_add_mutable:resource.Organization.roles)
  return _internal_add_roles();
}
inline const std::string& Organization::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const std::string& Organization::roles(int index) const {
  // @@protoc_insertion_point(field_get:resource.Organization.roles)
  return _internal_roles(index);
}
inline std::string* Organization::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Organization.roles)
  return roles_.Mutable(index);
}
inline void Organization::set_roles(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.roles)
  roles_.Mutable(index)->assign(value);
}
inline void Organization::set_roles(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.roles)
  roles_.Mutable(index)->assign(std::move(value));
}
inline void Organization::set_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Organization.roles)
}
inline void Organization::set_roles(int index, const char* value, size_t size) {
  roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.roles)
}
inline std::string* Organization::_internal_add_roles() {
  return roles_.Add();
}
inline void Organization::add_roles(const std::string& value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Organization.roles)
}
inline void Organization::add_roles(std::string&& value) {
  roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Organization.roles)
}
inline void Organization::add_roles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Organization.roles)
}
inline void Organization::add_roles(const char* value, size_t size) {
  roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Organization.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Organization::roles() const {
  // @@protoc_insertion_point(field_list:resource.Organization.roles)
  return roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Organization::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:resource.Organization.roles)
  return &roles_;
}

// repeated string applications = 6;
inline int Organization::_internal_applications_size() const {
  return applications_.size();
}
inline int Organization::applications_size() const {
  return _internal_applications_size();
}
inline void Organization::clear_applications() {
  applications_.Clear();
}
inline std::string* Organization::add_applications() {
  // @@protoc_insertion_point(field_add_mutable:resource.Organization.applications)
  return _internal_add_applications();
}
inline const std::string& Organization::_internal_applications(int index) const {
  return applications_.Get(index);
}
inline const std::string& Organization::applications(int index) const {
  // @@protoc_insertion_point(field_get:resource.Organization.applications)
  return _internal_applications(index);
}
inline std::string* Organization::mutable_applications(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Organization.applications)
  return applications_.Mutable(index);
}
inline void Organization::set_applications(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.applications)
  applications_.Mutable(index)->assign(value);
}
inline void Organization::set_applications(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.applications)
  applications_.Mutable(index)->assign(std::move(value));
}
inline void Organization::set_applications(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  applications_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Organization.applications)
}
inline void Organization::set_applications(int index, const char* value, size_t size) {
  applications_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.applications)
}
inline std::string* Organization::_internal_add_applications() {
  return applications_.Add();
}
inline void Organization::add_applications(const std::string& value) {
  applications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Organization.applications)
}
inline void Organization::add_applications(std::string&& value) {
  applications_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Organization.applications)
}
inline void Organization::add_applications(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  applications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Organization.applications)
}
inline void Organization::add_applications(const char* value, size_t size) {
  applications_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Organization.applications)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Organization::applications() const {
  // @@protoc_insertion_point(field_list:resource.Organization.applications)
  return applications_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Organization::mutable_applications() {
  // @@protoc_insertion_point(field_mutable_list:resource.Organization.applications)
  return &applications_;
}

// -------------------------------------------------------------------

// CreateOrganizationRqst

// .resource.Organization organization = 1;
inline bool CreateOrganizationRqst::_internal_has_organization() const {
  return this != internal_default_instance() && organization_ != nullptr;
}
inline bool CreateOrganizationRqst::has_organization() const {
  return _internal_has_organization();
}
inline void CreateOrganizationRqst::clear_organization() {
  if (GetArena() == nullptr && organization_ != nullptr) {
    delete organization_;
  }
  organization_ = nullptr;
}
inline const ::resource::Organization& CreateOrganizationRqst::_internal_organization() const {
  const ::resource::Organization* p = organization_;
  return p != nullptr ? *p : *reinterpret_cast<const ::resource::Organization*>(
      &::resource::_Organization_default_instance_);
}
inline const ::resource::Organization& CreateOrganizationRqst::organization() const {
  // @@protoc_insertion_point(field_get:resource.CreateOrganizationRqst.organization)
  return _internal_organization();
}
inline void CreateOrganizationRqst::unsafe_arena_set_allocated_organization(
    ::resource::Organization* organization) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(organization_);
  }
  organization_ = organization;
  if (organization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resource.CreateOrganizationRqst.organization)
}
inline ::resource::Organization* CreateOrganizationRqst::release_organization() {
  
  ::resource::Organization* temp = organization_;
  organization_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resource::Organization* CreateOrganizationRqst::unsafe_arena_release_organization() {
  // @@protoc_insertion_point(field_release:resource.CreateOrganizationRqst.organization)
  
  ::resource::Organization* temp = organization_;
  organization_ = nullptr;
  return temp;
}
inline ::resource::Organization* CreateOrganizationRqst::_internal_mutable_organization() {
  
  if (organization_ == nullptr) {
    auto* p = CreateMaybeMessage<::resource::Organization>(GetArena());
    organization_ = p;
  }
  return organization_;
}
inline ::resource::Organization* CreateOrganizationRqst::mutable_organization() {
  // @@protoc_insertion_point(field_mutable:resource.CreateOrganizationRqst.organization)
  return _internal_mutable_organization();
}
inline void CreateOrganizationRqst::set_allocated_organization(::resource::Organization* organization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete organization_;
  }
  if (organization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(organization);
    if (message_arena != submessage_arena) {
      organization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, organization, submessage_arena);
    }
    
  } else {
    
  }
  organization_ = organization;
  // @@protoc_insertion_point(field_set_allocated:resource.CreateOrganizationRqst.organization)
}

// -------------------------------------------------------------------

// CreateOrganizationRsp

// bool result = 1;
inline void CreateOrganizationRsp::clear_result() {
  result_ = false;
}
inline bool CreateOrganizationRsp::_internal_result() const {
  return result_;
}
inline bool CreateOrganizationRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.CreateOrganizationRsp.result)
  return _internal_result();
}
inline void CreateOrganizationRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void CreateOrganizationRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.CreateOrganizationRsp.result)
}

// -------------------------------------------------------------------

// GetOrganizationsRqst

// string query = 1;
inline void GetOrganizationsRqst::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetOrganizationsRqst::query() const {
  // @@protoc_insertion_point(field_get:resource.GetOrganizationsRqst.query)
  return _internal_query();
}
inline void GetOrganizationsRqst::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:resource.GetOrganizationsRqst.query)
}
inline std::string* GetOrganizationsRqst::mutable_query() {
  // @@protoc_insertion_point(field_mutable:resource.GetOrganizationsRqst.query)
  return _internal_mutable_query();
}
inline const std::string& GetOrganizationsRqst::_internal_query() const {
  return query_.Get();
}
inline void GetOrganizationsRqst::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetOrganizationsRqst::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.GetOrganizationsRqst.query)
}
inline void GetOrganizationsRqst::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.GetOrganizationsRqst.query)
}
inline void GetOrganizationsRqst::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.GetOrganizationsRqst.query)
}
inline std::string* GetOrganizationsRqst::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetOrganizationsRqst::release_query() {
  // @@protoc_insertion_point(field_release:resource.GetOrganizationsRqst.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetOrganizationsRqst::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.GetOrganizationsRqst.query)
}

// -------------------------------------------------------------------

// GetOrganizationsRsp

// repeated .resource.Organization organizations = 1;
inline int GetOrganizationsRsp::_internal_organizations_size() const {
  return organizations_.size();
}
inline int GetOrganizationsRsp::organizations_size() const {
  return _internal_organizations_size();
}
inline void GetOrganizationsRsp::clear_organizations() {
  organizations_.Clear();
}
inline ::resource::Organization* GetOrganizationsRsp::mutable_organizations(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetOrganizationsRsp.organizations)
  return organizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Organization >*
GetOrganizationsRsp::mutable_organizations() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetOrganizationsRsp.organizations)
  return &organizations_;
}
inline const ::resource::Organization& GetOrganizationsRsp::_internal_organizations(int index) const {
  return organizations_.Get(index);
}
inline const ::resource::Organization& GetOrganizationsRsp::organizations(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetOrganizationsRsp.organizations)
  return _internal_organizations(index);
}
inline ::resource::Organization* GetOrganizationsRsp::_internal_add_organizations() {
  return organizations_.Add();
}
inline ::resource::Organization* GetOrganizationsRsp::add_organizations() {
  // @@protoc_insertion_point(field_add:resource.GetOrganizationsRsp.organizations)
  return _internal_add_organizations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Organization >&
GetOrganizationsRsp::organizations() const {
  // @@protoc_insertion_point(field_list:resource.GetOrganizationsRsp.organizations)
  return organizations_;
}

// -------------------------------------------------------------------

// DeleteOrganizationRqst

// string organization = 1;
inline void DeleteOrganizationRqst::clear_organization() {
  organization_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteOrganizationRqst::organization() const {
  // @@protoc_insertion_point(field_get:resource.DeleteOrganizationRqst.organization)
  return _internal_organization();
}
inline void DeleteOrganizationRqst::set_organization(const std::string& value) {
  _internal_set_organization(value);
  // @@protoc_insertion_point(field_set:resource.DeleteOrganizationRqst.organization)
}
inline std::string* DeleteOrganizationRqst::mutable_organization() {
  // @@protoc_insertion_point(field_mutable:resource.DeleteOrganizationRqst.organization)
  return _internal_mutable_organization();
}
inline const std::string& DeleteOrganizationRqst::_internal_organization() const {
  return organization_.Get();
}
inline void DeleteOrganizationRqst::_internal_set_organization(const std::string& value) {
  
  organization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteOrganizationRqst::set_organization(std::string&& value) {
  
  organization_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteOrganizationRqst.organization)
}
inline void DeleteOrganizationRqst::set_organization(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  organization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.DeleteOrganizationRqst.organization)
}
inline void DeleteOrganizationRqst::set_organization(const char* value,
    size_t size) {
  
  organization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteOrganizationRqst.organization)
}
inline std::string* DeleteOrganizationRqst::_internal_mutable_organization() {
  
  return organization_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteOrganizationRqst::release_organization() {
  // @@protoc_insertion_point(field_release:resource.DeleteOrganizationRqst.organization)
  return organization_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteOrganizationRqst::set_allocated_organization(std::string* organization) {
  if (organization != nullptr) {
    
  } else {
    
  }
  organization_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteOrganizationRqst.organization)
}

// -------------------------------------------------------------------

// DeleteOrganizationRsp

// bool result = 1;
inline void DeleteOrganizationRsp::clear_result() {
  result_ = false;
}
inline bool DeleteOrganizationRsp::_internal_result() const {
  return result_;
}
inline bool DeleteOrganizationRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.DeleteOrganizationRsp.result)
  return _internal_result();
}
inline void DeleteOrganizationRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteOrganizationRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.DeleteOrganizationRsp.result)
}

// -------------------------------------------------------------------

// Peer

// string domain = 1;
inline void Peer::clear_domain() {
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Peer::domain() const {
  // @@protoc_insertion_point(field_get:resource.Peer.domain)
  return _internal_domain();
}
inline void Peer::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:resource.Peer.domain)
}
inline std::string* Peer::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:resource.Peer.domain)
  return _internal_mutable_domain();
}
inline const std::string& Peer::_internal_domain() const {
  return domain_.Get();
}
inline void Peer::_internal_set_domain(const std::string& value) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Peer::set_domain(std::string&& value) {
  
  domain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.Peer.domain)
}
inline void Peer::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.Peer.domain)
}
inline void Peer::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.Peer.domain)
}
inline std::string* Peer::_internal_mutable_domain() {
  
  return domain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Peer::release_domain() {
  // @@protoc_insertion_point(field_release:resource.Peer.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Peer::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.Peer.domain)
}

// repeated string actions = 2;
inline int Peer::_internal_actions_size() const {
  return actions_.size();
}
inline int Peer::actions_size() const {
  return _internal_actions_size();
}
inline void Peer::clear_actions() {
  actions_.Clear();
}
inline std::string* Peer::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:resource.Peer.actions)
  return _internal_add_actions();
}
inline const std::string& Peer::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const std::string& Peer::actions(int index) const {
  // @@protoc_insertion_point(field_get:resource.Peer.actions)
  return _internal_actions(index);
}
inline std::string* Peer::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Peer.actions)
  return actions_.Mutable(index);
}
inline void Peer::set_actions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Peer.actions)
  actions_.Mutable(index)->assign(value);
}
inline void Peer::set_actions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Peer.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
inline void Peer::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Peer.actions)
}
inline void Peer::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Peer.actions)
}
inline std::string* Peer::_internal_add_actions() {
  return actions_.Add();
}
inline void Peer::add_actions(const std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Peer.actions)
}
inline void Peer::add_actions(std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Peer.actions)
}
inline void Peer::add_actions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Peer.actions)
}
inline void Peer::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Peer.actions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Peer::actions() const {
  // @@protoc_insertion_point(field_list:resource.Peer.actions)
  return actions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Peer::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:resource.Peer.actions)
  return &actions_;
}

// -------------------------------------------------------------------

// RegisterPeerRqst

// .resource.Peer peer = 1;
inline bool RegisterPeerRqst::_internal_has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline bool RegisterPeerRqst::has_peer() const {
  return _internal_has_peer();
}
inline void RegisterPeerRqst::clear_peer() {
  if (GetArena() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
inline const ::resource::Peer& RegisterPeerRqst::_internal_peer() const {
  const ::resource::Peer* p = peer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::resource::Peer*>(
      &::resource::_Peer_default_instance_);
}
inline const ::resource::Peer& RegisterPeerRqst::peer() const {
  // @@protoc_insertion_point(field_get:resource.RegisterPeerRqst.peer)
  return _internal_peer();
}
inline void RegisterPeerRqst::unsafe_arena_set_allocated_peer(
    ::resource::Peer* peer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resource.RegisterPeerRqst.peer)
}
inline ::resource::Peer* RegisterPeerRqst::release_peer() {
  
  ::resource::Peer* temp = peer_;
  peer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resource::Peer* RegisterPeerRqst::unsafe_arena_release_peer() {
  // @@protoc_insertion_point(field_release:resource.RegisterPeerRqst.peer)
  
  ::resource::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::resource::Peer* RegisterPeerRqst::_internal_mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::resource::Peer>(GetArena());
    peer_ = p;
  }
  return peer_;
}
inline ::resource::Peer* RegisterPeerRqst::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:resource.RegisterPeerRqst.peer)
  return _internal_mutable_peer();
}
inline void RegisterPeerRqst::set_allocated_peer(::resource::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete peer_;
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(peer);
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:resource.RegisterPeerRqst.peer)
}

// -------------------------------------------------------------------

// RegisterPeerRsp

// bool result = 1;
inline void RegisterPeerRsp::clear_result() {
  result_ = false;
}
inline bool RegisterPeerRsp::_internal_result() const {
  return result_;
}
inline bool RegisterPeerRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RegisterPeerRsp.result)
  return _internal_result();
}
inline void RegisterPeerRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RegisterPeerRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.RegisterPeerRsp.result)
}

// -------------------------------------------------------------------

// GetPeersRqst

// string query = 1;
inline void GetPeersRqst::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPeersRqst::query() const {
  // @@protoc_insertion_point(field_get:resource.GetPeersRqst.query)
  return _internal_query();
}
inline void GetPeersRqst::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:resource.GetPeersRqst.query)
}
inline std::string* GetPeersRqst::mutable_query() {
  // @@protoc_insertion_point(field_mutable:resource.GetPeersRqst.query)
  return _internal_mutable_query();
}
inline const std::string& GetPeersRqst::_internal_query() const {
  return query_.Get();
}
inline void GetPeersRqst::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPeersRqst::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPeersRqst.query)
}
inline void GetPeersRqst::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.GetPeersRqst.query)
}
inline void GetPeersRqst::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.GetPeersRqst.query)
}
inline std::string* GetPeersRqst::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPeersRqst::release_query() {
  // @@protoc_insertion_point(field_release:resource.GetPeersRqst.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPeersRqst::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.GetPeersRqst.query)
}

// -------------------------------------------------------------------

// GetPeersRsp

// repeated .resource.Peer peers = 1;
inline int GetPeersRsp::_internal_peers_size() const {
  return peers_.size();
}
inline int GetPeersRsp::peers_size() const {
  return _internal_peers_size();
}
inline void GetPeersRsp::clear_peers() {
  peers_.Clear();
}
inline ::resource::Peer* GetPeersRsp::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetPeersRsp.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Peer >*
GetPeersRsp::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetPeersRsp.peers)
  return &peers_;
}
inline const ::resource::Peer& GetPeersRsp::_internal_peers(int index) const {
  return peers_.Get(index);
}
inline const ::resource::Peer& GetPeersRsp::peers(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetPeersRsp.peers)
  return _internal_peers(index);
}
inline ::resource::Peer* GetPeersRsp::_internal_add_peers() {
  return peers_.Add();
}
inline ::resource::Peer* GetPeersRsp::add_peers() {
  // @@protoc_insertion_point(field_add:resource.GetPeersRsp.peers)
  return _internal_add_peers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::Peer >&
GetPeersRsp::peers() const {
  // @@protoc_insertion_point(field_list:resource.GetPeersRsp.peers)
  return peers_;
}

// -------------------------------------------------------------------

// DeletePeerRqst

// .resource.Peer peer = 1;
inline bool DeletePeerRqst::_internal_has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline bool DeletePeerRqst::has_peer() const {
  return _internal_has_peer();
}
inline void DeletePeerRqst::clear_peer() {
  if (GetArena() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
inline const ::resource::Peer& DeletePeerRqst::_internal_peer() const {
  const ::resource::Peer* p = peer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::resource::Peer*>(
      &::resource::_Peer_default_instance_);
}
inline const ::resource::Peer& DeletePeerRqst::peer() const {
  // @@protoc_insertion_point(field_get:resource.DeletePeerRqst.peer)
  return _internal_peer();
}
inline void DeletePeerRqst::unsafe_arena_set_allocated_peer(
    ::resource::Peer* peer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resource.DeletePeerRqst.peer)
}
inline ::resource::Peer* DeletePeerRqst::release_peer() {
  
  ::resource::Peer* temp = peer_;
  peer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resource::Peer* DeletePeerRqst::unsafe_arena_release_peer() {
  // @@protoc_insertion_point(field_release:resource.DeletePeerRqst.peer)
  
  ::resource::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::resource::Peer* DeletePeerRqst::_internal_mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::resource::Peer>(GetArena());
    peer_ = p;
  }
  return peer_;
}
inline ::resource::Peer* DeletePeerRqst::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:resource.DeletePeerRqst.peer)
  return _internal_mutable_peer();
}
inline void DeletePeerRqst::set_allocated_peer(::resource::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete peer_;
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(peer);
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:resource.DeletePeerRqst.peer)
}

// -------------------------------------------------------------------

// DeletePeerRsp

// bool result = 1;
inline void DeletePeerRsp::clear_result() {
  result_ = false;
}
inline bool DeletePeerRsp::_internal_result() const {
  return result_;
}
inline bool DeletePeerRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.DeletePeerRsp.result)
  return _internal_result();
}
inline void DeletePeerRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeletePeerRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.DeletePeerRsp.result)
}

// -------------------------------------------------------------------

// AddRoleActionRqst

// string roleId = 1;
inline void AddRoleActionRqst::clear_roleid() {
  roleid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddRoleActionRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.AddRoleActionRqst.roleId)
  return _internal_roleid();
}
inline void AddRoleActionRqst::set_roleid(const std::string& value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:resource.AddRoleActionRqst.roleId)
}
inline std::string* AddRoleActionRqst::mutable_roleid() {
  // @@protoc_insertion_point(field_mutable:resource.AddRoleActionRqst.roleId)
  return _internal_mutable_roleid();
}
inline const std::string& AddRoleActionRqst::_internal_roleid() const {
  return roleid_.Get();
}
inline void AddRoleActionRqst::_internal_set_roleid(const std::string& value) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddRoleActionRqst::set_roleid(std::string&& value) {
  
  roleid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddRoleActionRqst.roleId)
}
inline void AddRoleActionRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddRoleActionRqst.roleId)
}
inline void AddRoleActionRqst::set_roleid(const char* value,
    size_t size) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddRoleActionRqst.roleId)
}
inline std::string* AddRoleActionRqst::_internal_mutable_roleid() {
  
  return roleid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddRoleActionRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.AddRoleActionRqst.roleId)
  return roleid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRoleActionRqst::set_allocated_roleid(std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddRoleActionRqst.roleId)
}

// string action = 2;
inline void AddRoleActionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddRoleActionRqst::action() const {
  // @@protoc_insertion_point(field_get:resource.AddRoleActionRqst.action)
  return _internal_action();
}
inline void AddRoleActionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:resource.AddRoleActionRqst.action)
}
inline std::string* AddRoleActionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:resource.AddRoleActionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& AddRoleActionRqst::_internal_action() const {
  return action_.Get();
}
inline void AddRoleActionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddRoleActionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddRoleActionRqst.action)
}
inline void AddRoleActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddRoleActionRqst.action)
}
inline void AddRoleActionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddRoleActionRqst.action)
}
inline std::string* AddRoleActionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddRoleActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:resource.AddRoleActionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRoleActionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddRoleActionRqst.action)
}

// -------------------------------------------------------------------

// AddRoleActionRsp

// bool result = 1;
inline void AddRoleActionRsp::clear_result() {
  result_ = false;
}
inline bool AddRoleActionRsp::_internal_result() const {
  return result_;
}
inline bool AddRoleActionRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddRoleActionRsp.result)
  return _internal_result();
}
inline void AddRoleActionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddRoleActionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.AddRoleActionRsp.result)
}

// -------------------------------------------------------------------

// RemoveRoleActionRqst

// string roleId = 1;
inline void RemoveRoleActionRqst::clear_roleid() {
  roleid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveRoleActionRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveRoleActionRqst.roleId)
  return _internal_roleid();
}
inline void RemoveRoleActionRqst::set_roleid(const std::string& value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveRoleActionRqst.roleId)
}
inline std::string* RemoveRoleActionRqst::mutable_roleid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveRoleActionRqst.roleId)
  return _internal_mutable_roleid();
}
inline const std::string& RemoveRoleActionRqst::_internal_roleid() const {
  return roleid_.Get();
}
inline void RemoveRoleActionRqst::_internal_set_roleid(const std::string& value) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveRoleActionRqst::set_roleid(std::string&& value) {
  
  roleid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveRoleActionRqst.roleId)
}
inline void RemoveRoleActionRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveRoleActionRqst.roleId)
}
inline void RemoveRoleActionRqst::set_roleid(const char* value,
    size_t size) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveRoleActionRqst.roleId)
}
inline std::string* RemoveRoleActionRqst::_internal_mutable_roleid() {
  
  return roleid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveRoleActionRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.RemoveRoleActionRqst.roleId)
  return roleid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveRoleActionRqst::set_allocated_roleid(std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveRoleActionRqst.roleId)
}

// string action = 2;
inline void RemoveRoleActionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveRoleActionRqst::action() const {
  // @@protoc_insertion_point(field_get:resource.RemoveRoleActionRqst.action)
  return _internal_action();
}
inline void RemoveRoleActionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:resource.RemoveRoleActionRqst.action)
}
inline std::string* RemoveRoleActionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveRoleActionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& RemoveRoleActionRqst::_internal_action() const {
  return action_.Get();
}
inline void RemoveRoleActionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveRoleActionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveRoleActionRqst.action)
}
inline void RemoveRoleActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveRoleActionRqst.action)
}
inline void RemoveRoleActionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveRoleActionRqst.action)
}
inline std::string* RemoveRoleActionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveRoleActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:resource.RemoveRoleActionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveRoleActionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveRoleActionRqst.action)
}

// -------------------------------------------------------------------

// RemoveRoleActionRsp

// bool result = 1;
inline void RemoveRoleActionRsp::clear_result() {
  result_ = false;
}
inline bool RemoveRoleActionRsp::_internal_result() const {
  return result_;
}
inline bool RemoveRoleActionRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveRoleActionRsp.result)
  return _internal_result();
}
inline void RemoveRoleActionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveRoleActionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.RemoveRoleActionRsp.result)
}

// -------------------------------------------------------------------

// AddApplicationActionRqst

// string applicationId = 1;
inline void AddApplicationActionRqst::clear_applicationid() {
  applicationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddApplicationActionRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:resource.AddApplicationActionRqst.applicationId)
  return _internal_applicationid();
}
inline void AddApplicationActionRqst::set_applicationid(const std::string& value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:resource.AddApplicationActionRqst.applicationId)
}
inline std::string* AddApplicationActionRqst::mutable_applicationid() {
  // @@protoc_insertion_point(field_mutable:resource.AddApplicationActionRqst.applicationId)
  return _internal_mutable_applicationid();
}
inline const std::string& AddApplicationActionRqst::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void AddApplicationActionRqst::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddApplicationActionRqst::set_applicationid(std::string&& value) {
  
  applicationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddApplicationActionRqst.applicationId)
}
inline void AddApplicationActionRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddApplicationActionRqst.applicationId)
}
inline void AddApplicationActionRqst::set_applicationid(const char* value,
    size_t size) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddApplicationActionRqst.applicationId)
}
inline std::string* AddApplicationActionRqst::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddApplicationActionRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:resource.AddApplicationActionRqst.applicationId)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddApplicationActionRqst::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddApplicationActionRqst.applicationId)
}

// string action = 2;
inline void AddApplicationActionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddApplicationActionRqst::action() const {
  // @@protoc_insertion_point(field_get:resource.AddApplicationActionRqst.action)
  return _internal_action();
}
inline void AddApplicationActionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:resource.AddApplicationActionRqst.action)
}
inline std::string* AddApplicationActionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:resource.AddApplicationActionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& AddApplicationActionRqst::_internal_action() const {
  return action_.Get();
}
inline void AddApplicationActionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddApplicationActionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddApplicationActionRqst.action)
}
inline void AddApplicationActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddApplicationActionRqst.action)
}
inline void AddApplicationActionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddApplicationActionRqst.action)
}
inline std::string* AddApplicationActionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddApplicationActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:resource.AddApplicationActionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddApplicationActionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddApplicationActionRqst.action)
}

// -------------------------------------------------------------------

// AddApplicationActionRsp

// bool result = 1;
inline void AddApplicationActionRsp::clear_result() {
  result_ = false;
}
inline bool AddApplicationActionRsp::_internal_result() const {
  return result_;
}
inline bool AddApplicationActionRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddApplicationActionRsp.result)
  return _internal_result();
}
inline void AddApplicationActionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddApplicationActionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.AddApplicationActionRsp.result)
}

// -------------------------------------------------------------------

// RemoveApplicationActionRqst

// string applicationId = 1;
inline void RemoveApplicationActionRqst::clear_applicationid() {
  applicationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveApplicationActionRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveApplicationActionRqst.applicationId)
  return _internal_applicationid();
}
inline void RemoveApplicationActionRqst::set_applicationid(const std::string& value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveApplicationActionRqst.applicationId)
}
inline std::string* RemoveApplicationActionRqst::mutable_applicationid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveApplicationActionRqst.applicationId)
  return _internal_mutable_applicationid();
}
inline const std::string& RemoveApplicationActionRqst::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void RemoveApplicationActionRqst::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveApplicationActionRqst::set_applicationid(std::string&& value) {
  
  applicationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveApplicationActionRqst.applicationId)
}
inline void RemoveApplicationActionRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveApplicationActionRqst.applicationId)
}
inline void RemoveApplicationActionRqst::set_applicationid(const char* value,
    size_t size) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveApplicationActionRqst.applicationId)
}
inline std::string* RemoveApplicationActionRqst::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveApplicationActionRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:resource.RemoveApplicationActionRqst.applicationId)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveApplicationActionRqst::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveApplicationActionRqst.applicationId)
}

// string action = 2;
inline void RemoveApplicationActionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveApplicationActionRqst::action() const {
  // @@protoc_insertion_point(field_get:resource.RemoveApplicationActionRqst.action)
  return _internal_action();
}
inline void RemoveApplicationActionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:resource.RemoveApplicationActionRqst.action)
}
inline std::string* RemoveApplicationActionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveApplicationActionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& RemoveApplicationActionRqst::_internal_action() const {
  return action_.Get();
}
inline void RemoveApplicationActionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveApplicationActionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveApplicationActionRqst.action)
}
inline void RemoveApplicationActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveApplicationActionRqst.action)
}
inline void RemoveApplicationActionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveApplicationActionRqst.action)
}
inline std::string* RemoveApplicationActionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveApplicationActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:resource.RemoveApplicationActionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveApplicationActionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveApplicationActionRqst.action)
}

// -------------------------------------------------------------------

// RemoveApplicationActionRsp

// bool result = 1;
inline void RemoveApplicationActionRsp::clear_result() {
  result_ = false;
}
inline bool RemoveApplicationActionRsp::_internal_result() const {
  return result_;
}
inline bool RemoveApplicationActionRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveApplicationActionRsp.result)
  return _internal_result();
}
inline void RemoveApplicationActionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveApplicationActionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.RemoveApplicationActionRsp.result)
}

// -------------------------------------------------------------------

// AddPeerActionRqst

// string domain = 1;
inline void AddPeerActionRqst::clear_domain() {
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddPeerActionRqst::domain() const {
  // @@protoc_insertion_point(field_get:resource.AddPeerActionRqst.domain)
  return _internal_domain();
}
inline void AddPeerActionRqst::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:resource.AddPeerActionRqst.domain)
}
inline std::string* AddPeerActionRqst::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:resource.AddPeerActionRqst.domain)
  return _internal_mutable_domain();
}
inline const std::string& AddPeerActionRqst::_internal_domain() const {
  return domain_.Get();
}
inline void AddPeerActionRqst::_internal_set_domain(const std::string& value) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddPeerActionRqst::set_domain(std::string&& value) {
  
  domain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddPeerActionRqst.domain)
}
inline void AddPeerActionRqst::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddPeerActionRqst.domain)
}
inline void AddPeerActionRqst::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddPeerActionRqst.domain)
}
inline std::string* AddPeerActionRqst::_internal_mutable_domain() {
  
  return domain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddPeerActionRqst::release_domain() {
  // @@protoc_insertion_point(field_release:resource.AddPeerActionRqst.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddPeerActionRqst::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddPeerActionRqst.domain)
}

// string action = 2;
inline void AddPeerActionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddPeerActionRqst::action() const {
  // @@protoc_insertion_point(field_get:resource.AddPeerActionRqst.action)
  return _internal_action();
}
inline void AddPeerActionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:resource.AddPeerActionRqst.action)
}
inline std::string* AddPeerActionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:resource.AddPeerActionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& AddPeerActionRqst::_internal_action() const {
  return action_.Get();
}
inline void AddPeerActionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddPeerActionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddPeerActionRqst.action)
}
inline void AddPeerActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddPeerActionRqst.action)
}
inline void AddPeerActionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddPeerActionRqst.action)
}
inline std::string* AddPeerActionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddPeerActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:resource.AddPeerActionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddPeerActionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddPeerActionRqst.action)
}

// -------------------------------------------------------------------

// AddPeerActionRsp

// bool result = 1;
inline void AddPeerActionRsp::clear_result() {
  result_ = false;
}
inline bool AddPeerActionRsp::_internal_result() const {
  return result_;
}
inline bool AddPeerActionRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddPeerActionRsp.result)
  return _internal_result();
}
inline void AddPeerActionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddPeerActionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.AddPeerActionRsp.result)
}

// -------------------------------------------------------------------

// RemovePeerActionRqst

// string domain = 1;
inline void RemovePeerActionRqst::clear_domain() {
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemovePeerActionRqst::domain() const {
  // @@protoc_insertion_point(field_get:resource.RemovePeerActionRqst.domain)
  return _internal_domain();
}
inline void RemovePeerActionRqst::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:resource.RemovePeerActionRqst.domain)
}
inline std::string* RemovePeerActionRqst::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:resource.RemovePeerActionRqst.domain)
  return _internal_mutable_domain();
}
inline const std::string& RemovePeerActionRqst::_internal_domain() const {
  return domain_.Get();
}
inline void RemovePeerActionRqst::_internal_set_domain(const std::string& value) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemovePeerActionRqst::set_domain(std::string&& value) {
  
  domain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemovePeerActionRqst.domain)
}
inline void RemovePeerActionRqst::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemovePeerActionRqst.domain)
}
inline void RemovePeerActionRqst::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemovePeerActionRqst.domain)
}
inline std::string* RemovePeerActionRqst::_internal_mutable_domain() {
  
  return domain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemovePeerActionRqst::release_domain() {
  // @@protoc_insertion_point(field_release:resource.RemovePeerActionRqst.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemovePeerActionRqst::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemovePeerActionRqst.domain)
}

// string action = 2;
inline void RemovePeerActionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemovePeerActionRqst::action() const {
  // @@protoc_insertion_point(field_get:resource.RemovePeerActionRqst.action)
  return _internal_action();
}
inline void RemovePeerActionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:resource.RemovePeerActionRqst.action)
}
inline std::string* RemovePeerActionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:resource.RemovePeerActionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& RemovePeerActionRqst::_internal_action() const {
  return action_.Get();
}
inline void RemovePeerActionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemovePeerActionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemovePeerActionRqst.action)
}
inline void RemovePeerActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemovePeerActionRqst.action)
}
inline void RemovePeerActionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemovePeerActionRqst.action)
}
inline std::string* RemovePeerActionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemovePeerActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:resource.RemovePeerActionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemovePeerActionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemovePeerActionRqst.action)
}

// -------------------------------------------------------------------

// RemovePeerActionRsp

// bool result = 1;
inline void RemovePeerActionRsp::clear_result() {
  result_ = false;
}
inline bool RemovePeerActionRsp::_internal_result() const {
  return result_;
}
inline bool RemovePeerActionRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemovePeerActionRsp.result)
  return _internal_result();
}
inline void RemovePeerActionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemovePeerActionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.RemovePeerActionRsp.result)
}

// -------------------------------------------------------------------

// AddOrganizationAccountRqst

// string organizationId = 1;
inline void AddOrganizationAccountRqst::clear_organizationid() {
  organizationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddOrganizationAccountRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationAccountRqst.organizationId)
  return _internal_organizationid();
}
inline void AddOrganizationAccountRqst::set_organizationid(const std::string& value) {
  _internal_set_organizationid(value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationAccountRqst.organizationId)
}
inline std::string* AddOrganizationAccountRqst::mutable_organizationid() {
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationAccountRqst.organizationId)
  return _internal_mutable_organizationid();
}
inline const std::string& AddOrganizationAccountRqst::_internal_organizationid() const {
  return organizationid_.Get();
}
inline void AddOrganizationAccountRqst::_internal_set_organizationid(const std::string& value) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddOrganizationAccountRqst::set_organizationid(std::string&& value) {
  
  organizationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationAccountRqst.organizationId)
}
inline void AddOrganizationAccountRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationAccountRqst.organizationId)
}
inline void AddOrganizationAccountRqst::set_organizationid(const char* value,
    size_t size) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationAccountRqst.organizationId)
}
inline std::string* AddOrganizationAccountRqst::_internal_mutable_organizationid() {
  
  return organizationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddOrganizationAccountRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationAccountRqst.organizationId)
  return organizationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOrganizationAccountRqst::set_allocated_organizationid(std::string* organizationid) {
  if (organizationid != nullptr) {
    
  } else {
    
  }
  organizationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organizationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationAccountRqst.organizationId)
}

// string accountId = 2;
inline void AddOrganizationAccountRqst::clear_accountid() {
  accountid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddOrganizationAccountRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationAccountRqst.accountId)
  return _internal_accountid();
}
inline void AddOrganizationAccountRqst::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationAccountRqst.accountId)
}
inline std::string* AddOrganizationAccountRqst::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationAccountRqst.accountId)
  return _internal_mutable_accountid();
}
inline const std::string& AddOrganizationAccountRqst::_internal_accountid() const {
  return accountid_.Get();
}
inline void AddOrganizationAccountRqst::_internal_set_accountid(const std::string& value) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddOrganizationAccountRqst::set_accountid(std::string&& value) {
  
  accountid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationAccountRqst.accountId)
}
inline void AddOrganizationAccountRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationAccountRqst.accountId)
}
inline void AddOrganizationAccountRqst::set_accountid(const char* value,
    size_t size) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationAccountRqst.accountId)
}
inline std::string* AddOrganizationAccountRqst::_internal_mutable_accountid() {
  
  return accountid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddOrganizationAccountRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationAccountRqst.accountId)
  return accountid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOrganizationAccountRqst::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    
  } else {
    
  }
  accountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationAccountRqst.accountId)
}

// -------------------------------------------------------------------

// AddOrganizationAccountRsp

// bool result = 1;
inline void AddOrganizationAccountRsp::clear_result() {
  result_ = false;
}
inline bool AddOrganizationAccountRsp::_internal_result() const {
  return result_;
}
inline bool AddOrganizationAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationAccountRsp.result)
  return _internal_result();
}
inline void AddOrganizationAccountRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddOrganizationAccountRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationAccountRsp.result)
}

// -------------------------------------------------------------------

// AddOrganizationGroupRqst

// string organizationId = 1;
inline void AddOrganizationGroupRqst::clear_organizationid() {
  organizationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddOrganizationGroupRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationGroupRqst.organizationId)
  return _internal_organizationid();
}
inline void AddOrganizationGroupRqst::set_organizationid(const std::string& value) {
  _internal_set_organizationid(value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationGroupRqst.organizationId)
}
inline std::string* AddOrganizationGroupRqst::mutable_organizationid() {
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationGroupRqst.organizationId)
  return _internal_mutable_organizationid();
}
inline const std::string& AddOrganizationGroupRqst::_internal_organizationid() const {
  return organizationid_.Get();
}
inline void AddOrganizationGroupRqst::_internal_set_organizationid(const std::string& value) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddOrganizationGroupRqst::set_organizationid(std::string&& value) {
  
  organizationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationGroupRqst.organizationId)
}
inline void AddOrganizationGroupRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationGroupRqst.organizationId)
}
inline void AddOrganizationGroupRqst::set_organizationid(const char* value,
    size_t size) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationGroupRqst.organizationId)
}
inline std::string* AddOrganizationGroupRqst::_internal_mutable_organizationid() {
  
  return organizationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddOrganizationGroupRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationGroupRqst.organizationId)
  return organizationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOrganizationGroupRqst::set_allocated_organizationid(std::string* organizationid) {
  if (organizationid != nullptr) {
    
  } else {
    
  }
  organizationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organizationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationGroupRqst.organizationId)
}

// string groupId = 2;
inline void AddOrganizationGroupRqst::clear_groupid() {
  groupid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddOrganizationGroupRqst::groupid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationGroupRqst.groupId)
  return _internal_groupid();
}
inline void AddOrganizationGroupRqst::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationGroupRqst.groupId)
}
inline std::string* AddOrganizationGroupRqst::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationGroupRqst.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& AddOrganizationGroupRqst::_internal_groupid() const {
  return groupid_.Get();
}
inline void AddOrganizationGroupRqst::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddOrganizationGroupRqst::set_groupid(std::string&& value) {
  
  groupid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationGroupRqst.groupId)
}
inline void AddOrganizationGroupRqst::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationGroupRqst.groupId)
}
inline void AddOrganizationGroupRqst::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationGroupRqst.groupId)
}
inline std::string* AddOrganizationGroupRqst::_internal_mutable_groupid() {
  
  return groupid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddOrganizationGroupRqst::release_groupid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationGroupRqst.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOrganizationGroupRqst::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationGroupRqst.groupId)
}

// -------------------------------------------------------------------

// AddOrganizationGroupRsp

// bool result = 1;
inline void AddOrganizationGroupRsp::clear_result() {
  result_ = false;
}
inline bool AddOrganizationGroupRsp::_internal_result() const {
  return result_;
}
inline bool AddOrganizationGroupRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationGroupRsp.result)
  return _internal_result();
}
inline void AddOrganizationGroupRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddOrganizationGroupRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationGroupRsp.result)
}

// -------------------------------------------------------------------

// AddOrganizationRoleRqst

// string organizationId = 1;
inline void AddOrganizationRoleRqst::clear_organizationid() {
  organizationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddOrganizationRoleRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationRoleRqst.organizationId)
  return _internal_organizationid();
}
inline void AddOrganizationRoleRqst::set_organizationid(const std::string& value) {
  _internal_set_organizationid(value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationRoleRqst.organizationId)
}
inline std::string* AddOrganizationRoleRqst::mutable_organizationid() {
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationRoleRqst.organizationId)
  return _internal_mutable_organizationid();
}
inline const std::string& AddOrganizationRoleRqst::_internal_organizationid() const {
  return organizationid_.Get();
}
inline void AddOrganizationRoleRqst::_internal_set_organizationid(const std::string& value) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddOrganizationRoleRqst::set_organizationid(std::string&& value) {
  
  organizationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationRoleRqst.organizationId)
}
inline void AddOrganizationRoleRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationRoleRqst.organizationId)
}
inline void AddOrganizationRoleRqst::set_organizationid(const char* value,
    size_t size) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationRoleRqst.organizationId)
}
inline std::string* AddOrganizationRoleRqst::_internal_mutable_organizationid() {
  
  return organizationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddOrganizationRoleRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationRoleRqst.organizationId)
  return organizationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOrganizationRoleRqst::set_allocated_organizationid(std::string* organizationid) {
  if (organizationid != nullptr) {
    
  } else {
    
  }
  organizationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organizationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationRoleRqst.organizationId)
}

// string roleId = 2;
inline void AddOrganizationRoleRqst::clear_roleid() {
  roleid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddOrganizationRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationRoleRqst.roleId)
  return _internal_roleid();
}
inline void AddOrganizationRoleRqst::set_roleid(const std::string& value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationRoleRqst.roleId)
}
inline std::string* AddOrganizationRoleRqst::mutable_roleid() {
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationRoleRqst.roleId)
  return _internal_mutable_roleid();
}
inline const std::string& AddOrganizationRoleRqst::_internal_roleid() const {
  return roleid_.Get();
}
inline void AddOrganizationRoleRqst::_internal_set_roleid(const std::string& value) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddOrganizationRoleRqst::set_roleid(std::string&& value) {
  
  roleid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationRoleRqst.roleId)
}
inline void AddOrganizationRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationRoleRqst.roleId)
}
inline void AddOrganizationRoleRqst::set_roleid(const char* value,
    size_t size) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationRoleRqst.roleId)
}
inline std::string* AddOrganizationRoleRqst::_internal_mutable_roleid() {
  
  return roleid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddOrganizationRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationRoleRqst.roleId)
  return roleid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOrganizationRoleRqst::set_allocated_roleid(std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationRoleRqst.roleId)
}

// -------------------------------------------------------------------

// AddOrganizationRoleRsp

// bool result = 1;
inline void AddOrganizationRoleRsp::clear_result() {
  result_ = false;
}
inline bool AddOrganizationRoleRsp::_internal_result() const {
  return result_;
}
inline bool AddOrganizationRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationRoleRsp.result)
  return _internal_result();
}
inline void AddOrganizationRoleRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddOrganizationRoleRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationRoleRsp.result)
}

// -------------------------------------------------------------------

// AddOrganizationApplicationRqst

// string organizationId = 1;
inline void AddOrganizationApplicationRqst::clear_organizationid() {
  organizationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddOrganizationApplicationRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationApplicationRqst.organizationId)
  return _internal_organizationid();
}
inline void AddOrganizationApplicationRqst::set_organizationid(const std::string& value) {
  _internal_set_organizationid(value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationApplicationRqst.organizationId)
}
inline std::string* AddOrganizationApplicationRqst::mutable_organizationid() {
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationApplicationRqst.organizationId)
  return _internal_mutable_organizationid();
}
inline const std::string& AddOrganizationApplicationRqst::_internal_organizationid() const {
  return organizationid_.Get();
}
inline void AddOrganizationApplicationRqst::_internal_set_organizationid(const std::string& value) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddOrganizationApplicationRqst::set_organizationid(std::string&& value) {
  
  organizationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationApplicationRqst.organizationId)
}
inline void AddOrganizationApplicationRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationApplicationRqst.organizationId)
}
inline void AddOrganizationApplicationRqst::set_organizationid(const char* value,
    size_t size) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationApplicationRqst.organizationId)
}
inline std::string* AddOrganizationApplicationRqst::_internal_mutable_organizationid() {
  
  return organizationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddOrganizationApplicationRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationApplicationRqst.organizationId)
  return organizationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOrganizationApplicationRqst::set_allocated_organizationid(std::string* organizationid) {
  if (organizationid != nullptr) {
    
  } else {
    
  }
  organizationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organizationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationApplicationRqst.organizationId)
}

// string applicationId = 2;
inline void AddOrganizationApplicationRqst::clear_applicationid() {
  applicationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddOrganizationApplicationRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationApplicationRqst.applicationId)
  return _internal_applicationid();
}
inline void AddOrganizationApplicationRqst::set_applicationid(const std::string& value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationApplicationRqst.applicationId)
}
inline std::string* AddOrganizationApplicationRqst::mutable_applicationid() {
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationApplicationRqst.applicationId)
  return _internal_mutable_applicationid();
}
inline const std::string& AddOrganizationApplicationRqst::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void AddOrganizationApplicationRqst::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddOrganizationApplicationRqst::set_applicationid(std::string&& value) {
  
  applicationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationApplicationRqst.applicationId)
}
inline void AddOrganizationApplicationRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationApplicationRqst.applicationId)
}
inline void AddOrganizationApplicationRqst::set_applicationid(const char* value,
    size_t size) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationApplicationRqst.applicationId)
}
inline std::string* AddOrganizationApplicationRqst::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddOrganizationApplicationRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationApplicationRqst.applicationId)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOrganizationApplicationRqst::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationApplicationRqst.applicationId)
}

// -------------------------------------------------------------------

// AddOrganizationApplicationRsp

// bool result = 1;
inline void AddOrganizationApplicationRsp::clear_result() {
  result_ = false;
}
inline bool AddOrganizationApplicationRsp::_internal_result() const {
  return result_;
}
inline bool AddOrganizationApplicationRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationApplicationRsp.result)
  return _internal_result();
}
inline void AddOrganizationApplicationRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddOrganizationApplicationRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationApplicationRsp.result)
}

// -------------------------------------------------------------------

// RemoveOrganizationGroupRqst

// string organizationId = 1;
inline void RemoveOrganizationGroupRqst::clear_organizationid() {
  organizationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveOrganizationGroupRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationGroupRqst.organizationId)
  return _internal_organizationid();
}
inline void RemoveOrganizationGroupRqst::set_organizationid(const std::string& value) {
  _internal_set_organizationid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationGroupRqst.organizationId)
}
inline std::string* RemoveOrganizationGroupRqst::mutable_organizationid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationGroupRqst.organizationId)
  return _internal_mutable_organizationid();
}
inline const std::string& RemoveOrganizationGroupRqst::_internal_organizationid() const {
  return organizationid_.Get();
}
inline void RemoveOrganizationGroupRqst::_internal_set_organizationid(const std::string& value) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveOrganizationGroupRqst::set_organizationid(std::string&& value) {
  
  organizationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationGroupRqst.organizationId)
}
inline void RemoveOrganizationGroupRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationGroupRqst.organizationId)
}
inline void RemoveOrganizationGroupRqst::set_organizationid(const char* value,
    size_t size) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationGroupRqst.organizationId)
}
inline std::string* RemoveOrganizationGroupRqst::_internal_mutable_organizationid() {
  
  return organizationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveOrganizationGroupRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationGroupRqst.organizationId)
  return organizationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveOrganizationGroupRqst::set_allocated_organizationid(std::string* organizationid) {
  if (organizationid != nullptr) {
    
  } else {
    
  }
  organizationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organizationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationGroupRqst.organizationId)
}

// string groupId = 2;
inline void RemoveOrganizationGroupRqst::clear_groupid() {
  groupid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveOrganizationGroupRqst::groupid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationGroupRqst.groupId)
  return _internal_groupid();
}
inline void RemoveOrganizationGroupRqst::set_groupid(const std::string& value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationGroupRqst.groupId)
}
inline std::string* RemoveOrganizationGroupRqst::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationGroupRqst.groupId)
  return _internal_mutable_groupid();
}
inline const std::string& RemoveOrganizationGroupRqst::_internal_groupid() const {
  return groupid_.Get();
}
inline void RemoveOrganizationGroupRqst::_internal_set_groupid(const std::string& value) {
  
  groupid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveOrganizationGroupRqst::set_groupid(std::string&& value) {
  
  groupid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationGroupRqst.groupId)
}
inline void RemoveOrganizationGroupRqst::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationGroupRqst.groupId)
}
inline void RemoveOrganizationGroupRqst::set_groupid(const char* value,
    size_t size) {
  
  groupid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationGroupRqst.groupId)
}
inline std::string* RemoveOrganizationGroupRqst::_internal_mutable_groupid() {
  
  return groupid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveOrganizationGroupRqst::release_groupid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationGroupRqst.groupId)
  return groupid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveOrganizationGroupRqst::set_allocated_groupid(std::string* groupid) {
  if (groupid != nullptr) {
    
  } else {
    
  }
  groupid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationGroupRqst.groupId)
}

// -------------------------------------------------------------------

// RemoveOrganizationGroupRsp

// bool result = 1;
inline void RemoveOrganizationGroupRsp::clear_result() {
  result_ = false;
}
inline bool RemoveOrganizationGroupRsp::_internal_result() const {
  return result_;
}
inline bool RemoveOrganizationGroupRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationGroupRsp.result)
  return _internal_result();
}
inline void RemoveOrganizationGroupRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveOrganizationGroupRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationGroupRsp.result)
}

// -------------------------------------------------------------------

// RemoveOrganizationRoleRqst

// string organizationId = 1;
inline void RemoveOrganizationRoleRqst::clear_organizationid() {
  organizationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveOrganizationRoleRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationRoleRqst.organizationId)
  return _internal_organizationid();
}
inline void RemoveOrganizationRoleRqst::set_organizationid(const std::string& value) {
  _internal_set_organizationid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationRoleRqst.organizationId)
}
inline std::string* RemoveOrganizationRoleRqst::mutable_organizationid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationRoleRqst.organizationId)
  return _internal_mutable_organizationid();
}
inline const std::string& RemoveOrganizationRoleRqst::_internal_organizationid() const {
  return organizationid_.Get();
}
inline void RemoveOrganizationRoleRqst::_internal_set_organizationid(const std::string& value) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveOrganizationRoleRqst::set_organizationid(std::string&& value) {
  
  organizationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationRoleRqst.organizationId)
}
inline void RemoveOrganizationRoleRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationRoleRqst.organizationId)
}
inline void RemoveOrganizationRoleRqst::set_organizationid(const char* value,
    size_t size) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationRoleRqst.organizationId)
}
inline std::string* RemoveOrganizationRoleRqst::_internal_mutable_organizationid() {
  
  return organizationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveOrganizationRoleRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationRoleRqst.organizationId)
  return organizationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveOrganizationRoleRqst::set_allocated_organizationid(std::string* organizationid) {
  if (organizationid != nullptr) {
    
  } else {
    
  }
  organizationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organizationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationRoleRqst.organizationId)
}

// string roleId = 2;
inline void RemoveOrganizationRoleRqst::clear_roleid() {
  roleid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveOrganizationRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationRoleRqst.roleId)
  return _internal_roleid();
}
inline void RemoveOrganizationRoleRqst::set_roleid(const std::string& value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationRoleRqst.roleId)
}
inline std::string* RemoveOrganizationRoleRqst::mutable_roleid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationRoleRqst.roleId)
  return _internal_mutable_roleid();
}
inline const std::string& RemoveOrganizationRoleRqst::_internal_roleid() const {
  return roleid_.Get();
}
inline void RemoveOrganizationRoleRqst::_internal_set_roleid(const std::string& value) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveOrganizationRoleRqst::set_roleid(std::string&& value) {
  
  roleid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationRoleRqst.roleId)
}
inline void RemoveOrganizationRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationRoleRqst.roleId)
}
inline void RemoveOrganizationRoleRqst::set_roleid(const char* value,
    size_t size) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationRoleRqst.roleId)
}
inline std::string* RemoveOrganizationRoleRqst::_internal_mutable_roleid() {
  
  return roleid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveOrganizationRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationRoleRqst.roleId)
  return roleid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveOrganizationRoleRqst::set_allocated_roleid(std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationRoleRqst.roleId)
}

// -------------------------------------------------------------------

// RemoveOrganizationRoleRsp

// bool result = 1;
inline void RemoveOrganizationRoleRsp::clear_result() {
  result_ = false;
}
inline bool RemoveOrganizationRoleRsp::_internal_result() const {
  return result_;
}
inline bool RemoveOrganizationRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationRoleRsp.result)
  return _internal_result();
}
inline void RemoveOrganizationRoleRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveOrganizationRoleRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationRoleRsp.result)
}

// -------------------------------------------------------------------

// RemoveOrganizationApplicationRqst

// string organizationId = 1;
inline void RemoveOrganizationApplicationRqst::clear_organizationid() {
  organizationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveOrganizationApplicationRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationApplicationRqst.organizationId)
  return _internal_organizationid();
}
inline void RemoveOrganizationApplicationRqst::set_organizationid(const std::string& value) {
  _internal_set_organizationid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationApplicationRqst.organizationId)
}
inline std::string* RemoveOrganizationApplicationRqst::mutable_organizationid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationApplicationRqst.organizationId)
  return _internal_mutable_organizationid();
}
inline const std::string& RemoveOrganizationApplicationRqst::_internal_organizationid() const {
  return organizationid_.Get();
}
inline void RemoveOrganizationApplicationRqst::_internal_set_organizationid(const std::string& value) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveOrganizationApplicationRqst::set_organizationid(std::string&& value) {
  
  organizationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationApplicationRqst.organizationId)
}
inline void RemoveOrganizationApplicationRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationApplicationRqst.organizationId)
}
inline void RemoveOrganizationApplicationRqst::set_organizationid(const char* value,
    size_t size) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationApplicationRqst.organizationId)
}
inline std::string* RemoveOrganizationApplicationRqst::_internal_mutable_organizationid() {
  
  return organizationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveOrganizationApplicationRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationApplicationRqst.organizationId)
  return organizationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveOrganizationApplicationRqst::set_allocated_organizationid(std::string* organizationid) {
  if (organizationid != nullptr) {
    
  } else {
    
  }
  organizationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organizationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationApplicationRqst.organizationId)
}

// string applicationId = 2;
inline void RemoveOrganizationApplicationRqst::clear_applicationid() {
  applicationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveOrganizationApplicationRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationApplicationRqst.applicationId)
  return _internal_applicationid();
}
inline void RemoveOrganizationApplicationRqst::set_applicationid(const std::string& value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationApplicationRqst.applicationId)
}
inline std::string* RemoveOrganizationApplicationRqst::mutable_applicationid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationApplicationRqst.applicationId)
  return _internal_mutable_applicationid();
}
inline const std::string& RemoveOrganizationApplicationRqst::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void RemoveOrganizationApplicationRqst::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveOrganizationApplicationRqst::set_applicationid(std::string&& value) {
  
  applicationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationApplicationRqst.applicationId)
}
inline void RemoveOrganizationApplicationRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationApplicationRqst.applicationId)
}
inline void RemoveOrganizationApplicationRqst::set_applicationid(const char* value,
    size_t size) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationApplicationRqst.applicationId)
}
inline std::string* RemoveOrganizationApplicationRqst::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveOrganizationApplicationRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationApplicationRqst.applicationId)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveOrganizationApplicationRqst::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationApplicationRqst.applicationId)
}

// -------------------------------------------------------------------

// RemoveOrganizationApplicationRsp

// bool result = 1;
inline void RemoveOrganizationApplicationRsp::clear_result() {
  result_ = false;
}
inline bool RemoveOrganizationApplicationRsp::_internal_result() const {
  return result_;
}
inline bool RemoveOrganizationApplicationRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationApplicationRsp.result)
  return _internal_result();
}
inline void RemoveOrganizationApplicationRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveOrganizationApplicationRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationApplicationRsp.result)
}

// -------------------------------------------------------------------

// RemoveOrganizationAccountRqst

// string organizationId = 1;
inline void RemoveOrganizationAccountRqst::clear_organizationid() {
  organizationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveOrganizationAccountRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationAccountRqst.organizationId)
  return _internal_organizationid();
}
inline void RemoveOrganizationAccountRqst::set_organizationid(const std::string& value) {
  _internal_set_organizationid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationAccountRqst.organizationId)
}
inline std::string* RemoveOrganizationAccountRqst::mutable_organizationid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationAccountRqst.organizationId)
  return _internal_mutable_organizationid();
}
inline const std::string& RemoveOrganizationAccountRqst::_internal_organizationid() const {
  return organizationid_.Get();
}
inline void RemoveOrganizationAccountRqst::_internal_set_organizationid(const std::string& value) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveOrganizationAccountRqst::set_organizationid(std::string&& value) {
  
  organizationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationAccountRqst.organizationId)
}
inline void RemoveOrganizationAccountRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationAccountRqst.organizationId)
}
inline void RemoveOrganizationAccountRqst::set_organizationid(const char* value,
    size_t size) {
  
  organizationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationAccountRqst.organizationId)
}
inline std::string* RemoveOrganizationAccountRqst::_internal_mutable_organizationid() {
  
  return organizationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveOrganizationAccountRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationAccountRqst.organizationId)
  return organizationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveOrganizationAccountRqst::set_allocated_organizationid(std::string* organizationid) {
  if (organizationid != nullptr) {
    
  } else {
    
  }
  organizationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organizationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationAccountRqst.organizationId)
}

// string accountId = 2;
inline void RemoveOrganizationAccountRqst::clear_accountid() {
  accountid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveOrganizationAccountRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationAccountRqst.accountId)
  return _internal_accountid();
}
inline void RemoveOrganizationAccountRqst::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationAccountRqst.accountId)
}
inline std::string* RemoveOrganizationAccountRqst::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationAccountRqst.accountId)
  return _internal_mutable_accountid();
}
inline const std::string& RemoveOrganizationAccountRqst::_internal_accountid() const {
  return accountid_.Get();
}
inline void RemoveOrganizationAccountRqst::_internal_set_accountid(const std::string& value) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveOrganizationAccountRqst::set_accountid(std::string&& value) {
  
  accountid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationAccountRqst.accountId)
}
inline void RemoveOrganizationAccountRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationAccountRqst.accountId)
}
inline void RemoveOrganizationAccountRqst::set_accountid(const char* value,
    size_t size) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationAccountRqst.accountId)
}
inline std::string* RemoveOrganizationAccountRqst::_internal_mutable_accountid() {
  
  return accountid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveOrganizationAccountRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationAccountRqst.accountId)
  return accountid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveOrganizationAccountRqst::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    
  } else {
    
  }
  accountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationAccountRqst.accountId)
}

// -------------------------------------------------------------------

// RemoveOrganizationAccountRsp

// bool result = 1;
inline void RemoveOrganizationAccountRsp::clear_result() {
  result_ = false;
}
inline bool RemoveOrganizationAccountRsp::_internal_result() const {
  return result_;
}
inline bool RemoveOrganizationAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationAccountRsp.result)
  return _internal_result();
}
inline void RemoveOrganizationAccountRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveOrganizationAccountRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationAccountRsp.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resource

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_resource_2eproto
