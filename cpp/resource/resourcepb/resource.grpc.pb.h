// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: resource.proto
// Original file comments:
// *
// Management and definition of resources.
#ifndef GRPC_resource_2eproto__INCLUDED
#define GRPC_resource_2eproto__INCLUDED

#include "resource.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace resource {

// *
// That service is use to manage Globular resource like permissions and accounts
// or role. The service made use of Persistence service to store various 
// objects.
class ResourceService final {
 public:
  static constexpr char const* service_full_name() {
    return "resource.ResourceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // * Register a peer on the network *
    virtual ::grpc::Status RegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::resource::RegisterPeerRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RegisterPeerRsp>> AsyncRegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RegisterPeerRsp>>(AsyncRegisterPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RegisterPeerRsp>> PrepareAsyncRegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RegisterPeerRsp>>(PrepareAsyncRegisterPeerRaw(context, request, cq));
    }
    // * Return the list of peers *
    std::unique_ptr< ::grpc::ClientReaderInterface< ::resource::GetPeersRsp>> GetPeers(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::resource::GetPeersRsp>>(GetPeersRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resource::GetPeersRsp>> AsyncGetPeers(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resource::GetPeersRsp>>(AsyncGetPeersRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resource::GetPeersRsp>> PrepareAsyncGetPeers(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resource::GetPeersRsp>>(PrepareAsyncGetPeersRaw(context, request, cq));
    }
    // * Remove a peer from the network *
    virtual ::grpc::Status DeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::resource::DeletePeerRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeletePeerRsp>> AsyncDeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeletePeerRsp>>(AsyncDeletePeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeletePeerRsp>> PrepareAsyncDeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeletePeerRsp>>(PrepareAsyncDeletePeerRaw(context, request, cq));
    }
    // * Add peer action permission *
    virtual ::grpc::Status AddPeerAction(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst& request, ::resource::AddPeerActionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddPeerActionRsp>> AsyncAddPeerAction(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddPeerActionRsp>>(AsyncAddPeerActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddPeerActionRsp>> PrepareAsyncAddPeerAction(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddPeerActionRsp>>(PrepareAsyncAddPeerActionRaw(context, request, cq));
    }
    // * Remove peer action permission *
    virtual ::grpc::Status RemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::resource::RemovePeerActionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemovePeerActionRsp>> AsyncRemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemovePeerActionRsp>>(AsyncRemovePeerActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemovePeerActionRsp>> PrepareAsyncRemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemovePeerActionRsp>>(PrepareAsyncRemovePeerActionRaw(context, request, cq));
    }
    // * Register a new Account *
    virtual ::grpc::Status RegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::resource::RegisterAccountRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RegisterAccountRsp>> AsyncRegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RegisterAccountRsp>>(AsyncRegisterAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RegisterAccountRsp>> PrepareAsyncRegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RegisterAccountRsp>>(PrepareAsyncRegisterAccountRaw(context, request, cq));
    }
    // * Delete an account *
    virtual ::grpc::Status DeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::resource::DeleteAccountRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteAccountRsp>> AsyncDeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteAccountRsp>>(AsyncDeleteAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteAccountRsp>> PrepareAsyncDeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteAccountRsp>>(PrepareAsyncDeleteAccountRaw(context, request, cq));
    }
    // * Authenticate a user *
    virtual ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::resource::AuthenticateRqst& request, ::resource::AuthenticateRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AuthenticateRsp>> AsyncAuthenticate(::grpc::ClientContext* context, const ::resource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AuthenticateRsp>>(AsyncAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AuthenticateRsp>> PrepareAsyncAuthenticate(::grpc::ClientContext* context, const ::resource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AuthenticateRsp>>(PrepareAsyncAuthenticateRaw(context, request, cq));
    }
    // * Synchronize Resource with LDAP if connection exist *
    virtual ::grpc::Status SynchronizeLdap(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst& request, ::resource::SynchronizeLdapRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SynchronizeLdapRsp>> AsyncSynchronizeLdap(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SynchronizeLdapRsp>>(AsyncSynchronizeLdapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SynchronizeLdapRsp>> PrepareAsyncSynchronizeLdap(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SynchronizeLdapRsp>>(PrepareAsyncSynchronizeLdapRaw(context, request, cq));
    }
    // * Refresh token get a new token *
    virtual ::grpc::Status RefreshToken(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst& request, ::resource::RefreshTokenRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RefreshTokenRsp>> AsyncRefreshToken(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RefreshTokenRsp>>(AsyncRefreshTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RefreshTokenRsp>> PrepareAsyncRefreshToken(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RefreshTokenRsp>>(PrepareAsyncRefreshTokenRaw(context, request, cq));
    }
    // * Add role to a given account *
    virtual ::grpc::Status AddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::resource::AddAccountRoleRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddAccountRoleRsp>> AsyncAddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddAccountRoleRsp>>(AsyncAddAccountRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddAccountRoleRsp>> PrepareAsyncAddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddAccountRoleRsp>>(PrepareAsyncAddAccountRoleRaw(context, request, cq));
    }
    // * Remove a role from a given account *
    virtual ::grpc::Status RemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::resource::RemoveAccountRoleRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveAccountRoleRsp>> AsyncRemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveAccountRoleRsp>>(AsyncRemoveAccountRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveAccountRoleRsp>> PrepareAsyncRemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveAccountRoleRsp>>(PrepareAsyncRemoveAccountRoleRaw(context, request, cq));
    }
    // * Create a role with given action list *
    virtual ::grpc::Status CreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::resource::CreateRoleRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::CreateRoleRsp>> AsyncCreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::CreateRoleRsp>>(AsyncCreateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::CreateRoleRsp>> PrepareAsyncCreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::CreateRoleRsp>>(PrepareAsyncCreateRoleRaw(context, request, cq));
    }
    // * Delete a role with a given id *
    virtual ::grpc::Status DeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::resource::DeleteRoleRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteRoleRsp>> AsyncDeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteRoleRsp>>(AsyncDeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteRoleRsp>> PrepareAsyncDeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteRoleRsp>>(PrepareAsyncDeleteRoleRaw(context, request, cq));
    }
    // * Append an action to existing role. *
    virtual ::grpc::Status AddRoleAction(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst& request, ::resource::AddRoleActionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddRoleActionRsp>> AsyncAddRoleAction(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddRoleActionRsp>>(AsyncAddRoleActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddRoleActionRsp>> PrepareAsyncAddRoleAction(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddRoleActionRsp>>(PrepareAsyncAddRoleActionRaw(context, request, cq));
    }
    // * Remove an action to existing role. *
    virtual ::grpc::Status RemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::resource::RemoveRoleActionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveRoleActionRsp>> AsyncRemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveRoleActionRsp>>(AsyncRemoveRoleActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveRoleActionRsp>> PrepareAsyncRemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveRoleActionRsp>>(PrepareAsyncRemoveRoleActionRaw(context, request, cq));
    }
    // * Append an action to existing applications. *
    virtual ::grpc::Status AddApplicationAction(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst& request, ::resource::AddApplicationActionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddApplicationActionRsp>> AsyncAddApplicationAction(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddApplicationActionRsp>>(AsyncAddApplicationActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddApplicationActionRsp>> PrepareAsyncAddApplicationAction(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddApplicationActionRsp>>(PrepareAsyncAddApplicationActionRaw(context, request, cq));
    }
    // * Remove an action to existing applications. *
    virtual ::grpc::Status RemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::resource::RemoveApplicationActionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveApplicationActionRsp>> AsyncRemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveApplicationActionRsp>>(AsyncRemoveApplicationActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveApplicationActionRsp>> PrepareAsyncRemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveApplicationActionRsp>>(PrepareAsyncRemoveApplicationActionRaw(context, request, cq));
    }
    // * Get all actions *
    virtual ::grpc::Status GetAllActions(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst& request, ::resource::GetAllActionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllActionsRsp>> AsyncGetAllActions(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllActionsRsp>>(AsyncGetAllActionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllActionsRsp>> PrepareAsyncGetAllActions(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllActionsRsp>>(PrepareAsyncGetAllActionsRaw(context, request, cq));
    }
    // *  *
    virtual ::grpc::Status GetPermissions(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst& request, ::resource::GetPermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetPermissionsRsp>> AsyncGetPermissions(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetPermissionsRsp>>(AsyncGetPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetPermissionsRsp>> PrepareAsyncGetPermissions(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetPermissionsRsp>>(PrepareAsyncGetPermissionsRaw(context, request, cq));
    }
    // * Set a file permission, create new one if not already exist. *
    virtual ::grpc::Status SetPermission(::grpc::ClientContext* context, const ::resource::SetPermissionRqst& request, ::resource::SetPermissionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetPermissionRsp>> AsyncSetPermission(::grpc::ClientContext* context, const ::resource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetPermissionRsp>>(AsyncSetPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetPermissionRsp>> PrepareAsyncSetPermission(::grpc::ClientContext* context, const ::resource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetPermissionRsp>>(PrepareAsyncSetPermissionRaw(context, request, cq));
    }
    // * Delete a file permissions *
    virtual ::grpc::Status DeletePermissions(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst& request, ::resource::DeletePermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeletePermissionsRsp>> AsyncDeletePermissions(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeletePermissionsRsp>>(AsyncDeletePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeletePermissionsRsp>> PrepareAsyncDeletePermissions(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeletePermissionsRsp>>(PrepareAsyncDeletePermissionsRaw(context, request, cq));
    }
    // * Set Resource owner *
    virtual ::grpc::Status SetResourceOwner(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst& request, ::resource::SetResourceOwnerRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetResourceOwnerRsp>> AsyncSetResourceOwner(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetResourceOwnerRsp>>(AsyncSetResourceOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetResourceOwnerRsp>> PrepareAsyncSetResourceOwner(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetResourceOwnerRsp>>(PrepareAsyncSetResourceOwnerRaw(context, request, cq));
    }
    // * Get the resource owners *
    virtual ::grpc::Status GetResourceOwners(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst& request, ::resource::GetResourceOwnersRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetResourceOwnersRsp>> AsyncGetResourceOwners(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetResourceOwnersRsp>>(AsyncGetResourceOwnersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetResourceOwnersRsp>> PrepareAsyncGetResourceOwners(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetResourceOwnersRsp>>(PrepareAsyncGetResourceOwnersRaw(context, request, cq));
    }
    // * Delete the resource owner *
    virtual ::grpc::Status DeleteResourceOwner(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst& request, ::resource::DeleteResourceOwnerRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteResourceOwnerRsp>> AsyncDeleteResourceOwner(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteResourceOwnerRsp>>(AsyncDeleteResourceOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteResourceOwnerRsp>> PrepareAsyncDeleteResourceOwner(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteResourceOwnerRsp>>(PrepareAsyncDeleteResourceOwnerRaw(context, request, cq));
    }
    // * Delete the resource owners *
    virtual ::grpc::Status DeleteResourceOwners(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst& request, ::resource::DeleteResourceOwnersRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteResourceOwnersRsp>> AsyncDeleteResourceOwners(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteResourceOwnersRsp>>(AsyncDeleteResourceOwnersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteResourceOwnersRsp>> PrepareAsyncDeleteResourceOwners(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteResourceOwnersRsp>>(PrepareAsyncDeleteResourceOwnersRaw(context, request, cq));
    }
    // * Retrun a json string with all file info *
    virtual ::grpc::Status GetAllFilesInfo(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst& request, ::resource::GetAllFilesInfoRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllFilesInfoRsp>> AsyncGetAllFilesInfo(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllFilesInfoRsp>>(AsyncGetAllFilesInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllFilesInfoRsp>> PrepareAsyncGetAllFilesInfo(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllFilesInfoRsp>>(PrepareAsyncGetAllFilesInfoRaw(context, request, cq));
    }
    // * Validate a token *
    virtual ::grpc::Status ValidateToken(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst& request, ::resource::ValidateTokenRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateTokenRsp>> AsyncValidateToken(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateTokenRsp>>(AsyncValidateTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateTokenRsp>> PrepareAsyncValidateToken(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateTokenRsp>>(PrepareAsyncValidateTokenRaw(context, request, cq));
    }
    // * Validate if user can access a given resource. *
    virtual ::grpc::Status ValidateUserResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst& request, ::resource::ValidateUserResourceAccessRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateUserResourceAccessRsp>> AsyncValidateUserResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateUserResourceAccessRsp>>(AsyncValidateUserResourceAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateUserResourceAccessRsp>> PrepareAsyncValidateUserResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateUserResourceAccessRsp>>(PrepareAsyncValidateUserResourceAccessRaw(context, request, cq));
    }
    // * Validate if application can access a given ressouce. *
    virtual ::grpc::Status ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst& request, ::resource::ValidateApplicationResourceAccessRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateApplicationResourceAccessRsp>> AsyncValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateApplicationResourceAccessRsp>>(AsyncValidateApplicationResourceAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateApplicationResourceAccessRsp>> PrepareAsyncValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateApplicationResourceAccessRsp>>(PrepareAsyncValidateApplicationResourceAccessRaw(context, request, cq));
    }
    // * Validate if user can access a given method. *
    virtual ::grpc::Status ValidateUserAccess(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst& request, ::resource::ValidateUserAccessRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateUserAccessRsp>> AsyncValidateUserAccess(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateUserAccessRsp>>(AsyncValidateUserAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateUserAccessRsp>> PrepareAsyncValidateUserAccess(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateUserAccessRsp>>(PrepareAsyncValidateUserAccessRaw(context, request, cq));
    }
    // * Validate if application can access a given method. *
    virtual ::grpc::Status ValidateApplicationAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst& request, ::resource::ValidateApplicationAccessRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateApplicationAccessRsp>> AsyncValidateApplicationAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateApplicationAccessRsp>>(AsyncValidateApplicationAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateApplicationAccessRsp>> PrepareAsyncValidateApplicationAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateApplicationAccessRsp>>(PrepareAsyncValidateApplicationAccessRaw(context, request, cq));
    }
    // * Validate if a peer can access a given method. *
    virtual ::grpc::Status ValidatePeerAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst& request, ::resource::ValidatePeerAccessRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidatePeerAccessRsp>> AsyncValidatePeerAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidatePeerAccessRsp>>(AsyncValidatePeerAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidatePeerAccessRsp>> PrepareAsyncValidatePeerAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidatePeerAccessRsp>>(PrepareAsyncValidatePeerAccessRaw(context, request, cq));
    }
    // * Validate if a peer can access a given resource. *
    virtual ::grpc::Status ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst& request, ::resource::ValidatePeerResourceAccessRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidatePeerResourceAccessRsp>> AsyncValidatePeerResourceAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidatePeerResourceAccessRsp>>(AsyncValidatePeerResourceAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidatePeerResourceAccessRsp>> PrepareAsyncValidatePeerResourceAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidatePeerResourceAccessRsp>>(PrepareAsyncValidatePeerResourceAccessRaw(context, request, cq));
    }
    // * Delete all permission for a given account *
    virtual ::grpc::Status DeleteAccountPermissions(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst& request, ::resource::DeleteAccountPermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteAccountPermissionsRsp>> AsyncDeleteAccountPermissions(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteAccountPermissionsRsp>>(AsyncDeleteAccountPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteAccountPermissionsRsp>> PrepareAsyncDeleteAccountPermissions(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteAccountPermissionsRsp>>(PrepareAsyncDeleteAccountPermissionsRaw(context, request, cq));
    }
    // * Delete all permission for a given role *
    virtual ::grpc::Status DeleteRolePermissions(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst& request, ::resource::DeleteRolePermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteRolePermissionsRsp>> AsyncDeleteRolePermissions(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteRolePermissionsRsp>>(AsyncDeleteRolePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteRolePermissionsRsp>> PrepareAsyncDeleteRolePermissions(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteRolePermissionsRsp>>(PrepareAsyncDeleteRolePermissionsRaw(context, request, cq));
    }
    // * Return a json string with all applications informations *
    virtual ::grpc::Status GetAllApplicationsInfo(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst& request, ::resource::GetAllApplicationsInfoRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllApplicationsInfoRsp>> AsyncGetAllApplicationsInfo(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllApplicationsInfoRsp>>(AsyncGetAllApplicationsInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllApplicationsInfoRsp>> PrepareAsyncGetAllApplicationsInfo(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllApplicationsInfoRsp>>(PrepareAsyncGetAllApplicationsInfoRaw(context, request, cq));
    }
    // * Delete an application from the server. *
    virtual ::grpc::Status DeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::resource::DeleteApplicationRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteApplicationRsp>> AsyncDeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteApplicationRsp>>(AsyncDeleteApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteApplicationRsp>> PrepareAsyncDeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteApplicationRsp>>(PrepareAsyncDeleteApplicationRaw(context, request, cq));
    }
    // * Set a method into the log... *
    virtual ::grpc::Status Log(::grpc::ClientContext* context, const ::resource::LogRqst& request, ::resource::LogRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::LogRsp>> AsyncLog(::grpc::ClientContext* context, const ::resource::LogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::LogRsp>>(AsyncLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::LogRsp>> PrepareAsyncLog(::grpc::ClientContext* context, const ::resource::LogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::LogRsp>>(PrepareAsyncLogRaw(context, request, cq));
    }
    // * Get the list of logs *
    std::unique_ptr< ::grpc::ClientReaderInterface< ::resource::GetLogRsp>> GetLog(::grpc::ClientContext* context, const ::resource::GetLogRqst& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::resource::GetLogRsp>>(GetLogRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resource::GetLogRsp>> AsyncGetLog(::grpc::ClientContext* context, const ::resource::GetLogRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resource::GetLogRsp>>(AsyncGetLogRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resource::GetLogRsp>> PrepareAsyncGetLog(::grpc::ClientContext* context, const ::resource::GetLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resource::GetLogRsp>>(PrepareAsyncGetLogRaw(context, request, cq));
    }
    // * Delete a single log entry *
    virtual ::grpc::Status DeleteLog(::grpc::ClientContext* context, const ::resource::DeleteLogRqst& request, ::resource::DeleteLogRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteLogRsp>> AsyncDeleteLog(::grpc::ClientContext* context, const ::resource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteLogRsp>>(AsyncDeleteLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteLogRsp>> PrepareAsyncDeleteLog(::grpc::ClientContext* context, const ::resource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteLogRsp>>(PrepareAsyncDeleteLogRaw(context, request, cq));
    }
    // * Delete all log *
    virtual ::grpc::Status ClearAllLog(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst& request, ::resource::ClearAllLogRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ClearAllLogRsp>> AsyncClearAllLog(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ClearAllLogRsp>>(AsyncClearAllLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ClearAllLogRsp>> PrepareAsyncClearAllLog(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::ClearAllLogRsp>>(PrepareAsyncClearAllLogRaw(context, request, cq));
    }
    // * Get all resources 
    std::unique_ptr< ::grpc::ClientReaderInterface< ::resource::GetResourcesRsp>> GetResources(::grpc::ClientContext* context, const ::resource::GetResourcesRqst& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::resource::GetResourcesRsp>>(GetResourcesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resource::GetResourcesRsp>> AsyncGetResources(::grpc::ClientContext* context, const ::resource::GetResourcesRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resource::GetResourcesRsp>>(AsyncGetResourcesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resource::GetResourcesRsp>> PrepareAsyncGetResources(::grpc::ClientContext* context, const ::resource::GetResourcesRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resource::GetResourcesRsp>>(PrepareAsyncGetResourcesRaw(context, request, cq));
    }
    // * Set a resource from a client (custom service) to globular 
    virtual ::grpc::Status SetResource(::grpc::ClientContext* context, const ::resource::SetResourceRqst& request, ::resource::SetResourceRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetResourceRsp>> AsyncSetResource(::grpc::ClientContext* context, const ::resource::SetResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetResourceRsp>>(AsyncSetResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetResourceRsp>> PrepareAsyncSetResource(::grpc::ClientContext* context, const ::resource::SetResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetResourceRsp>>(PrepareAsyncSetResourceRaw(context, request, cq));
    }
    // * Remove a resource from a client (custom service) to globular 
    virtual ::grpc::Status RemoveResource(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst& request, ::resource::RemoveResourceRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveResourceRsp>> AsyncRemoveResource(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveResourceRsp>>(AsyncRemoveResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveResourceRsp>> PrepareAsyncRemoveResource(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveResourceRsp>>(PrepareAsyncRemoveResourceRaw(context, request, cq));
    }
    // * Set resource action permission *
    virtual ::grpc::Status SetActionPermission(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst& request, ::resource::SetActionPermissionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetActionPermissionRsp>> AsyncSetActionPermission(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetActionPermissionRsp>>(AsyncSetActionPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetActionPermissionRsp>> PrepareAsyncSetActionPermission(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetActionPermissionRsp>>(PrepareAsyncSetActionPermissionRaw(context, request, cq));
    }
    // * Remove resource action permission *
    virtual ::grpc::Status RemoveActionPermission(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst& request, ::resource::RemoveActionPermissionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveActionPermissionRsp>> AsyncRemoveActionPermission(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveActionPermissionRsp>>(AsyncRemoveActionPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveActionPermissionRsp>> PrepareAsyncRemoveActionPermission(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveActionPermissionRsp>>(PrepareAsyncRemoveActionPermissionRaw(context, request, cq));
    }
    // * Get resource action permission *
    virtual ::grpc::Status GetActionPermission(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst& request, ::resource::GetActionPermissionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetActionPermissionRsp>> AsyncGetActionPermission(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetActionPermissionRsp>>(AsyncGetActionPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetActionPermissionRsp>> PrepareAsyncGetActionPermission(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetActionPermissionRsp>>(PrepareAsyncGetActionPermissionRaw(context, request, cq));
    }
    // * Create Permission for a dir (recursive) *
    virtual ::grpc::Status CreateDirPermissions(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst& request, ::resource::CreateDirPermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::CreateDirPermissionsRsp>> AsyncCreateDirPermissions(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::CreateDirPermissionsRsp>>(AsyncCreateDirPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::CreateDirPermissionsRsp>> PrepareAsyncCreateDirPermissions(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::CreateDirPermissionsRsp>>(PrepareAsyncCreateDirPermissionsRaw(context, request, cq));
    }
    // * Rename file/dir permission *
    virtual ::grpc::Status RenameFilePermission(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst& request, ::resource::RenameFilePermissionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RenameFilePermissionRsp>> AsyncRenameFilePermission(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RenameFilePermissionRsp>>(AsyncRenameFilePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RenameFilePermissionRsp>> PrepareAsyncRenameFilePermission(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::RenameFilePermissionRsp>>(PrepareAsyncRenameFilePermissionRaw(context, request, cq));
    }
    // * Delete Permission for a dir (recursive) *
    virtual ::grpc::Status DeleteDirPermissions(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst& request, ::resource::DeleteDirPermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteDirPermissionsRsp>> AsyncDeleteDirPermissions(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteDirPermissionsRsp>>(AsyncDeleteDirPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteDirPermissionsRsp>> PrepareAsyncDeleteDirPermissions(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteDirPermissionsRsp>>(PrepareAsyncDeleteDirPermissionsRaw(context, request, cq));
    }
    // * Delete a single file permission *
    virtual ::grpc::Status DeleteFilePermissions(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst& request, ::resource::DeleteFilePermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteFilePermissionsRsp>> AsyncDeleteFilePermissions(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteFilePermissionsRsp>>(AsyncDeleteFilePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteFilePermissionsRsp>> PrepareAsyncDeleteFilePermissions(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteFilePermissionsRsp>>(PrepareAsyncDeleteFilePermissionsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // * Register a peer on the network *
      virtual void RegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst* request, ::resource::RegisterPeerRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterPeerRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst* request, ::resource::RegisterPeerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst* request, ::resource::RegisterPeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterPeerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterPeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Return the list of peers *
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPeers(::grpc::ClientContext* context, ::resource::GetPeersRqst* request, ::grpc::ClientReadReactor< ::resource::GetPeersRsp>* reactor) = 0;
      #else
      virtual void GetPeers(::grpc::ClientContext* context, ::resource::GetPeersRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetPeersRsp>* reactor) = 0;
      #endif
      // * Remove a peer from the network *
      virtual void DeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst* request, ::resource::DeletePeerRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePeerRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst* request, ::resource::DeletePeerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst* request, ::resource::DeletePeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeletePeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePeerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeletePeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Add peer action permission *
      virtual void AddPeerAction(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst* request, ::resource::AddPeerActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddPeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddPeerActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddPeerAction(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst* request, ::resource::AddPeerActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddPeerAction(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst* request, ::resource::AddPeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddPeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddPeerActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddPeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddPeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Remove peer action permission *
      virtual void RemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst* request, ::resource::RemovePeerActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemovePeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemovePeerActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst* request, ::resource::RemovePeerActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst* request, ::resource::RemovePeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemovePeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemovePeerActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemovePeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemovePeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Register a new Account *
      virtual void RegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst* request, ::resource::RegisterAccountRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterAccountRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst* request, ::resource::RegisterAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst* request, ::resource::RegisterAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete an account *
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst* request, ::resource::DeleteAccountRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst* request, ::resource::DeleteAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst* request, ::resource::DeleteAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Authenticate a user *
      virtual void Authenticate(::grpc::ClientContext* context, const ::resource::AuthenticateRqst* request, ::resource::AuthenticateRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AuthenticateRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Authenticate(::grpc::ClientContext* context, const ::resource::AuthenticateRqst* request, ::resource::AuthenticateRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Authenticate(::grpc::ClientContext* context, const ::resource::AuthenticateRqst* request, ::resource::AuthenticateRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AuthenticateRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AuthenticateRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Synchronize Resource with LDAP if connection exist *
      virtual void SynchronizeLdap(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst* request, ::resource::SynchronizeLdapRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SynchronizeLdapRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SynchronizeLdap(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst* request, ::resource::SynchronizeLdapRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SynchronizeLdap(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst* request, ::resource::SynchronizeLdapRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SynchronizeLdapRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SynchronizeLdapRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Refresh token get a new token *
      virtual void RefreshToken(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst* request, ::resource::RefreshTokenRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RefreshTokenRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RefreshToken(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst* request, ::resource::RefreshTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RefreshToken(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst* request, ::resource::RefreshTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RefreshTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RefreshTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Add role to a given account *
      virtual void AddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst* request, ::resource::AddAccountRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddAccountRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst* request, ::resource::AddAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst* request, ::resource::AddAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Remove a role from a given account *
      virtual void RemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst* request, ::resource::RemoveAccountRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveAccountRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst* request, ::resource::RemoveAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst* request, ::resource::RemoveAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Create a role with given action list *
      virtual void CreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst* request, ::resource::CreateRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst* request, ::resource::CreateRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst* request, ::resource::CreateRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete a role with a given id *
      virtual void DeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst* request, ::resource::DeleteRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst* request, ::resource::DeleteRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst* request, ::resource::DeleteRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Append an action to existing role. *
      virtual void AddRoleAction(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst* request, ::resource::AddRoleActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddRoleActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddRoleAction(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst* request, ::resource::AddRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddRoleAction(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst* request, ::resource::AddRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Remove an action to existing role. *
      virtual void RemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst* request, ::resource::RemoveRoleActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveRoleActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst* request, ::resource::RemoveRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst* request, ::resource::RemoveRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Append an action to existing applications. *
      virtual void AddApplicationAction(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst* request, ::resource::AddApplicationActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddApplicationActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddApplicationAction(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst* request, ::resource::AddApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddApplicationAction(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst* request, ::resource::AddApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Remove an action to existing applications. *
      virtual void RemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst* request, ::resource::RemoveApplicationActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveApplicationActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst* request, ::resource::RemoveApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst* request, ::resource::RemoveApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Get all actions *
      virtual void GetAllActions(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst* request, ::resource::GetAllActionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllActionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllActions(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst* request, ::resource::GetAllActionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllActions(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst* request, ::resource::GetAllActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllActionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *  *
      virtual void GetPermissions(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst* request, ::resource::GetPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPermissions(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst* request, ::resource::GetPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPermissions(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst* request, ::resource::GetPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Set a file permission, create new one if not already exist. *
      virtual void SetPermission(::grpc::ClientContext* context, const ::resource::SetPermissionRqst* request, ::resource::SetPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPermission(::grpc::ClientContext* context, const ::resource::SetPermissionRqst* request, ::resource::SetPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPermission(::grpc::ClientContext* context, const ::resource::SetPermissionRqst* request, ::resource::SetPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete a file permissions *
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst* request, ::resource::DeletePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst* request, ::resource::DeletePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst* request, ::resource::DeletePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Set Resource owner *
      virtual void SetResourceOwner(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst* request, ::resource::SetResourceOwnerRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetResourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetResourceOwnerRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetResourceOwner(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst* request, ::resource::SetResourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetResourceOwner(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst* request, ::resource::SetResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetResourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetResourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetResourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Get the resource owners *
      virtual void GetResourceOwners(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst* request, ::resource::GetResourceOwnersRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetResourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetResourceOwnersRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetResourceOwners(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst* request, ::resource::GetResourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetResourceOwners(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst* request, ::resource::GetResourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetResourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetResourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetResourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetResourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete the resource owner *
      virtual void DeleteResourceOwner(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst* request, ::resource::DeleteResourceOwnerRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteResourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteResourceOwnerRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteResourceOwner(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst* request, ::resource::DeleteResourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteResourceOwner(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst* request, ::resource::DeleteResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteResourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteResourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteResourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete the resource owners *
      virtual void DeleteResourceOwners(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst* request, ::resource::DeleteResourceOwnersRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteResourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteResourceOwnersRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteResourceOwners(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst* request, ::resource::DeleteResourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteResourceOwners(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst* request, ::resource::DeleteResourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteResourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteResourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteResourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteResourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Retrun a json string with all file info *
      virtual void GetAllFilesInfo(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst* request, ::resource::GetAllFilesInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllFilesInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllFilesInfo(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst* request, ::resource::GetAllFilesInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllFilesInfo(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst* request, ::resource::GetAllFilesInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllFilesInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllFilesInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate a token *
      virtual void ValidateToken(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst* request, ::resource::ValidateTokenRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateTokenRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateToken(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst* request, ::resource::ValidateTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateToken(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst* request, ::resource::ValidateTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate if user can access a given resource. *
      virtual void ValidateUserResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst* request, ::resource::ValidateUserResourceAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateUserResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateUserResourceAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateUserResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst* request, ::resource::ValidateUserResourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateUserResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst* request, ::resource::ValidateUserResourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateUserResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateUserResourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateUserResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateUserResourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate if application can access a given ressouce. *
      virtual void ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst* request, ::resource::ValidateApplicationResourceAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateApplicationResourceAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst* request, ::resource::ValidateApplicationResourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst* request, ::resource::ValidateApplicationResourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateApplicationResourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateApplicationResourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate if user can access a given method. *
      virtual void ValidateUserAccess(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst* request, ::resource::ValidateUserAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateUserAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateUserAccess(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst* request, ::resource::ValidateUserAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateUserAccess(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst* request, ::resource::ValidateUserAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateUserAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateUserAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate if application can access a given method. *
      virtual void ValidateApplicationAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst* request, ::resource::ValidateApplicationAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateApplicationAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateApplicationAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst* request, ::resource::ValidateApplicationAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateApplicationAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst* request, ::resource::ValidateApplicationAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateApplicationAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateApplicationAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate if a peer can access a given method. *
      virtual void ValidatePeerAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst* request, ::resource::ValidatePeerAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidatePeerAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidatePeerAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidatePeerAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst* request, ::resource::ValidatePeerAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidatePeerAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst* request, ::resource::ValidatePeerAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidatePeerAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidatePeerAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidatePeerAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidatePeerAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate if a peer can access a given resource. *
      virtual void ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst* request, ::resource::ValidatePeerResourceAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidatePeerResourceAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst* request, ::resource::ValidatePeerResourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst* request, ::resource::ValidatePeerResourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidatePeerResourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidatePeerResourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete all permission for a given account *
      virtual void DeleteAccountPermissions(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst* request, ::resource::DeleteAccountPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteAccountPermissions(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst* request, ::resource::DeleteAccountPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteAccountPermissions(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst* request, ::resource::DeleteAccountPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete all permission for a given role *
      virtual void DeleteRolePermissions(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst* request, ::resource::DeleteRolePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRolePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRolePermissions(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst* request, ::resource::DeleteRolePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRolePermissions(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst* request, ::resource::DeleteRolePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRolePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRolePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Return a json string with all applications informations *
      virtual void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst* request, ::resource::GetAllApplicationsInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllApplicationsInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst* request, ::resource::GetAllApplicationsInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst* request, ::resource::GetAllApplicationsInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllApplicationsInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllApplicationsInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete an application from the server. *
      virtual void DeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst* request, ::resource::DeleteApplicationRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteApplicationRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst* request, ::resource::DeleteApplicationRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst* request, ::resource::DeleteApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteApplicationRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Set a method into the log... *
      virtual void Log(::grpc::ClientContext* context, const ::resource::LogRqst* request, ::resource::LogRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::LogRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Log(::grpc::ClientContext* context, const ::resource::LogRqst* request, ::resource::LogRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Log(::grpc::ClientContext* context, const ::resource::LogRqst* request, ::resource::LogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::LogRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::LogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Get the list of logs *
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLog(::grpc::ClientContext* context, ::resource::GetLogRqst* request, ::grpc::ClientReadReactor< ::resource::GetLogRsp>* reactor) = 0;
      #else
      virtual void GetLog(::grpc::ClientContext* context, ::resource::GetLogRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetLogRsp>* reactor) = 0;
      #endif
      // * Delete a single log entry *
      virtual void DeleteLog(::grpc::ClientContext* context, const ::resource::DeleteLogRqst* request, ::resource::DeleteLogRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteLogRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteLog(::grpc::ClientContext* context, const ::resource::DeleteLogRqst* request, ::resource::DeleteLogRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteLog(::grpc::ClientContext* context, const ::resource::DeleteLogRqst* request, ::resource::DeleteLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteLogRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete all log *
      virtual void ClearAllLog(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst* request, ::resource::ClearAllLogRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ClearAllLogRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ClearAllLog(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst* request, ::resource::ClearAllLogRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ClearAllLog(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst* request, ::resource::ClearAllLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ClearAllLogRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ClearAllLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Get all resources 
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetResources(::grpc::ClientContext* context, ::resource::GetResourcesRqst* request, ::grpc::ClientReadReactor< ::resource::GetResourcesRsp>* reactor) = 0;
      #else
      virtual void GetResources(::grpc::ClientContext* context, ::resource::GetResourcesRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetResourcesRsp>* reactor) = 0;
      #endif
      // * Set a resource from a client (custom service) to globular 
      virtual void SetResource(::grpc::ClientContext* context, const ::resource::SetResourceRqst* request, ::resource::SetResourceRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetResourceRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetResource(::grpc::ClientContext* context, const ::resource::SetResourceRqst* request, ::resource::SetResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetResource(::grpc::ClientContext* context, const ::resource::SetResourceRqst* request, ::resource::SetResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Remove a resource from a client (custom service) to globular 
      virtual void RemoveResource(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst* request, ::resource::RemoveResourceRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveResourceRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveResource(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst* request, ::resource::RemoveResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveResource(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst* request, ::resource::RemoveResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Set resource action permission *
      virtual void SetActionPermission(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst* request, ::resource::SetActionPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetActionPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetActionPermission(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst* request, ::resource::SetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetActionPermission(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst* request, ::resource::SetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Remove resource action permission *
      virtual void RemoveActionPermission(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst* request, ::resource::RemoveActionPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveActionPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveActionPermission(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst* request, ::resource::RemoveActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveActionPermission(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst* request, ::resource::RemoveActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Get resource action permission *
      virtual void GetActionPermission(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst* request, ::resource::GetActionPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetActionPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetActionPermission(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst* request, ::resource::GetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetActionPermission(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst* request, ::resource::GetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Create Permission for a dir (recursive) *
      virtual void CreateDirPermissions(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst* request, ::resource::CreateDirPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateDirPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateDirPermissions(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst* request, ::resource::CreateDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateDirPermissions(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst* request, ::resource::CreateDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Rename file/dir permission *
      virtual void RenameFilePermission(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst* request, ::resource::RenameFilePermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RenameFilePermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RenameFilePermission(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst* request, ::resource::RenameFilePermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RenameFilePermission(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst* request, ::resource::RenameFilePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RenameFilePermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RenameFilePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete Permission for a dir (recursive) *
      virtual void DeleteDirPermissions(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst* request, ::resource::DeleteDirPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteDirPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteDirPermissions(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst* request, ::resource::DeleteDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteDirPermissions(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst* request, ::resource::DeleteDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete a single file permission *
      virtual void DeleteFilePermissions(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst* request, ::resource::DeleteFilePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteFilePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteFilePermissions(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst* request, ::resource::DeleteFilePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteFilePermissions(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst* request, ::resource::DeleteFilePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteFilePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteFilePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RegisterPeerRsp>* AsyncRegisterPeerRaw(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RegisterPeerRsp>* PrepareAsyncRegisterPeerRaw(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::resource::GetPeersRsp>* GetPeersRaw(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::resource::GetPeersRsp>* AsyncGetPeersRaw(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::resource::GetPeersRsp>* PrepareAsyncGetPeersRaw(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeletePeerRsp>* AsyncDeletePeerRaw(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeletePeerRsp>* PrepareAsyncDeletePeerRaw(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddPeerActionRsp>* AsyncAddPeerActionRaw(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddPeerActionRsp>* PrepareAsyncAddPeerActionRaw(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemovePeerActionRsp>* AsyncRemovePeerActionRaw(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemovePeerActionRsp>* PrepareAsyncRemovePeerActionRaw(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RegisterAccountRsp>* AsyncRegisterAccountRaw(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RegisterAccountRsp>* PrepareAsyncRegisterAccountRaw(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteAccountRsp>* AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteAccountRsp>* PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::AuthenticateRsp>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::resource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::AuthenticateRsp>* PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::resource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::SynchronizeLdapRsp>* AsyncSynchronizeLdapRaw(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::SynchronizeLdapRsp>* PrepareAsyncSynchronizeLdapRaw(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RefreshTokenRsp>* AsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RefreshTokenRsp>* PrepareAsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddAccountRoleRsp>* AsyncAddAccountRoleRaw(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddAccountRoleRsp>* PrepareAsyncAddAccountRoleRaw(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveAccountRoleRsp>* AsyncRemoveAccountRoleRaw(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveAccountRoleRsp>* PrepareAsyncRemoveAccountRoleRaw(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::CreateRoleRsp>* AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::CreateRoleRsp>* PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteRoleRsp>* AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteRoleRsp>* PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddRoleActionRsp>* AsyncAddRoleActionRaw(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddRoleActionRsp>* PrepareAsyncAddRoleActionRaw(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveRoleActionRsp>* AsyncRemoveRoleActionRaw(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveRoleActionRsp>* PrepareAsyncRemoveRoleActionRaw(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddApplicationActionRsp>* AsyncAddApplicationActionRaw(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::AddApplicationActionRsp>* PrepareAsyncAddApplicationActionRaw(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveApplicationActionRsp>* AsyncRemoveApplicationActionRaw(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveApplicationActionRsp>* PrepareAsyncRemoveApplicationActionRaw(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllActionsRsp>* AsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllActionsRsp>* PrepareAsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetPermissionsRsp>* AsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetPermissionsRsp>* PrepareAsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetPermissionRsp>* AsyncSetPermissionRaw(::grpc::ClientContext* context, const ::resource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetPermissionRsp>* PrepareAsyncSetPermissionRaw(::grpc::ClientContext* context, const ::resource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeletePermissionsRsp>* AsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeletePermissionsRsp>* PrepareAsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetResourceOwnerRsp>* AsyncSetResourceOwnerRaw(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetResourceOwnerRsp>* PrepareAsyncSetResourceOwnerRaw(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetResourceOwnersRsp>* AsyncGetResourceOwnersRaw(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetResourceOwnersRsp>* PrepareAsyncGetResourceOwnersRaw(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteResourceOwnerRsp>* AsyncDeleteResourceOwnerRaw(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteResourceOwnerRsp>* PrepareAsyncDeleteResourceOwnerRaw(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteResourceOwnersRsp>* AsyncDeleteResourceOwnersRaw(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteResourceOwnersRsp>* PrepareAsyncDeleteResourceOwnersRaw(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllFilesInfoRsp>* AsyncGetAllFilesInfoRaw(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllFilesInfoRsp>* PrepareAsyncGetAllFilesInfoRaw(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateTokenRsp>* AsyncValidateTokenRaw(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateTokenRsp>* PrepareAsyncValidateTokenRaw(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateUserResourceAccessRsp>* AsyncValidateUserResourceAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateUserResourceAccessRsp>* PrepareAsyncValidateUserResourceAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateApplicationResourceAccessRsp>* AsyncValidateApplicationResourceAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateApplicationResourceAccessRsp>* PrepareAsyncValidateApplicationResourceAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateUserAccessRsp>* AsyncValidateUserAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateUserAccessRsp>* PrepareAsyncValidateUserAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateApplicationAccessRsp>* AsyncValidateApplicationAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidateApplicationAccessRsp>* PrepareAsyncValidateApplicationAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidatePeerAccessRsp>* AsyncValidatePeerAccessRaw(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidatePeerAccessRsp>* PrepareAsyncValidatePeerAccessRaw(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidatePeerResourceAccessRsp>* AsyncValidatePeerResourceAccessRaw(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ValidatePeerResourceAccessRsp>* PrepareAsyncValidatePeerResourceAccessRaw(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteAccountPermissionsRsp>* AsyncDeleteAccountPermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteAccountPermissionsRsp>* PrepareAsyncDeleteAccountPermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteRolePermissionsRsp>* AsyncDeleteRolePermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteRolePermissionsRsp>* PrepareAsyncDeleteRolePermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllApplicationsInfoRsp>* AsyncGetAllApplicationsInfoRaw(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetAllApplicationsInfoRsp>* PrepareAsyncGetAllApplicationsInfoRaw(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteApplicationRsp>* AsyncDeleteApplicationRaw(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteApplicationRsp>* PrepareAsyncDeleteApplicationRaw(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::LogRsp>* AsyncLogRaw(::grpc::ClientContext* context, const ::resource::LogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::LogRsp>* PrepareAsyncLogRaw(::grpc::ClientContext* context, const ::resource::LogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::resource::GetLogRsp>* GetLogRaw(::grpc::ClientContext* context, const ::resource::GetLogRqst& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::resource::GetLogRsp>* AsyncGetLogRaw(::grpc::ClientContext* context, const ::resource::GetLogRqst& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::resource::GetLogRsp>* PrepareAsyncGetLogRaw(::grpc::ClientContext* context, const ::resource::GetLogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteLogRsp>* AsyncDeleteLogRaw(::grpc::ClientContext* context, const ::resource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteLogRsp>* PrepareAsyncDeleteLogRaw(::grpc::ClientContext* context, const ::resource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ClearAllLogRsp>* AsyncClearAllLogRaw(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::ClearAllLogRsp>* PrepareAsyncClearAllLogRaw(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::resource::GetResourcesRsp>* GetResourcesRaw(::grpc::ClientContext* context, const ::resource::GetResourcesRqst& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::resource::GetResourcesRsp>* AsyncGetResourcesRaw(::grpc::ClientContext* context, const ::resource::GetResourcesRqst& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::resource::GetResourcesRsp>* PrepareAsyncGetResourcesRaw(::grpc::ClientContext* context, const ::resource::GetResourcesRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetResourceRsp>* AsyncSetResourceRaw(::grpc::ClientContext* context, const ::resource::SetResourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetResourceRsp>* PrepareAsyncSetResourceRaw(::grpc::ClientContext* context, const ::resource::SetResourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveResourceRsp>* AsyncRemoveResourceRaw(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveResourceRsp>* PrepareAsyncRemoveResourceRaw(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetActionPermissionRsp>* AsyncSetActionPermissionRaw(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::SetActionPermissionRsp>* PrepareAsyncSetActionPermissionRaw(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveActionPermissionRsp>* AsyncRemoveActionPermissionRaw(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RemoveActionPermissionRsp>* PrepareAsyncRemoveActionPermissionRaw(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetActionPermissionRsp>* AsyncGetActionPermissionRaw(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::GetActionPermissionRsp>* PrepareAsyncGetActionPermissionRaw(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::CreateDirPermissionsRsp>* AsyncCreateDirPermissionsRaw(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::CreateDirPermissionsRsp>* PrepareAsyncCreateDirPermissionsRaw(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RenameFilePermissionRsp>* AsyncRenameFilePermissionRaw(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::RenameFilePermissionRsp>* PrepareAsyncRenameFilePermissionRaw(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteDirPermissionsRsp>* AsyncDeleteDirPermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteDirPermissionsRsp>* PrepareAsyncDeleteDirPermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteFilePermissionsRsp>* AsyncDeleteFilePermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::resource::DeleteFilePermissionsRsp>* PrepareAsyncDeleteFilePermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::resource::RegisterPeerRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RegisterPeerRsp>> AsyncRegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RegisterPeerRsp>>(AsyncRegisterPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RegisterPeerRsp>> PrepareAsyncRegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RegisterPeerRsp>>(PrepareAsyncRegisterPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::resource::GetPeersRsp>> GetPeers(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::resource::GetPeersRsp>>(GetPeersRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::resource::GetPeersRsp>> AsyncGetPeers(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::resource::GetPeersRsp>>(AsyncGetPeersRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::resource::GetPeersRsp>> PrepareAsyncGetPeers(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::resource::GetPeersRsp>>(PrepareAsyncGetPeersRaw(context, request, cq));
    }
    ::grpc::Status DeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::resource::DeletePeerRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeletePeerRsp>> AsyncDeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeletePeerRsp>>(AsyncDeletePeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeletePeerRsp>> PrepareAsyncDeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeletePeerRsp>>(PrepareAsyncDeletePeerRaw(context, request, cq));
    }
    ::grpc::Status AddPeerAction(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst& request, ::resource::AddPeerActionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddPeerActionRsp>> AsyncAddPeerAction(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddPeerActionRsp>>(AsyncAddPeerActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddPeerActionRsp>> PrepareAsyncAddPeerAction(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddPeerActionRsp>>(PrepareAsyncAddPeerActionRaw(context, request, cq));
    }
    ::grpc::Status RemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::resource::RemovePeerActionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemovePeerActionRsp>> AsyncRemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemovePeerActionRsp>>(AsyncRemovePeerActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemovePeerActionRsp>> PrepareAsyncRemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemovePeerActionRsp>>(PrepareAsyncRemovePeerActionRaw(context, request, cq));
    }
    ::grpc::Status RegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::resource::RegisterAccountRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RegisterAccountRsp>> AsyncRegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RegisterAccountRsp>>(AsyncRegisterAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RegisterAccountRsp>> PrepareAsyncRegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RegisterAccountRsp>>(PrepareAsyncRegisterAccountRaw(context, request, cq));
    }
    ::grpc::Status DeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::resource::DeleteAccountRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountRsp>> AsyncDeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountRsp>>(AsyncDeleteAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountRsp>> PrepareAsyncDeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountRsp>>(PrepareAsyncDeleteAccountRaw(context, request, cq));
    }
    ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::resource::AuthenticateRqst& request, ::resource::AuthenticateRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AuthenticateRsp>> AsyncAuthenticate(::grpc::ClientContext* context, const ::resource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AuthenticateRsp>>(AsyncAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AuthenticateRsp>> PrepareAsyncAuthenticate(::grpc::ClientContext* context, const ::resource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AuthenticateRsp>>(PrepareAsyncAuthenticateRaw(context, request, cq));
    }
    ::grpc::Status SynchronizeLdap(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst& request, ::resource::SynchronizeLdapRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SynchronizeLdapRsp>> AsyncSynchronizeLdap(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SynchronizeLdapRsp>>(AsyncSynchronizeLdapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SynchronizeLdapRsp>> PrepareAsyncSynchronizeLdap(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SynchronizeLdapRsp>>(PrepareAsyncSynchronizeLdapRaw(context, request, cq));
    }
    ::grpc::Status RefreshToken(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst& request, ::resource::RefreshTokenRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RefreshTokenRsp>> AsyncRefreshToken(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RefreshTokenRsp>>(AsyncRefreshTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RefreshTokenRsp>> PrepareAsyncRefreshToken(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RefreshTokenRsp>>(PrepareAsyncRefreshTokenRaw(context, request, cq));
    }
    ::grpc::Status AddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::resource::AddAccountRoleRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddAccountRoleRsp>> AsyncAddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddAccountRoleRsp>>(AsyncAddAccountRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddAccountRoleRsp>> PrepareAsyncAddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddAccountRoleRsp>>(PrepareAsyncAddAccountRoleRaw(context, request, cq));
    }
    ::grpc::Status RemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::resource::RemoveAccountRoleRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveAccountRoleRsp>> AsyncRemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveAccountRoleRsp>>(AsyncRemoveAccountRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveAccountRoleRsp>> PrepareAsyncRemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveAccountRoleRsp>>(PrepareAsyncRemoveAccountRoleRaw(context, request, cq));
    }
    ::grpc::Status CreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::resource::CreateRoleRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::CreateRoleRsp>> AsyncCreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::CreateRoleRsp>>(AsyncCreateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::CreateRoleRsp>> PrepareAsyncCreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::CreateRoleRsp>>(PrepareAsyncCreateRoleRaw(context, request, cq));
    }
    ::grpc::Status DeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::resource::DeleteRoleRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteRoleRsp>> AsyncDeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteRoleRsp>>(AsyncDeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteRoleRsp>> PrepareAsyncDeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteRoleRsp>>(PrepareAsyncDeleteRoleRaw(context, request, cq));
    }
    ::grpc::Status AddRoleAction(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst& request, ::resource::AddRoleActionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddRoleActionRsp>> AsyncAddRoleAction(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddRoleActionRsp>>(AsyncAddRoleActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddRoleActionRsp>> PrepareAsyncAddRoleAction(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddRoleActionRsp>>(PrepareAsyncAddRoleActionRaw(context, request, cq));
    }
    ::grpc::Status RemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::resource::RemoveRoleActionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveRoleActionRsp>> AsyncRemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveRoleActionRsp>>(AsyncRemoveRoleActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveRoleActionRsp>> PrepareAsyncRemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveRoleActionRsp>>(PrepareAsyncRemoveRoleActionRaw(context, request, cq));
    }
    ::grpc::Status AddApplicationAction(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst& request, ::resource::AddApplicationActionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddApplicationActionRsp>> AsyncAddApplicationAction(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddApplicationActionRsp>>(AsyncAddApplicationActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddApplicationActionRsp>> PrepareAsyncAddApplicationAction(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::AddApplicationActionRsp>>(PrepareAsyncAddApplicationActionRaw(context, request, cq));
    }
    ::grpc::Status RemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::resource::RemoveApplicationActionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveApplicationActionRsp>> AsyncRemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveApplicationActionRsp>>(AsyncRemoveApplicationActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveApplicationActionRsp>> PrepareAsyncRemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveApplicationActionRsp>>(PrepareAsyncRemoveApplicationActionRaw(context, request, cq));
    }
    ::grpc::Status GetAllActions(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst& request, ::resource::GetAllActionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetAllActionsRsp>> AsyncGetAllActions(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetAllActionsRsp>>(AsyncGetAllActionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetAllActionsRsp>> PrepareAsyncGetAllActions(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetAllActionsRsp>>(PrepareAsyncGetAllActionsRaw(context, request, cq));
    }
    ::grpc::Status GetPermissions(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst& request, ::resource::GetPermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetPermissionsRsp>> AsyncGetPermissions(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetPermissionsRsp>>(AsyncGetPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetPermissionsRsp>> PrepareAsyncGetPermissions(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetPermissionsRsp>>(PrepareAsyncGetPermissionsRaw(context, request, cq));
    }
    ::grpc::Status SetPermission(::grpc::ClientContext* context, const ::resource::SetPermissionRqst& request, ::resource::SetPermissionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetPermissionRsp>> AsyncSetPermission(::grpc::ClientContext* context, const ::resource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetPermissionRsp>>(AsyncSetPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetPermissionRsp>> PrepareAsyncSetPermission(::grpc::ClientContext* context, const ::resource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetPermissionRsp>>(PrepareAsyncSetPermissionRaw(context, request, cq));
    }
    ::grpc::Status DeletePermissions(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst& request, ::resource::DeletePermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeletePermissionsRsp>> AsyncDeletePermissions(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeletePermissionsRsp>>(AsyncDeletePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeletePermissionsRsp>> PrepareAsyncDeletePermissions(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeletePermissionsRsp>>(PrepareAsyncDeletePermissionsRaw(context, request, cq));
    }
    ::grpc::Status SetResourceOwner(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst& request, ::resource::SetResourceOwnerRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetResourceOwnerRsp>> AsyncSetResourceOwner(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetResourceOwnerRsp>>(AsyncSetResourceOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetResourceOwnerRsp>> PrepareAsyncSetResourceOwner(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetResourceOwnerRsp>>(PrepareAsyncSetResourceOwnerRaw(context, request, cq));
    }
    ::grpc::Status GetResourceOwners(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst& request, ::resource::GetResourceOwnersRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetResourceOwnersRsp>> AsyncGetResourceOwners(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetResourceOwnersRsp>>(AsyncGetResourceOwnersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetResourceOwnersRsp>> PrepareAsyncGetResourceOwners(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetResourceOwnersRsp>>(PrepareAsyncGetResourceOwnersRaw(context, request, cq));
    }
    ::grpc::Status DeleteResourceOwner(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst& request, ::resource::DeleteResourceOwnerRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteResourceOwnerRsp>> AsyncDeleteResourceOwner(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteResourceOwnerRsp>>(AsyncDeleteResourceOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteResourceOwnerRsp>> PrepareAsyncDeleteResourceOwner(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteResourceOwnerRsp>>(PrepareAsyncDeleteResourceOwnerRaw(context, request, cq));
    }
    ::grpc::Status DeleteResourceOwners(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst& request, ::resource::DeleteResourceOwnersRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteResourceOwnersRsp>> AsyncDeleteResourceOwners(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteResourceOwnersRsp>>(AsyncDeleteResourceOwnersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteResourceOwnersRsp>> PrepareAsyncDeleteResourceOwners(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteResourceOwnersRsp>>(PrepareAsyncDeleteResourceOwnersRaw(context, request, cq));
    }
    ::grpc::Status GetAllFilesInfo(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst& request, ::resource::GetAllFilesInfoRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetAllFilesInfoRsp>> AsyncGetAllFilesInfo(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetAllFilesInfoRsp>>(AsyncGetAllFilesInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetAllFilesInfoRsp>> PrepareAsyncGetAllFilesInfo(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetAllFilesInfoRsp>>(PrepareAsyncGetAllFilesInfoRaw(context, request, cq));
    }
    ::grpc::Status ValidateToken(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst& request, ::resource::ValidateTokenRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateTokenRsp>> AsyncValidateToken(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateTokenRsp>>(AsyncValidateTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateTokenRsp>> PrepareAsyncValidateToken(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateTokenRsp>>(PrepareAsyncValidateTokenRaw(context, request, cq));
    }
    ::grpc::Status ValidateUserResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst& request, ::resource::ValidateUserResourceAccessRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateUserResourceAccessRsp>> AsyncValidateUserResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateUserResourceAccessRsp>>(AsyncValidateUserResourceAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateUserResourceAccessRsp>> PrepareAsyncValidateUserResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateUserResourceAccessRsp>>(PrepareAsyncValidateUserResourceAccessRaw(context, request, cq));
    }
    ::grpc::Status ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst& request, ::resource::ValidateApplicationResourceAccessRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateApplicationResourceAccessRsp>> AsyncValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateApplicationResourceAccessRsp>>(AsyncValidateApplicationResourceAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateApplicationResourceAccessRsp>> PrepareAsyncValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateApplicationResourceAccessRsp>>(PrepareAsyncValidateApplicationResourceAccessRaw(context, request, cq));
    }
    ::grpc::Status ValidateUserAccess(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst& request, ::resource::ValidateUserAccessRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateUserAccessRsp>> AsyncValidateUserAccess(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateUserAccessRsp>>(AsyncValidateUserAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateUserAccessRsp>> PrepareAsyncValidateUserAccess(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateUserAccessRsp>>(PrepareAsyncValidateUserAccessRaw(context, request, cq));
    }
    ::grpc::Status ValidateApplicationAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst& request, ::resource::ValidateApplicationAccessRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateApplicationAccessRsp>> AsyncValidateApplicationAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateApplicationAccessRsp>>(AsyncValidateApplicationAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateApplicationAccessRsp>> PrepareAsyncValidateApplicationAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidateApplicationAccessRsp>>(PrepareAsyncValidateApplicationAccessRaw(context, request, cq));
    }
    ::grpc::Status ValidatePeerAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst& request, ::resource::ValidatePeerAccessRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidatePeerAccessRsp>> AsyncValidatePeerAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidatePeerAccessRsp>>(AsyncValidatePeerAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidatePeerAccessRsp>> PrepareAsyncValidatePeerAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidatePeerAccessRsp>>(PrepareAsyncValidatePeerAccessRaw(context, request, cq));
    }
    ::grpc::Status ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst& request, ::resource::ValidatePeerResourceAccessRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidatePeerResourceAccessRsp>> AsyncValidatePeerResourceAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidatePeerResourceAccessRsp>>(AsyncValidatePeerResourceAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidatePeerResourceAccessRsp>> PrepareAsyncValidatePeerResourceAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ValidatePeerResourceAccessRsp>>(PrepareAsyncValidatePeerResourceAccessRaw(context, request, cq));
    }
    ::grpc::Status DeleteAccountPermissions(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst& request, ::resource::DeleteAccountPermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountPermissionsRsp>> AsyncDeleteAccountPermissions(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountPermissionsRsp>>(AsyncDeleteAccountPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountPermissionsRsp>> PrepareAsyncDeleteAccountPermissions(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountPermissionsRsp>>(PrepareAsyncDeleteAccountPermissionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteRolePermissions(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst& request, ::resource::DeleteRolePermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteRolePermissionsRsp>> AsyncDeleteRolePermissions(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteRolePermissionsRsp>>(AsyncDeleteRolePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteRolePermissionsRsp>> PrepareAsyncDeleteRolePermissions(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteRolePermissionsRsp>>(PrepareAsyncDeleteRolePermissionsRaw(context, request, cq));
    }
    ::grpc::Status GetAllApplicationsInfo(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst& request, ::resource::GetAllApplicationsInfoRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetAllApplicationsInfoRsp>> AsyncGetAllApplicationsInfo(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetAllApplicationsInfoRsp>>(AsyncGetAllApplicationsInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetAllApplicationsInfoRsp>> PrepareAsyncGetAllApplicationsInfo(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetAllApplicationsInfoRsp>>(PrepareAsyncGetAllApplicationsInfoRaw(context, request, cq));
    }
    ::grpc::Status DeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::resource::DeleteApplicationRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteApplicationRsp>> AsyncDeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteApplicationRsp>>(AsyncDeleteApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteApplicationRsp>> PrepareAsyncDeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteApplicationRsp>>(PrepareAsyncDeleteApplicationRaw(context, request, cq));
    }
    ::grpc::Status Log(::grpc::ClientContext* context, const ::resource::LogRqst& request, ::resource::LogRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::LogRsp>> AsyncLog(::grpc::ClientContext* context, const ::resource::LogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::LogRsp>>(AsyncLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::LogRsp>> PrepareAsyncLog(::grpc::ClientContext* context, const ::resource::LogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::LogRsp>>(PrepareAsyncLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::resource::GetLogRsp>> GetLog(::grpc::ClientContext* context, const ::resource::GetLogRqst& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::resource::GetLogRsp>>(GetLogRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::resource::GetLogRsp>> AsyncGetLog(::grpc::ClientContext* context, const ::resource::GetLogRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::resource::GetLogRsp>>(AsyncGetLogRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::resource::GetLogRsp>> PrepareAsyncGetLog(::grpc::ClientContext* context, const ::resource::GetLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::resource::GetLogRsp>>(PrepareAsyncGetLogRaw(context, request, cq));
    }
    ::grpc::Status DeleteLog(::grpc::ClientContext* context, const ::resource::DeleteLogRqst& request, ::resource::DeleteLogRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteLogRsp>> AsyncDeleteLog(::grpc::ClientContext* context, const ::resource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteLogRsp>>(AsyncDeleteLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteLogRsp>> PrepareAsyncDeleteLog(::grpc::ClientContext* context, const ::resource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteLogRsp>>(PrepareAsyncDeleteLogRaw(context, request, cq));
    }
    ::grpc::Status ClearAllLog(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst& request, ::resource::ClearAllLogRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ClearAllLogRsp>> AsyncClearAllLog(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ClearAllLogRsp>>(AsyncClearAllLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ClearAllLogRsp>> PrepareAsyncClearAllLog(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::ClearAllLogRsp>>(PrepareAsyncClearAllLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::resource::GetResourcesRsp>> GetResources(::grpc::ClientContext* context, const ::resource::GetResourcesRqst& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::resource::GetResourcesRsp>>(GetResourcesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::resource::GetResourcesRsp>> AsyncGetResources(::grpc::ClientContext* context, const ::resource::GetResourcesRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::resource::GetResourcesRsp>>(AsyncGetResourcesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::resource::GetResourcesRsp>> PrepareAsyncGetResources(::grpc::ClientContext* context, const ::resource::GetResourcesRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::resource::GetResourcesRsp>>(PrepareAsyncGetResourcesRaw(context, request, cq));
    }
    ::grpc::Status SetResource(::grpc::ClientContext* context, const ::resource::SetResourceRqst& request, ::resource::SetResourceRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetResourceRsp>> AsyncSetResource(::grpc::ClientContext* context, const ::resource::SetResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetResourceRsp>>(AsyncSetResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetResourceRsp>> PrepareAsyncSetResource(::grpc::ClientContext* context, const ::resource::SetResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetResourceRsp>>(PrepareAsyncSetResourceRaw(context, request, cq));
    }
    ::grpc::Status RemoveResource(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst& request, ::resource::RemoveResourceRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveResourceRsp>> AsyncRemoveResource(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveResourceRsp>>(AsyncRemoveResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveResourceRsp>> PrepareAsyncRemoveResource(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveResourceRsp>>(PrepareAsyncRemoveResourceRaw(context, request, cq));
    }
    ::grpc::Status SetActionPermission(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst& request, ::resource::SetActionPermissionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetActionPermissionRsp>> AsyncSetActionPermission(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetActionPermissionRsp>>(AsyncSetActionPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetActionPermissionRsp>> PrepareAsyncSetActionPermission(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::SetActionPermissionRsp>>(PrepareAsyncSetActionPermissionRaw(context, request, cq));
    }
    ::grpc::Status RemoveActionPermission(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst& request, ::resource::RemoveActionPermissionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveActionPermissionRsp>> AsyncRemoveActionPermission(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveActionPermissionRsp>>(AsyncRemoveActionPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveActionPermissionRsp>> PrepareAsyncRemoveActionPermission(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RemoveActionPermissionRsp>>(PrepareAsyncRemoveActionPermissionRaw(context, request, cq));
    }
    ::grpc::Status GetActionPermission(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst& request, ::resource::GetActionPermissionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetActionPermissionRsp>> AsyncGetActionPermission(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetActionPermissionRsp>>(AsyncGetActionPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetActionPermissionRsp>> PrepareAsyncGetActionPermission(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::GetActionPermissionRsp>>(PrepareAsyncGetActionPermissionRaw(context, request, cq));
    }
    ::grpc::Status CreateDirPermissions(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst& request, ::resource::CreateDirPermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::CreateDirPermissionsRsp>> AsyncCreateDirPermissions(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::CreateDirPermissionsRsp>>(AsyncCreateDirPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::CreateDirPermissionsRsp>> PrepareAsyncCreateDirPermissions(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::CreateDirPermissionsRsp>>(PrepareAsyncCreateDirPermissionsRaw(context, request, cq));
    }
    ::grpc::Status RenameFilePermission(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst& request, ::resource::RenameFilePermissionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RenameFilePermissionRsp>> AsyncRenameFilePermission(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RenameFilePermissionRsp>>(AsyncRenameFilePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RenameFilePermissionRsp>> PrepareAsyncRenameFilePermission(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::RenameFilePermissionRsp>>(PrepareAsyncRenameFilePermissionRaw(context, request, cq));
    }
    ::grpc::Status DeleteDirPermissions(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst& request, ::resource::DeleteDirPermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteDirPermissionsRsp>> AsyncDeleteDirPermissions(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteDirPermissionsRsp>>(AsyncDeleteDirPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteDirPermissionsRsp>> PrepareAsyncDeleteDirPermissions(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteDirPermissionsRsp>>(PrepareAsyncDeleteDirPermissionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteFilePermissions(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst& request, ::resource::DeleteFilePermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteFilePermissionsRsp>> AsyncDeleteFilePermissions(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteFilePermissionsRsp>>(AsyncDeleteFilePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteFilePermissionsRsp>> PrepareAsyncDeleteFilePermissions(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::resource::DeleteFilePermissionsRsp>>(PrepareAsyncDeleteFilePermissionsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst* request, ::resource::RegisterPeerRsp* response, std::function<void(::grpc::Status)>) override;
      void RegisterPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterPeerRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst* request, ::resource::RegisterPeerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst* request, ::resource::RegisterPeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterPeerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterPeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPeers(::grpc::ClientContext* context, ::resource::GetPeersRqst* request, ::grpc::ClientReadReactor< ::resource::GetPeersRsp>* reactor) override;
      #else
      void GetPeers(::grpc::ClientContext* context, ::resource::GetPeersRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetPeersRsp>* reactor) override;
      #endif
      void DeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst* request, ::resource::DeletePeerRsp* response, std::function<void(::grpc::Status)>) override;
      void DeletePeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePeerRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst* request, ::resource::DeletePeerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst* request, ::resource::DeletePeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeletePeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePeerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeletePeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddPeerAction(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst* request, ::resource::AddPeerActionRsp* response, std::function<void(::grpc::Status)>) override;
      void AddPeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddPeerActionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddPeerAction(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst* request, ::resource::AddPeerActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddPeerAction(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst* request, ::resource::AddPeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddPeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddPeerActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddPeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddPeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst* request, ::resource::RemovePeerActionRsp* response, std::function<void(::grpc::Status)>) override;
      void RemovePeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemovePeerActionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst* request, ::resource::RemovePeerActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst* request, ::resource::RemovePeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemovePeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemovePeerActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemovePeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemovePeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst* request, ::resource::RegisterAccountRsp* response, std::function<void(::grpc::Status)>) override;
      void RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterAccountRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst* request, ::resource::RegisterAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst* request, ::resource::RegisterAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst* request, ::resource::DeleteAccountRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst* request, ::resource::DeleteAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst* request, ::resource::DeleteAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Authenticate(::grpc::ClientContext* context, const ::resource::AuthenticateRqst* request, ::resource::AuthenticateRsp* response, std::function<void(::grpc::Status)>) override;
      void Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AuthenticateRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Authenticate(::grpc::ClientContext* context, const ::resource::AuthenticateRqst* request, ::resource::AuthenticateRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Authenticate(::grpc::ClientContext* context, const ::resource::AuthenticateRqst* request, ::resource::AuthenticateRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AuthenticateRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AuthenticateRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SynchronizeLdap(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst* request, ::resource::SynchronizeLdapRsp* response, std::function<void(::grpc::Status)>) override;
      void SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SynchronizeLdapRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SynchronizeLdap(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst* request, ::resource::SynchronizeLdapRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SynchronizeLdap(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst* request, ::resource::SynchronizeLdapRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SynchronizeLdapRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SynchronizeLdapRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RefreshToken(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst* request, ::resource::RefreshTokenRsp* response, std::function<void(::grpc::Status)>) override;
      void RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RefreshTokenRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RefreshToken(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst* request, ::resource::RefreshTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RefreshToken(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst* request, ::resource::RefreshTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RefreshTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RefreshTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst* request, ::resource::AddAccountRoleRsp* response, std::function<void(::grpc::Status)>) override;
      void AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddAccountRoleRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst* request, ::resource::AddAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst* request, ::resource::AddAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst* request, ::resource::RemoveAccountRoleRsp* response, std::function<void(::grpc::Status)>) override;
      void RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveAccountRoleRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst* request, ::resource::RemoveAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst* request, ::resource::RemoveAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst* request, ::resource::CreateRoleRsp* response, std::function<void(::grpc::Status)>) override;
      void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateRoleRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst* request, ::resource::CreateRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst* request, ::resource::CreateRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst* request, ::resource::DeleteRoleRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRoleRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst* request, ::resource::DeleteRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst* request, ::resource::DeleteRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddRoleAction(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst* request, ::resource::AddRoleActionRsp* response, std::function<void(::grpc::Status)>) override;
      void AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddRoleActionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddRoleAction(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst* request, ::resource::AddRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddRoleAction(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst* request, ::resource::AddRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst* request, ::resource::RemoveRoleActionRsp* response, std::function<void(::grpc::Status)>) override;
      void RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveRoleActionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst* request, ::resource::RemoveRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst* request, ::resource::RemoveRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddApplicationAction(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst* request, ::resource::AddApplicationActionRsp* response, std::function<void(::grpc::Status)>) override;
      void AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddApplicationActionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddApplicationAction(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst* request, ::resource::AddApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddApplicationAction(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst* request, ::resource::AddApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst* request, ::resource::RemoveApplicationActionRsp* response, std::function<void(::grpc::Status)>) override;
      void RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveApplicationActionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst* request, ::resource::RemoveApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst* request, ::resource::RemoveApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAllActions(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst* request, ::resource::GetAllActionsRsp* response, std::function<void(::grpc::Status)>) override;
      void GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllActionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllActions(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst* request, ::resource::GetAllActionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllActions(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst* request, ::resource::GetAllActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllActionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPermissions(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst* request, ::resource::GetPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPermissions(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst* request, ::resource::GetPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPermissions(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst* request, ::resource::GetPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPermission(::grpc::ClientContext* context, const ::resource::SetPermissionRqst* request, ::resource::SetPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      void SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPermission(::grpc::ClientContext* context, const ::resource::SetPermissionRqst* request, ::resource::SetPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPermission(::grpc::ClientContext* context, const ::resource::SetPermissionRqst* request, ::resource::SetPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeletePermissions(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst* request, ::resource::DeletePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeletePermissions(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst* request, ::resource::DeletePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeletePermissions(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst* request, ::resource::DeletePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetResourceOwner(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst* request, ::resource::SetResourceOwnerRsp* response, std::function<void(::grpc::Status)>) override;
      void SetResourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetResourceOwnerRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetResourceOwner(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst* request, ::resource::SetResourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetResourceOwner(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst* request, ::resource::SetResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetResourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetResourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetResourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetResourceOwners(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst* request, ::resource::GetResourceOwnersRsp* response, std::function<void(::grpc::Status)>) override;
      void GetResourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetResourceOwnersRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetResourceOwners(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst* request, ::resource::GetResourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetResourceOwners(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst* request, ::resource::GetResourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetResourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetResourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetResourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetResourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteResourceOwner(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst* request, ::resource::DeleteResourceOwnerRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteResourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteResourceOwnerRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteResourceOwner(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst* request, ::resource::DeleteResourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteResourceOwner(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst* request, ::resource::DeleteResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteResourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteResourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteResourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteResourceOwners(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst* request, ::resource::DeleteResourceOwnersRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteResourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteResourceOwnersRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteResourceOwners(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst* request, ::resource::DeleteResourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteResourceOwners(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst* request, ::resource::DeleteResourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteResourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteResourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteResourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteResourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAllFilesInfo(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst* request, ::resource::GetAllFilesInfoRsp* response, std::function<void(::grpc::Status)>) override;
      void GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllFilesInfoRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllFilesInfo(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst* request, ::resource::GetAllFilesInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllFilesInfo(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst* request, ::resource::GetAllFilesInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllFilesInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllFilesInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidateToken(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst* request, ::resource::ValidateTokenRsp* response, std::function<void(::grpc::Status)>) override;
      void ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateTokenRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateToken(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst* request, ::resource::ValidateTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateToken(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst* request, ::resource::ValidateTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidateUserResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst* request, ::resource::ValidateUserResourceAccessRsp* response, std::function<void(::grpc::Status)>) override;
      void ValidateUserResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateUserResourceAccessRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateUserResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst* request, ::resource::ValidateUserResourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateUserResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst* request, ::resource::ValidateUserResourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateUserResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateUserResourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateUserResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateUserResourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst* request, ::resource::ValidateApplicationResourceAccessRsp* response, std::function<void(::grpc::Status)>) override;
      void ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateApplicationResourceAccessRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst* request, ::resource::ValidateApplicationResourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst* request, ::resource::ValidateApplicationResourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateApplicationResourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateApplicationResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateApplicationResourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidateUserAccess(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst* request, ::resource::ValidateUserAccessRsp* response, std::function<void(::grpc::Status)>) override;
      void ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateUserAccessRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateUserAccess(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst* request, ::resource::ValidateUserAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateUserAccess(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst* request, ::resource::ValidateUserAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateUserAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateUserAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidateApplicationAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst* request, ::resource::ValidateApplicationAccessRsp* response, std::function<void(::grpc::Status)>) override;
      void ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateApplicationAccessRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateApplicationAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst* request, ::resource::ValidateApplicationAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateApplicationAccess(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst* request, ::resource::ValidateApplicationAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateApplicationAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidateApplicationAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidatePeerAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst* request, ::resource::ValidatePeerAccessRsp* response, std::function<void(::grpc::Status)>) override;
      void ValidatePeerAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidatePeerAccessRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidatePeerAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst* request, ::resource::ValidatePeerAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidatePeerAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst* request, ::resource::ValidatePeerAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidatePeerAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidatePeerAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidatePeerAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidatePeerAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst* request, ::resource::ValidatePeerResourceAccessRsp* response, std::function<void(::grpc::Status)>) override;
      void ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidatePeerResourceAccessRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst* request, ::resource::ValidatePeerResourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst* request, ::resource::ValidatePeerResourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidatePeerResourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidatePeerResourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ValidatePeerResourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteAccountPermissions(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst* request, ::resource::DeleteAccountPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteAccountPermissions(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst* request, ::resource::DeleteAccountPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteAccountPermissions(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst* request, ::resource::DeleteAccountPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteRolePermissions(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst* request, ::resource::DeleteRolePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRolePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRolePermissions(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst* request, ::resource::DeleteRolePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRolePermissions(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst* request, ::resource::DeleteRolePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRolePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRolePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst* request, ::resource::GetAllApplicationsInfoRsp* response, std::function<void(::grpc::Status)>) override;
      void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllApplicationsInfoRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst* request, ::resource::GetAllApplicationsInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst* request, ::resource::GetAllApplicationsInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllApplicationsInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAllApplicationsInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst* request, ::resource::DeleteApplicationRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteApplicationRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst* request, ::resource::DeleteApplicationRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst* request, ::resource::DeleteApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteApplicationRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Log(::grpc::ClientContext* context, const ::resource::LogRqst* request, ::resource::LogRsp* response, std::function<void(::grpc::Status)>) override;
      void Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::LogRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Log(::grpc::ClientContext* context, const ::resource::LogRqst* request, ::resource::LogRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Log(::grpc::ClientContext* context, const ::resource::LogRqst* request, ::resource::LogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::LogRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::LogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLog(::grpc::ClientContext* context, ::resource::GetLogRqst* request, ::grpc::ClientReadReactor< ::resource::GetLogRsp>* reactor) override;
      #else
      void GetLog(::grpc::ClientContext* context, ::resource::GetLogRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetLogRsp>* reactor) override;
      #endif
      void DeleteLog(::grpc::ClientContext* context, const ::resource::DeleteLogRqst* request, ::resource::DeleteLogRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteLogRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteLog(::grpc::ClientContext* context, const ::resource::DeleteLogRqst* request, ::resource::DeleteLogRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteLog(::grpc::ClientContext* context, const ::resource::DeleteLogRqst* request, ::resource::DeleteLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteLogRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ClearAllLog(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst* request, ::resource::ClearAllLogRsp* response, std::function<void(::grpc::Status)>) override;
      void ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ClearAllLogRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ClearAllLog(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst* request, ::resource::ClearAllLogRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ClearAllLog(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst* request, ::resource::ClearAllLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ClearAllLogRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ClearAllLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetResources(::grpc::ClientContext* context, ::resource::GetResourcesRqst* request, ::grpc::ClientReadReactor< ::resource::GetResourcesRsp>* reactor) override;
      #else
      void GetResources(::grpc::ClientContext* context, ::resource::GetResourcesRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetResourcesRsp>* reactor) override;
      #endif
      void SetResource(::grpc::ClientContext* context, const ::resource::SetResourceRqst* request, ::resource::SetResourceRsp* response, std::function<void(::grpc::Status)>) override;
      void SetResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetResourceRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetResource(::grpc::ClientContext* context, const ::resource::SetResourceRqst* request, ::resource::SetResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetResource(::grpc::ClientContext* context, const ::resource::SetResourceRqst* request, ::resource::SetResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveResource(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst* request, ::resource::RemoveResourceRsp* response, std::function<void(::grpc::Status)>) override;
      void RemoveResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveResourceRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveResource(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst* request, ::resource::RemoveResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveResource(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst* request, ::resource::RemoveResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetActionPermission(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst* request, ::resource::SetActionPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      void SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetActionPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetActionPermission(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst* request, ::resource::SetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetActionPermission(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst* request, ::resource::SetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveActionPermission(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst* request, ::resource::RemoveActionPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      void RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveActionPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveActionPermission(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst* request, ::resource::RemoveActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveActionPermission(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst* request, ::resource::RemoveActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetActionPermission(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst* request, ::resource::GetActionPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      void GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetActionPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetActionPermission(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst* request, ::resource::GetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetActionPermission(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst* request, ::resource::GetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateDirPermissions(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst* request, ::resource::CreateDirPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateDirPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateDirPermissions(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst* request, ::resource::CreateDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateDirPermissions(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst* request, ::resource::CreateDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RenameFilePermission(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst* request, ::resource::RenameFilePermissionRsp* response, std::function<void(::grpc::Status)>) override;
      void RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RenameFilePermissionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RenameFilePermission(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst* request, ::resource::RenameFilePermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RenameFilePermission(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst* request, ::resource::RenameFilePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RenameFilePermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RenameFilePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteDirPermissions(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst* request, ::resource::DeleteDirPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteDirPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteDirPermissions(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst* request, ::resource::DeleteDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteDirPermissions(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst* request, ::resource::DeleteDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteFilePermissions(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst* request, ::resource::DeleteFilePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteFilePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteFilePermissions(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst* request, ::resource::DeleteFilePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteFilePermissions(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst* request, ::resource::DeleteFilePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteFilePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteFilePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::resource::RegisterPeerRsp>* AsyncRegisterPeerRaw(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RegisterPeerRsp>* PrepareAsyncRegisterPeerRaw(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::resource::GetPeersRsp>* GetPeersRaw(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request) override;
    ::grpc::ClientAsyncReader< ::resource::GetPeersRsp>* AsyncGetPeersRaw(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::resource::GetPeersRsp>* PrepareAsyncGetPeersRaw(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeletePeerRsp>* AsyncDeletePeerRaw(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeletePeerRsp>* PrepareAsyncDeletePeerRaw(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::AddPeerActionRsp>* AsyncAddPeerActionRaw(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::AddPeerActionRsp>* PrepareAsyncAddPeerActionRaw(::grpc::ClientContext* context, const ::resource::AddPeerActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RemovePeerActionRsp>* AsyncRemovePeerActionRaw(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RemovePeerActionRsp>* PrepareAsyncRemovePeerActionRaw(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RegisterAccountRsp>* AsyncRegisterAccountRaw(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RegisterAccountRsp>* PrepareAsyncRegisterAccountRaw(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountRsp>* AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountRsp>* PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::AuthenticateRsp>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::resource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::AuthenticateRsp>* PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::resource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::SynchronizeLdapRsp>* AsyncSynchronizeLdapRaw(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::SynchronizeLdapRsp>* PrepareAsyncSynchronizeLdapRaw(::grpc::ClientContext* context, const ::resource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RefreshTokenRsp>* AsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RefreshTokenRsp>* PrepareAsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::resource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::AddAccountRoleRsp>* AsyncAddAccountRoleRaw(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::AddAccountRoleRsp>* PrepareAsyncAddAccountRoleRaw(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RemoveAccountRoleRsp>* AsyncRemoveAccountRoleRaw(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RemoveAccountRoleRsp>* PrepareAsyncRemoveAccountRoleRaw(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::CreateRoleRsp>* AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::CreateRoleRsp>* PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteRoleRsp>* AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteRoleRsp>* PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::AddRoleActionRsp>* AsyncAddRoleActionRaw(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::AddRoleActionRsp>* PrepareAsyncAddRoleActionRaw(::grpc::ClientContext* context, const ::resource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RemoveRoleActionRsp>* AsyncRemoveRoleActionRaw(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RemoveRoleActionRsp>* PrepareAsyncRemoveRoleActionRaw(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::AddApplicationActionRsp>* AsyncAddApplicationActionRaw(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::AddApplicationActionRsp>* PrepareAsyncAddApplicationActionRaw(::grpc::ClientContext* context, const ::resource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RemoveApplicationActionRsp>* AsyncRemoveApplicationActionRaw(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RemoveApplicationActionRsp>* PrepareAsyncRemoveApplicationActionRaw(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::GetAllActionsRsp>* AsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::GetAllActionsRsp>* PrepareAsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::resource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::GetPermissionsRsp>* AsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::GetPermissionsRsp>* PrepareAsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::resource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::SetPermissionRsp>* AsyncSetPermissionRaw(::grpc::ClientContext* context, const ::resource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::SetPermissionRsp>* PrepareAsyncSetPermissionRaw(::grpc::ClientContext* context, const ::resource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeletePermissionsRsp>* AsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeletePermissionsRsp>* PrepareAsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::resource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::SetResourceOwnerRsp>* AsyncSetResourceOwnerRaw(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::SetResourceOwnerRsp>* PrepareAsyncSetResourceOwnerRaw(::grpc::ClientContext* context, const ::resource::SetResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::GetResourceOwnersRsp>* AsyncGetResourceOwnersRaw(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::GetResourceOwnersRsp>* PrepareAsyncGetResourceOwnersRaw(::grpc::ClientContext* context, const ::resource::GetResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteResourceOwnerRsp>* AsyncDeleteResourceOwnerRaw(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteResourceOwnerRsp>* PrepareAsyncDeleteResourceOwnerRaw(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteResourceOwnersRsp>* AsyncDeleteResourceOwnersRaw(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteResourceOwnersRsp>* PrepareAsyncDeleteResourceOwnersRaw(::grpc::ClientContext* context, const ::resource::DeleteResourceOwnersRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::GetAllFilesInfoRsp>* AsyncGetAllFilesInfoRaw(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::GetAllFilesInfoRsp>* PrepareAsyncGetAllFilesInfoRaw(::grpc::ClientContext* context, const ::resource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidateTokenRsp>* AsyncValidateTokenRaw(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidateTokenRsp>* PrepareAsyncValidateTokenRaw(::grpc::ClientContext* context, const ::resource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidateUserResourceAccessRsp>* AsyncValidateUserResourceAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidateUserResourceAccessRsp>* PrepareAsyncValidateUserResourceAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateUserResourceAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidateApplicationResourceAccessRsp>* AsyncValidateApplicationResourceAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidateApplicationResourceAccessRsp>* PrepareAsyncValidateApplicationResourceAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateApplicationResourceAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidateUserAccessRsp>* AsyncValidateUserAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidateUserAccessRsp>* PrepareAsyncValidateUserAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidateApplicationAccessRsp>* AsyncValidateApplicationAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidateApplicationAccessRsp>* PrepareAsyncValidateApplicationAccessRaw(::grpc::ClientContext* context, const ::resource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidatePeerAccessRsp>* AsyncValidatePeerAccessRaw(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidatePeerAccessRsp>* PrepareAsyncValidatePeerAccessRaw(::grpc::ClientContext* context, const ::resource::ValidatePeerAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidatePeerResourceAccessRsp>* AsyncValidatePeerResourceAccessRaw(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ValidatePeerResourceAccessRsp>* PrepareAsyncValidatePeerResourceAccessRaw(::grpc::ClientContext* context, const ::resource::ValidatePeerResourceAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountPermissionsRsp>* AsyncDeleteAccountPermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountPermissionsRsp>* PrepareAsyncDeleteAccountPermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteRolePermissionsRsp>* AsyncDeleteRolePermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteRolePermissionsRsp>* PrepareAsyncDeleteRolePermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::GetAllApplicationsInfoRsp>* AsyncGetAllApplicationsInfoRaw(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::GetAllApplicationsInfoRsp>* PrepareAsyncGetAllApplicationsInfoRaw(::grpc::ClientContext* context, const ::resource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteApplicationRsp>* AsyncDeleteApplicationRaw(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteApplicationRsp>* PrepareAsyncDeleteApplicationRaw(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::LogRsp>* AsyncLogRaw(::grpc::ClientContext* context, const ::resource::LogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::LogRsp>* PrepareAsyncLogRaw(::grpc::ClientContext* context, const ::resource::LogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::resource::GetLogRsp>* GetLogRaw(::grpc::ClientContext* context, const ::resource::GetLogRqst& request) override;
    ::grpc::ClientAsyncReader< ::resource::GetLogRsp>* AsyncGetLogRaw(::grpc::ClientContext* context, const ::resource::GetLogRqst& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::resource::GetLogRsp>* PrepareAsyncGetLogRaw(::grpc::ClientContext* context, const ::resource::GetLogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteLogRsp>* AsyncDeleteLogRaw(::grpc::ClientContext* context, const ::resource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteLogRsp>* PrepareAsyncDeleteLogRaw(::grpc::ClientContext* context, const ::resource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ClearAllLogRsp>* AsyncClearAllLogRaw(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::ClearAllLogRsp>* PrepareAsyncClearAllLogRaw(::grpc::ClientContext* context, const ::resource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::resource::GetResourcesRsp>* GetResourcesRaw(::grpc::ClientContext* context, const ::resource::GetResourcesRqst& request) override;
    ::grpc::ClientAsyncReader< ::resource::GetResourcesRsp>* AsyncGetResourcesRaw(::grpc::ClientContext* context, const ::resource::GetResourcesRqst& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::resource::GetResourcesRsp>* PrepareAsyncGetResourcesRaw(::grpc::ClientContext* context, const ::resource::GetResourcesRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::SetResourceRsp>* AsyncSetResourceRaw(::grpc::ClientContext* context, const ::resource::SetResourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::SetResourceRsp>* PrepareAsyncSetResourceRaw(::grpc::ClientContext* context, const ::resource::SetResourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RemoveResourceRsp>* AsyncRemoveResourceRaw(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RemoveResourceRsp>* PrepareAsyncRemoveResourceRaw(::grpc::ClientContext* context, const ::resource::RemoveResourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::SetActionPermissionRsp>* AsyncSetActionPermissionRaw(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::SetActionPermissionRsp>* PrepareAsyncSetActionPermissionRaw(::grpc::ClientContext* context, const ::resource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RemoveActionPermissionRsp>* AsyncRemoveActionPermissionRaw(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RemoveActionPermissionRsp>* PrepareAsyncRemoveActionPermissionRaw(::grpc::ClientContext* context, const ::resource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::GetActionPermissionRsp>* AsyncGetActionPermissionRaw(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::GetActionPermissionRsp>* PrepareAsyncGetActionPermissionRaw(::grpc::ClientContext* context, const ::resource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::CreateDirPermissionsRsp>* AsyncCreateDirPermissionsRaw(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::CreateDirPermissionsRsp>* PrepareAsyncCreateDirPermissionsRaw(::grpc::ClientContext* context, const ::resource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RenameFilePermissionRsp>* AsyncRenameFilePermissionRaw(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::RenameFilePermissionRsp>* PrepareAsyncRenameFilePermissionRaw(::grpc::ClientContext* context, const ::resource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteDirPermissionsRsp>* AsyncDeleteDirPermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteDirPermissionsRsp>* PrepareAsyncDeleteDirPermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteFilePermissionsRsp>* AsyncDeleteFilePermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::resource::DeleteFilePermissionsRsp>* PrepareAsyncDeleteFilePermissionsRaw(::grpc::ClientContext* context, const ::resource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterPeer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPeers_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePeer_;
    const ::grpc::internal::RpcMethod rpcmethod_AddPeerAction_;
    const ::grpc::internal::RpcMethod rpcmethod_RemovePeerAction_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_Authenticate_;
    const ::grpc::internal::RpcMethod rpcmethod_SynchronizeLdap_;
    const ::grpc::internal::RpcMethod rpcmethod_RefreshToken_;
    const ::grpc::internal::RpcMethod rpcmethod_AddAccountRole_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveAccountRole_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRole_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRole_;
    const ::grpc::internal::RpcMethod rpcmethod_AddRoleAction_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveRoleAction_;
    const ::grpc::internal::RpcMethod rpcmethod_AddApplicationAction_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveApplicationAction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllActions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPermission_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_SetResourceOwner_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResourceOwners_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteResourceOwner_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteResourceOwners_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllFilesInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateToken_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateUserResourceAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateApplicationResourceAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateUserAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateApplicationAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidatePeerAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidatePeerResourceAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAccountPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRolePermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllApplicationsInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteApplication_;
    const ::grpc::internal::RpcMethod rpcmethod_Log_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLog_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteLog_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearAllLog_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResources_;
    const ::grpc::internal::RpcMethod rpcmethod_SetResource_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveResource_;
    const ::grpc::internal::RpcMethod rpcmethod_SetActionPermission_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveActionPermission_;
    const ::grpc::internal::RpcMethod rpcmethod_GetActionPermission_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDirPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_RenameFilePermission_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDirPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFilePermissions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // * Register a peer on the network *
    virtual ::grpc::Status RegisterPeer(::grpc::ServerContext* context, const ::resource::RegisterPeerRqst* request, ::resource::RegisterPeerRsp* response);
    // * Return the list of peers *
    virtual ::grpc::Status GetPeers(::grpc::ServerContext* context, const ::resource::GetPeersRqst* request, ::grpc::ServerWriter< ::resource::GetPeersRsp>* writer);
    // * Remove a peer from the network *
    virtual ::grpc::Status DeletePeer(::grpc::ServerContext* context, const ::resource::DeletePeerRqst* request, ::resource::DeletePeerRsp* response);
    // * Add peer action permission *
    virtual ::grpc::Status AddPeerAction(::grpc::ServerContext* context, const ::resource::AddPeerActionRqst* request, ::resource::AddPeerActionRsp* response);
    // * Remove peer action permission *
    virtual ::grpc::Status RemovePeerAction(::grpc::ServerContext* context, const ::resource::RemovePeerActionRqst* request, ::resource::RemovePeerActionRsp* response);
    // * Register a new Account *
    virtual ::grpc::Status RegisterAccount(::grpc::ServerContext* context, const ::resource::RegisterAccountRqst* request, ::resource::RegisterAccountRsp* response);
    // * Delete an account *
    virtual ::grpc::Status DeleteAccount(::grpc::ServerContext* context, const ::resource::DeleteAccountRqst* request, ::resource::DeleteAccountRsp* response);
    // * Authenticate a user *
    virtual ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::resource::AuthenticateRqst* request, ::resource::AuthenticateRsp* response);
    // * Synchronize Resource with LDAP if connection exist *
    virtual ::grpc::Status SynchronizeLdap(::grpc::ServerContext* context, const ::resource::SynchronizeLdapRqst* request, ::resource::SynchronizeLdapRsp* response);
    // * Refresh token get a new token *
    virtual ::grpc::Status RefreshToken(::grpc::ServerContext* context, const ::resource::RefreshTokenRqst* request, ::resource::RefreshTokenRsp* response);
    // * Add role to a given account *
    virtual ::grpc::Status AddAccountRole(::grpc::ServerContext* context, const ::resource::AddAccountRoleRqst* request, ::resource::AddAccountRoleRsp* response);
    // * Remove a role from a given account *
    virtual ::grpc::Status RemoveAccountRole(::grpc::ServerContext* context, const ::resource::RemoveAccountRoleRqst* request, ::resource::RemoveAccountRoleRsp* response);
    // * Create a role with given action list *
    virtual ::grpc::Status CreateRole(::grpc::ServerContext* context, const ::resource::CreateRoleRqst* request, ::resource::CreateRoleRsp* response);
    // * Delete a role with a given id *
    virtual ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::resource::DeleteRoleRqst* request, ::resource::DeleteRoleRsp* response);
    // * Append an action to existing role. *
    virtual ::grpc::Status AddRoleAction(::grpc::ServerContext* context, const ::resource::AddRoleActionRqst* request, ::resource::AddRoleActionRsp* response);
    // * Remove an action to existing role. *
    virtual ::grpc::Status RemoveRoleAction(::grpc::ServerContext* context, const ::resource::RemoveRoleActionRqst* request, ::resource::RemoveRoleActionRsp* response);
    // * Append an action to existing applications. *
    virtual ::grpc::Status AddApplicationAction(::grpc::ServerContext* context, const ::resource::AddApplicationActionRqst* request, ::resource::AddApplicationActionRsp* response);
    // * Remove an action to existing applications. *
    virtual ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* context, const ::resource::RemoveApplicationActionRqst* request, ::resource::RemoveApplicationActionRsp* response);
    // * Get all actions *
    virtual ::grpc::Status GetAllActions(::grpc::ServerContext* context, const ::resource::GetAllActionsRqst* request, ::resource::GetAllActionsRsp* response);
    // *  *
    virtual ::grpc::Status GetPermissions(::grpc::ServerContext* context, const ::resource::GetPermissionsRqst* request, ::resource::GetPermissionsRsp* response);
    // * Set a file permission, create new one if not already exist. *
    virtual ::grpc::Status SetPermission(::grpc::ServerContext* context, const ::resource::SetPermissionRqst* request, ::resource::SetPermissionRsp* response);
    // * Delete a file permissions *
    virtual ::grpc::Status DeletePermissions(::grpc::ServerContext* context, const ::resource::DeletePermissionsRqst* request, ::resource::DeletePermissionsRsp* response);
    // * Set Resource owner *
    virtual ::grpc::Status SetResourceOwner(::grpc::ServerContext* context, const ::resource::SetResourceOwnerRqst* request, ::resource::SetResourceOwnerRsp* response);
    // * Get the resource owners *
    virtual ::grpc::Status GetResourceOwners(::grpc::ServerContext* context, const ::resource::GetResourceOwnersRqst* request, ::resource::GetResourceOwnersRsp* response);
    // * Delete the resource owner *
    virtual ::grpc::Status DeleteResourceOwner(::grpc::ServerContext* context, const ::resource::DeleteResourceOwnerRqst* request, ::resource::DeleteResourceOwnerRsp* response);
    // * Delete the resource owners *
    virtual ::grpc::Status DeleteResourceOwners(::grpc::ServerContext* context, const ::resource::DeleteResourceOwnersRqst* request, ::resource::DeleteResourceOwnersRsp* response);
    // * Retrun a json string with all file info *
    virtual ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* context, const ::resource::GetAllFilesInfoRqst* request, ::resource::GetAllFilesInfoRsp* response);
    // * Validate a token *
    virtual ::grpc::Status ValidateToken(::grpc::ServerContext* context, const ::resource::ValidateTokenRqst* request, ::resource::ValidateTokenRsp* response);
    // * Validate if user can access a given resource. *
    virtual ::grpc::Status ValidateUserResourceAccess(::grpc::ServerContext* context, const ::resource::ValidateUserResourceAccessRqst* request, ::resource::ValidateUserResourceAccessRsp* response);
    // * Validate if application can access a given ressouce. *
    virtual ::grpc::Status ValidateApplicationResourceAccess(::grpc::ServerContext* context, const ::resource::ValidateApplicationResourceAccessRqst* request, ::resource::ValidateApplicationResourceAccessRsp* response);
    // * Validate if user can access a given method. *
    virtual ::grpc::Status ValidateUserAccess(::grpc::ServerContext* context, const ::resource::ValidateUserAccessRqst* request, ::resource::ValidateUserAccessRsp* response);
    // * Validate if application can access a given method. *
    virtual ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* context, const ::resource::ValidateApplicationAccessRqst* request, ::resource::ValidateApplicationAccessRsp* response);
    // * Validate if a peer can access a given method. *
    virtual ::grpc::Status ValidatePeerAccess(::grpc::ServerContext* context, const ::resource::ValidatePeerAccessRqst* request, ::resource::ValidatePeerAccessRsp* response);
    // * Validate if a peer can access a given resource. *
    virtual ::grpc::Status ValidatePeerResourceAccess(::grpc::ServerContext* context, const ::resource::ValidatePeerResourceAccessRqst* request, ::resource::ValidatePeerResourceAccessRsp* response);
    // * Delete all permission for a given account *
    virtual ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* context, const ::resource::DeleteAccountPermissionsRqst* request, ::resource::DeleteAccountPermissionsRsp* response);
    // * Delete all permission for a given role *
    virtual ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* context, const ::resource::DeleteRolePermissionsRqst* request, ::resource::DeleteRolePermissionsRsp* response);
    // * Return a json string with all applications informations *
    virtual ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* context, const ::resource::GetAllApplicationsInfoRqst* request, ::resource::GetAllApplicationsInfoRsp* response);
    // * Delete an application from the server. *
    virtual ::grpc::Status DeleteApplication(::grpc::ServerContext* context, const ::resource::DeleteApplicationRqst* request, ::resource::DeleteApplicationRsp* response);
    // * Set a method into the log... *
    virtual ::grpc::Status Log(::grpc::ServerContext* context, const ::resource::LogRqst* request, ::resource::LogRsp* response);
    // * Get the list of logs *
    virtual ::grpc::Status GetLog(::grpc::ServerContext* context, const ::resource::GetLogRqst* request, ::grpc::ServerWriter< ::resource::GetLogRsp>* writer);
    // * Delete a single log entry *
    virtual ::grpc::Status DeleteLog(::grpc::ServerContext* context, const ::resource::DeleteLogRqst* request, ::resource::DeleteLogRsp* response);
    // * Delete all log *
    virtual ::grpc::Status ClearAllLog(::grpc::ServerContext* context, const ::resource::ClearAllLogRqst* request, ::resource::ClearAllLogRsp* response);
    // * Get all resources 
    virtual ::grpc::Status GetResources(::grpc::ServerContext* context, const ::resource::GetResourcesRqst* request, ::grpc::ServerWriter< ::resource::GetResourcesRsp>* writer);
    // * Set a resource from a client (custom service) to globular 
    virtual ::grpc::Status SetResource(::grpc::ServerContext* context, const ::resource::SetResourceRqst* request, ::resource::SetResourceRsp* response);
    // * Remove a resource from a client (custom service) to globular 
    virtual ::grpc::Status RemoveResource(::grpc::ServerContext* context, const ::resource::RemoveResourceRqst* request, ::resource::RemoveResourceRsp* response);
    // * Set resource action permission *
    virtual ::grpc::Status SetActionPermission(::grpc::ServerContext* context, const ::resource::SetActionPermissionRqst* request, ::resource::SetActionPermissionRsp* response);
    // * Remove resource action permission *
    virtual ::grpc::Status RemoveActionPermission(::grpc::ServerContext* context, const ::resource::RemoveActionPermissionRqst* request, ::resource::RemoveActionPermissionRsp* response);
    // * Get resource action permission *
    virtual ::grpc::Status GetActionPermission(::grpc::ServerContext* context, const ::resource::GetActionPermissionRqst* request, ::resource::GetActionPermissionRsp* response);
    // * Create Permission for a dir (recursive) *
    virtual ::grpc::Status CreateDirPermissions(::grpc::ServerContext* context, const ::resource::CreateDirPermissionsRqst* request, ::resource::CreateDirPermissionsRsp* response);
    // * Rename file/dir permission *
    virtual ::grpc::Status RenameFilePermission(::grpc::ServerContext* context, const ::resource::RenameFilePermissionRqst* request, ::resource::RenameFilePermissionRsp* response);
    // * Delete Permission for a dir (recursive) *
    virtual ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* context, const ::resource::DeleteDirPermissionsRqst* request, ::resource::DeleteDirPermissionsRsp* response);
    // * Delete a single file permission *
    virtual ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* context, const ::resource::DeleteFilePermissionsRqst* request, ::resource::DeleteFilePermissionsRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterPeer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPeer(::grpc::ServerContext* /*context*/, const ::resource::RegisterPeerRqst* /*request*/, ::resource::RegisterPeerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterPeer(::grpc::ServerContext* context, ::resource::RegisterPeerRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::RegisterPeerRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPeers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeers(::grpc::ServerContext* /*context*/, const ::resource::GetPeersRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetPeersRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeers(::grpc::ServerContext* context, ::resource::GetPeersRqst* request, ::grpc::ServerAsyncWriter< ::resource::GetPeersRsp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePeer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeletePeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePeer(::grpc::ServerContext* /*context*/, const ::resource::DeletePeerRqst* /*request*/, ::resource::DeletePeerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePeer(::grpc::ServerContext* context, ::resource::DeletePeerRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::DeletePeerRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPeerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddPeerAction() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AddPeerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeerAction(::grpc::ServerContext* /*context*/, const ::resource::AddPeerActionRqst* /*request*/, ::resource::AddPeerActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPeerAction(::grpc::ServerContext* context, ::resource::AddPeerActionRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::AddPeerActionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemovePeerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemovePeerAction() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RemovePeerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePeerAction(::grpc::ServerContext* /*context*/, const ::resource::RemovePeerActionRqst* /*request*/, ::resource::RemovePeerActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePeerAction(::grpc::ServerContext* context, ::resource::RemovePeerActionRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::RemovePeerActionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterAccount() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RegisterAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAccount(::grpc::ServerContext* /*context*/, const ::resource::RegisterAccountRqst* /*request*/, ::resource::RegisterAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterAccount(::grpc::ServerContext* context, ::resource::RegisterAccountRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::RegisterAccountRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::resource::DeleteAccountRqst* /*request*/, ::resource::DeleteAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccount(::grpc::ServerContext* context, ::resource::DeleteAccountRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::DeleteAccountRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Authenticate() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::resource::AuthenticateRqst* /*request*/, ::resource::AuthenticateRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::resource::AuthenticateRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::AuthenticateRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SynchronizeLdap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SynchronizeLdap() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SynchronizeLdap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchronizeLdap(::grpc::ServerContext* /*context*/, const ::resource::SynchronizeLdapRqst* /*request*/, ::resource::SynchronizeLdapRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynchronizeLdap(::grpc::ServerContext* context, ::resource::SynchronizeLdapRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::SynchronizeLdapRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RefreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RefreshToken() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_RefreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshToken(::grpc::ServerContext* /*context*/, const ::resource::RefreshTokenRqst* /*request*/, ::resource::RefreshTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRefreshToken(::grpc::ServerContext* context, ::resource::RefreshTokenRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::RefreshTokenRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddAccountRole() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_AddAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccountRole(::grpc::ServerContext* /*context*/, const ::resource::AddAccountRoleRqst* /*request*/, ::resource::AddAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddAccountRole(::grpc::ServerContext* context, ::resource::AddAccountRoleRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::AddAccountRoleRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveAccountRole() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_RemoveAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAccountRole(::grpc::ServerContext* /*context*/, const ::resource::RemoveAccountRoleRqst* /*request*/, ::resource::RemoveAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveAccountRole(::grpc::ServerContext* context, ::resource::RemoveAccountRoleRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::RemoveAccountRoleRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRole() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::resource::CreateRoleRqst* /*request*/, ::resource::CreateRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRole(::grpc::ServerContext* context, ::resource::CreateRoleRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::CreateRoleRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRole() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::resource::DeleteRoleRqst* /*request*/, ::resource::DeleteRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRole(::grpc::ServerContext* context, ::resource::DeleteRoleRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::DeleteRoleRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddRoleAction() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_AddRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleAction(::grpc::ServerContext* /*context*/, const ::resource::AddRoleActionRqst* /*request*/, ::resource::AddRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRoleAction(::grpc::ServerContext* context, ::resource::AddRoleActionRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::AddRoleActionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveRoleAction() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_RemoveRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRoleAction(::grpc::ServerContext* /*context*/, const ::resource::RemoveRoleActionRqst* /*request*/, ::resource::RemoveRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveRoleAction(::grpc::ServerContext* context, ::resource::RemoveRoleActionRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::RemoveRoleActionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddApplicationAction() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_AddApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddApplicationAction(::grpc::ServerContext* /*context*/, const ::resource::AddApplicationActionRqst* /*request*/, ::resource::AddApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddApplicationAction(::grpc::ServerContext* context, ::resource::AddApplicationActionRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::AddApplicationActionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveApplicationAction() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_RemoveApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* /*context*/, const ::resource::RemoveApplicationActionRqst* /*request*/, ::resource::RemoveApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveApplicationAction(::grpc::ServerContext* context, ::resource::RemoveApplicationActionRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::RemoveApplicationActionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllActions() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::resource::GetAllActionsRqst* /*request*/, ::resource::GetAllActionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllActions(::grpc::ServerContext* context, ::resource::GetAllActionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::GetAllActionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPermissions() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::resource::GetPermissionsRqst* /*request*/, ::resource::GetPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissions(::grpc::ServerContext* context, ::resource::GetPermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::GetPermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPermission() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::resource::SetPermissionRqst* /*request*/, ::resource::SetPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPermission(::grpc::ServerContext* context, ::resource::SetPermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::SetPermissionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeletePermissionsRqst* /*request*/, ::resource::DeletePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermissions(::grpc::ServerContext* context, ::resource::DeletePermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::DeletePermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetResourceOwner() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_SetResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourceOwner(::grpc::ServerContext* /*context*/, const ::resource::SetResourceOwnerRqst* /*request*/, ::resource::SetResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetResourceOwner(::grpc::ServerContext* context, ::resource::SetResourceOwnerRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::SetResourceOwnerRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResourceOwners() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_GetResourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceOwners(::grpc::ServerContext* /*context*/, const ::resource::GetResourceOwnersRqst* /*request*/, ::resource::GetResourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourceOwners(::grpc::ServerContext* context, ::resource::GetResourceOwnersRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::GetResourceOwnersRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteResourceOwner() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_DeleteResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourceOwner(::grpc::ServerContext* /*context*/, const ::resource::DeleteResourceOwnerRqst* /*request*/, ::resource::DeleteResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteResourceOwner(::grpc::ServerContext* context, ::resource::DeleteResourceOwnerRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::DeleteResourceOwnerRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteResourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteResourceOwners() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_DeleteResourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourceOwners(::grpc::ServerContext* /*context*/, const ::resource::DeleteResourceOwnersRqst* /*request*/, ::resource::DeleteResourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteResourceOwners(::grpc::ServerContext* context, ::resource::DeleteResourceOwnersRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::DeleteResourceOwnersRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllFilesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllFilesInfo() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_GetAllFilesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* /*context*/, const ::resource::GetAllFilesInfoRqst* /*request*/, ::resource::GetAllFilesInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllFilesInfo(::grpc::ServerContext* context, ::resource::GetAllFilesInfoRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::GetAllFilesInfoRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateToken() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::resource::ValidateTokenRqst* /*request*/, ::resource::ValidateTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateToken(::grpc::ServerContext* context, ::resource::ValidateTokenRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::ValidateTokenRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateUserResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateUserResourceAccess() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_ValidateUserResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateUserResourceAccessRqst* /*request*/, ::resource::ValidateUserResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateUserResourceAccess(::grpc::ServerContext* context, ::resource::ValidateUserResourceAccessRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::ValidateUserResourceAccessRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateApplicationResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateApplicationResourceAccess() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_ValidateApplicationResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateApplicationResourceAccessRqst* /*request*/, ::resource::ValidateApplicationResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateApplicationResourceAccess(::grpc::ServerContext* context, ::resource::ValidateApplicationResourceAccessRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::ValidateApplicationResourceAccessRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateUserAccess() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_ValidateUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateUserAccessRqst* /*request*/, ::resource::ValidateUserAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateUserAccess(::grpc::ServerContext* context, ::resource::ValidateUserAccessRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::ValidateUserAccessRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateApplicationAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateApplicationAccess() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_ValidateApplicationAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateApplicationAccessRqst* /*request*/, ::resource::ValidateApplicationAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateApplicationAccess(::grpc::ServerContext* context, ::resource::ValidateApplicationAccessRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::ValidateApplicationAccessRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidatePeerAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidatePeerAccess() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_ValidatePeerAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatePeerAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidatePeerAccessRqst* /*request*/, ::resource::ValidatePeerAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatePeerAccess(::grpc::ServerContext* context, ::resource::ValidatePeerAccessRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::ValidatePeerAccessRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidatePeerResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidatePeerResourceAccess() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_ValidatePeerResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatePeerResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidatePeerResourceAccessRqst* /*request*/, ::resource::ValidatePeerResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatePeerResourceAccess(::grpc::ServerContext* context, ::resource::ValidatePeerResourceAccessRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::ValidatePeerResourceAccessRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAccountPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAccountPermissions() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_DeleteAccountPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteAccountPermissionsRqst* /*request*/, ::resource::DeleteAccountPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccountPermissions(::grpc::ServerContext* context, ::resource::DeleteAccountPermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::DeleteAccountPermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRolePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRolePermissions() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_DeleteRolePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteRolePermissionsRqst* /*request*/, ::resource::DeleteRolePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRolePermissions(::grpc::ServerContext* context, ::resource::DeleteRolePermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::DeleteRolePermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllApplicationsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllApplicationsInfo() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_GetAllApplicationsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* /*context*/, const ::resource::GetAllApplicationsInfoRqst* /*request*/, ::resource::GetAllApplicationsInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllApplicationsInfo(::grpc::ServerContext* context, ::resource::GetAllApplicationsInfoRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::GetAllApplicationsInfoRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteApplication() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_DeleteApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApplication(::grpc::ServerContext* /*context*/, const ::resource::DeleteApplicationRqst* /*request*/, ::resource::DeleteApplicationRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteApplication(::grpc::ServerContext* context, ::resource::DeleteApplicationRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::DeleteApplicationRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Log() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::resource::LogRqst* /*request*/, ::resource::LogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLog(::grpc::ServerContext* context, ::resource::LogRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::LogRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLog() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::resource::GetLogRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetLogRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLog(::grpc::ServerContext* context, ::resource::GetLogRqst* request, ::grpc::ServerAsyncWriter< ::resource::GetLogRsp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(39, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteLog() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_DeleteLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* /*context*/, const ::resource::DeleteLogRqst* /*request*/, ::resource::DeleteLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLog(::grpc::ServerContext* context, ::resource::DeleteLogRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::DeleteLogRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearAllLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearAllLog() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_ClearAllLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearAllLog(::grpc::ServerContext* /*context*/, const ::resource::ClearAllLogRqst* /*request*/, ::resource::ClearAllLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearAllLog(::grpc::ServerContext* context, ::resource::ClearAllLogRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::ClearAllLogRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResources() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_GetResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResources(::grpc::ServerContext* /*context*/, const ::resource::GetResourcesRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetResourcesRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResources(::grpc::ServerContext* context, ::resource::GetResourcesRqst* request, ::grpc::ServerAsyncWriter< ::resource::GetResourcesRsp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(42, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetResource() {
      ::grpc::Service::MarkMethodAsync(43);
    }
    ~WithAsyncMethod_SetResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResource(::grpc::ServerContext* /*context*/, const ::resource::SetResourceRqst* /*request*/, ::resource::SetResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetResource(::grpc::ServerContext* context, ::resource::SetResourceRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::SetResourceRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveResource() {
      ::grpc::Service::MarkMethodAsync(44);
    }
    ~WithAsyncMethod_RemoveResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResource(::grpc::ServerContext* /*context*/, const ::resource::RemoveResourceRqst* /*request*/, ::resource::RemoveResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveResource(::grpc::ServerContext* context, ::resource::RemoveResourceRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::RemoveResourceRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetActionPermission() {
      ::grpc::Service::MarkMethodAsync(45);
    }
    ~WithAsyncMethod_SetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionPermission(::grpc::ServerContext* /*context*/, const ::resource::SetActionPermissionRqst* /*request*/, ::resource::SetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetActionPermission(::grpc::ServerContext* context, ::resource::SetActionPermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::SetActionPermissionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveActionPermission() {
      ::grpc::Service::MarkMethodAsync(46);
    }
    ~WithAsyncMethod_RemoveActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActionPermission(::grpc::ServerContext* /*context*/, const ::resource::RemoveActionPermissionRqst* /*request*/, ::resource::RemoveActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveActionPermission(::grpc::ServerContext* context, ::resource::RemoveActionPermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::RemoveActionPermissionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetActionPermission() {
      ::grpc::Service::MarkMethodAsync(47);
    }
    ~WithAsyncMethod_GetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionPermission(::grpc::ServerContext* /*context*/, const ::resource::GetActionPermissionRqst* /*request*/, ::resource::GetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetActionPermission(::grpc::ServerContext* context, ::resource::GetActionPermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::GetActionPermissionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDirPermissions() {
      ::grpc::Service::MarkMethodAsync(48);
    }
    ~WithAsyncMethod_CreateDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirPermissions(::grpc::ServerContext* /*context*/, const ::resource::CreateDirPermissionsRqst* /*request*/, ::resource::CreateDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDirPermissions(::grpc::ServerContext* context, ::resource::CreateDirPermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::CreateDirPermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RenameFilePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RenameFilePermission() {
      ::grpc::Service::MarkMethodAsync(49);
    }
    ~WithAsyncMethod_RenameFilePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameFilePermission(::grpc::ServerContext* /*context*/, const ::resource::RenameFilePermissionRqst* /*request*/, ::resource::RenameFilePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenameFilePermission(::grpc::ServerContext* context, ::resource::RenameFilePermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::RenameFilePermissionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDirPermissions() {
      ::grpc::Service::MarkMethodAsync(50);
    }
    ~WithAsyncMethod_DeleteDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteDirPermissionsRqst* /*request*/, ::resource::DeleteDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDirPermissions(::grpc::ServerContext* context, ::resource::DeleteDirPermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::DeleteDirPermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFilePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteFilePermissions() {
      ::grpc::Service::MarkMethodAsync(51);
    }
    ~WithAsyncMethod_DeleteFilePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteFilePermissionsRqst* /*request*/, ::resource::DeleteFilePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFilePermissions(::grpc::ServerContext* context, ::resource::DeleteFilePermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::resource::DeleteFilePermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterPeer<WithAsyncMethod_GetPeers<WithAsyncMethod_DeletePeer<WithAsyncMethod_AddPeerAction<WithAsyncMethod_RemovePeerAction<WithAsyncMethod_RegisterAccount<WithAsyncMethod_DeleteAccount<WithAsyncMethod_Authenticate<WithAsyncMethod_SynchronizeLdap<WithAsyncMethod_RefreshToken<WithAsyncMethod_AddAccountRole<WithAsyncMethod_RemoveAccountRole<WithAsyncMethod_CreateRole<WithAsyncMethod_DeleteRole<WithAsyncMethod_AddRoleAction<WithAsyncMethod_RemoveRoleAction<WithAsyncMethod_AddApplicationAction<WithAsyncMethod_RemoveApplicationAction<WithAsyncMethod_GetAllActions<WithAsyncMethod_GetPermissions<WithAsyncMethod_SetPermission<WithAsyncMethod_DeletePermissions<WithAsyncMethod_SetResourceOwner<WithAsyncMethod_GetResourceOwners<WithAsyncMethod_DeleteResourceOwner<WithAsyncMethod_DeleteResourceOwners<WithAsyncMethod_GetAllFilesInfo<WithAsyncMethod_ValidateToken<WithAsyncMethod_ValidateUserResourceAccess<WithAsyncMethod_ValidateApplicationResourceAccess<WithAsyncMethod_ValidateUserAccess<WithAsyncMethod_ValidateApplicationAccess<WithAsyncMethod_ValidatePeerAccess<WithAsyncMethod_ValidatePeerResourceAccess<WithAsyncMethod_DeleteAccountPermissions<WithAsyncMethod_DeleteRolePermissions<WithAsyncMethod_GetAllApplicationsInfo<WithAsyncMethod_DeleteApplication<WithAsyncMethod_Log<WithAsyncMethod_GetLog<WithAsyncMethod_DeleteLog<WithAsyncMethod_ClearAllLog<WithAsyncMethod_GetResources<WithAsyncMethod_SetResource<WithAsyncMethod_RemoveResource<WithAsyncMethod_SetActionPermission<WithAsyncMethod_RemoveActionPermission<WithAsyncMethod_GetActionPermission<WithAsyncMethod_CreateDirPermissions<WithAsyncMethod_RenameFilePermission<WithAsyncMethod_DeleteDirPermissions<WithAsyncMethod_DeleteFilePermissions<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterPeer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::RegisterPeerRqst, ::resource::RegisterPeerRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::RegisterPeerRqst* request, ::resource::RegisterPeerRsp* response) { return this->RegisterPeer(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterPeer(
        ::grpc::experimental::MessageAllocator< ::resource::RegisterPeerRqst, ::resource::RegisterPeerRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::RegisterPeerRqst, ::resource::RegisterPeerRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPeer(::grpc::ServerContext* /*context*/, const ::resource::RegisterPeerRqst* /*request*/, ::resource::RegisterPeerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterPeer(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::RegisterPeerRqst* /*request*/, ::resource::RegisterPeerRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterPeer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::RegisterPeerRqst* /*request*/, ::resource::RegisterPeerRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPeers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::resource::GetPeersRqst, ::resource::GetPeersRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::GetPeersRqst* request) { return this->GetPeers(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeers(::grpc::ServerContext* /*context*/, const ::resource::GetPeersRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetPeersRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::resource::GetPeersRsp>* GetPeers(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::GetPeersRqst* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::resource::GetPeersRsp>* GetPeers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::GetPeersRqst* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeletePeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeletePeer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeletePeerRqst, ::resource::DeletePeerRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::DeletePeerRqst* request, ::resource::DeletePeerRsp* response) { return this->DeletePeer(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePeer(
        ::grpc::experimental::MessageAllocator< ::resource::DeletePeerRqst, ::resource::DeletePeerRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeletePeerRqst, ::resource::DeletePeerRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeletePeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePeer(::grpc::ServerContext* /*context*/, const ::resource::DeletePeerRqst* /*request*/, ::resource::DeletePeerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeletePeer(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::DeletePeerRqst* /*request*/, ::resource::DeletePeerRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeletePeer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::DeletePeerRqst* /*request*/, ::resource::DeletePeerRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddPeerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddPeerAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::AddPeerActionRqst, ::resource::AddPeerActionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::AddPeerActionRqst* request, ::resource::AddPeerActionRsp* response) { return this->AddPeerAction(context, request, response); }));}
    void SetMessageAllocatorFor_AddPeerAction(
        ::grpc::experimental::MessageAllocator< ::resource::AddPeerActionRqst, ::resource::AddPeerActionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::AddPeerActionRqst, ::resource::AddPeerActionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddPeerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeerAction(::grpc::ServerContext* /*context*/, const ::resource::AddPeerActionRqst* /*request*/, ::resource::AddPeerActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddPeerAction(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::AddPeerActionRqst* /*request*/, ::resource::AddPeerActionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddPeerAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::AddPeerActionRqst* /*request*/, ::resource::AddPeerActionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemovePeerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemovePeerAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::RemovePeerActionRqst, ::resource::RemovePeerActionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::RemovePeerActionRqst* request, ::resource::RemovePeerActionRsp* response) { return this->RemovePeerAction(context, request, response); }));}
    void SetMessageAllocatorFor_RemovePeerAction(
        ::grpc::experimental::MessageAllocator< ::resource::RemovePeerActionRqst, ::resource::RemovePeerActionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::RemovePeerActionRqst, ::resource::RemovePeerActionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemovePeerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePeerAction(::grpc::ServerContext* /*context*/, const ::resource::RemovePeerActionRqst* /*request*/, ::resource::RemovePeerActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemovePeerAction(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::RemovePeerActionRqst* /*request*/, ::resource::RemovePeerActionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemovePeerAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::RemovePeerActionRqst* /*request*/, ::resource::RemovePeerActionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::RegisterAccountRqst, ::resource::RegisterAccountRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::RegisterAccountRqst* request, ::resource::RegisterAccountRsp* response) { return this->RegisterAccount(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterAccount(
        ::grpc::experimental::MessageAllocator< ::resource::RegisterAccountRqst, ::resource::RegisterAccountRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::RegisterAccountRqst, ::resource::RegisterAccountRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAccount(::grpc::ServerContext* /*context*/, const ::resource::RegisterAccountRqst* /*request*/, ::resource::RegisterAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::RegisterAccountRqst* /*request*/, ::resource::RegisterAccountRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::RegisterAccountRqst* /*request*/, ::resource::RegisterAccountRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteAccountRqst, ::resource::DeleteAccountRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::DeleteAccountRqst* request, ::resource::DeleteAccountRsp* response) { return this->DeleteAccount(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAccount(
        ::grpc::experimental::MessageAllocator< ::resource::DeleteAccountRqst, ::resource::DeleteAccountRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteAccountRqst, ::resource::DeleteAccountRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::resource::DeleteAccountRqst* /*request*/, ::resource::DeleteAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::DeleteAccountRqst* /*request*/, ::resource::DeleteAccountRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::DeleteAccountRqst* /*request*/, ::resource::DeleteAccountRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Authenticate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::AuthenticateRqst, ::resource::AuthenticateRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::AuthenticateRqst* request, ::resource::AuthenticateRsp* response) { return this->Authenticate(context, request, response); }));}
    void SetMessageAllocatorFor_Authenticate(
        ::grpc::experimental::MessageAllocator< ::resource::AuthenticateRqst, ::resource::AuthenticateRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::AuthenticateRqst, ::resource::AuthenticateRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::resource::AuthenticateRqst* /*request*/, ::resource::AuthenticateRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Authenticate(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::AuthenticateRqst* /*request*/, ::resource::AuthenticateRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Authenticate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::AuthenticateRqst* /*request*/, ::resource::AuthenticateRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SynchronizeLdap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SynchronizeLdap() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::SynchronizeLdapRqst, ::resource::SynchronizeLdapRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::SynchronizeLdapRqst* request, ::resource::SynchronizeLdapRsp* response) { return this->SynchronizeLdap(context, request, response); }));}
    void SetMessageAllocatorFor_SynchronizeLdap(
        ::grpc::experimental::MessageAllocator< ::resource::SynchronizeLdapRqst, ::resource::SynchronizeLdapRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::SynchronizeLdapRqst, ::resource::SynchronizeLdapRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SynchronizeLdap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchronizeLdap(::grpc::ServerContext* /*context*/, const ::resource::SynchronizeLdapRqst* /*request*/, ::resource::SynchronizeLdapRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SynchronizeLdap(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::SynchronizeLdapRqst* /*request*/, ::resource::SynchronizeLdapRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SynchronizeLdap(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::SynchronizeLdapRqst* /*request*/, ::resource::SynchronizeLdapRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RefreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RefreshToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::RefreshTokenRqst, ::resource::RefreshTokenRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::RefreshTokenRqst* request, ::resource::RefreshTokenRsp* response) { return this->RefreshToken(context, request, response); }));}
    void SetMessageAllocatorFor_RefreshToken(
        ::grpc::experimental::MessageAllocator< ::resource::RefreshTokenRqst, ::resource::RefreshTokenRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::RefreshTokenRqst, ::resource::RefreshTokenRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RefreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshToken(::grpc::ServerContext* /*context*/, const ::resource::RefreshTokenRqst* /*request*/, ::resource::RefreshTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RefreshToken(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::RefreshTokenRqst* /*request*/, ::resource::RefreshTokenRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RefreshToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::RefreshTokenRqst* /*request*/, ::resource::RefreshTokenRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddAccountRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::AddAccountRoleRqst, ::resource::AddAccountRoleRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::AddAccountRoleRqst* request, ::resource::AddAccountRoleRsp* response) { return this->AddAccountRole(context, request, response); }));}
    void SetMessageAllocatorFor_AddAccountRole(
        ::grpc::experimental::MessageAllocator< ::resource::AddAccountRoleRqst, ::resource::AddAccountRoleRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::AddAccountRoleRqst, ::resource::AddAccountRoleRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccountRole(::grpc::ServerContext* /*context*/, const ::resource::AddAccountRoleRqst* /*request*/, ::resource::AddAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddAccountRole(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::AddAccountRoleRqst* /*request*/, ::resource::AddAccountRoleRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddAccountRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::AddAccountRoleRqst* /*request*/, ::resource::AddAccountRoleRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveAccountRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::RemoveAccountRoleRqst, ::resource::RemoveAccountRoleRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::RemoveAccountRoleRqst* request, ::resource::RemoveAccountRoleRsp* response) { return this->RemoveAccountRole(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveAccountRole(
        ::grpc::experimental::MessageAllocator< ::resource::RemoveAccountRoleRqst, ::resource::RemoveAccountRoleRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::RemoveAccountRoleRqst, ::resource::RemoveAccountRoleRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAccountRole(::grpc::ServerContext* /*context*/, const ::resource::RemoveAccountRoleRqst* /*request*/, ::resource::RemoveAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveAccountRole(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::RemoveAccountRoleRqst* /*request*/, ::resource::RemoveAccountRoleRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveAccountRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::RemoveAccountRoleRqst* /*request*/, ::resource::RemoveAccountRoleRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::CreateRoleRqst, ::resource::CreateRoleRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::CreateRoleRqst* request, ::resource::CreateRoleRsp* response) { return this->CreateRole(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRole(
        ::grpc::experimental::MessageAllocator< ::resource::CreateRoleRqst, ::resource::CreateRoleRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::CreateRoleRqst, ::resource::CreateRoleRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::resource::CreateRoleRqst* /*request*/, ::resource::CreateRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateRole(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::CreateRoleRqst* /*request*/, ::resource::CreateRoleRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::CreateRoleRqst* /*request*/, ::resource::CreateRoleRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteRoleRqst, ::resource::DeleteRoleRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::DeleteRoleRqst* request, ::resource::DeleteRoleRsp* response) { return this->DeleteRole(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRole(
        ::grpc::experimental::MessageAllocator< ::resource::DeleteRoleRqst, ::resource::DeleteRoleRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteRoleRqst, ::resource::DeleteRoleRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::resource::DeleteRoleRqst* /*request*/, ::resource::DeleteRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRole(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::DeleteRoleRqst* /*request*/, ::resource::DeleteRoleRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::DeleteRoleRqst* /*request*/, ::resource::DeleteRoleRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddRoleAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::AddRoleActionRqst, ::resource::AddRoleActionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::AddRoleActionRqst* request, ::resource::AddRoleActionRsp* response) { return this->AddRoleAction(context, request, response); }));}
    void SetMessageAllocatorFor_AddRoleAction(
        ::grpc::experimental::MessageAllocator< ::resource::AddRoleActionRqst, ::resource::AddRoleActionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::AddRoleActionRqst, ::resource::AddRoleActionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleAction(::grpc::ServerContext* /*context*/, const ::resource::AddRoleActionRqst* /*request*/, ::resource::AddRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddRoleAction(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::AddRoleActionRqst* /*request*/, ::resource::AddRoleActionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddRoleAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::AddRoleActionRqst* /*request*/, ::resource::AddRoleActionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveRoleAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::RemoveRoleActionRqst, ::resource::RemoveRoleActionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::RemoveRoleActionRqst* request, ::resource::RemoveRoleActionRsp* response) { return this->RemoveRoleAction(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveRoleAction(
        ::grpc::experimental::MessageAllocator< ::resource::RemoveRoleActionRqst, ::resource::RemoveRoleActionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::RemoveRoleActionRqst, ::resource::RemoveRoleActionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRoleAction(::grpc::ServerContext* /*context*/, const ::resource::RemoveRoleActionRqst* /*request*/, ::resource::RemoveRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveRoleAction(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::RemoveRoleActionRqst* /*request*/, ::resource::RemoveRoleActionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveRoleAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::RemoveRoleActionRqst* /*request*/, ::resource::RemoveRoleActionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddApplicationAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(16,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::AddApplicationActionRqst, ::resource::AddApplicationActionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::AddApplicationActionRqst* request, ::resource::AddApplicationActionRsp* response) { return this->AddApplicationAction(context, request, response); }));}
    void SetMessageAllocatorFor_AddApplicationAction(
        ::grpc::experimental::MessageAllocator< ::resource::AddApplicationActionRqst, ::resource::AddApplicationActionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(16);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::AddApplicationActionRqst, ::resource::AddApplicationActionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddApplicationAction(::grpc::ServerContext* /*context*/, const ::resource::AddApplicationActionRqst* /*request*/, ::resource::AddApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddApplicationAction(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::AddApplicationActionRqst* /*request*/, ::resource::AddApplicationActionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddApplicationAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::AddApplicationActionRqst* /*request*/, ::resource::AddApplicationActionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveApplicationAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(17,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::RemoveApplicationActionRqst, ::resource::RemoveApplicationActionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::RemoveApplicationActionRqst* request, ::resource::RemoveApplicationActionRsp* response) { return this->RemoveApplicationAction(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveApplicationAction(
        ::grpc::experimental::MessageAllocator< ::resource::RemoveApplicationActionRqst, ::resource::RemoveApplicationActionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(17);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::RemoveApplicationActionRqst, ::resource::RemoveApplicationActionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* /*context*/, const ::resource::RemoveApplicationActionRqst* /*request*/, ::resource::RemoveApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveApplicationAction(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::RemoveApplicationActionRqst* /*request*/, ::resource::RemoveApplicationActionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveApplicationAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::RemoveApplicationActionRqst* /*request*/, ::resource::RemoveApplicationActionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAllActions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(18,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::GetAllActionsRqst, ::resource::GetAllActionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::GetAllActionsRqst* request, ::resource::GetAllActionsRsp* response) { return this->GetAllActions(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllActions(
        ::grpc::experimental::MessageAllocator< ::resource::GetAllActionsRqst, ::resource::GetAllActionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(18);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::GetAllActionsRqst, ::resource::GetAllActionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::resource::GetAllActionsRqst* /*request*/, ::resource::GetAllActionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllActions(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::GetAllActionsRqst* /*request*/, ::resource::GetAllActionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllActions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::GetAllActionsRqst* /*request*/, ::resource::GetAllActionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(19,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::GetPermissionsRqst, ::resource::GetPermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::GetPermissionsRqst* request, ::resource::GetPermissionsRsp* response) { return this->GetPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_GetPermissions(
        ::grpc::experimental::MessageAllocator< ::resource::GetPermissionsRqst, ::resource::GetPermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(19);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::GetPermissionsRqst, ::resource::GetPermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::resource::GetPermissionsRqst* /*request*/, ::resource::GetPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::GetPermissionsRqst* /*request*/, ::resource::GetPermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::GetPermissionsRqst* /*request*/, ::resource::GetPermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(20,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::SetPermissionRqst, ::resource::SetPermissionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::SetPermissionRqst* request, ::resource::SetPermissionRsp* response) { return this->SetPermission(context, request, response); }));}
    void SetMessageAllocatorFor_SetPermission(
        ::grpc::experimental::MessageAllocator< ::resource::SetPermissionRqst, ::resource::SetPermissionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(20);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::SetPermissionRqst, ::resource::SetPermissionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::resource::SetPermissionRqst* /*request*/, ::resource::SetPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::SetPermissionRqst* /*request*/, ::resource::SetPermissionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::SetPermissionRqst* /*request*/, ::resource::SetPermissionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeletePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(21,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeletePermissionsRqst, ::resource::DeletePermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::DeletePermissionsRqst* request, ::resource::DeletePermissionsRsp* response) { return this->DeletePermissions(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePermissions(
        ::grpc::experimental::MessageAllocator< ::resource::DeletePermissionsRqst, ::resource::DeletePermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(21);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeletePermissionsRqst, ::resource::DeletePermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeletePermissionsRqst* /*request*/, ::resource::DeletePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeletePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::DeletePermissionsRqst* /*request*/, ::resource::DeletePermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeletePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::DeletePermissionsRqst* /*request*/, ::resource::DeletePermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetResourceOwner() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(22,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::SetResourceOwnerRqst, ::resource::SetResourceOwnerRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::SetResourceOwnerRqst* request, ::resource::SetResourceOwnerRsp* response) { return this->SetResourceOwner(context, request, response); }));}
    void SetMessageAllocatorFor_SetResourceOwner(
        ::grpc::experimental::MessageAllocator< ::resource::SetResourceOwnerRqst, ::resource::SetResourceOwnerRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(22);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::SetResourceOwnerRqst, ::resource::SetResourceOwnerRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourceOwner(::grpc::ServerContext* /*context*/, const ::resource::SetResourceOwnerRqst* /*request*/, ::resource::SetResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetResourceOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::SetResourceOwnerRqst* /*request*/, ::resource::SetResourceOwnerRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetResourceOwner(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::SetResourceOwnerRqst* /*request*/, ::resource::SetResourceOwnerRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetResourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetResourceOwners() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(23,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::GetResourceOwnersRqst, ::resource::GetResourceOwnersRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::GetResourceOwnersRqst* request, ::resource::GetResourceOwnersRsp* response) { return this->GetResourceOwners(context, request, response); }));}
    void SetMessageAllocatorFor_GetResourceOwners(
        ::grpc::experimental::MessageAllocator< ::resource::GetResourceOwnersRqst, ::resource::GetResourceOwnersRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(23);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::GetResourceOwnersRqst, ::resource::GetResourceOwnersRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetResourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceOwners(::grpc::ServerContext* /*context*/, const ::resource::GetResourceOwnersRqst* /*request*/, ::resource::GetResourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetResourceOwners(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::GetResourceOwnersRqst* /*request*/, ::resource::GetResourceOwnersRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetResourceOwners(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::GetResourceOwnersRqst* /*request*/, ::resource::GetResourceOwnersRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteResourceOwner() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(24,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteResourceOwnerRqst, ::resource::DeleteResourceOwnerRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::DeleteResourceOwnerRqst* request, ::resource::DeleteResourceOwnerRsp* response) { return this->DeleteResourceOwner(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteResourceOwner(
        ::grpc::experimental::MessageAllocator< ::resource::DeleteResourceOwnerRqst, ::resource::DeleteResourceOwnerRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(24);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteResourceOwnerRqst, ::resource::DeleteResourceOwnerRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourceOwner(::grpc::ServerContext* /*context*/, const ::resource::DeleteResourceOwnerRqst* /*request*/, ::resource::DeleteResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteResourceOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::DeleteResourceOwnerRqst* /*request*/, ::resource::DeleteResourceOwnerRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteResourceOwner(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::DeleteResourceOwnerRqst* /*request*/, ::resource::DeleteResourceOwnerRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteResourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteResourceOwners() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(25,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteResourceOwnersRqst, ::resource::DeleteResourceOwnersRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::DeleteResourceOwnersRqst* request, ::resource::DeleteResourceOwnersRsp* response) { return this->DeleteResourceOwners(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteResourceOwners(
        ::grpc::experimental::MessageAllocator< ::resource::DeleteResourceOwnersRqst, ::resource::DeleteResourceOwnersRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(25);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteResourceOwnersRqst, ::resource::DeleteResourceOwnersRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteResourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourceOwners(::grpc::ServerContext* /*context*/, const ::resource::DeleteResourceOwnersRqst* /*request*/, ::resource::DeleteResourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteResourceOwners(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::DeleteResourceOwnersRqst* /*request*/, ::resource::DeleteResourceOwnersRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteResourceOwners(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::DeleteResourceOwnersRqst* /*request*/, ::resource::DeleteResourceOwnersRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllFilesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAllFilesInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(26,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::GetAllFilesInfoRqst, ::resource::GetAllFilesInfoRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::GetAllFilesInfoRqst* request, ::resource::GetAllFilesInfoRsp* response) { return this->GetAllFilesInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllFilesInfo(
        ::grpc::experimental::MessageAllocator< ::resource::GetAllFilesInfoRqst, ::resource::GetAllFilesInfoRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(26);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::GetAllFilesInfoRqst, ::resource::GetAllFilesInfoRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllFilesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* /*context*/, const ::resource::GetAllFilesInfoRqst* /*request*/, ::resource::GetAllFilesInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllFilesInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::GetAllFilesInfoRqst* /*request*/, ::resource::GetAllFilesInfoRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllFilesInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::GetAllFilesInfoRqst* /*request*/, ::resource::GetAllFilesInfoRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(27,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidateTokenRqst, ::resource::ValidateTokenRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::ValidateTokenRqst* request, ::resource::ValidateTokenRsp* response) { return this->ValidateToken(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateToken(
        ::grpc::experimental::MessageAllocator< ::resource::ValidateTokenRqst, ::resource::ValidateTokenRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(27);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidateTokenRqst, ::resource::ValidateTokenRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::resource::ValidateTokenRqst* /*request*/, ::resource::ValidateTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateToken(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::ValidateTokenRqst* /*request*/, ::resource::ValidateTokenRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::ValidateTokenRqst* /*request*/, ::resource::ValidateTokenRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateUserResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateUserResourceAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(28,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidateUserResourceAccessRqst, ::resource::ValidateUserResourceAccessRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::ValidateUserResourceAccessRqst* request, ::resource::ValidateUserResourceAccessRsp* response) { return this->ValidateUserResourceAccess(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateUserResourceAccess(
        ::grpc::experimental::MessageAllocator< ::resource::ValidateUserResourceAccessRqst, ::resource::ValidateUserResourceAccessRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(28);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidateUserResourceAccessRqst, ::resource::ValidateUserResourceAccessRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateUserResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateUserResourceAccessRqst* /*request*/, ::resource::ValidateUserResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateUserResourceAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::ValidateUserResourceAccessRqst* /*request*/, ::resource::ValidateUserResourceAccessRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateUserResourceAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::ValidateUserResourceAccessRqst* /*request*/, ::resource::ValidateUserResourceAccessRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateApplicationResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateApplicationResourceAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(29,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidateApplicationResourceAccessRqst, ::resource::ValidateApplicationResourceAccessRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::ValidateApplicationResourceAccessRqst* request, ::resource::ValidateApplicationResourceAccessRsp* response) { return this->ValidateApplicationResourceAccess(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateApplicationResourceAccess(
        ::grpc::experimental::MessageAllocator< ::resource::ValidateApplicationResourceAccessRqst, ::resource::ValidateApplicationResourceAccessRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(29);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidateApplicationResourceAccessRqst, ::resource::ValidateApplicationResourceAccessRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateApplicationResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateApplicationResourceAccessRqst* /*request*/, ::resource::ValidateApplicationResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateApplicationResourceAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::ValidateApplicationResourceAccessRqst* /*request*/, ::resource::ValidateApplicationResourceAccessRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateApplicationResourceAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::ValidateApplicationResourceAccessRqst* /*request*/, ::resource::ValidateApplicationResourceAccessRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateUserAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(30,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidateUserAccessRqst, ::resource::ValidateUserAccessRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::ValidateUserAccessRqst* request, ::resource::ValidateUserAccessRsp* response) { return this->ValidateUserAccess(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateUserAccess(
        ::grpc::experimental::MessageAllocator< ::resource::ValidateUserAccessRqst, ::resource::ValidateUserAccessRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(30);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidateUserAccessRqst, ::resource::ValidateUserAccessRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateUserAccessRqst* /*request*/, ::resource::ValidateUserAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateUserAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::ValidateUserAccessRqst* /*request*/, ::resource::ValidateUserAccessRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateUserAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::ValidateUserAccessRqst* /*request*/, ::resource::ValidateUserAccessRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateApplicationAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateApplicationAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(31,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidateApplicationAccessRqst, ::resource::ValidateApplicationAccessRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::ValidateApplicationAccessRqst* request, ::resource::ValidateApplicationAccessRsp* response) { return this->ValidateApplicationAccess(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateApplicationAccess(
        ::grpc::experimental::MessageAllocator< ::resource::ValidateApplicationAccessRqst, ::resource::ValidateApplicationAccessRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(31);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidateApplicationAccessRqst, ::resource::ValidateApplicationAccessRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateApplicationAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateApplicationAccessRqst* /*request*/, ::resource::ValidateApplicationAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateApplicationAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::ValidateApplicationAccessRqst* /*request*/, ::resource::ValidateApplicationAccessRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateApplicationAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::ValidateApplicationAccessRqst* /*request*/, ::resource::ValidateApplicationAccessRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidatePeerAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidatePeerAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(32,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidatePeerAccessRqst, ::resource::ValidatePeerAccessRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::ValidatePeerAccessRqst* request, ::resource::ValidatePeerAccessRsp* response) { return this->ValidatePeerAccess(context, request, response); }));}
    void SetMessageAllocatorFor_ValidatePeerAccess(
        ::grpc::experimental::MessageAllocator< ::resource::ValidatePeerAccessRqst, ::resource::ValidatePeerAccessRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(32);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidatePeerAccessRqst, ::resource::ValidatePeerAccessRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidatePeerAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatePeerAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidatePeerAccessRqst* /*request*/, ::resource::ValidatePeerAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidatePeerAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::ValidatePeerAccessRqst* /*request*/, ::resource::ValidatePeerAccessRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidatePeerAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::ValidatePeerAccessRqst* /*request*/, ::resource::ValidatePeerAccessRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidatePeerResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidatePeerResourceAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(33,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidatePeerResourceAccessRqst, ::resource::ValidatePeerResourceAccessRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::ValidatePeerResourceAccessRqst* request, ::resource::ValidatePeerResourceAccessRsp* response) { return this->ValidatePeerResourceAccess(context, request, response); }));}
    void SetMessageAllocatorFor_ValidatePeerResourceAccess(
        ::grpc::experimental::MessageAllocator< ::resource::ValidatePeerResourceAccessRqst, ::resource::ValidatePeerResourceAccessRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(33);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::ValidatePeerResourceAccessRqst, ::resource::ValidatePeerResourceAccessRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidatePeerResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatePeerResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidatePeerResourceAccessRqst* /*request*/, ::resource::ValidatePeerResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidatePeerResourceAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::ValidatePeerResourceAccessRqst* /*request*/, ::resource::ValidatePeerResourceAccessRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidatePeerResourceAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::ValidatePeerResourceAccessRqst* /*request*/, ::resource::ValidatePeerResourceAccessRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteAccountPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteAccountPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(34,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteAccountPermissionsRqst, ::resource::DeleteAccountPermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::DeleteAccountPermissionsRqst* request, ::resource::DeleteAccountPermissionsRsp* response) { return this->DeleteAccountPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAccountPermissions(
        ::grpc::experimental::MessageAllocator< ::resource::DeleteAccountPermissionsRqst, ::resource::DeleteAccountPermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(34);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteAccountPermissionsRqst, ::resource::DeleteAccountPermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteAccountPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteAccountPermissionsRqst* /*request*/, ::resource::DeleteAccountPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteAccountPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::DeleteAccountPermissionsRqst* /*request*/, ::resource::DeleteAccountPermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteAccountPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::DeleteAccountPermissionsRqst* /*request*/, ::resource::DeleteAccountPermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteRolePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteRolePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(35,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteRolePermissionsRqst, ::resource::DeleteRolePermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::DeleteRolePermissionsRqst* request, ::resource::DeleteRolePermissionsRsp* response) { return this->DeleteRolePermissions(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRolePermissions(
        ::grpc::experimental::MessageAllocator< ::resource::DeleteRolePermissionsRqst, ::resource::DeleteRolePermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(35);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteRolePermissionsRqst, ::resource::DeleteRolePermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteRolePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteRolePermissionsRqst* /*request*/, ::resource::DeleteRolePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRolePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::DeleteRolePermissionsRqst* /*request*/, ::resource::DeleteRolePermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRolePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::DeleteRolePermissionsRqst* /*request*/, ::resource::DeleteRolePermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllApplicationsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAllApplicationsInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(36,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::GetAllApplicationsInfoRqst, ::resource::GetAllApplicationsInfoRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::GetAllApplicationsInfoRqst* request, ::resource::GetAllApplicationsInfoRsp* response) { return this->GetAllApplicationsInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllApplicationsInfo(
        ::grpc::experimental::MessageAllocator< ::resource::GetAllApplicationsInfoRqst, ::resource::GetAllApplicationsInfoRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(36);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::GetAllApplicationsInfoRqst, ::resource::GetAllApplicationsInfoRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllApplicationsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* /*context*/, const ::resource::GetAllApplicationsInfoRqst* /*request*/, ::resource::GetAllApplicationsInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllApplicationsInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::GetAllApplicationsInfoRqst* /*request*/, ::resource::GetAllApplicationsInfoRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllApplicationsInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::GetAllApplicationsInfoRqst* /*request*/, ::resource::GetAllApplicationsInfoRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteApplication() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(37,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteApplicationRqst, ::resource::DeleteApplicationRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::DeleteApplicationRqst* request, ::resource::DeleteApplicationRsp* response) { return this->DeleteApplication(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteApplication(
        ::grpc::experimental::MessageAllocator< ::resource::DeleteApplicationRqst, ::resource::DeleteApplicationRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(37);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteApplicationRqst, ::resource::DeleteApplicationRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApplication(::grpc::ServerContext* /*context*/, const ::resource::DeleteApplicationRqst* /*request*/, ::resource::DeleteApplicationRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteApplication(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::DeleteApplicationRqst* /*request*/, ::resource::DeleteApplicationRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteApplication(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::DeleteApplicationRqst* /*request*/, ::resource::DeleteApplicationRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Log() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(38,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::LogRqst, ::resource::LogRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::LogRqst* request, ::resource::LogRsp* response) { return this->Log(context, request, response); }));}
    void SetMessageAllocatorFor_Log(
        ::grpc::experimental::MessageAllocator< ::resource::LogRqst, ::resource::LogRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(38);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(38);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::LogRqst, ::resource::LogRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::resource::LogRqst* /*request*/, ::resource::LogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Log(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::LogRqst* /*request*/, ::resource::LogRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Log(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::LogRqst* /*request*/, ::resource::LogRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(39,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::resource::GetLogRqst, ::resource::GetLogRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::GetLogRqst* request) { return this->GetLog(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::resource::GetLogRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetLogRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::resource::GetLogRsp>* GetLog(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::GetLogRqst* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::resource::GetLogRsp>* GetLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::GetLogRqst* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(40,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteLogRqst, ::resource::DeleteLogRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::DeleteLogRqst* request, ::resource::DeleteLogRsp* response) { return this->DeleteLog(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteLog(
        ::grpc::experimental::MessageAllocator< ::resource::DeleteLogRqst, ::resource::DeleteLogRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(40);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(40);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteLogRqst, ::resource::DeleteLogRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* /*context*/, const ::resource::DeleteLogRqst* /*request*/, ::resource::DeleteLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteLog(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::DeleteLogRqst* /*request*/, ::resource::DeleteLogRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::DeleteLogRqst* /*request*/, ::resource::DeleteLogRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ClearAllLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ClearAllLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(41,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::ClearAllLogRqst, ::resource::ClearAllLogRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::ClearAllLogRqst* request, ::resource::ClearAllLogRsp* response) { return this->ClearAllLog(context, request, response); }));}
    void SetMessageAllocatorFor_ClearAllLog(
        ::grpc::experimental::MessageAllocator< ::resource::ClearAllLogRqst, ::resource::ClearAllLogRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(41);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(41);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::ClearAllLogRqst, ::resource::ClearAllLogRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ClearAllLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearAllLog(::grpc::ServerContext* /*context*/, const ::resource::ClearAllLogRqst* /*request*/, ::resource::ClearAllLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClearAllLog(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::ClearAllLogRqst* /*request*/, ::resource::ClearAllLogRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClearAllLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::ClearAllLogRqst* /*request*/, ::resource::ClearAllLogRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetResources() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(42,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::resource::GetResourcesRqst, ::resource::GetResourcesRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::GetResourcesRqst* request) { return this->GetResources(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResources(::grpc::ServerContext* /*context*/, const ::resource::GetResourcesRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetResourcesRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::resource::GetResourcesRsp>* GetResources(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::GetResourcesRqst* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::resource::GetResourcesRsp>* GetResources(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::GetResourcesRqst* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetResource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(43,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::SetResourceRqst, ::resource::SetResourceRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::SetResourceRqst* request, ::resource::SetResourceRsp* response) { return this->SetResource(context, request, response); }));}
    void SetMessageAllocatorFor_SetResource(
        ::grpc::experimental::MessageAllocator< ::resource::SetResourceRqst, ::resource::SetResourceRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(43);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(43);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::SetResourceRqst, ::resource::SetResourceRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResource(::grpc::ServerContext* /*context*/, const ::resource::SetResourceRqst* /*request*/, ::resource::SetResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetResource(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::SetResourceRqst* /*request*/, ::resource::SetResourceRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetResource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::SetResourceRqst* /*request*/, ::resource::SetResourceRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveResource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(44,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::RemoveResourceRqst, ::resource::RemoveResourceRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::RemoveResourceRqst* request, ::resource::RemoveResourceRsp* response) { return this->RemoveResource(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveResource(
        ::grpc::experimental::MessageAllocator< ::resource::RemoveResourceRqst, ::resource::RemoveResourceRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(44);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(44);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::RemoveResourceRqst, ::resource::RemoveResourceRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResource(::grpc::ServerContext* /*context*/, const ::resource::RemoveResourceRqst* /*request*/, ::resource::RemoveResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveResource(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::RemoveResourceRqst* /*request*/, ::resource::RemoveResourceRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveResource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::RemoveResourceRqst* /*request*/, ::resource::RemoveResourceRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetActionPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(45,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::SetActionPermissionRqst, ::resource::SetActionPermissionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::SetActionPermissionRqst* request, ::resource::SetActionPermissionRsp* response) { return this->SetActionPermission(context, request, response); }));}
    void SetMessageAllocatorFor_SetActionPermission(
        ::grpc::experimental::MessageAllocator< ::resource::SetActionPermissionRqst, ::resource::SetActionPermissionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(45);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(45);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::SetActionPermissionRqst, ::resource::SetActionPermissionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionPermission(::grpc::ServerContext* /*context*/, const ::resource::SetActionPermissionRqst* /*request*/, ::resource::SetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetActionPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::SetActionPermissionRqst* /*request*/, ::resource::SetActionPermissionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetActionPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::SetActionPermissionRqst* /*request*/, ::resource::SetActionPermissionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveActionPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(46,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::RemoveActionPermissionRqst, ::resource::RemoveActionPermissionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::RemoveActionPermissionRqst* request, ::resource::RemoveActionPermissionRsp* response) { return this->RemoveActionPermission(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveActionPermission(
        ::grpc::experimental::MessageAllocator< ::resource::RemoveActionPermissionRqst, ::resource::RemoveActionPermissionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(46);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(46);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::RemoveActionPermissionRqst, ::resource::RemoveActionPermissionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActionPermission(::grpc::ServerContext* /*context*/, const ::resource::RemoveActionPermissionRqst* /*request*/, ::resource::RemoveActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveActionPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::RemoveActionPermissionRqst* /*request*/, ::resource::RemoveActionPermissionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveActionPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::RemoveActionPermissionRqst* /*request*/, ::resource::RemoveActionPermissionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetActionPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(47,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::GetActionPermissionRqst, ::resource::GetActionPermissionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::GetActionPermissionRqst* request, ::resource::GetActionPermissionRsp* response) { return this->GetActionPermission(context, request, response); }));}
    void SetMessageAllocatorFor_GetActionPermission(
        ::grpc::experimental::MessageAllocator< ::resource::GetActionPermissionRqst, ::resource::GetActionPermissionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(47);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(47);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::GetActionPermissionRqst, ::resource::GetActionPermissionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionPermission(::grpc::ServerContext* /*context*/, const ::resource::GetActionPermissionRqst* /*request*/, ::resource::GetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetActionPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::GetActionPermissionRqst* /*request*/, ::resource::GetActionPermissionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetActionPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::GetActionPermissionRqst* /*request*/, ::resource::GetActionPermissionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateDirPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(48,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::CreateDirPermissionsRqst, ::resource::CreateDirPermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::CreateDirPermissionsRqst* request, ::resource::CreateDirPermissionsRsp* response) { return this->CreateDirPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDirPermissions(
        ::grpc::experimental::MessageAllocator< ::resource::CreateDirPermissionsRqst, ::resource::CreateDirPermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(48);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(48);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::CreateDirPermissionsRqst, ::resource::CreateDirPermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirPermissions(::grpc::ServerContext* /*context*/, const ::resource::CreateDirPermissionsRqst* /*request*/, ::resource::CreateDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateDirPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::CreateDirPermissionsRqst* /*request*/, ::resource::CreateDirPermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateDirPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::CreateDirPermissionsRqst* /*request*/, ::resource::CreateDirPermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RenameFilePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RenameFilePermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(49,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::RenameFilePermissionRqst, ::resource::RenameFilePermissionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::RenameFilePermissionRqst* request, ::resource::RenameFilePermissionRsp* response) { return this->RenameFilePermission(context, request, response); }));}
    void SetMessageAllocatorFor_RenameFilePermission(
        ::grpc::experimental::MessageAllocator< ::resource::RenameFilePermissionRqst, ::resource::RenameFilePermissionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(49);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(49);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::RenameFilePermissionRqst, ::resource::RenameFilePermissionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RenameFilePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameFilePermission(::grpc::ServerContext* /*context*/, const ::resource::RenameFilePermissionRqst* /*request*/, ::resource::RenameFilePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RenameFilePermission(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::RenameFilePermissionRqst* /*request*/, ::resource::RenameFilePermissionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RenameFilePermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::RenameFilePermissionRqst* /*request*/, ::resource::RenameFilePermissionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteDirPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(50,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteDirPermissionsRqst, ::resource::DeleteDirPermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::DeleteDirPermissionsRqst* request, ::resource::DeleteDirPermissionsRsp* response) { return this->DeleteDirPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDirPermissions(
        ::grpc::experimental::MessageAllocator< ::resource::DeleteDirPermissionsRqst, ::resource::DeleteDirPermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(50);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(50);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteDirPermissionsRqst, ::resource::DeleteDirPermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteDirPermissionsRqst* /*request*/, ::resource::DeleteDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteDirPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::DeleteDirPermissionsRqst* /*request*/, ::resource::DeleteDirPermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteDirPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::DeleteDirPermissionsRqst* /*request*/, ::resource::DeleteDirPermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteFilePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteFilePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(51,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteFilePermissionsRqst, ::resource::DeleteFilePermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::resource::DeleteFilePermissionsRqst* request, ::resource::DeleteFilePermissionsRsp* response) { return this->DeleteFilePermissions(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteFilePermissions(
        ::grpc::experimental::MessageAllocator< ::resource::DeleteFilePermissionsRqst, ::resource::DeleteFilePermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(51);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(51);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::resource::DeleteFilePermissionsRqst, ::resource::DeleteFilePermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteFilePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteFilePermissionsRqst* /*request*/, ::resource::DeleteFilePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteFilePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::resource::DeleteFilePermissionsRqst* /*request*/, ::resource::DeleteFilePermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteFilePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::resource::DeleteFilePermissionsRqst* /*request*/, ::resource::DeleteFilePermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterPeer<ExperimentalWithCallbackMethod_GetPeers<ExperimentalWithCallbackMethod_DeletePeer<ExperimentalWithCallbackMethod_AddPeerAction<ExperimentalWithCallbackMethod_RemovePeerAction<ExperimentalWithCallbackMethod_RegisterAccount<ExperimentalWithCallbackMethod_DeleteAccount<ExperimentalWithCallbackMethod_Authenticate<ExperimentalWithCallbackMethod_SynchronizeLdap<ExperimentalWithCallbackMethod_RefreshToken<ExperimentalWithCallbackMethod_AddAccountRole<ExperimentalWithCallbackMethod_RemoveAccountRole<ExperimentalWithCallbackMethod_CreateRole<ExperimentalWithCallbackMethod_DeleteRole<ExperimentalWithCallbackMethod_AddRoleAction<ExperimentalWithCallbackMethod_RemoveRoleAction<ExperimentalWithCallbackMethod_AddApplicationAction<ExperimentalWithCallbackMethod_RemoveApplicationAction<ExperimentalWithCallbackMethod_GetAllActions<ExperimentalWithCallbackMethod_GetPermissions<ExperimentalWithCallbackMethod_SetPermission<ExperimentalWithCallbackMethod_DeletePermissions<ExperimentalWithCallbackMethod_SetResourceOwner<ExperimentalWithCallbackMethod_GetResourceOwners<ExperimentalWithCallbackMethod_DeleteResourceOwner<ExperimentalWithCallbackMethod_DeleteResourceOwners<ExperimentalWithCallbackMethod_GetAllFilesInfo<ExperimentalWithCallbackMethod_ValidateToken<ExperimentalWithCallbackMethod_ValidateUserResourceAccess<ExperimentalWithCallbackMethod_ValidateApplicationResourceAccess<ExperimentalWithCallbackMethod_ValidateUserAccess<ExperimentalWithCallbackMethod_ValidateApplicationAccess<ExperimentalWithCallbackMethod_ValidatePeerAccess<ExperimentalWithCallbackMethod_ValidatePeerResourceAccess<ExperimentalWithCallbackMethod_DeleteAccountPermissions<ExperimentalWithCallbackMethod_DeleteRolePermissions<ExperimentalWithCallbackMethod_GetAllApplicationsInfo<ExperimentalWithCallbackMethod_DeleteApplication<ExperimentalWithCallbackMethod_Log<ExperimentalWithCallbackMethod_GetLog<ExperimentalWithCallbackMethod_DeleteLog<ExperimentalWithCallbackMethod_ClearAllLog<ExperimentalWithCallbackMethod_GetResources<ExperimentalWithCallbackMethod_SetResource<ExperimentalWithCallbackMethod_RemoveResource<ExperimentalWithCallbackMethod_SetActionPermission<ExperimentalWithCallbackMethod_RemoveActionPermission<ExperimentalWithCallbackMethod_GetActionPermission<ExperimentalWithCallbackMethod_CreateDirPermissions<ExperimentalWithCallbackMethod_RenameFilePermission<ExperimentalWithCallbackMethod_DeleteDirPermissions<ExperimentalWithCallbackMethod_DeleteFilePermissions<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterPeer<ExperimentalWithCallbackMethod_GetPeers<ExperimentalWithCallbackMethod_DeletePeer<ExperimentalWithCallbackMethod_AddPeerAction<ExperimentalWithCallbackMethod_RemovePeerAction<ExperimentalWithCallbackMethod_RegisterAccount<ExperimentalWithCallbackMethod_DeleteAccount<ExperimentalWithCallbackMethod_Authenticate<ExperimentalWithCallbackMethod_SynchronizeLdap<ExperimentalWithCallbackMethod_RefreshToken<ExperimentalWithCallbackMethod_AddAccountRole<ExperimentalWithCallbackMethod_RemoveAccountRole<ExperimentalWithCallbackMethod_CreateRole<ExperimentalWithCallbackMethod_DeleteRole<ExperimentalWithCallbackMethod_AddRoleAction<ExperimentalWithCallbackMethod_RemoveRoleAction<ExperimentalWithCallbackMethod_AddApplicationAction<ExperimentalWithCallbackMethod_RemoveApplicationAction<ExperimentalWithCallbackMethod_GetAllActions<ExperimentalWithCallbackMethod_GetPermissions<ExperimentalWithCallbackMethod_SetPermission<ExperimentalWithCallbackMethod_DeletePermissions<ExperimentalWithCallbackMethod_SetResourceOwner<ExperimentalWithCallbackMethod_GetResourceOwners<ExperimentalWithCallbackMethod_DeleteResourceOwner<ExperimentalWithCallbackMethod_DeleteResourceOwners<ExperimentalWithCallbackMethod_GetAllFilesInfo<ExperimentalWithCallbackMethod_ValidateToken<ExperimentalWithCallbackMethod_ValidateUserResourceAccess<ExperimentalWithCallbackMethod_ValidateApplicationResourceAccess<ExperimentalWithCallbackMethod_ValidateUserAccess<ExperimentalWithCallbackMethod_ValidateApplicationAccess<ExperimentalWithCallbackMethod_ValidatePeerAccess<ExperimentalWithCallbackMethod_ValidatePeerResourceAccess<ExperimentalWithCallbackMethod_DeleteAccountPermissions<ExperimentalWithCallbackMethod_DeleteRolePermissions<ExperimentalWithCallbackMethod_GetAllApplicationsInfo<ExperimentalWithCallbackMethod_DeleteApplication<ExperimentalWithCallbackMethod_Log<ExperimentalWithCallbackMethod_GetLog<ExperimentalWithCallbackMethod_DeleteLog<ExperimentalWithCallbackMethod_ClearAllLog<ExperimentalWithCallbackMethod_GetResources<ExperimentalWithCallbackMethod_SetResource<ExperimentalWithCallbackMethod_RemoveResource<ExperimentalWithCallbackMethod_SetActionPermission<ExperimentalWithCallbackMethod_RemoveActionPermission<ExperimentalWithCallbackMethod_GetActionPermission<ExperimentalWithCallbackMethod_CreateDirPermissions<ExperimentalWithCallbackMethod_RenameFilePermission<ExperimentalWithCallbackMethod_DeleteDirPermissions<ExperimentalWithCallbackMethod_DeleteFilePermissions<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterPeer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPeer(::grpc::ServerContext* /*context*/, const ::resource::RegisterPeerRqst* /*request*/, ::resource::RegisterPeerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPeers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeers(::grpc::ServerContext* /*context*/, const ::resource::GetPeersRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetPeersRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePeer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeletePeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePeer(::grpc::ServerContext* /*context*/, const ::resource::DeletePeerRqst* /*request*/, ::resource::DeletePeerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPeerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddPeerAction() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AddPeerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeerAction(::grpc::ServerContext* /*context*/, const ::resource::AddPeerActionRqst* /*request*/, ::resource::AddPeerActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemovePeerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemovePeerAction() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RemovePeerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePeerAction(::grpc::ServerContext* /*context*/, const ::resource::RemovePeerActionRqst* /*request*/, ::resource::RemovePeerActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterAccount() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RegisterAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAccount(::grpc::ServerContext* /*context*/, const ::resource::RegisterAccountRqst* /*request*/, ::resource::RegisterAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::resource::DeleteAccountRqst* /*request*/, ::resource::DeleteAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Authenticate() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::resource::AuthenticateRqst* /*request*/, ::resource::AuthenticateRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SynchronizeLdap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SynchronizeLdap() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SynchronizeLdap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchronizeLdap(::grpc::ServerContext* /*context*/, const ::resource::SynchronizeLdapRqst* /*request*/, ::resource::SynchronizeLdapRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RefreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RefreshToken() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_RefreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshToken(::grpc::ServerContext* /*context*/, const ::resource::RefreshTokenRqst* /*request*/, ::resource::RefreshTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddAccountRole() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_AddAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccountRole(::grpc::ServerContext* /*context*/, const ::resource::AddAccountRoleRqst* /*request*/, ::resource::AddAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveAccountRole() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_RemoveAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAccountRole(::grpc::ServerContext* /*context*/, const ::resource::RemoveAccountRoleRqst* /*request*/, ::resource::RemoveAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRole() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::resource::CreateRoleRqst* /*request*/, ::resource::CreateRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRole() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::resource::DeleteRoleRqst* /*request*/, ::resource::DeleteRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddRoleAction() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_AddRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleAction(::grpc::ServerContext* /*context*/, const ::resource::AddRoleActionRqst* /*request*/, ::resource::AddRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveRoleAction() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_RemoveRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRoleAction(::grpc::ServerContext* /*context*/, const ::resource::RemoveRoleActionRqst* /*request*/, ::resource::RemoveRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddApplicationAction() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_AddApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddApplicationAction(::grpc::ServerContext* /*context*/, const ::resource::AddApplicationActionRqst* /*request*/, ::resource::AddApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveApplicationAction() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_RemoveApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* /*context*/, const ::resource::RemoveApplicationActionRqst* /*request*/, ::resource::RemoveApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllActions() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::resource::GetAllActionsRqst* /*request*/, ::resource::GetAllActionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPermissions() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::resource::GetPermissionsRqst* /*request*/, ::resource::GetPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPermission() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::resource::SetPermissionRqst* /*request*/, ::resource::SetPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeletePermissionsRqst* /*request*/, ::resource::DeletePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetResourceOwner() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_SetResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourceOwner(::grpc::ServerContext* /*context*/, const ::resource::SetResourceOwnerRqst* /*request*/, ::resource::SetResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResourceOwners() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_GetResourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceOwners(::grpc::ServerContext* /*context*/, const ::resource::GetResourceOwnersRqst* /*request*/, ::resource::GetResourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteResourceOwner() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_DeleteResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourceOwner(::grpc::ServerContext* /*context*/, const ::resource::DeleteResourceOwnerRqst* /*request*/, ::resource::DeleteResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteResourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteResourceOwners() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_DeleteResourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourceOwners(::grpc::ServerContext* /*context*/, const ::resource::DeleteResourceOwnersRqst* /*request*/, ::resource::DeleteResourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllFilesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllFilesInfo() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_GetAllFilesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* /*context*/, const ::resource::GetAllFilesInfoRqst* /*request*/, ::resource::GetAllFilesInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateToken() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::resource::ValidateTokenRqst* /*request*/, ::resource::ValidateTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateUserResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateUserResourceAccess() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_ValidateUserResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateUserResourceAccessRqst* /*request*/, ::resource::ValidateUserResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateApplicationResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateApplicationResourceAccess() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_ValidateApplicationResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateApplicationResourceAccessRqst* /*request*/, ::resource::ValidateApplicationResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateUserAccess() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_ValidateUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateUserAccessRqst* /*request*/, ::resource::ValidateUserAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateApplicationAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateApplicationAccess() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_ValidateApplicationAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateApplicationAccessRqst* /*request*/, ::resource::ValidateApplicationAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidatePeerAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidatePeerAccess() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_ValidatePeerAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatePeerAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidatePeerAccessRqst* /*request*/, ::resource::ValidatePeerAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidatePeerResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidatePeerResourceAccess() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_ValidatePeerResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatePeerResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidatePeerResourceAccessRqst* /*request*/, ::resource::ValidatePeerResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAccountPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAccountPermissions() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_DeleteAccountPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteAccountPermissionsRqst* /*request*/, ::resource::DeleteAccountPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRolePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRolePermissions() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_DeleteRolePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteRolePermissionsRqst* /*request*/, ::resource::DeleteRolePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllApplicationsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllApplicationsInfo() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_GetAllApplicationsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* /*context*/, const ::resource::GetAllApplicationsInfoRqst* /*request*/, ::resource::GetAllApplicationsInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteApplication() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_DeleteApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApplication(::grpc::ServerContext* /*context*/, const ::resource::DeleteApplicationRqst* /*request*/, ::resource::DeleteApplicationRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Log() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::resource::LogRqst* /*request*/, ::resource::LogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLog() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::resource::GetLogRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetLogRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteLog() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_DeleteLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* /*context*/, const ::resource::DeleteLogRqst* /*request*/, ::resource::DeleteLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearAllLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearAllLog() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_ClearAllLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearAllLog(::grpc::ServerContext* /*context*/, const ::resource::ClearAllLogRqst* /*request*/, ::resource::ClearAllLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResources() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_GetResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResources(::grpc::ServerContext* /*context*/, const ::resource::GetResourcesRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetResourcesRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetResource() {
      ::grpc::Service::MarkMethodGeneric(43);
    }
    ~WithGenericMethod_SetResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResource(::grpc::ServerContext* /*context*/, const ::resource::SetResourceRqst* /*request*/, ::resource::SetResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveResource() {
      ::grpc::Service::MarkMethodGeneric(44);
    }
    ~WithGenericMethod_RemoveResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResource(::grpc::ServerContext* /*context*/, const ::resource::RemoveResourceRqst* /*request*/, ::resource::RemoveResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetActionPermission() {
      ::grpc::Service::MarkMethodGeneric(45);
    }
    ~WithGenericMethod_SetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionPermission(::grpc::ServerContext* /*context*/, const ::resource::SetActionPermissionRqst* /*request*/, ::resource::SetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveActionPermission() {
      ::grpc::Service::MarkMethodGeneric(46);
    }
    ~WithGenericMethod_RemoveActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActionPermission(::grpc::ServerContext* /*context*/, const ::resource::RemoveActionPermissionRqst* /*request*/, ::resource::RemoveActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetActionPermission() {
      ::grpc::Service::MarkMethodGeneric(47);
    }
    ~WithGenericMethod_GetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionPermission(::grpc::ServerContext* /*context*/, const ::resource::GetActionPermissionRqst* /*request*/, ::resource::GetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDirPermissions() {
      ::grpc::Service::MarkMethodGeneric(48);
    }
    ~WithGenericMethod_CreateDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirPermissions(::grpc::ServerContext* /*context*/, const ::resource::CreateDirPermissionsRqst* /*request*/, ::resource::CreateDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RenameFilePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RenameFilePermission() {
      ::grpc::Service::MarkMethodGeneric(49);
    }
    ~WithGenericMethod_RenameFilePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameFilePermission(::grpc::ServerContext* /*context*/, const ::resource::RenameFilePermissionRqst* /*request*/, ::resource::RenameFilePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDirPermissions() {
      ::grpc::Service::MarkMethodGeneric(50);
    }
    ~WithGenericMethod_DeleteDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteDirPermissionsRqst* /*request*/, ::resource::DeleteDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFilePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteFilePermissions() {
      ::grpc::Service::MarkMethodGeneric(51);
    }
    ~WithGenericMethod_DeleteFilePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteFilePermissionsRqst* /*request*/, ::resource::DeleteFilePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterPeer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPeer(::grpc::ServerContext* /*context*/, const ::resource::RegisterPeerRqst* /*request*/, ::resource::RegisterPeerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterPeer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPeers() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeers(::grpc::ServerContext* /*context*/, const ::resource::GetPeersRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetPeersRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePeer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeletePeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePeer(::grpc::ServerContext* /*context*/, const ::resource::DeletePeerRqst* /*request*/, ::resource::DeletePeerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePeer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddPeerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddPeerAction() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AddPeerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeerAction(::grpc::ServerContext* /*context*/, const ::resource::AddPeerActionRqst* /*request*/, ::resource::AddPeerActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPeerAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemovePeerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemovePeerAction() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RemovePeerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePeerAction(::grpc::ServerContext* /*context*/, const ::resource::RemovePeerActionRqst* /*request*/, ::resource::RemovePeerActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePeerAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterAccount() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RegisterAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAccount(::grpc::ServerContext* /*context*/, const ::resource::RegisterAccountRqst* /*request*/, ::resource::RegisterAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::resource::DeleteAccountRqst* /*request*/, ::resource::DeleteAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Authenticate() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::resource::AuthenticateRqst* /*request*/, ::resource::AuthenticateRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SynchronizeLdap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SynchronizeLdap() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SynchronizeLdap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchronizeLdap(::grpc::ServerContext* /*context*/, const ::resource::SynchronizeLdapRqst* /*request*/, ::resource::SynchronizeLdapRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynchronizeLdap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RefreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RefreshToken() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_RefreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshToken(::grpc::ServerContext* /*context*/, const ::resource::RefreshTokenRqst* /*request*/, ::resource::RefreshTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRefreshToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddAccountRole() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_AddAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccountRole(::grpc::ServerContext* /*context*/, const ::resource::AddAccountRoleRqst* /*request*/, ::resource::AddAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddAccountRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveAccountRole() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_RemoveAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAccountRole(::grpc::ServerContext* /*context*/, const ::resource::RemoveAccountRoleRqst* /*request*/, ::resource::RemoveAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveAccountRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRole() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::resource::CreateRoleRqst* /*request*/, ::resource::CreateRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRole() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::resource::DeleteRoleRqst* /*request*/, ::resource::DeleteRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddRoleAction() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_AddRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleAction(::grpc::ServerContext* /*context*/, const ::resource::AddRoleActionRqst* /*request*/, ::resource::AddRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRoleAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveRoleAction() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_RemoveRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRoleAction(::grpc::ServerContext* /*context*/, const ::resource::RemoveRoleActionRqst* /*request*/, ::resource::RemoveRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveRoleAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddApplicationAction() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_AddApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddApplicationAction(::grpc::ServerContext* /*context*/, const ::resource::AddApplicationActionRqst* /*request*/, ::resource::AddApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddApplicationAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveApplicationAction() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_RemoveApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* /*context*/, const ::resource::RemoveApplicationActionRqst* /*request*/, ::resource::RemoveApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveApplicationAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllActions() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::resource::GetAllActionsRqst* /*request*/, ::resource::GetAllActionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllActions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPermissions() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::resource::GetPermissionsRqst* /*request*/, ::resource::GetPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPermission() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::resource::SetPermissionRqst* /*request*/, ::resource::SetPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeletePermissionsRqst* /*request*/, ::resource::DeletePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetResourceOwner() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_SetResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourceOwner(::grpc::ServerContext* /*context*/, const ::resource::SetResourceOwnerRqst* /*request*/, ::resource::SetResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetResourceOwner(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResourceOwners() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_GetResourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceOwners(::grpc::ServerContext* /*context*/, const ::resource::GetResourceOwnersRqst* /*request*/, ::resource::GetResourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourceOwners(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteResourceOwner() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_DeleteResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourceOwner(::grpc::ServerContext* /*context*/, const ::resource::DeleteResourceOwnerRqst* /*request*/, ::resource::DeleteResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteResourceOwner(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteResourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteResourceOwners() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_DeleteResourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourceOwners(::grpc::ServerContext* /*context*/, const ::resource::DeleteResourceOwnersRqst* /*request*/, ::resource::DeleteResourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteResourceOwners(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllFilesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllFilesInfo() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_GetAllFilesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* /*context*/, const ::resource::GetAllFilesInfoRqst* /*request*/, ::resource::GetAllFilesInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllFilesInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateToken() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::resource::ValidateTokenRqst* /*request*/, ::resource::ValidateTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateUserResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateUserResourceAccess() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_ValidateUserResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateUserResourceAccessRqst* /*request*/, ::resource::ValidateUserResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateUserResourceAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateApplicationResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateApplicationResourceAccess() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_ValidateApplicationResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateApplicationResourceAccessRqst* /*request*/, ::resource::ValidateApplicationResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateApplicationResourceAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateUserAccess() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_ValidateUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateUserAccessRqst* /*request*/, ::resource::ValidateUserAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateUserAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateApplicationAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateApplicationAccess() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_ValidateApplicationAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateApplicationAccessRqst* /*request*/, ::resource::ValidateApplicationAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateApplicationAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidatePeerAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidatePeerAccess() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_ValidatePeerAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatePeerAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidatePeerAccessRqst* /*request*/, ::resource::ValidatePeerAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatePeerAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidatePeerResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidatePeerResourceAccess() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_ValidatePeerResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatePeerResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidatePeerResourceAccessRqst* /*request*/, ::resource::ValidatePeerResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatePeerResourceAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAccountPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAccountPermissions() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_DeleteAccountPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteAccountPermissionsRqst* /*request*/, ::resource::DeleteAccountPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccountPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRolePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRolePermissions() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_DeleteRolePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteRolePermissionsRqst* /*request*/, ::resource::DeleteRolePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRolePermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllApplicationsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllApplicationsInfo() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_GetAllApplicationsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* /*context*/, const ::resource::GetAllApplicationsInfoRqst* /*request*/, ::resource::GetAllApplicationsInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllApplicationsInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteApplication() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_DeleteApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApplication(::grpc::ServerContext* /*context*/, const ::resource::DeleteApplicationRqst* /*request*/, ::resource::DeleteApplicationRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteApplication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Log() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::resource::LogRqst* /*request*/, ::resource::LogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLog() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::resource::GetLogRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetLogRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(39, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteLog() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_DeleteLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* /*context*/, const ::resource::DeleteLogRqst* /*request*/, ::resource::DeleteLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearAllLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearAllLog() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_ClearAllLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearAllLog(::grpc::ServerContext* /*context*/, const ::resource::ClearAllLogRqst* /*request*/, ::resource::ClearAllLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearAllLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResources() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_GetResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResources(::grpc::ServerContext* /*context*/, const ::resource::GetResourcesRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetResourcesRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResources(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(42, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetResource() {
      ::grpc::Service::MarkMethodRaw(43);
    }
    ~WithRawMethod_SetResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResource(::grpc::ServerContext* /*context*/, const ::resource::SetResourceRqst* /*request*/, ::resource::SetResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveResource() {
      ::grpc::Service::MarkMethodRaw(44);
    }
    ~WithRawMethod_RemoveResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResource(::grpc::ServerContext* /*context*/, const ::resource::RemoveResourceRqst* /*request*/, ::resource::RemoveResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetActionPermission() {
      ::grpc::Service::MarkMethodRaw(45);
    }
    ~WithRawMethod_SetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionPermission(::grpc::ServerContext* /*context*/, const ::resource::SetActionPermissionRqst* /*request*/, ::resource::SetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetActionPermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveActionPermission() {
      ::grpc::Service::MarkMethodRaw(46);
    }
    ~WithRawMethod_RemoveActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActionPermission(::grpc::ServerContext* /*context*/, const ::resource::RemoveActionPermissionRqst* /*request*/, ::resource::RemoveActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveActionPermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetActionPermission() {
      ::grpc::Service::MarkMethodRaw(47);
    }
    ~WithRawMethod_GetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionPermission(::grpc::ServerContext* /*context*/, const ::resource::GetActionPermissionRqst* /*request*/, ::resource::GetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetActionPermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDirPermissions() {
      ::grpc::Service::MarkMethodRaw(48);
    }
    ~WithRawMethod_CreateDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirPermissions(::grpc::ServerContext* /*context*/, const ::resource::CreateDirPermissionsRqst* /*request*/, ::resource::CreateDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDirPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RenameFilePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RenameFilePermission() {
      ::grpc::Service::MarkMethodRaw(49);
    }
    ~WithRawMethod_RenameFilePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameFilePermission(::grpc::ServerContext* /*context*/, const ::resource::RenameFilePermissionRqst* /*request*/, ::resource::RenameFilePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenameFilePermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDirPermissions() {
      ::grpc::Service::MarkMethodRaw(50);
    }
    ~WithRawMethod_DeleteDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteDirPermissionsRqst* /*request*/, ::resource::DeleteDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDirPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteFilePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteFilePermissions() {
      ::grpc::Service::MarkMethodRaw(51);
    }
    ~WithRawMethod_DeleteFilePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteFilePermissionsRqst* /*request*/, ::resource::DeleteFilePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFilePermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterPeer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterPeer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPeer(::grpc::ServerContext* /*context*/, const ::resource::RegisterPeerRqst* /*request*/, ::resource::RegisterPeerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterPeer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterPeer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPeers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetPeers(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeers(::grpc::ServerContext* /*context*/, const ::resource::GetPeersRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetPeersRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetPeers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetPeers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeletePeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeletePeer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePeer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeletePeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePeer(::grpc::ServerContext* /*context*/, const ::resource::DeletePeerRqst* /*request*/, ::resource::DeletePeerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeletePeer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeletePeer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddPeerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddPeerAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddPeerAction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddPeerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeerAction(::grpc::ServerContext* /*context*/, const ::resource::AddPeerActionRqst* /*request*/, ::resource::AddPeerActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddPeerAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddPeerAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemovePeerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemovePeerAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemovePeerAction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemovePeerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePeerAction(::grpc::ServerContext* /*context*/, const ::resource::RemovePeerActionRqst* /*request*/, ::resource::RemovePeerActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemovePeerAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemovePeerAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterAccount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAccount(::grpc::ServerContext* /*context*/, const ::resource::RegisterAccountRqst* /*request*/, ::resource::RegisterAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAccount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::resource::DeleteAccountRqst* /*request*/, ::resource::DeleteAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Authenticate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Authenticate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::resource::AuthenticateRqst* /*request*/, ::resource::AuthenticateRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Authenticate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Authenticate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SynchronizeLdap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SynchronizeLdap() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SynchronizeLdap(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SynchronizeLdap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchronizeLdap(::grpc::ServerContext* /*context*/, const ::resource::SynchronizeLdapRqst* /*request*/, ::resource::SynchronizeLdapRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SynchronizeLdap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SynchronizeLdap(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RefreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RefreshToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RefreshToken(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RefreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshToken(::grpc::ServerContext* /*context*/, const ::resource::RefreshTokenRqst* /*request*/, ::resource::RefreshTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RefreshToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RefreshToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddAccountRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddAccountRole(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccountRole(::grpc::ServerContext* /*context*/, const ::resource::AddAccountRoleRqst* /*request*/, ::resource::AddAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddAccountRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddAccountRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveAccountRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveAccountRole(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAccountRole(::grpc::ServerContext* /*context*/, const ::resource::RemoveAccountRoleRqst* /*request*/, ::resource::RemoveAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveAccountRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveAccountRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRole(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::resource::CreateRoleRqst* /*request*/, ::resource::CreateRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRole(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::resource::DeleteRoleRqst* /*request*/, ::resource::DeleteRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddRoleAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddRoleAction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleAction(::grpc::ServerContext* /*context*/, const ::resource::AddRoleActionRqst* /*request*/, ::resource::AddRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddRoleAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddRoleAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveRoleAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveRoleAction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRoleAction(::grpc::ServerContext* /*context*/, const ::resource::RemoveRoleActionRqst* /*request*/, ::resource::RemoveRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveRoleAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveRoleAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddApplicationAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(16,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddApplicationAction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddApplicationAction(::grpc::ServerContext* /*context*/, const ::resource::AddApplicationActionRqst* /*request*/, ::resource::AddApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddApplicationAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddApplicationAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveApplicationAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(17,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveApplicationAction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* /*context*/, const ::resource::RemoveApplicationActionRqst* /*request*/, ::resource::RemoveApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveApplicationAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveApplicationAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllActions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(18,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllActions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::resource::GetAllActionsRqst* /*request*/, ::resource::GetAllActionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllActions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllActions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(19,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::resource::GetPermissionsRqst* /*request*/, ::resource::GetPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(20,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::resource::SetPermissionRqst* /*request*/, ::resource::SetPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeletePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(21,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeletePermissionsRqst* /*request*/, ::resource::DeletePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeletePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeletePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetResourceOwner() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(22,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetResourceOwner(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourceOwner(::grpc::ServerContext* /*context*/, const ::resource::SetResourceOwnerRqst* /*request*/, ::resource::SetResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetResourceOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetResourceOwner(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetResourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetResourceOwners() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(23,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetResourceOwners(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetResourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourceOwners(::grpc::ServerContext* /*context*/, const ::resource::GetResourceOwnersRqst* /*request*/, ::resource::GetResourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetResourceOwners(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetResourceOwners(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteResourceOwner() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(24,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteResourceOwner(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourceOwner(::grpc::ServerContext* /*context*/, const ::resource::DeleteResourceOwnerRqst* /*request*/, ::resource::DeleteResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteResourceOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteResourceOwner(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteResourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteResourceOwners() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(25,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteResourceOwners(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteResourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourceOwners(::grpc::ServerContext* /*context*/, const ::resource::DeleteResourceOwnersRqst* /*request*/, ::resource::DeleteResourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteResourceOwners(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteResourceOwners(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllFilesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllFilesInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(26,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllFilesInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllFilesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* /*context*/, const ::resource::GetAllFilesInfoRqst* /*request*/, ::resource::GetAllFilesInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllFilesInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllFilesInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(27,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateToken(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::resource::ValidateTokenRqst* /*request*/, ::resource::ValidateTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateUserResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateUserResourceAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(28,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateUserResourceAccess(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateUserResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateUserResourceAccessRqst* /*request*/, ::resource::ValidateUserResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateUserResourceAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateUserResourceAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateApplicationResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateApplicationResourceAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(29,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateApplicationResourceAccess(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateApplicationResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateApplicationResourceAccessRqst* /*request*/, ::resource::ValidateApplicationResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateApplicationResourceAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateApplicationResourceAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateUserAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(30,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateUserAccess(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateUserAccessRqst* /*request*/, ::resource::ValidateUserAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateUserAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateUserAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateApplicationAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateApplicationAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(31,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateApplicationAccess(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateApplicationAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateApplicationAccessRqst* /*request*/, ::resource::ValidateApplicationAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateApplicationAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateApplicationAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidatePeerAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidatePeerAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(32,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidatePeerAccess(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidatePeerAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatePeerAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidatePeerAccessRqst* /*request*/, ::resource::ValidatePeerAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidatePeerAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidatePeerAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidatePeerResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidatePeerResourceAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(33,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidatePeerResourceAccess(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidatePeerResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatePeerResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidatePeerResourceAccessRqst* /*request*/, ::resource::ValidatePeerResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidatePeerResourceAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidatePeerResourceAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteAccountPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteAccountPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(34,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAccountPermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteAccountPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteAccountPermissionsRqst* /*request*/, ::resource::DeleteAccountPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteAccountPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteAccountPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteRolePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteRolePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(35,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRolePermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteRolePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteRolePermissionsRqst* /*request*/, ::resource::DeleteRolePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRolePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRolePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllApplicationsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllApplicationsInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(36,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllApplicationsInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllApplicationsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* /*context*/, const ::resource::GetAllApplicationsInfoRqst* /*request*/, ::resource::GetAllApplicationsInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllApplicationsInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllApplicationsInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteApplication() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(37,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteApplication(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApplication(::grpc::ServerContext* /*context*/, const ::resource::DeleteApplicationRqst* /*request*/, ::resource::DeleteApplicationRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteApplication(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteApplication(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Log() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(38,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Log(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::resource::LogRqst* /*request*/, ::resource::LogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Log(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Log(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(39,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetLog(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::resource::GetLogRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetLogRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(40,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteLog(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* /*context*/, const ::resource::DeleteLogRqst* /*request*/, ::resource::DeleteLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ClearAllLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ClearAllLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(41,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearAllLog(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ClearAllLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearAllLog(::grpc::ServerContext* /*context*/, const ::resource::ClearAllLogRqst* /*request*/, ::resource::ClearAllLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClearAllLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClearAllLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetResources() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(42,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetResources(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResources(::grpc::ServerContext* /*context*/, const ::resource::GetResourcesRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetResourcesRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetResources(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetResources(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetResource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(43,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetResource(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResource(::grpc::ServerContext* /*context*/, const ::resource::SetResourceRqst* /*request*/, ::resource::SetResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetResource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveResource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(44,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveResource(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResource(::grpc::ServerContext* /*context*/, const ::resource::RemoveResourceRqst* /*request*/, ::resource::RemoveResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveResource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetActionPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(45,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetActionPermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionPermission(::grpc::ServerContext* /*context*/, const ::resource::SetActionPermissionRqst* /*request*/, ::resource::SetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetActionPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetActionPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveActionPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(46,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveActionPermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActionPermission(::grpc::ServerContext* /*context*/, const ::resource::RemoveActionPermissionRqst* /*request*/, ::resource::RemoveActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveActionPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveActionPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetActionPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(47,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetActionPermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionPermission(::grpc::ServerContext* /*context*/, const ::resource::GetActionPermissionRqst* /*request*/, ::resource::GetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetActionPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetActionPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateDirPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(48,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDirPermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirPermissions(::grpc::ServerContext* /*context*/, const ::resource::CreateDirPermissionsRqst* /*request*/, ::resource::CreateDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateDirPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateDirPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RenameFilePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RenameFilePermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(49,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RenameFilePermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RenameFilePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameFilePermission(::grpc::ServerContext* /*context*/, const ::resource::RenameFilePermissionRqst* /*request*/, ::resource::RenameFilePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RenameFilePermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RenameFilePermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteDirPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(50,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDirPermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteDirPermissionsRqst* /*request*/, ::resource::DeleteDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteDirPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteDirPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteFilePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteFilePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(51,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteFilePermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteFilePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteFilePermissionsRqst* /*request*/, ::resource::DeleteFilePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteFilePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteFilePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterPeer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::RegisterPeerRqst, ::resource::RegisterPeerRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::RegisterPeerRqst, ::resource::RegisterPeerRsp>* streamer) {
                       return this->StreamedRegisterPeer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterPeer(::grpc::ServerContext* /*context*/, const ::resource::RegisterPeerRqst* /*request*/, ::resource::RegisterPeerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterPeer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::RegisterPeerRqst,::resource::RegisterPeerRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePeer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::DeletePeerRqst, ::resource::DeletePeerRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::DeletePeerRqst, ::resource::DeletePeerRsp>* streamer) {
                       return this->StreamedDeletePeer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePeer(::grpc::ServerContext* /*context*/, const ::resource::DeletePeerRqst* /*request*/, ::resource::DeletePeerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePeer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::DeletePeerRqst,::resource::DeletePeerRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddPeerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddPeerAction() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::AddPeerActionRqst, ::resource::AddPeerActionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::AddPeerActionRqst, ::resource::AddPeerActionRsp>* streamer) {
                       return this->StreamedAddPeerAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddPeerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddPeerAction(::grpc::ServerContext* /*context*/, const ::resource::AddPeerActionRqst* /*request*/, ::resource::AddPeerActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddPeerAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::AddPeerActionRqst,::resource::AddPeerActionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemovePeerAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemovePeerAction() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::RemovePeerActionRqst, ::resource::RemovePeerActionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::RemovePeerActionRqst, ::resource::RemovePeerActionRsp>* streamer) {
                       return this->StreamedRemovePeerAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemovePeerAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemovePeerAction(::grpc::ServerContext* /*context*/, const ::resource::RemovePeerActionRqst* /*request*/, ::resource::RemovePeerActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemovePeerAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::RemovePeerActionRqst,::resource::RemovePeerActionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterAccount() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::RegisterAccountRqst, ::resource::RegisterAccountRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::RegisterAccountRqst, ::resource::RegisterAccountRsp>* streamer) {
                       return this->StreamedRegisterAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterAccount(::grpc::ServerContext* /*context*/, const ::resource::RegisterAccountRqst* /*request*/, ::resource::RegisterAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::RegisterAccountRqst,::resource::RegisterAccountRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::DeleteAccountRqst, ::resource::DeleteAccountRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::DeleteAccountRqst, ::resource::DeleteAccountRsp>* streamer) {
                       return this->StreamedDeleteAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::resource::DeleteAccountRqst* /*request*/, ::resource::DeleteAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::DeleteAccountRqst,::resource::DeleteAccountRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Authenticate() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::AuthenticateRqst, ::resource::AuthenticateRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::AuthenticateRqst, ::resource::AuthenticateRsp>* streamer) {
                       return this->StreamedAuthenticate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::resource::AuthenticateRqst* /*request*/, ::resource::AuthenticateRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthenticate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::AuthenticateRqst,::resource::AuthenticateRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SynchronizeLdap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SynchronizeLdap() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::SynchronizeLdapRqst, ::resource::SynchronizeLdapRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::SynchronizeLdapRqst, ::resource::SynchronizeLdapRsp>* streamer) {
                       return this->StreamedSynchronizeLdap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SynchronizeLdap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SynchronizeLdap(::grpc::ServerContext* /*context*/, const ::resource::SynchronizeLdapRqst* /*request*/, ::resource::SynchronizeLdapRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSynchronizeLdap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::SynchronizeLdapRqst,::resource::SynchronizeLdapRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RefreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RefreshToken() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::RefreshTokenRqst, ::resource::RefreshTokenRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::RefreshTokenRqst, ::resource::RefreshTokenRsp>* streamer) {
                       return this->StreamedRefreshToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RefreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RefreshToken(::grpc::ServerContext* /*context*/, const ::resource::RefreshTokenRqst* /*request*/, ::resource::RefreshTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRefreshToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::RefreshTokenRqst,::resource::RefreshTokenRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddAccountRole() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::AddAccountRoleRqst, ::resource::AddAccountRoleRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::AddAccountRoleRqst, ::resource::AddAccountRoleRsp>* streamer) {
                       return this->StreamedAddAccountRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddAccountRole(::grpc::ServerContext* /*context*/, const ::resource::AddAccountRoleRqst* /*request*/, ::resource::AddAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddAccountRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::AddAccountRoleRqst,::resource::AddAccountRoleRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveAccountRole() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::RemoveAccountRoleRqst, ::resource::RemoveAccountRoleRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::RemoveAccountRoleRqst, ::resource::RemoveAccountRoleRsp>* streamer) {
                       return this->StreamedRemoveAccountRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveAccountRole(::grpc::ServerContext* /*context*/, const ::resource::RemoveAccountRoleRqst* /*request*/, ::resource::RemoveAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveAccountRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::RemoveAccountRoleRqst,::resource::RemoveAccountRoleRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRole() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::CreateRoleRqst, ::resource::CreateRoleRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::CreateRoleRqst, ::resource::CreateRoleRsp>* streamer) {
                       return this->StreamedCreateRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::resource::CreateRoleRqst* /*request*/, ::resource::CreateRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::CreateRoleRqst,::resource::CreateRoleRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRole() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::DeleteRoleRqst, ::resource::DeleteRoleRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::DeleteRoleRqst, ::resource::DeleteRoleRsp>* streamer) {
                       return this->StreamedDeleteRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::resource::DeleteRoleRqst* /*request*/, ::resource::DeleteRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::DeleteRoleRqst,::resource::DeleteRoleRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddRoleAction() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::AddRoleActionRqst, ::resource::AddRoleActionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::AddRoleActionRqst, ::resource::AddRoleActionRsp>* streamer) {
                       return this->StreamedAddRoleAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddRoleAction(::grpc::ServerContext* /*context*/, const ::resource::AddRoleActionRqst* /*request*/, ::resource::AddRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddRoleAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::AddRoleActionRqst,::resource::AddRoleActionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveRoleAction() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::RemoveRoleActionRqst, ::resource::RemoveRoleActionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::RemoveRoleActionRqst, ::resource::RemoveRoleActionRsp>* streamer) {
                       return this->StreamedRemoveRoleAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveRoleAction(::grpc::ServerContext* /*context*/, const ::resource::RemoveRoleActionRqst* /*request*/, ::resource::RemoveRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveRoleAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::RemoveRoleActionRqst,::resource::RemoveRoleActionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddApplicationAction() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::AddApplicationActionRqst, ::resource::AddApplicationActionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::AddApplicationActionRqst, ::resource::AddApplicationActionRsp>* streamer) {
                       return this->StreamedAddApplicationAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddApplicationAction(::grpc::ServerContext* /*context*/, const ::resource::AddApplicationActionRqst* /*request*/, ::resource::AddApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddApplicationAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::AddApplicationActionRqst,::resource::AddApplicationActionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveApplicationAction() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::RemoveApplicationActionRqst, ::resource::RemoveApplicationActionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::RemoveApplicationActionRqst, ::resource::RemoveApplicationActionRsp>* streamer) {
                       return this->StreamedRemoveApplicationAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* /*context*/, const ::resource::RemoveApplicationActionRqst* /*request*/, ::resource::RemoveApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveApplicationAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::RemoveApplicationActionRqst,::resource::RemoveApplicationActionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllActions() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::GetAllActionsRqst, ::resource::GetAllActionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::GetAllActionsRqst, ::resource::GetAllActionsRsp>* streamer) {
                       return this->StreamedGetAllActions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::resource::GetAllActionsRqst* /*request*/, ::resource::GetAllActionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllActions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::GetAllActionsRqst,::resource::GetAllActionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPermissions() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::GetPermissionsRqst, ::resource::GetPermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::GetPermissionsRqst, ::resource::GetPermissionsRsp>* streamer) {
                       return this->StreamedGetPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::resource::GetPermissionsRqst* /*request*/, ::resource::GetPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::GetPermissionsRqst,::resource::GetPermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPermission() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::SetPermissionRqst, ::resource::SetPermissionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::SetPermissionRqst, ::resource::SetPermissionRsp>* streamer) {
                       return this->StreamedSetPermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::resource::SetPermissionRqst* /*request*/, ::resource::SetPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::SetPermissionRqst,::resource::SetPermissionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::DeletePermissionsRqst, ::resource::DeletePermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::DeletePermissionsRqst, ::resource::DeletePermissionsRsp>* streamer) {
                       return this->StreamedDeletePermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeletePermissionsRqst* /*request*/, ::resource::DeletePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::DeletePermissionsRqst,::resource::DeletePermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetResourceOwner() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::SetResourceOwnerRqst, ::resource::SetResourceOwnerRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::SetResourceOwnerRqst, ::resource::SetResourceOwnerRsp>* streamer) {
                       return this->StreamedSetResourceOwner(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetResourceOwner(::grpc::ServerContext* /*context*/, const ::resource::SetResourceOwnerRqst* /*request*/, ::resource::SetResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetResourceOwner(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::SetResourceOwnerRqst,::resource::SetResourceOwnerRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetResourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetResourceOwners() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::GetResourceOwnersRqst, ::resource::GetResourceOwnersRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::GetResourceOwnersRqst, ::resource::GetResourceOwnersRsp>* streamer) {
                       return this->StreamedGetResourceOwners(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetResourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResourceOwners(::grpc::ServerContext* /*context*/, const ::resource::GetResourceOwnersRqst* /*request*/, ::resource::GetResourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetResourceOwners(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::GetResourceOwnersRqst,::resource::GetResourceOwnersRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteResourceOwner() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::DeleteResourceOwnerRqst, ::resource::DeleteResourceOwnerRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::DeleteResourceOwnerRqst, ::resource::DeleteResourceOwnerRsp>* streamer) {
                       return this->StreamedDeleteResourceOwner(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteResourceOwner(::grpc::ServerContext* /*context*/, const ::resource::DeleteResourceOwnerRqst* /*request*/, ::resource::DeleteResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteResourceOwner(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::DeleteResourceOwnerRqst,::resource::DeleteResourceOwnerRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteResourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteResourceOwners() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::DeleteResourceOwnersRqst, ::resource::DeleteResourceOwnersRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::DeleteResourceOwnersRqst, ::resource::DeleteResourceOwnersRsp>* streamer) {
                       return this->StreamedDeleteResourceOwners(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteResourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteResourceOwners(::grpc::ServerContext* /*context*/, const ::resource::DeleteResourceOwnersRqst* /*request*/, ::resource::DeleteResourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteResourceOwners(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::DeleteResourceOwnersRqst,::resource::DeleteResourceOwnersRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllFilesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllFilesInfo() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::GetAllFilesInfoRqst, ::resource::GetAllFilesInfoRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::GetAllFilesInfoRqst, ::resource::GetAllFilesInfoRsp>* streamer) {
                       return this->StreamedGetAllFilesInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllFilesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* /*context*/, const ::resource::GetAllFilesInfoRqst* /*request*/, ::resource::GetAllFilesInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllFilesInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::GetAllFilesInfoRqst,::resource::GetAllFilesInfoRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateToken() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::ValidateTokenRqst, ::resource::ValidateTokenRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::ValidateTokenRqst, ::resource::ValidateTokenRsp>* streamer) {
                       return this->StreamedValidateToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::resource::ValidateTokenRqst* /*request*/, ::resource::ValidateTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::ValidateTokenRqst,::resource::ValidateTokenRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateUserResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateUserResourceAccess() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::ValidateUserResourceAccessRqst, ::resource::ValidateUserResourceAccessRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::ValidateUserResourceAccessRqst, ::resource::ValidateUserResourceAccessRsp>* streamer) {
                       return this->StreamedValidateUserResourceAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateUserResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateUserResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateUserResourceAccessRqst* /*request*/, ::resource::ValidateUserResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateUserResourceAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::ValidateUserResourceAccessRqst,::resource::ValidateUserResourceAccessRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateApplicationResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateApplicationResourceAccess() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::ValidateApplicationResourceAccessRqst, ::resource::ValidateApplicationResourceAccessRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::ValidateApplicationResourceAccessRqst, ::resource::ValidateApplicationResourceAccessRsp>* streamer) {
                       return this->StreamedValidateApplicationResourceAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateApplicationResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateApplicationResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateApplicationResourceAccessRqst* /*request*/, ::resource::ValidateApplicationResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateApplicationResourceAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::ValidateApplicationResourceAccessRqst,::resource::ValidateApplicationResourceAccessRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateUserAccess() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::ValidateUserAccessRqst, ::resource::ValidateUserAccessRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::ValidateUserAccessRqst, ::resource::ValidateUserAccessRsp>* streamer) {
                       return this->StreamedValidateUserAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateUserAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateUserAccessRqst* /*request*/, ::resource::ValidateUserAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateUserAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::ValidateUserAccessRqst,::resource::ValidateUserAccessRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateApplicationAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateApplicationAccess() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::ValidateApplicationAccessRqst, ::resource::ValidateApplicationAccessRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::ValidateApplicationAccessRqst, ::resource::ValidateApplicationAccessRsp>* streamer) {
                       return this->StreamedValidateApplicationAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateApplicationAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidateApplicationAccessRqst* /*request*/, ::resource::ValidateApplicationAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateApplicationAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::ValidateApplicationAccessRqst,::resource::ValidateApplicationAccessRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidatePeerAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidatePeerAccess() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::ValidatePeerAccessRqst, ::resource::ValidatePeerAccessRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::ValidatePeerAccessRqst, ::resource::ValidatePeerAccessRsp>* streamer) {
                       return this->StreamedValidatePeerAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidatePeerAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidatePeerAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidatePeerAccessRqst* /*request*/, ::resource::ValidatePeerAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidatePeerAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::ValidatePeerAccessRqst,::resource::ValidatePeerAccessRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidatePeerResourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidatePeerResourceAccess() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::ValidatePeerResourceAccessRqst, ::resource::ValidatePeerResourceAccessRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::ValidatePeerResourceAccessRqst, ::resource::ValidatePeerResourceAccessRsp>* streamer) {
                       return this->StreamedValidatePeerResourceAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidatePeerResourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidatePeerResourceAccess(::grpc::ServerContext* /*context*/, const ::resource::ValidatePeerResourceAccessRqst* /*request*/, ::resource::ValidatePeerResourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidatePeerResourceAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::ValidatePeerResourceAccessRqst,::resource::ValidatePeerResourceAccessRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAccountPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAccountPermissions() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::DeleteAccountPermissionsRqst, ::resource::DeleteAccountPermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::DeleteAccountPermissionsRqst, ::resource::DeleteAccountPermissionsRsp>* streamer) {
                       return this->StreamedDeleteAccountPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAccountPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteAccountPermissionsRqst* /*request*/, ::resource::DeleteAccountPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAccountPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::DeleteAccountPermissionsRqst,::resource::DeleteAccountPermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRolePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRolePermissions() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::DeleteRolePermissionsRqst, ::resource::DeleteRolePermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::DeleteRolePermissionsRqst, ::resource::DeleteRolePermissionsRsp>* streamer) {
                       return this->StreamedDeleteRolePermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRolePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteRolePermissionsRqst* /*request*/, ::resource::DeleteRolePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRolePermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::DeleteRolePermissionsRqst,::resource::DeleteRolePermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllApplicationsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllApplicationsInfo() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::GetAllApplicationsInfoRqst, ::resource::GetAllApplicationsInfoRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::GetAllApplicationsInfoRqst, ::resource::GetAllApplicationsInfoRsp>* streamer) {
                       return this->StreamedGetAllApplicationsInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllApplicationsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* /*context*/, const ::resource::GetAllApplicationsInfoRqst* /*request*/, ::resource::GetAllApplicationsInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllApplicationsInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::GetAllApplicationsInfoRqst,::resource::GetAllApplicationsInfoRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteApplication() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::DeleteApplicationRqst, ::resource::DeleteApplicationRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::DeleteApplicationRqst, ::resource::DeleteApplicationRsp>* streamer) {
                       return this->StreamedDeleteApplication(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteApplication(::grpc::ServerContext* /*context*/, const ::resource::DeleteApplicationRqst* /*request*/, ::resource::DeleteApplicationRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteApplication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::DeleteApplicationRqst,::resource::DeleteApplicationRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Log() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::LogRqst, ::resource::LogRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::LogRqst, ::resource::LogRsp>* streamer) {
                       return this->StreamedLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::resource::LogRqst* /*request*/, ::resource::LogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::LogRqst,::resource::LogRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteLog() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::DeleteLogRqst, ::resource::DeleteLogRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::DeleteLogRqst, ::resource::DeleteLogRsp>* streamer) {
                       return this->StreamedDeleteLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* /*context*/, const ::resource::DeleteLogRqst* /*request*/, ::resource::DeleteLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::DeleteLogRqst,::resource::DeleteLogRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearAllLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearAllLog() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::ClearAllLogRqst, ::resource::ClearAllLogRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::ClearAllLogRqst, ::resource::ClearAllLogRsp>* streamer) {
                       return this->StreamedClearAllLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearAllLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearAllLog(::grpc::ServerContext* /*context*/, const ::resource::ClearAllLogRqst* /*request*/, ::resource::ClearAllLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearAllLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::ClearAllLogRqst,::resource::ClearAllLogRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetResource() {
      ::grpc::Service::MarkMethodStreamed(43,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::SetResourceRqst, ::resource::SetResourceRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::SetResourceRqst, ::resource::SetResourceRsp>* streamer) {
                       return this->StreamedSetResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetResource(::grpc::ServerContext* /*context*/, const ::resource::SetResourceRqst* /*request*/, ::resource::SetResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::SetResourceRqst,::resource::SetResourceRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveResource() {
      ::grpc::Service::MarkMethodStreamed(44,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::RemoveResourceRqst, ::resource::RemoveResourceRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::RemoveResourceRqst, ::resource::RemoveResourceRsp>* streamer) {
                       return this->StreamedRemoveResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveResource(::grpc::ServerContext* /*context*/, const ::resource::RemoveResourceRqst* /*request*/, ::resource::RemoveResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::RemoveResourceRqst,::resource::RemoveResourceRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetActionPermission() {
      ::grpc::Service::MarkMethodStreamed(45,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::SetActionPermissionRqst, ::resource::SetActionPermissionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::SetActionPermissionRqst, ::resource::SetActionPermissionRsp>* streamer) {
                       return this->StreamedSetActionPermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetActionPermission(::grpc::ServerContext* /*context*/, const ::resource::SetActionPermissionRqst* /*request*/, ::resource::SetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetActionPermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::SetActionPermissionRqst,::resource::SetActionPermissionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveActionPermission() {
      ::grpc::Service::MarkMethodStreamed(46,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::RemoveActionPermissionRqst, ::resource::RemoveActionPermissionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::RemoveActionPermissionRqst, ::resource::RemoveActionPermissionRsp>* streamer) {
                       return this->StreamedRemoveActionPermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveActionPermission(::grpc::ServerContext* /*context*/, const ::resource::RemoveActionPermissionRqst* /*request*/, ::resource::RemoveActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveActionPermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::RemoveActionPermissionRqst,::resource::RemoveActionPermissionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetActionPermission() {
      ::grpc::Service::MarkMethodStreamed(47,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::GetActionPermissionRqst, ::resource::GetActionPermissionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::GetActionPermissionRqst, ::resource::GetActionPermissionRsp>* streamer) {
                       return this->StreamedGetActionPermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetActionPermission(::grpc::ServerContext* /*context*/, const ::resource::GetActionPermissionRqst* /*request*/, ::resource::GetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetActionPermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::GetActionPermissionRqst,::resource::GetActionPermissionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDirPermissions() {
      ::grpc::Service::MarkMethodStreamed(48,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::CreateDirPermissionsRqst, ::resource::CreateDirPermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::CreateDirPermissionsRqst, ::resource::CreateDirPermissionsRsp>* streamer) {
                       return this->StreamedCreateDirPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDirPermissions(::grpc::ServerContext* /*context*/, const ::resource::CreateDirPermissionsRqst* /*request*/, ::resource::CreateDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDirPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::CreateDirPermissionsRqst,::resource::CreateDirPermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RenameFilePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RenameFilePermission() {
      ::grpc::Service::MarkMethodStreamed(49,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::RenameFilePermissionRqst, ::resource::RenameFilePermissionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::RenameFilePermissionRqst, ::resource::RenameFilePermissionRsp>* streamer) {
                       return this->StreamedRenameFilePermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RenameFilePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RenameFilePermission(::grpc::ServerContext* /*context*/, const ::resource::RenameFilePermissionRqst* /*request*/, ::resource::RenameFilePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRenameFilePermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::RenameFilePermissionRqst,::resource::RenameFilePermissionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDirPermissions() {
      ::grpc::Service::MarkMethodStreamed(50,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::DeleteDirPermissionsRqst, ::resource::DeleteDirPermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::DeleteDirPermissionsRqst, ::resource::DeleteDirPermissionsRsp>* streamer) {
                       return this->StreamedDeleteDirPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteDirPermissionsRqst* /*request*/, ::resource::DeleteDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDirPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::DeleteDirPermissionsRqst,::resource::DeleteDirPermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFilePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteFilePermissions() {
      ::grpc::Service::MarkMethodStreamed(51,
        new ::grpc::internal::StreamedUnaryHandler<
          ::resource::DeleteFilePermissionsRqst, ::resource::DeleteFilePermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::resource::DeleteFilePermissionsRqst, ::resource::DeleteFilePermissionsRsp>* streamer) {
                       return this->StreamedDeleteFilePermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteFilePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* /*context*/, const ::resource::DeleteFilePermissionsRqst* /*request*/, ::resource::DeleteFilePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFilePermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::resource::DeleteFilePermissionsRqst,::resource::DeleteFilePermissionsRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterPeer<WithStreamedUnaryMethod_DeletePeer<WithStreamedUnaryMethod_AddPeerAction<WithStreamedUnaryMethod_RemovePeerAction<WithStreamedUnaryMethod_RegisterAccount<WithStreamedUnaryMethod_DeleteAccount<WithStreamedUnaryMethod_Authenticate<WithStreamedUnaryMethod_SynchronizeLdap<WithStreamedUnaryMethod_RefreshToken<WithStreamedUnaryMethod_AddAccountRole<WithStreamedUnaryMethod_RemoveAccountRole<WithStreamedUnaryMethod_CreateRole<WithStreamedUnaryMethod_DeleteRole<WithStreamedUnaryMethod_AddRoleAction<WithStreamedUnaryMethod_RemoveRoleAction<WithStreamedUnaryMethod_AddApplicationAction<WithStreamedUnaryMethod_RemoveApplicationAction<WithStreamedUnaryMethod_GetAllActions<WithStreamedUnaryMethod_GetPermissions<WithStreamedUnaryMethod_SetPermission<WithStreamedUnaryMethod_DeletePermissions<WithStreamedUnaryMethod_SetResourceOwner<WithStreamedUnaryMethod_GetResourceOwners<WithStreamedUnaryMethod_DeleteResourceOwner<WithStreamedUnaryMethod_DeleteResourceOwners<WithStreamedUnaryMethod_GetAllFilesInfo<WithStreamedUnaryMethod_ValidateToken<WithStreamedUnaryMethod_ValidateUserResourceAccess<WithStreamedUnaryMethod_ValidateApplicationResourceAccess<WithStreamedUnaryMethod_ValidateUserAccess<WithStreamedUnaryMethod_ValidateApplicationAccess<WithStreamedUnaryMethod_ValidatePeerAccess<WithStreamedUnaryMethod_ValidatePeerResourceAccess<WithStreamedUnaryMethod_DeleteAccountPermissions<WithStreamedUnaryMethod_DeleteRolePermissions<WithStreamedUnaryMethod_GetAllApplicationsInfo<WithStreamedUnaryMethod_DeleteApplication<WithStreamedUnaryMethod_Log<WithStreamedUnaryMethod_DeleteLog<WithStreamedUnaryMethod_ClearAllLog<WithStreamedUnaryMethod_SetResource<WithStreamedUnaryMethod_RemoveResource<WithStreamedUnaryMethod_SetActionPermission<WithStreamedUnaryMethod_RemoveActionPermission<WithStreamedUnaryMethod_GetActionPermission<WithStreamedUnaryMethod_CreateDirPermissions<WithStreamedUnaryMethod_RenameFilePermission<WithStreamedUnaryMethod_DeleteDirPermissions<WithStreamedUnaryMethod_DeleteFilePermissions<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetPeers() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::resource::GetPeersRqst, ::resource::GetPeersRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::resource::GetPeersRqst, ::resource::GetPeersRsp>* streamer) {
                       return this->StreamedGetPeers(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeers(::grpc::ServerContext* /*context*/, const ::resource::GetPeersRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetPeersRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetPeers(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::resource::GetPeersRqst,::resource::GetPeersRsp>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetLog() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::resource::GetLogRqst, ::resource::GetLogRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::resource::GetLogRqst, ::resource::GetLogRsp>* streamer) {
                       return this->StreamedGetLog(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::resource::GetLogRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetLogRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetLog(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::resource::GetLogRqst,::resource::GetLogRsp>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetResources() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::resource::GetResourcesRqst, ::resource::GetResourcesRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::resource::GetResourcesRqst, ::resource::GetResourcesRsp>* streamer) {
                       return this->StreamedGetResources(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResources(::grpc::ServerContext* /*context*/, const ::resource::GetResourcesRqst* /*request*/, ::grpc::ServerWriter< ::resource::GetResourcesRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetResources(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::resource::GetResourcesRqst,::resource::GetResourcesRsp>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetPeers<WithSplitStreamingMethod_GetLog<WithSplitStreamingMethod_GetResources<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterPeer<WithSplitStreamingMethod_GetPeers<WithStreamedUnaryMethod_DeletePeer<WithStreamedUnaryMethod_AddPeerAction<WithStreamedUnaryMethod_RemovePeerAction<WithStreamedUnaryMethod_RegisterAccount<WithStreamedUnaryMethod_DeleteAccount<WithStreamedUnaryMethod_Authenticate<WithStreamedUnaryMethod_SynchronizeLdap<WithStreamedUnaryMethod_RefreshToken<WithStreamedUnaryMethod_AddAccountRole<WithStreamedUnaryMethod_RemoveAccountRole<WithStreamedUnaryMethod_CreateRole<WithStreamedUnaryMethod_DeleteRole<WithStreamedUnaryMethod_AddRoleAction<WithStreamedUnaryMethod_RemoveRoleAction<WithStreamedUnaryMethod_AddApplicationAction<WithStreamedUnaryMethod_RemoveApplicationAction<WithStreamedUnaryMethod_GetAllActions<WithStreamedUnaryMethod_GetPermissions<WithStreamedUnaryMethod_SetPermission<WithStreamedUnaryMethod_DeletePermissions<WithStreamedUnaryMethod_SetResourceOwner<WithStreamedUnaryMethod_GetResourceOwners<WithStreamedUnaryMethod_DeleteResourceOwner<WithStreamedUnaryMethod_DeleteResourceOwners<WithStreamedUnaryMethod_GetAllFilesInfo<WithStreamedUnaryMethod_ValidateToken<WithStreamedUnaryMethod_ValidateUserResourceAccess<WithStreamedUnaryMethod_ValidateApplicationResourceAccess<WithStreamedUnaryMethod_ValidateUserAccess<WithStreamedUnaryMethod_ValidateApplicationAccess<WithStreamedUnaryMethod_ValidatePeerAccess<WithStreamedUnaryMethod_ValidatePeerResourceAccess<WithStreamedUnaryMethod_DeleteAccountPermissions<WithStreamedUnaryMethod_DeleteRolePermissions<WithStreamedUnaryMethod_GetAllApplicationsInfo<WithStreamedUnaryMethod_DeleteApplication<WithStreamedUnaryMethod_Log<WithSplitStreamingMethod_GetLog<WithStreamedUnaryMethod_DeleteLog<WithStreamedUnaryMethod_ClearAllLog<WithSplitStreamingMethod_GetResources<WithStreamedUnaryMethod_SetResource<WithStreamedUnaryMethod_RemoveResource<WithStreamedUnaryMethod_SetActionPermission<WithStreamedUnaryMethod_RemoveActionPermission<WithStreamedUnaryMethod_GetActionPermission<WithStreamedUnaryMethod_CreateDirPermissions<WithStreamedUnaryMethod_RenameFilePermission<WithStreamedUnaryMethod_DeleteDirPermissions<WithStreamedUnaryMethod_DeleteFilePermissions<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace resource


#endif  // GRPC_resource_2eproto__INCLUDED
