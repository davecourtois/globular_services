// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ressource.proto

#include "ressource.pb.h"
#include "ressource.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ressource {

static const char* RessourceService_method_names[] = {
  "/ressource.RessourceService/RegisterPeer",
  "/ressource.RessourceService/GetPeers",
  "/ressource.RessourceService/DeletePeer",
  "/ressource.RessourceService/AddPeerAction",
  "/ressource.RessourceService/RemovePeerAction",
  "/ressource.RessourceService/RegisterAccount",
  "/ressource.RessourceService/DeleteAccount",
  "/ressource.RessourceService/Authenticate",
  "/ressource.RessourceService/SynchronizeLdap",
  "/ressource.RessourceService/RefreshToken",
  "/ressource.RessourceService/AddAccountRole",
  "/ressource.RessourceService/RemoveAccountRole",
  "/ressource.RessourceService/CreateRole",
  "/ressource.RessourceService/DeleteRole",
  "/ressource.RessourceService/AddRoleAction",
  "/ressource.RessourceService/RemoveRoleAction",
  "/ressource.RessourceService/AddApplicationAction",
  "/ressource.RessourceService/RemoveApplicationAction",
  "/ressource.RessourceService/GetAllActions",
  "/ressource.RessourceService/GetPermissions",
  "/ressource.RessourceService/SetPermission",
  "/ressource.RessourceService/DeletePermissions",
  "/ressource.RessourceService/SetRessourceOwner",
  "/ressource.RessourceService/GetRessourceOwners",
  "/ressource.RessourceService/DeleteRessourceOwner",
  "/ressource.RessourceService/DeleteRessourceOwners",
  "/ressource.RessourceService/GetAllFilesInfo",
  "/ressource.RessourceService/ValidateToken",
  "/ressource.RessourceService/ValidateUserRessourceAccess",
  "/ressource.RessourceService/ValidateApplicationRessourceAccess",
  "/ressource.RessourceService/ValidateUserAccess",
  "/ressource.RessourceService/ValidateApplicationAccess",
  "/ressource.RessourceService/ValidatePeerAccess",
  "/ressource.RessourceService/ValidatePeerRessourceAccess",
  "/ressource.RessourceService/DeleteAccountPermissions",
  "/ressource.RessourceService/DeleteRolePermissions",
  "/ressource.RessourceService/GetAllApplicationsInfo",
  "/ressource.RessourceService/DeleteApplication",
  "/ressource.RessourceService/Log",
  "/ressource.RessourceService/GetLog",
  "/ressource.RessourceService/DeleteLog",
  "/ressource.RessourceService/ClearAllLog",
  "/ressource.RessourceService/GetRessources",
  "/ressource.RessourceService/SetRessource",
  "/ressource.RessourceService/RemoveRessource",
  "/ressource.RessourceService/SetActionPermission",
  "/ressource.RessourceService/RemoveActionPermission",
  "/ressource.RessourceService/GetActionPermission",
  "/ressource.RessourceService/CreateDirPermissions",
  "/ressource.RessourceService/RenameFilePermission",
  "/ressource.RessourceService/DeleteDirPermissions",
  "/ressource.RessourceService/DeleteFilePermissions",
};

std::unique_ptr< RessourceService::Stub> RessourceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RessourceService::Stub> stub(new RessourceService::Stub(channel));
  return stub;
}

RessourceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterPeer_(RessourceService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPeers_(RessourceService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeletePeer_(RessourceService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPeerAction_(RessourceService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePeerAction_(RessourceService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterAccount_(RessourceService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAccount_(RessourceService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Authenticate_(RessourceService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SynchronizeLdap_(RessourceService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RefreshToken_(RessourceService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddAccountRole_(RessourceService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveAccountRole_(RessourceService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRole_(RessourceService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRole_(RessourceService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddRoleAction_(RessourceService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveRoleAction_(RessourceService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddApplicationAction_(RessourceService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveApplicationAction_(RessourceService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllActions_(RessourceService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPermissions_(RessourceService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPermission_(RessourceService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePermissions_(RessourceService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRessourceOwner_(RessourceService_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRessourceOwners_(RessourceService_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRessourceOwner_(RessourceService_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRessourceOwners_(RessourceService_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllFilesInfo_(RessourceService_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateToken_(RessourceService_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateUserRessourceAccess_(RessourceService_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateApplicationRessourceAccess_(RessourceService_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateUserAccess_(RessourceService_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateApplicationAccess_(RessourceService_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidatePeerAccess_(RessourceService_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidatePeerRessourceAccess_(RessourceService_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAccountPermissions_(RessourceService_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRolePermissions_(RessourceService_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllApplicationsInfo_(RessourceService_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteApplication_(RessourceService_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Log_(RessourceService_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLog_(RessourceService_method_names[39], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteLog_(RessourceService_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearAllLog_(RessourceService_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRessources_(RessourceService_method_names[42], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetRessource_(RessourceService_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveRessource_(RessourceService_method_names[44], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetActionPermission_(RessourceService_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveActionPermission_(RessourceService_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActionPermission_(RessourceService_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDirPermissions_(RessourceService_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenameFilePermission_(RessourceService_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDirPermissions_(RessourceService_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteFilePermissions_(RessourceService_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RessourceService::Stub::RegisterPeer(::grpc::ClientContext* context, const ::ressource::RegisterPeerRqst& request, ::ressource::RegisterPeerRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterPeer_, context, request, response);
}

void RessourceService::Stub::experimental_async::RegisterPeer(::grpc::ClientContext* context, const ::ressource::RegisterPeerRqst* request, ::ressource::RegisterPeerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterPeer_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RegisterPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RegisterPeerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterPeer_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RegisterPeer(::grpc::ClientContext* context, const ::ressource::RegisterPeerRqst* request, ::ressource::RegisterPeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterPeer_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::RegisterPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RegisterPeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterPeer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::RegisterPeerRsp>* RessourceService::Stub::AsyncRegisterPeerRaw(::grpc::ClientContext* context, const ::ressource::RegisterPeerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RegisterPeerRsp>::Create(channel_.get(), cq, rpcmethod_RegisterPeer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::RegisterPeerRsp>* RessourceService::Stub::PrepareAsyncRegisterPeerRaw(::grpc::ClientContext* context, const ::ressource::RegisterPeerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RegisterPeerRsp>::Create(channel_.get(), cq, rpcmethod_RegisterPeer_, context, request, false);
}

::grpc::ClientReader< ::ressource::GetPeersRsp>* RessourceService::Stub::GetPeersRaw(::grpc::ClientContext* context, const ::ressource::GetPeersRqst& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::ressource::GetPeersRsp>::Create(channel_.get(), rpcmethod_GetPeers_, context, request);
}

void RessourceService::Stub::experimental_async::GetPeers(::grpc::ClientContext* context, ::ressource::GetPeersRqst* request, ::grpc::experimental::ClientReadReactor< ::ressource::GetPeersRsp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::ressource::GetPeersRsp>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPeers_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ressource::GetPeersRsp>* RessourceService::Stub::AsyncGetPeersRaw(::grpc::ClientContext* context, const ::ressource::GetPeersRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ressource::GetPeersRsp>::Create(channel_.get(), cq, rpcmethod_GetPeers_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ressource::GetPeersRsp>* RessourceService::Stub::PrepareAsyncGetPeersRaw(::grpc::ClientContext* context, const ::ressource::GetPeersRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ressource::GetPeersRsp>::Create(channel_.get(), cq, rpcmethod_GetPeers_, context, request, false, nullptr);
}

::grpc::Status RessourceService::Stub::DeletePeer(::grpc::ClientContext* context, const ::ressource::DeletePeerRqst& request, ::ressource::DeletePeerRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeletePeer_, context, request, response);
}

void RessourceService::Stub::experimental_async::DeletePeer(::grpc::ClientContext* context, const ::ressource::DeletePeerRqst* request, ::ressource::DeletePeerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeletePeer_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeletePeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeletePeerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeletePeer_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeletePeer(::grpc::ClientContext* context, const ::ressource::DeletePeerRqst* request, ::ressource::DeletePeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeletePeer_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::DeletePeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeletePeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeletePeer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeletePeerRsp>* RessourceService::Stub::AsyncDeletePeerRaw(::grpc::ClientContext* context, const ::ressource::DeletePeerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeletePeerRsp>::Create(channel_.get(), cq, rpcmethod_DeletePeer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeletePeerRsp>* RessourceService::Stub::PrepareAsyncDeletePeerRaw(::grpc::ClientContext* context, const ::ressource::DeletePeerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeletePeerRsp>::Create(channel_.get(), cq, rpcmethod_DeletePeer_, context, request, false);
}

::grpc::Status RessourceService::Stub::AddPeerAction(::grpc::ClientContext* context, const ::ressource::AddPeerActionRqst& request, ::ressource::AddPeerActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddPeerAction_, context, request, response);
}

void RessourceService::Stub::experimental_async::AddPeerAction(::grpc::ClientContext* context, const ::ressource::AddPeerActionRqst* request, ::ressource::AddPeerActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddPeerAction_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::AddPeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddPeerActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddPeerAction_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::AddPeerAction(::grpc::ClientContext* context, const ::ressource::AddPeerActionRqst* request, ::ressource::AddPeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddPeerAction_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::AddPeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddPeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddPeerAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::AddPeerActionRsp>* RessourceService::Stub::AsyncAddPeerActionRaw(::grpc::ClientContext* context, const ::ressource::AddPeerActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::AddPeerActionRsp>::Create(channel_.get(), cq, rpcmethod_AddPeerAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::AddPeerActionRsp>* RessourceService::Stub::PrepareAsyncAddPeerActionRaw(::grpc::ClientContext* context, const ::ressource::AddPeerActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::AddPeerActionRsp>::Create(channel_.get(), cq, rpcmethod_AddPeerAction_, context, request, false);
}

::grpc::Status RessourceService::Stub::RemovePeerAction(::grpc::ClientContext* context, const ::ressource::RemovePeerActionRqst& request, ::ressource::RemovePeerActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemovePeerAction_, context, request, response);
}

void RessourceService::Stub::experimental_async::RemovePeerAction(::grpc::ClientContext* context, const ::ressource::RemovePeerActionRqst* request, ::ressource::RemovePeerActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemovePeerAction_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RemovePeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemovePeerActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemovePeerAction_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RemovePeerAction(::grpc::ClientContext* context, const ::ressource::RemovePeerActionRqst* request, ::ressource::RemovePeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemovePeerAction_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::RemovePeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemovePeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemovePeerAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::RemovePeerActionRsp>* RessourceService::Stub::AsyncRemovePeerActionRaw(::grpc::ClientContext* context, const ::ressource::RemovePeerActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RemovePeerActionRsp>::Create(channel_.get(), cq, rpcmethod_RemovePeerAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::RemovePeerActionRsp>* RessourceService::Stub::PrepareAsyncRemovePeerActionRaw(::grpc::ClientContext* context, const ::ressource::RemovePeerActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RemovePeerActionRsp>::Create(channel_.get(), cq, rpcmethod_RemovePeerAction_, context, request, false);
}

::grpc::Status RessourceService::Stub::RegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::ressource::RegisterAccountRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterAccount_, context, request, response);
}

void RessourceService::Stub::experimental_async::RegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst* request, ::ressource::RegisterAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterAccount_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RegisterAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterAccount_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst* request, ::ressource::RegisterAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterAccount_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RegisterAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::RegisterAccountRsp>* RessourceService::Stub::AsyncRegisterAccountRaw(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RegisterAccountRsp>::Create(channel_.get(), cq, rpcmethod_RegisterAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::RegisterAccountRsp>* RessourceService::Stub::PrepareAsyncRegisterAccountRaw(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RegisterAccountRsp>::Create(channel_.get(), cq, rpcmethod_RegisterAccount_, context, request, false);
}

::grpc::Status RessourceService::Stub::DeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::ressource::DeleteAccountRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteAccount_, context, request, response);
}

void RessourceService::Stub::experimental_async::DeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst* request, ::ressource::DeleteAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst* request, ::ressource::DeleteAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountRsp>* RessourceService::Stub::AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteAccountRsp>::Create(channel_.get(), cq, rpcmethod_DeleteAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountRsp>* RessourceService::Stub::PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteAccountRsp>::Create(channel_.get(), cq, rpcmethod_DeleteAccount_, context, request, false);
}

::grpc::Status RessourceService::Stub::Authenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::ressource::AuthenticateRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Authenticate_, context, request, response);
}

void RessourceService::Stub::experimental_async::Authenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst* request, ::ressource::AuthenticateRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AuthenticateRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::Authenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst* request, ::ressource::AuthenticateRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AuthenticateRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::AuthenticateRsp>* RessourceService::Stub::AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::AuthenticateRsp>::Create(channel_.get(), cq, rpcmethod_Authenticate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::AuthenticateRsp>* RessourceService::Stub::PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::AuthenticateRsp>::Create(channel_.get(), cq, rpcmethod_Authenticate_, context, request, false);
}

::grpc::Status RessourceService::Stub::SynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::ressource::SynchronizeLdapRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SynchronizeLdap_, context, request, response);
}

void RessourceService::Stub::experimental_async::SynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst* request, ::ressource::SynchronizeLdapRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SynchronizeLdap_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SynchronizeLdapRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SynchronizeLdap_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::SynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst* request, ::ressource::SynchronizeLdapRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SynchronizeLdap_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SynchronizeLdapRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SynchronizeLdap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::SynchronizeLdapRsp>* RessourceService::Stub::AsyncSynchronizeLdapRaw(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::SynchronizeLdapRsp>::Create(channel_.get(), cq, rpcmethod_SynchronizeLdap_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::SynchronizeLdapRsp>* RessourceService::Stub::PrepareAsyncSynchronizeLdapRaw(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::SynchronizeLdapRsp>::Create(channel_.get(), cq, rpcmethod_SynchronizeLdap_, context, request, false);
}

::grpc::Status RessourceService::Stub::RefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::ressource::RefreshTokenRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RefreshToken_, context, request, response);
}

void RessourceService::Stub::experimental_async::RefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst* request, ::ressource::RefreshTokenRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RefreshToken_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RefreshTokenRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RefreshToken_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst* request, ::ressource::RefreshTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RefreshToken_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RefreshTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RefreshToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::RefreshTokenRsp>* RessourceService::Stub::AsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RefreshTokenRsp>::Create(channel_.get(), cq, rpcmethod_RefreshToken_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::RefreshTokenRsp>* RessourceService::Stub::PrepareAsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RefreshTokenRsp>::Create(channel_.get(), cq, rpcmethod_RefreshToken_, context, request, false);
}

::grpc::Status RessourceService::Stub::AddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::ressource::AddAccountRoleRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddAccountRole_, context, request, response);
}

void RessourceService::Stub::experimental_async::AddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst* request, ::ressource::AddAccountRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddAccountRole_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddAccountRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddAccountRole_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::AddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst* request, ::ressource::AddAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddAccountRole_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddAccountRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::AddAccountRoleRsp>* RessourceService::Stub::AsyncAddAccountRoleRaw(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::AddAccountRoleRsp>::Create(channel_.get(), cq, rpcmethod_AddAccountRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::AddAccountRoleRsp>* RessourceService::Stub::PrepareAsyncAddAccountRoleRaw(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::AddAccountRoleRsp>::Create(channel_.get(), cq, rpcmethod_AddAccountRole_, context, request, false);
}

::grpc::Status RessourceService::Stub::RemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::ressource::RemoveAccountRoleRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveAccountRole_, context, request, response);
}

void RessourceService::Stub::experimental_async::RemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst* request, ::ressource::RemoveAccountRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveAccountRole_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveAccountRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveAccountRole_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst* request, ::ressource::RemoveAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveAccountRole_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveAccountRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::RemoveAccountRoleRsp>* RessourceService::Stub::AsyncRemoveAccountRoleRaw(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RemoveAccountRoleRsp>::Create(channel_.get(), cq, rpcmethod_RemoveAccountRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::RemoveAccountRoleRsp>* RessourceService::Stub::PrepareAsyncRemoveAccountRoleRaw(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RemoveAccountRoleRsp>::Create(channel_.get(), cq, rpcmethod_RemoveAccountRole_, context, request, false);
}

::grpc::Status RessourceService::Stub::CreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::ressource::CreateRoleRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateRole_, context, request, response);
}

void RessourceService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst* request, ::ressource::CreateRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst* request, ::ressource::CreateRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::CreateRoleRsp>* RessourceService::Stub::AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::CreateRoleRsp>::Create(channel_.get(), cq, rpcmethod_CreateRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::CreateRoleRsp>* RessourceService::Stub::PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::CreateRoleRsp>::Create(channel_.get(), cq, rpcmethod_CreateRole_, context, request, false);
}

::grpc::Status RessourceService::Stub::DeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::ressource::DeleteRoleRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRole_, context, request, response);
}

void RessourceService::Stub::experimental_async::DeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst* request, ::ressource::DeleteRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst* request, ::ressource::DeleteRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteRoleRsp>* RessourceService::Stub::AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteRoleRsp>::Create(channel_.get(), cq, rpcmethod_DeleteRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteRoleRsp>* RessourceService::Stub::PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteRoleRsp>::Create(channel_.get(), cq, rpcmethod_DeleteRole_, context, request, false);
}

::grpc::Status RessourceService::Stub::AddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::ressource::AddRoleActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddRoleAction_, context, request, response);
}

void RessourceService::Stub::experimental_async::AddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst* request, ::ressource::AddRoleActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddRoleAction_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddRoleActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddRoleAction_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::AddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst* request, ::ressource::AddRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddRoleAction_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddRoleAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::AddRoleActionRsp>* RessourceService::Stub::AsyncAddRoleActionRaw(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::AddRoleActionRsp>::Create(channel_.get(), cq, rpcmethod_AddRoleAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::AddRoleActionRsp>* RessourceService::Stub::PrepareAsyncAddRoleActionRaw(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::AddRoleActionRsp>::Create(channel_.get(), cq, rpcmethod_AddRoleAction_, context, request, false);
}

::grpc::Status RessourceService::Stub::RemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::ressource::RemoveRoleActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveRoleAction_, context, request, response);
}

void RessourceService::Stub::experimental_async::RemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst* request, ::ressource::RemoveRoleActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveRoleAction_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRoleActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveRoleAction_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst* request, ::ressource::RemoveRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveRoleAction_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveRoleAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::RemoveRoleActionRsp>* RessourceService::Stub::AsyncRemoveRoleActionRaw(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RemoveRoleActionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveRoleAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::RemoveRoleActionRsp>* RessourceService::Stub::PrepareAsyncRemoveRoleActionRaw(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RemoveRoleActionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveRoleAction_, context, request, false);
}

::grpc::Status RessourceService::Stub::AddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::ressource::AddApplicationActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddApplicationAction_, context, request, response);
}

void RessourceService::Stub::experimental_async::AddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst* request, ::ressource::AddApplicationActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddApplicationAction_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddApplicationActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddApplicationAction_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::AddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst* request, ::ressource::AddApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddApplicationAction_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddApplicationAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::AddApplicationActionRsp>* RessourceService::Stub::AsyncAddApplicationActionRaw(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::AddApplicationActionRsp>::Create(channel_.get(), cq, rpcmethod_AddApplicationAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::AddApplicationActionRsp>* RessourceService::Stub::PrepareAsyncAddApplicationActionRaw(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::AddApplicationActionRsp>::Create(channel_.get(), cq, rpcmethod_AddApplicationAction_, context, request, false);
}

::grpc::Status RessourceService::Stub::RemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::ressource::RemoveApplicationActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveApplicationAction_, context, request, response);
}

void RessourceService::Stub::experimental_async::RemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst* request, ::ressource::RemoveApplicationActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveApplicationAction_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveApplicationActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveApplicationAction_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst* request, ::ressource::RemoveApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveApplicationAction_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveApplicationAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::RemoveApplicationActionRsp>* RessourceService::Stub::AsyncRemoveApplicationActionRaw(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RemoveApplicationActionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveApplicationAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::RemoveApplicationActionRsp>* RessourceService::Stub::PrepareAsyncRemoveApplicationActionRaw(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RemoveApplicationActionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveApplicationAction_, context, request, false);
}

::grpc::Status RessourceService::Stub::GetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::ressource::GetAllActionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllActions_, context, request, response);
}

void RessourceService::Stub::experimental_async::GetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst* request, ::ressource::GetAllActionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllActions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllActionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllActions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::GetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst* request, ::ressource::GetAllActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllActions_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllActions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::GetAllActionsRsp>* RessourceService::Stub::AsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::GetAllActionsRsp>::Create(channel_.get(), cq, rpcmethod_GetAllActions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::GetAllActionsRsp>* RessourceService::Stub::PrepareAsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::GetAllActionsRsp>::Create(channel_.get(), cq, rpcmethod_GetAllActions_, context, request, false);
}

::grpc::Status RessourceService::Stub::GetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::ressource::GetPermissionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPermissions_, context, request, response);
}

void RessourceService::Stub::experimental_async::GetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst* request, ::ressource::GetPermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetPermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::GetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst* request, ::ressource::GetPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPermissions_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::GetPermissionsRsp>* RessourceService::Stub::AsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::GetPermissionsRsp>::Create(channel_.get(), cq, rpcmethod_GetPermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::GetPermissionsRsp>* RessourceService::Stub::PrepareAsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::GetPermissionsRsp>::Create(channel_.get(), cq, rpcmethod_GetPermissions_, context, request, false);
}

::grpc::Status RessourceService::Stub::SetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::ressource::SetPermissionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPermission_, context, request, response);
}

void RessourceService::Stub::experimental_async::SetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst* request, ::ressource::SetPermissionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPermission_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetPermissionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPermission_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::SetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst* request, ::ressource::SetPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPermission_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::SetPermissionRsp>* RessourceService::Stub::AsyncSetPermissionRaw(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::SetPermissionRsp>::Create(channel_.get(), cq, rpcmethod_SetPermission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::SetPermissionRsp>* RessourceService::Stub::PrepareAsyncSetPermissionRaw(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::SetPermissionRsp>::Create(channel_.get(), cq, rpcmethod_SetPermission_, context, request, false);
}

::grpc::Status RessourceService::Stub::DeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::ressource::DeletePermissionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeletePermissions_, context, request, response);
}

void RessourceService::Stub::experimental_async::DeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst* request, ::ressource::DeletePermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeletePermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeletePermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeletePermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst* request, ::ressource::DeletePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeletePermissions_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeletePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeletePermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeletePermissionsRsp>* RessourceService::Stub::AsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeletePermissionsRsp>::Create(channel_.get(), cq, rpcmethod_DeletePermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeletePermissionsRsp>* RessourceService::Stub::PrepareAsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeletePermissionsRsp>::Create(channel_.get(), cq, rpcmethod_DeletePermissions_, context, request, false);
}

::grpc::Status RessourceService::Stub::SetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::ressource::SetRessourceOwnerRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRessourceOwner_, context, request, response);
}

void RessourceService::Stub::experimental_async::SetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst* request, ::ressource::SetRessourceOwnerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRessourceOwner_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::SetRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceOwnerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRessourceOwner_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::SetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst* request, ::ressource::SetRessourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRessourceOwner_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::SetRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRessourceOwner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceOwnerRsp>* RessourceService::Stub::AsyncSetRessourceOwnerRaw(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::SetRessourceOwnerRsp>::Create(channel_.get(), cq, rpcmethod_SetRessourceOwner_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceOwnerRsp>* RessourceService::Stub::PrepareAsyncSetRessourceOwnerRaw(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::SetRessourceOwnerRsp>::Create(channel_.get(), cq, rpcmethod_SetRessourceOwner_, context, request, false);
}

::grpc::Status RessourceService::Stub::GetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::ressource::GetRessourceOwnersRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRessourceOwners_, context, request, response);
}

void RessourceService::Stub::experimental_async::GetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst* request, ::ressource::GetRessourceOwnersRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRessourceOwners_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::GetRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetRessourceOwnersRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRessourceOwners_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::GetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst* request, ::ressource::GetRessourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRessourceOwners_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::GetRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetRessourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRessourceOwners_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::GetRessourceOwnersRsp>* RessourceService::Stub::AsyncGetRessourceOwnersRaw(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::GetRessourceOwnersRsp>::Create(channel_.get(), cq, rpcmethod_GetRessourceOwners_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::GetRessourceOwnersRsp>* RessourceService::Stub::PrepareAsyncGetRessourceOwnersRaw(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::GetRessourceOwnersRsp>::Create(channel_.get(), cq, rpcmethod_GetRessourceOwners_, context, request, false);
}

::grpc::Status RessourceService::Stub::DeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::ressource::DeleteRessourceOwnerRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRessourceOwner_, context, request, response);
}

void RessourceService::Stub::experimental_async::DeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst* request, ::ressource::DeleteRessourceOwnerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRessourceOwner_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRessourceOwner_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst* request, ::ressource::DeleteRessourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRessourceOwner_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::DeleteRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRessourceOwner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnerRsp>* RessourceService::Stub::AsyncDeleteRessourceOwnerRaw(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteRessourceOwnerRsp>::Create(channel_.get(), cq, rpcmethod_DeleteRessourceOwner_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnerRsp>* RessourceService::Stub::PrepareAsyncDeleteRessourceOwnerRaw(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteRessourceOwnerRsp>::Create(channel_.get(), cq, rpcmethod_DeleteRessourceOwner_, context, request, false);
}

::grpc::Status RessourceService::Stub::DeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::ressource::DeleteRessourceOwnersRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRessourceOwners_, context, request, response);
}

void RessourceService::Stub::experimental_async::DeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst* request, ::ressource::DeleteRessourceOwnersRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRessourceOwners_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnersRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRessourceOwners_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst* request, ::ressource::DeleteRessourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRessourceOwners_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::DeleteRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRessourceOwners_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnersRsp>* RessourceService::Stub::AsyncDeleteRessourceOwnersRaw(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteRessourceOwnersRsp>::Create(channel_.get(), cq, rpcmethod_DeleteRessourceOwners_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnersRsp>* RessourceService::Stub::PrepareAsyncDeleteRessourceOwnersRaw(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteRessourceOwnersRsp>::Create(channel_.get(), cq, rpcmethod_DeleteRessourceOwners_, context, request, false);
}

::grpc::Status RessourceService::Stub::GetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::ressource::GetAllFilesInfoRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllFilesInfo_, context, request, response);
}

void RessourceService::Stub::experimental_async::GetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst* request, ::ressource::GetAllFilesInfoRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllFilesInfo_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllFilesInfoRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllFilesInfo_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::GetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst* request, ::ressource::GetAllFilesInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllFilesInfo_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllFilesInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllFilesInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::GetAllFilesInfoRsp>* RessourceService::Stub::AsyncGetAllFilesInfoRaw(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::GetAllFilesInfoRsp>::Create(channel_.get(), cq, rpcmethod_GetAllFilesInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::GetAllFilesInfoRsp>* RessourceService::Stub::PrepareAsyncGetAllFilesInfoRaw(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::GetAllFilesInfoRsp>::Create(channel_.get(), cq, rpcmethod_GetAllFilesInfo_, context, request, false);
}

::grpc::Status RessourceService::Stub::ValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::ressource::ValidateTokenRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ValidateToken_, context, request, response);
}

void RessourceService::Stub::experimental_async::ValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst* request, ::ressource::ValidateTokenRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateToken_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateTokenRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateToken_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst* request, ::ressource::ValidateTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateToken_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidateTokenRsp>* RessourceService::Stub::AsyncValidateTokenRaw(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidateTokenRsp>::Create(channel_.get(), cq, rpcmethod_ValidateToken_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidateTokenRsp>* RessourceService::Stub::PrepareAsyncValidateTokenRaw(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidateTokenRsp>::Create(channel_.get(), cq, rpcmethod_ValidateToken_, context, request, false);
}

::grpc::Status RessourceService::Stub::ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::ressource::ValidateUserRessourceAccessRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ValidateUserRessourceAccess_, context, request, response);
}

void RessourceService::Stub::experimental_async::ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst* request, ::ressource::ValidateUserRessourceAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateUserRessourceAccess_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserRessourceAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateUserRessourceAccess_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst* request, ::ressource::ValidateUserRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateUserRessourceAccess_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateUserRessourceAccess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserRessourceAccessRsp>* RessourceService::Stub::AsyncValidateUserRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidateUserRessourceAccessRsp>::Create(channel_.get(), cq, rpcmethod_ValidateUserRessourceAccess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserRessourceAccessRsp>* RessourceService::Stub::PrepareAsyncValidateUserRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidateUserRessourceAccessRsp>::Create(channel_.get(), cq, rpcmethod_ValidateUserRessourceAccess_, context, request, false);
}

::grpc::Status RessourceService::Stub::ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::ressource::ValidateApplicationRessourceAccessRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ValidateApplicationRessourceAccess_, context, request, response);
}

void RessourceService::Stub::experimental_async::ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateApplicationRessourceAccess_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateApplicationRessourceAccess_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateApplicationRessourceAccess_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateApplicationRessourceAccess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationRessourceAccessRsp>* RessourceService::Stub::AsyncValidateApplicationRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidateApplicationRessourceAccessRsp>::Create(channel_.get(), cq, rpcmethod_ValidateApplicationRessourceAccess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationRessourceAccessRsp>* RessourceService::Stub::PrepareAsyncValidateApplicationRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidateApplicationRessourceAccessRsp>::Create(channel_.get(), cq, rpcmethod_ValidateApplicationRessourceAccess_, context, request, false);
}

::grpc::Status RessourceService::Stub::ValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::ressource::ValidateUserAccessRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ValidateUserAccess_, context, request, response);
}

void RessourceService::Stub::experimental_async::ValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst* request, ::ressource::ValidateUserAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateUserAccess_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateUserAccess_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst* request, ::ressource::ValidateUserAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateUserAccess_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateUserAccess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserAccessRsp>* RessourceService::Stub::AsyncValidateUserAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidateUserAccessRsp>::Create(channel_.get(), cq, rpcmethod_ValidateUserAccess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserAccessRsp>* RessourceService::Stub::PrepareAsyncValidateUserAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidateUserAccessRsp>::Create(channel_.get(), cq, rpcmethod_ValidateUserAccess_, context, request, false);
}

::grpc::Status RessourceService::Stub::ValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::ressource::ValidateApplicationAccessRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ValidateApplicationAccess_, context, request, response);
}

void RessourceService::Stub::experimental_async::ValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst* request, ::ressource::ValidateApplicationAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateApplicationAccess_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidateApplicationAccess_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst* request, ::ressource::ValidateApplicationAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateApplicationAccess_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidateApplicationAccess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationAccessRsp>* RessourceService::Stub::AsyncValidateApplicationAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidateApplicationAccessRsp>::Create(channel_.get(), cq, rpcmethod_ValidateApplicationAccess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationAccessRsp>* RessourceService::Stub::PrepareAsyncValidateApplicationAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidateApplicationAccessRsp>::Create(channel_.get(), cq, rpcmethod_ValidateApplicationAccess_, context, request, false);
}

::grpc::Status RessourceService::Stub::ValidatePeerAccess(::grpc::ClientContext* context, const ::ressource::ValidatePeerAccessRqst& request, ::ressource::ValidatePeerAccessRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ValidatePeerAccess_, context, request, response);
}

void RessourceService::Stub::experimental_async::ValidatePeerAccess(::grpc::ClientContext* context, const ::ressource::ValidatePeerAccessRqst* request, ::ressource::ValidatePeerAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidatePeerAccess_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidatePeerAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidatePeerAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidatePeerAccess_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidatePeerAccess(::grpc::ClientContext* context, const ::ressource::ValidatePeerAccessRqst* request, ::ressource::ValidatePeerAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidatePeerAccess_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::ValidatePeerAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidatePeerAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidatePeerAccess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidatePeerAccessRsp>* RessourceService::Stub::AsyncValidatePeerAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidatePeerAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidatePeerAccessRsp>::Create(channel_.get(), cq, rpcmethod_ValidatePeerAccess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidatePeerAccessRsp>* RessourceService::Stub::PrepareAsyncValidatePeerAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidatePeerAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidatePeerAccessRsp>::Create(channel_.get(), cq, rpcmethod_ValidatePeerAccess_, context, request, false);
}

::grpc::Status RessourceService::Stub::ValidatePeerRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidatePeerRessourceAccessRqst& request, ::ressource::ValidatePeerRessourceAccessRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ValidatePeerRessourceAccess_, context, request, response);
}

void RessourceService::Stub::experimental_async::ValidatePeerRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidatePeerRessourceAccessRqst* request, ::ressource::ValidatePeerRessourceAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidatePeerRessourceAccess_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidatePeerRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidatePeerRessourceAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ValidatePeerRessourceAccess_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ValidatePeerRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidatePeerRessourceAccessRqst* request, ::ressource::ValidatePeerRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidatePeerRessourceAccess_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::ValidatePeerRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidatePeerRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ValidatePeerRessourceAccess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidatePeerRessourceAccessRsp>* RessourceService::Stub::AsyncValidatePeerRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidatePeerRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidatePeerRessourceAccessRsp>::Create(channel_.get(), cq, rpcmethod_ValidatePeerRessourceAccess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::ValidatePeerRessourceAccessRsp>* RessourceService::Stub::PrepareAsyncValidatePeerRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidatePeerRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ValidatePeerRessourceAccessRsp>::Create(channel_.get(), cq, rpcmethod_ValidatePeerRessourceAccess_, context, request, false);
}

::grpc::Status RessourceService::Stub::DeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::ressource::DeleteAccountPermissionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteAccountPermissions_, context, request, response);
}

void RessourceService::Stub::experimental_async::DeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst* request, ::ressource::DeleteAccountPermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAccountPermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountPermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAccountPermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst* request, ::ressource::DeleteAccountPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAccountPermissions_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAccountPermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountPermissionsRsp>* RessourceService::Stub::AsyncDeleteAccountPermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteAccountPermissionsRsp>::Create(channel_.get(), cq, rpcmethod_DeleteAccountPermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountPermissionsRsp>* RessourceService::Stub::PrepareAsyncDeleteAccountPermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteAccountPermissionsRsp>::Create(channel_.get(), cq, rpcmethod_DeleteAccountPermissions_, context, request, false);
}

::grpc::Status RessourceService::Stub::DeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::ressource::DeleteRolePermissionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRolePermissions_, context, request, response);
}

void RessourceService::Stub::experimental_async::DeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst* request, ::ressource::DeleteRolePermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRolePermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRolePermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRolePermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst* request, ::ressource::DeleteRolePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRolePermissions_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRolePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRolePermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteRolePermissionsRsp>* RessourceService::Stub::AsyncDeleteRolePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteRolePermissionsRsp>::Create(channel_.get(), cq, rpcmethod_DeleteRolePermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteRolePermissionsRsp>* RessourceService::Stub::PrepareAsyncDeleteRolePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteRolePermissionsRsp>::Create(channel_.get(), cq, rpcmethod_DeleteRolePermissions_, context, request, false);
}

::grpc::Status RessourceService::Stub::GetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::ressource::GetAllApplicationsInfoRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllApplicationsInfo_, context, request, response);
}

void RessourceService::Stub::experimental_async::GetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst* request, ::ressource::GetAllApplicationsInfoRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllApplicationsInfo_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllApplicationsInfoRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllApplicationsInfo_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::GetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst* request, ::ressource::GetAllApplicationsInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllApplicationsInfo_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllApplicationsInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllApplicationsInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::GetAllApplicationsInfoRsp>* RessourceService::Stub::AsyncGetAllApplicationsInfoRaw(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::GetAllApplicationsInfoRsp>::Create(channel_.get(), cq, rpcmethod_GetAllApplicationsInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::GetAllApplicationsInfoRsp>* RessourceService::Stub::PrepareAsyncGetAllApplicationsInfoRaw(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::GetAllApplicationsInfoRsp>::Create(channel_.get(), cq, rpcmethod_GetAllApplicationsInfo_, context, request, false);
}

::grpc::Status RessourceService::Stub::DeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::ressource::DeleteApplicationRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteApplication_, context, request, response);
}

void RessourceService::Stub::experimental_async::DeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst* request, ::ressource::DeleteApplicationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteApplication_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteApplicationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteApplication_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst* request, ::ressource::DeleteApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteApplication_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteApplication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteApplicationRsp>* RessourceService::Stub::AsyncDeleteApplicationRaw(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteApplicationRsp>::Create(channel_.get(), cq, rpcmethod_DeleteApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteApplicationRsp>* RessourceService::Stub::PrepareAsyncDeleteApplicationRaw(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteApplicationRsp>::Create(channel_.get(), cq, rpcmethod_DeleteApplication_, context, request, false);
}

::grpc::Status RessourceService::Stub::Log(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::ressource::LogRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Log_, context, request, response);
}

void RessourceService::Stub::experimental_async::Log(::grpc::ClientContext* context, const ::ressource::LogRqst* request, ::ressource::LogRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Log_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::LogRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Log_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::Log(::grpc::ClientContext* context, const ::ressource::LogRqst* request, ::ressource::LogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Log_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::LogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Log_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::LogRsp>* RessourceService::Stub::AsyncLogRaw(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::LogRsp>::Create(channel_.get(), cq, rpcmethod_Log_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::LogRsp>* RessourceService::Stub::PrepareAsyncLogRaw(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::LogRsp>::Create(channel_.get(), cq, rpcmethod_Log_, context, request, false);
}

::grpc::ClientReader< ::ressource::GetLogRsp>* RessourceService::Stub::GetLogRaw(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::ressource::GetLogRsp>::Create(channel_.get(), rpcmethod_GetLog_, context, request);
}

void RessourceService::Stub::experimental_async::GetLog(::grpc::ClientContext* context, ::ressource::GetLogRqst* request, ::grpc::experimental::ClientReadReactor< ::ressource::GetLogRsp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::ressource::GetLogRsp>::Create(stub_->channel_.get(), stub_->rpcmethod_GetLog_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ressource::GetLogRsp>* RessourceService::Stub::AsyncGetLogRaw(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ressource::GetLogRsp>::Create(channel_.get(), cq, rpcmethod_GetLog_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ressource::GetLogRsp>* RessourceService::Stub::PrepareAsyncGetLogRaw(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ressource::GetLogRsp>::Create(channel_.get(), cq, rpcmethod_GetLog_, context, request, false, nullptr);
}

::grpc::Status RessourceService::Stub::DeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::ressource::DeleteLogRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteLog_, context, request, response);
}

void RessourceService::Stub::experimental_async::DeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst* request, ::ressource::DeleteLogRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteLog_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteLogRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteLog_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst* request, ::ressource::DeleteLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteLog_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteLogRsp>* RessourceService::Stub::AsyncDeleteLogRaw(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteLogRsp>::Create(channel_.get(), cq, rpcmethod_DeleteLog_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteLogRsp>* RessourceService::Stub::PrepareAsyncDeleteLogRaw(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteLogRsp>::Create(channel_.get(), cq, rpcmethod_DeleteLog_, context, request, false);
}

::grpc::Status RessourceService::Stub::ClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::ressource::ClearAllLogRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClearAllLog_, context, request, response);
}

void RessourceService::Stub::experimental_async::ClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst* request, ::ressource::ClearAllLogRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearAllLog_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ClearAllLogRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearAllLog_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::ClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst* request, ::ressource::ClearAllLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearAllLog_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ClearAllLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearAllLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::ClearAllLogRsp>* RessourceService::Stub::AsyncClearAllLogRaw(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ClearAllLogRsp>::Create(channel_.get(), cq, rpcmethod_ClearAllLog_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::ClearAllLogRsp>* RessourceService::Stub::PrepareAsyncClearAllLogRaw(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::ClearAllLogRsp>::Create(channel_.get(), cq, rpcmethod_ClearAllLog_, context, request, false);
}

::grpc::ClientReader< ::ressource::GetRessourcesRsp>* RessourceService::Stub::GetRessourcesRaw(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::ressource::GetRessourcesRsp>::Create(channel_.get(), rpcmethod_GetRessources_, context, request);
}

void RessourceService::Stub::experimental_async::GetRessources(::grpc::ClientContext* context, ::ressource::GetRessourcesRqst* request, ::grpc::experimental::ClientReadReactor< ::ressource::GetRessourcesRsp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::ressource::GetRessourcesRsp>::Create(stub_->channel_.get(), stub_->rpcmethod_GetRessources_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ressource::GetRessourcesRsp>* RessourceService::Stub::AsyncGetRessourcesRaw(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ressource::GetRessourcesRsp>::Create(channel_.get(), cq, rpcmethod_GetRessources_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ressource::GetRessourcesRsp>* RessourceService::Stub::PrepareAsyncGetRessourcesRaw(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::ressource::GetRessourcesRsp>::Create(channel_.get(), cq, rpcmethod_GetRessources_, context, request, false, nullptr);
}

::grpc::Status RessourceService::Stub::SetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::ressource::SetRessourceRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRessource_, context, request, response);
}

void RessourceService::Stub::experimental_async::SetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst* request, ::ressource::SetRessourceRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRessource_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::SetRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRessource_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::SetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst* request, ::ressource::SetRessourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRessource_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::SetRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRessource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceRsp>* RessourceService::Stub::AsyncSetRessourceRaw(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::SetRessourceRsp>::Create(channel_.get(), cq, rpcmethod_SetRessource_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceRsp>* RessourceService::Stub::PrepareAsyncSetRessourceRaw(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::SetRessourceRsp>::Create(channel_.get(), cq, rpcmethod_SetRessource_, context, request, false);
}

::grpc::Status RessourceService::Stub::RemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::ressource::RemoveRessourceRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveRessource_, context, request, response);
}

void RessourceService::Stub::experimental_async::RemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst* request, ::ressource::RemoveRessourceRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveRessource_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RemoveRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRessourceRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveRessource_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst* request, ::ressource::RemoveRessourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveRessource_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::RemoveRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRessourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveRessource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::RemoveRessourceRsp>* RessourceService::Stub::AsyncRemoveRessourceRaw(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RemoveRessourceRsp>::Create(channel_.get(), cq, rpcmethod_RemoveRessource_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::RemoveRessourceRsp>* RessourceService::Stub::PrepareAsyncRemoveRessourceRaw(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RemoveRessourceRsp>::Create(channel_.get(), cq, rpcmethod_RemoveRessource_, context, request, false);
}

::grpc::Status RessourceService::Stub::SetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::ressource::SetActionPermissionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetActionPermission_, context, request, response);
}

void RessourceService::Stub::experimental_async::SetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst* request, ::ressource::SetActionPermissionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetActionPermission_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetActionPermissionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetActionPermission_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::SetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst* request, ::ressource::SetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetActionPermission_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetActionPermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::SetActionPermissionRsp>* RessourceService::Stub::AsyncSetActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::SetActionPermissionRsp>::Create(channel_.get(), cq, rpcmethod_SetActionPermission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::SetActionPermissionRsp>* RessourceService::Stub::PrepareAsyncSetActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::SetActionPermissionRsp>::Create(channel_.get(), cq, rpcmethod_SetActionPermission_, context, request, false);
}

::grpc::Status RessourceService::Stub::RemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::ressource::RemoveActionPermissionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveActionPermission_, context, request, response);
}

void RessourceService::Stub::experimental_async::RemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst* request, ::ressource::RemoveActionPermissionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveActionPermission_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveActionPermissionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveActionPermission_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst* request, ::ressource::RemoveActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveActionPermission_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveActionPermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::RemoveActionPermissionRsp>* RessourceService::Stub::AsyncRemoveActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RemoveActionPermissionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveActionPermission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::RemoveActionPermissionRsp>* RessourceService::Stub::PrepareAsyncRemoveActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RemoveActionPermissionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveActionPermission_, context, request, false);
}

::grpc::Status RessourceService::Stub::GetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::ressource::GetActionPermissionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetActionPermission_, context, request, response);
}

void RessourceService::Stub::experimental_async::GetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst* request, ::ressource::GetActionPermissionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetActionPermission_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetActionPermissionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetActionPermission_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::GetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst* request, ::ressource::GetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetActionPermission_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetActionPermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::GetActionPermissionRsp>* RessourceService::Stub::AsyncGetActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::GetActionPermissionRsp>::Create(channel_.get(), cq, rpcmethod_GetActionPermission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::GetActionPermissionRsp>* RessourceService::Stub::PrepareAsyncGetActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::GetActionPermissionRsp>::Create(channel_.get(), cq, rpcmethod_GetActionPermission_, context, request, false);
}

::grpc::Status RessourceService::Stub::CreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::ressource::CreateDirPermissionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateDirPermissions_, context, request, response);
}

void RessourceService::Stub::experimental_async::CreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst* request, ::ressource::CreateDirPermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateDirPermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateDirPermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateDirPermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::CreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst* request, ::ressource::CreateDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateDirPermissions_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateDirPermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::CreateDirPermissionsRsp>* RessourceService::Stub::AsyncCreateDirPermissionsRaw(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::CreateDirPermissionsRsp>::Create(channel_.get(), cq, rpcmethod_CreateDirPermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::CreateDirPermissionsRsp>* RessourceService::Stub::PrepareAsyncCreateDirPermissionsRaw(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::CreateDirPermissionsRsp>::Create(channel_.get(), cq, rpcmethod_CreateDirPermissions_, context, request, false);
}

::grpc::Status RessourceService::Stub::RenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::ressource::RenameFilePermissionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RenameFilePermission_, context, request, response);
}

void RessourceService::Stub::experimental_async::RenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst* request, ::ressource::RenameFilePermissionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RenameFilePermission_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RenameFilePermissionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RenameFilePermission_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::RenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst* request, ::ressource::RenameFilePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RenameFilePermission_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RenameFilePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RenameFilePermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::RenameFilePermissionRsp>* RessourceService::Stub::AsyncRenameFilePermissionRaw(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RenameFilePermissionRsp>::Create(channel_.get(), cq, rpcmethod_RenameFilePermission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::RenameFilePermissionRsp>* RessourceService::Stub::PrepareAsyncRenameFilePermissionRaw(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::RenameFilePermissionRsp>::Create(channel_.get(), cq, rpcmethod_RenameFilePermission_, context, request, false);
}

::grpc::Status RessourceService::Stub::DeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::ressource::DeleteDirPermissionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteDirPermissions_, context, request, response);
}

void RessourceService::Stub::experimental_async::DeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst* request, ::ressource::DeleteDirPermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteDirPermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteDirPermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteDirPermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst* request, ::ressource::DeleteDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteDirPermissions_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteDirPermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteDirPermissionsRsp>* RessourceService::Stub::AsyncDeleteDirPermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteDirPermissionsRsp>::Create(channel_.get(), cq, rpcmethod_DeleteDirPermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteDirPermissionsRsp>* RessourceService::Stub::PrepareAsyncDeleteDirPermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteDirPermissionsRsp>::Create(channel_.get(), cq, rpcmethod_DeleteDirPermissions_, context, request, false);
}

::grpc::Status RessourceService::Stub::DeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::ressource::DeleteFilePermissionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteFilePermissions_, context, request, response);
}

void RessourceService::Stub::experimental_async::DeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst* request, ::ressource::DeleteFilePermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteFilePermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteFilePermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteFilePermissions_, context, request, response, std::move(f));
}

void RessourceService::Stub::experimental_async::DeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst* request, ::ressource::DeleteFilePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteFilePermissions_, context, request, response, reactor);
}

void RessourceService::Stub::experimental_async::DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteFilePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteFilePermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteFilePermissionsRsp>* RessourceService::Stub::AsyncDeleteFilePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteFilePermissionsRsp>::Create(channel_.get(), cq, rpcmethod_DeleteFilePermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ressource::DeleteFilePermissionsRsp>* RessourceService::Stub::PrepareAsyncDeleteFilePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::ressource::DeleteFilePermissionsRsp>::Create(channel_.get(), cq, rpcmethod_DeleteFilePermissions_, context, request, false);
}

RessourceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::RegisterPeerRqst, ::ressource::RegisterPeerRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::RegisterPeerRqst* req,
             ::ressource::RegisterPeerRsp* resp) {
               return service->RegisterPeer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RessourceService::Service, ::ressource::GetPeersRqst, ::ressource::GetPeersRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::GetPeersRqst* req,
             ::grpc_impl::ServerWriter<::ressource::GetPeersRsp>* writer) {
               return service->GetPeers(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::DeletePeerRqst, ::ressource::DeletePeerRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::DeletePeerRqst* req,
             ::ressource::DeletePeerRsp* resp) {
               return service->DeletePeer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::AddPeerActionRqst, ::ressource::AddPeerActionRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::AddPeerActionRqst* req,
             ::ressource::AddPeerActionRsp* resp) {
               return service->AddPeerAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::RemovePeerActionRqst, ::ressource::RemovePeerActionRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::RemovePeerActionRqst* req,
             ::ressource::RemovePeerActionRsp* resp) {
               return service->RemovePeerAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::RegisterAccountRqst, ::ressource::RegisterAccountRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::RegisterAccountRqst* req,
             ::ressource::RegisterAccountRsp* resp) {
               return service->RegisterAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::DeleteAccountRqst, ::ressource::DeleteAccountRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::DeleteAccountRqst* req,
             ::ressource::DeleteAccountRsp* resp) {
               return service->DeleteAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::AuthenticateRqst, ::ressource::AuthenticateRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::AuthenticateRqst* req,
             ::ressource::AuthenticateRsp* resp) {
               return service->Authenticate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::SynchronizeLdapRqst, ::ressource::SynchronizeLdapRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::SynchronizeLdapRqst* req,
             ::ressource::SynchronizeLdapRsp* resp) {
               return service->SynchronizeLdap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::RefreshTokenRqst, ::ressource::RefreshTokenRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::RefreshTokenRqst* req,
             ::ressource::RefreshTokenRsp* resp) {
               return service->RefreshToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::AddAccountRoleRqst, ::ressource::AddAccountRoleRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::AddAccountRoleRqst* req,
             ::ressource::AddAccountRoleRsp* resp) {
               return service->AddAccountRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::RemoveAccountRoleRqst, ::ressource::RemoveAccountRoleRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::RemoveAccountRoleRqst* req,
             ::ressource::RemoveAccountRoleRsp* resp) {
               return service->RemoveAccountRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::CreateRoleRqst, ::ressource::CreateRoleRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::CreateRoleRqst* req,
             ::ressource::CreateRoleRsp* resp) {
               return service->CreateRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::DeleteRoleRqst, ::ressource::DeleteRoleRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::DeleteRoleRqst* req,
             ::ressource::DeleteRoleRsp* resp) {
               return service->DeleteRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::AddRoleActionRqst, ::ressource::AddRoleActionRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::AddRoleActionRqst* req,
             ::ressource::AddRoleActionRsp* resp) {
               return service->AddRoleAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::RemoveRoleActionRqst, ::ressource::RemoveRoleActionRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::RemoveRoleActionRqst* req,
             ::ressource::RemoveRoleActionRsp* resp) {
               return service->RemoveRoleAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::AddApplicationActionRqst, ::ressource::AddApplicationActionRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::AddApplicationActionRqst* req,
             ::ressource::AddApplicationActionRsp* resp) {
               return service->AddApplicationAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::RemoveApplicationActionRqst, ::ressource::RemoveApplicationActionRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::RemoveApplicationActionRqst* req,
             ::ressource::RemoveApplicationActionRsp* resp) {
               return service->RemoveApplicationAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::GetAllActionsRqst, ::ressource::GetAllActionsRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::GetAllActionsRqst* req,
             ::ressource::GetAllActionsRsp* resp) {
               return service->GetAllActions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::GetPermissionsRqst, ::ressource::GetPermissionsRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::GetPermissionsRqst* req,
             ::ressource::GetPermissionsRsp* resp) {
               return service->GetPermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::SetPermissionRqst, ::ressource::SetPermissionRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::SetPermissionRqst* req,
             ::ressource::SetPermissionRsp* resp) {
               return service->SetPermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::DeletePermissionsRqst, ::ressource::DeletePermissionsRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::DeletePermissionsRqst* req,
             ::ressource::DeletePermissionsRsp* resp) {
               return service->DeletePermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::SetRessourceOwnerRqst, ::ressource::SetRessourceOwnerRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::SetRessourceOwnerRqst* req,
             ::ressource::SetRessourceOwnerRsp* resp) {
               return service->SetRessourceOwner(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::GetRessourceOwnersRqst, ::ressource::GetRessourceOwnersRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::GetRessourceOwnersRqst* req,
             ::ressource::GetRessourceOwnersRsp* resp) {
               return service->GetRessourceOwners(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::DeleteRessourceOwnerRqst, ::ressource::DeleteRessourceOwnerRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::DeleteRessourceOwnerRqst* req,
             ::ressource::DeleteRessourceOwnerRsp* resp) {
               return service->DeleteRessourceOwner(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::DeleteRessourceOwnersRqst, ::ressource::DeleteRessourceOwnersRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::DeleteRessourceOwnersRqst* req,
             ::ressource::DeleteRessourceOwnersRsp* resp) {
               return service->DeleteRessourceOwners(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::GetAllFilesInfoRqst, ::ressource::GetAllFilesInfoRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::GetAllFilesInfoRqst* req,
             ::ressource::GetAllFilesInfoRsp* resp) {
               return service->GetAllFilesInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::ValidateTokenRqst, ::ressource::ValidateTokenRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::ValidateTokenRqst* req,
             ::ressource::ValidateTokenRsp* resp) {
               return service->ValidateToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::ValidateUserRessourceAccessRqst, ::ressource::ValidateUserRessourceAccessRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::ValidateUserRessourceAccessRqst* req,
             ::ressource::ValidateUserRessourceAccessRsp* resp) {
               return service->ValidateUserRessourceAccess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::ValidateApplicationRessourceAccessRqst, ::ressource::ValidateApplicationRessourceAccessRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::ValidateApplicationRessourceAccessRqst* req,
             ::ressource::ValidateApplicationRessourceAccessRsp* resp) {
               return service->ValidateApplicationRessourceAccess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::ValidateUserAccessRqst, ::ressource::ValidateUserAccessRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::ValidateUserAccessRqst* req,
             ::ressource::ValidateUserAccessRsp* resp) {
               return service->ValidateUserAccess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::ValidateApplicationAccessRqst, ::ressource::ValidateApplicationAccessRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::ValidateApplicationAccessRqst* req,
             ::ressource::ValidateApplicationAccessRsp* resp) {
               return service->ValidateApplicationAccess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::ValidatePeerAccessRqst, ::ressource::ValidatePeerAccessRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::ValidatePeerAccessRqst* req,
             ::ressource::ValidatePeerAccessRsp* resp) {
               return service->ValidatePeerAccess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::ValidatePeerRessourceAccessRqst, ::ressource::ValidatePeerRessourceAccessRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::ValidatePeerRessourceAccessRqst* req,
             ::ressource::ValidatePeerRessourceAccessRsp* resp) {
               return service->ValidatePeerRessourceAccess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::DeleteAccountPermissionsRqst, ::ressource::DeleteAccountPermissionsRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::DeleteAccountPermissionsRqst* req,
             ::ressource::DeleteAccountPermissionsRsp* resp) {
               return service->DeleteAccountPermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::DeleteRolePermissionsRqst, ::ressource::DeleteRolePermissionsRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::DeleteRolePermissionsRqst* req,
             ::ressource::DeleteRolePermissionsRsp* resp) {
               return service->DeleteRolePermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::GetAllApplicationsInfoRqst, ::ressource::GetAllApplicationsInfoRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::GetAllApplicationsInfoRqst* req,
             ::ressource::GetAllApplicationsInfoRsp* resp) {
               return service->GetAllApplicationsInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::DeleteApplicationRqst, ::ressource::DeleteApplicationRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::DeleteApplicationRqst* req,
             ::ressource::DeleteApplicationRsp* resp) {
               return service->DeleteApplication(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::LogRqst, ::ressource::LogRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::LogRqst* req,
             ::ressource::LogRsp* resp) {
               return service->Log(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[39],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RessourceService::Service, ::ressource::GetLogRqst, ::ressource::GetLogRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::GetLogRqst* req,
             ::grpc_impl::ServerWriter<::ressource::GetLogRsp>* writer) {
               return service->GetLog(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::DeleteLogRqst, ::ressource::DeleteLogRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::DeleteLogRqst* req,
             ::ressource::DeleteLogRsp* resp) {
               return service->DeleteLog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::ClearAllLogRqst, ::ressource::ClearAllLogRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::ClearAllLogRqst* req,
             ::ressource::ClearAllLogRsp* resp) {
               return service->ClearAllLog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[42],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RessourceService::Service, ::ressource::GetRessourcesRqst, ::ressource::GetRessourcesRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::GetRessourcesRqst* req,
             ::grpc_impl::ServerWriter<::ressource::GetRessourcesRsp>* writer) {
               return service->GetRessources(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::SetRessourceRqst, ::ressource::SetRessourceRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::SetRessourceRqst* req,
             ::ressource::SetRessourceRsp* resp) {
               return service->SetRessource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::RemoveRessourceRqst, ::ressource::RemoveRessourceRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::RemoveRessourceRqst* req,
             ::ressource::RemoveRessourceRsp* resp) {
               return service->RemoveRessource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::SetActionPermissionRqst, ::ressource::SetActionPermissionRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::SetActionPermissionRqst* req,
             ::ressource::SetActionPermissionRsp* resp) {
               return service->SetActionPermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::RemoveActionPermissionRqst, ::ressource::RemoveActionPermissionRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::RemoveActionPermissionRqst* req,
             ::ressource::RemoveActionPermissionRsp* resp) {
               return service->RemoveActionPermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::GetActionPermissionRqst, ::ressource::GetActionPermissionRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::GetActionPermissionRqst* req,
             ::ressource::GetActionPermissionRsp* resp) {
               return service->GetActionPermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::CreateDirPermissionsRqst, ::ressource::CreateDirPermissionsRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::CreateDirPermissionsRqst* req,
             ::ressource::CreateDirPermissionsRsp* resp) {
               return service->CreateDirPermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::RenameFilePermissionRqst, ::ressource::RenameFilePermissionRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::RenameFilePermissionRqst* req,
             ::ressource::RenameFilePermissionRsp* resp) {
               return service->RenameFilePermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::DeleteDirPermissionsRqst, ::ressource::DeleteDirPermissionsRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::DeleteDirPermissionsRqst* req,
             ::ressource::DeleteDirPermissionsRsp* resp) {
               return service->DeleteDirPermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RessourceService_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RessourceService::Service, ::ressource::DeleteFilePermissionsRqst, ::ressource::DeleteFilePermissionsRsp>(
          [](RessourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ressource::DeleteFilePermissionsRqst* req,
             ::ressource::DeleteFilePermissionsRsp* resp) {
               return service->DeleteFilePermissions(ctx, req, resp);
             }, this)));
}

RessourceService::Service::~Service() {
}

::grpc::Status RessourceService::Service::RegisterPeer(::grpc::ServerContext* context, const ::ressource::RegisterPeerRqst* request, ::ressource::RegisterPeerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::GetPeers(::grpc::ServerContext* context, const ::ressource::GetPeersRqst* request, ::grpc::ServerWriter< ::ressource::GetPeersRsp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::DeletePeer(::grpc::ServerContext* context, const ::ressource::DeletePeerRqst* request, ::ressource::DeletePeerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::AddPeerAction(::grpc::ServerContext* context, const ::ressource::AddPeerActionRqst* request, ::ressource::AddPeerActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::RemovePeerAction(::grpc::ServerContext* context, const ::ressource::RemovePeerActionRqst* request, ::ressource::RemovePeerActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::RegisterAccount(::grpc::ServerContext* context, const ::ressource::RegisterAccountRqst* request, ::ressource::RegisterAccountRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::DeleteAccount(::grpc::ServerContext* context, const ::ressource::DeleteAccountRqst* request, ::ressource::DeleteAccountRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::Authenticate(::grpc::ServerContext* context, const ::ressource::AuthenticateRqst* request, ::ressource::AuthenticateRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::SynchronizeLdap(::grpc::ServerContext* context, const ::ressource::SynchronizeLdapRqst* request, ::ressource::SynchronizeLdapRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::RefreshToken(::grpc::ServerContext* context, const ::ressource::RefreshTokenRqst* request, ::ressource::RefreshTokenRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::AddAccountRole(::grpc::ServerContext* context, const ::ressource::AddAccountRoleRqst* request, ::ressource::AddAccountRoleRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::RemoveAccountRole(::grpc::ServerContext* context, const ::ressource::RemoveAccountRoleRqst* request, ::ressource::RemoveAccountRoleRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::CreateRole(::grpc::ServerContext* context, const ::ressource::CreateRoleRqst* request, ::ressource::CreateRoleRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::DeleteRole(::grpc::ServerContext* context, const ::ressource::DeleteRoleRqst* request, ::ressource::DeleteRoleRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::AddRoleAction(::grpc::ServerContext* context, const ::ressource::AddRoleActionRqst* request, ::ressource::AddRoleActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::RemoveRoleAction(::grpc::ServerContext* context, const ::ressource::RemoveRoleActionRqst* request, ::ressource::RemoveRoleActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::AddApplicationAction(::grpc::ServerContext* context, const ::ressource::AddApplicationActionRqst* request, ::ressource::AddApplicationActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::RemoveApplicationAction(::grpc::ServerContext* context, const ::ressource::RemoveApplicationActionRqst* request, ::ressource::RemoveApplicationActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::GetAllActions(::grpc::ServerContext* context, const ::ressource::GetAllActionsRqst* request, ::ressource::GetAllActionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::GetPermissions(::grpc::ServerContext* context, const ::ressource::GetPermissionsRqst* request, ::ressource::GetPermissionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::SetPermission(::grpc::ServerContext* context, const ::ressource::SetPermissionRqst* request, ::ressource::SetPermissionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::DeletePermissions(::grpc::ServerContext* context, const ::ressource::DeletePermissionsRqst* request, ::ressource::DeletePermissionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::SetRessourceOwner(::grpc::ServerContext* context, const ::ressource::SetRessourceOwnerRqst* request, ::ressource::SetRessourceOwnerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::GetRessourceOwners(::grpc::ServerContext* context, const ::ressource::GetRessourceOwnersRqst* request, ::ressource::GetRessourceOwnersRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::DeleteRessourceOwner(::grpc::ServerContext* context, const ::ressource::DeleteRessourceOwnerRqst* request, ::ressource::DeleteRessourceOwnerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::DeleteRessourceOwners(::grpc::ServerContext* context, const ::ressource::DeleteRessourceOwnersRqst* request, ::ressource::DeleteRessourceOwnersRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::GetAllFilesInfo(::grpc::ServerContext* context, const ::ressource::GetAllFilesInfoRqst* request, ::ressource::GetAllFilesInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::ValidateToken(::grpc::ServerContext* context, const ::ressource::ValidateTokenRqst* request, ::ressource::ValidateTokenRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::ValidateUserRessourceAccess(::grpc::ServerContext* context, const ::ressource::ValidateUserRessourceAccessRqst* request, ::ressource::ValidateUserRessourceAccessRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::ValidateApplicationRessourceAccess(::grpc::ServerContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst* request, ::ressource::ValidateApplicationRessourceAccessRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::ValidateUserAccess(::grpc::ServerContext* context, const ::ressource::ValidateUserAccessRqst* request, ::ressource::ValidateUserAccessRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::ValidateApplicationAccess(::grpc::ServerContext* context, const ::ressource::ValidateApplicationAccessRqst* request, ::ressource::ValidateApplicationAccessRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::ValidatePeerAccess(::grpc::ServerContext* context, const ::ressource::ValidatePeerAccessRqst* request, ::ressource::ValidatePeerAccessRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::ValidatePeerRessourceAccess(::grpc::ServerContext* context, const ::ressource::ValidatePeerRessourceAccessRqst* request, ::ressource::ValidatePeerRessourceAccessRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::DeleteAccountPermissions(::grpc::ServerContext* context, const ::ressource::DeleteAccountPermissionsRqst* request, ::ressource::DeleteAccountPermissionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::DeleteRolePermissions(::grpc::ServerContext* context, const ::ressource::DeleteRolePermissionsRqst* request, ::ressource::DeleteRolePermissionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::GetAllApplicationsInfo(::grpc::ServerContext* context, const ::ressource::GetAllApplicationsInfoRqst* request, ::ressource::GetAllApplicationsInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::DeleteApplication(::grpc::ServerContext* context, const ::ressource::DeleteApplicationRqst* request, ::ressource::DeleteApplicationRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::Log(::grpc::ServerContext* context, const ::ressource::LogRqst* request, ::ressource::LogRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::GetLog(::grpc::ServerContext* context, const ::ressource::GetLogRqst* request, ::grpc::ServerWriter< ::ressource::GetLogRsp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::DeleteLog(::grpc::ServerContext* context, const ::ressource::DeleteLogRqst* request, ::ressource::DeleteLogRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::ClearAllLog(::grpc::ServerContext* context, const ::ressource::ClearAllLogRqst* request, ::ressource::ClearAllLogRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::GetRessources(::grpc::ServerContext* context, const ::ressource::GetRessourcesRqst* request, ::grpc::ServerWriter< ::ressource::GetRessourcesRsp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::SetRessource(::grpc::ServerContext* context, const ::ressource::SetRessourceRqst* request, ::ressource::SetRessourceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::RemoveRessource(::grpc::ServerContext* context, const ::ressource::RemoveRessourceRqst* request, ::ressource::RemoveRessourceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::SetActionPermission(::grpc::ServerContext* context, const ::ressource::SetActionPermissionRqst* request, ::ressource::SetActionPermissionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::RemoveActionPermission(::grpc::ServerContext* context, const ::ressource::RemoveActionPermissionRqst* request, ::ressource::RemoveActionPermissionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::GetActionPermission(::grpc::ServerContext* context, const ::ressource::GetActionPermissionRqst* request, ::ressource::GetActionPermissionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::CreateDirPermissions(::grpc::ServerContext* context, const ::ressource::CreateDirPermissionsRqst* request, ::ressource::CreateDirPermissionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::RenameFilePermission(::grpc::ServerContext* context, const ::ressource::RenameFilePermissionRqst* request, ::ressource::RenameFilePermissionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::DeleteDirPermissions(::grpc::ServerContext* context, const ::ressource::DeleteDirPermissionsRqst* request, ::ressource::DeleteDirPermissionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RessourceService::Service::DeleteFilePermissions(::grpc::ServerContext* context, const ::ressource::DeleteFilePermissionsRqst* request, ::ressource::DeleteFilePermissionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ressource

