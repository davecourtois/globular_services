// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ressource.proto
// Original file comments:
// *
// Management and definition of ressources.
#ifndef GRPC_ressource_2eproto__INCLUDED
#define GRPC_ressource_2eproto__INCLUDED

#include "ressource.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ressource {

// *
// That service is use to manage Globular ressource like permissions and accounts
// or role. The service made use of Persistence service to store various 
// objects.
class RessourceService final {
 public:
  static constexpr char const* service_full_name() {
    return "ressource.RessourceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // * Register a new Account *
    virtual ::grpc::Status RegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::ressource::RegisterAccountRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RegisterAccountRsp>> AsyncRegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RegisterAccountRsp>>(AsyncRegisterAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RegisterAccountRsp>> PrepareAsyncRegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RegisterAccountRsp>>(PrepareAsyncRegisterAccountRaw(context, request, cq));
    }
    // * Delete an account *
    virtual ::grpc::Status DeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::ressource::DeleteAccountRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteAccountRsp>> AsyncDeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteAccountRsp>>(AsyncDeleteAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteAccountRsp>> PrepareAsyncDeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteAccountRsp>>(PrepareAsyncDeleteAccountRaw(context, request, cq));
    }
    // * Authenticate a user *
    virtual ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::ressource::AuthenticateRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AuthenticateRsp>> AsyncAuthenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AuthenticateRsp>>(AsyncAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AuthenticateRsp>> PrepareAsyncAuthenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AuthenticateRsp>>(PrepareAsyncAuthenticateRaw(context, request, cq));
    }
    // * Synchronize Ressource with LDAP if connection exist *
    virtual ::grpc::Status SynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::ressource::SynchronizeLdapRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SynchronizeLdapRsp>> AsyncSynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SynchronizeLdapRsp>>(AsyncSynchronizeLdapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SynchronizeLdapRsp>> PrepareAsyncSynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SynchronizeLdapRsp>>(PrepareAsyncSynchronizeLdapRaw(context, request, cq));
    }
    // * Refresh token get a new token *
    virtual ::grpc::Status RefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::ressource::RefreshTokenRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RefreshTokenRsp>> AsyncRefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RefreshTokenRsp>>(AsyncRefreshTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RefreshTokenRsp>> PrepareAsyncRefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RefreshTokenRsp>>(PrepareAsyncRefreshTokenRaw(context, request, cq));
    }
    // * Add role to a given account *
    virtual ::grpc::Status AddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::ressource::AddAccountRoleRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddAccountRoleRsp>> AsyncAddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddAccountRoleRsp>>(AsyncAddAccountRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddAccountRoleRsp>> PrepareAsyncAddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddAccountRoleRsp>>(PrepareAsyncAddAccountRoleRaw(context, request, cq));
    }
    // * Remove a role from a given account *
    virtual ::grpc::Status RemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::ressource::RemoveAccountRoleRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveAccountRoleRsp>> AsyncRemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveAccountRoleRsp>>(AsyncRemoveAccountRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveAccountRoleRsp>> PrepareAsyncRemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveAccountRoleRsp>>(PrepareAsyncRemoveAccountRoleRaw(context, request, cq));
    }
    // * Create a role with given action list *
    virtual ::grpc::Status CreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::ressource::CreateRoleRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::CreateRoleRsp>> AsyncCreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::CreateRoleRsp>>(AsyncCreateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::CreateRoleRsp>> PrepareAsyncCreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::CreateRoleRsp>>(PrepareAsyncCreateRoleRaw(context, request, cq));
    }
    // * Delete a role with a given id *
    virtual ::grpc::Status DeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::ressource::DeleteRoleRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRoleRsp>> AsyncDeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRoleRsp>>(AsyncDeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRoleRsp>> PrepareAsyncDeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRoleRsp>>(PrepareAsyncDeleteRoleRaw(context, request, cq));
    }
    // * Append an action to existing role. *
    virtual ::grpc::Status AddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::ressource::AddRoleActionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddRoleActionRsp>> AsyncAddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddRoleActionRsp>>(AsyncAddRoleActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddRoleActionRsp>> PrepareAsyncAddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddRoleActionRsp>>(PrepareAsyncAddRoleActionRaw(context, request, cq));
    }
    // * Remove an action to existing role. *
    virtual ::grpc::Status RemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::ressource::RemoveRoleActionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveRoleActionRsp>> AsyncRemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveRoleActionRsp>>(AsyncRemoveRoleActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveRoleActionRsp>> PrepareAsyncRemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveRoleActionRsp>>(PrepareAsyncRemoveRoleActionRaw(context, request, cq));
    }
    // * Append an action to existing applications. *
    virtual ::grpc::Status AddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::ressource::AddApplicationActionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddApplicationActionRsp>> AsyncAddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddApplicationActionRsp>>(AsyncAddApplicationActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddApplicationActionRsp>> PrepareAsyncAddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddApplicationActionRsp>>(PrepareAsyncAddApplicationActionRaw(context, request, cq));
    }
    // * Remove an action to existing applications. *
    virtual ::grpc::Status RemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::ressource::RemoveApplicationActionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveApplicationActionRsp>> AsyncRemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveApplicationActionRsp>>(AsyncRemoveApplicationActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveApplicationActionRsp>> PrepareAsyncRemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveApplicationActionRsp>>(PrepareAsyncRemoveApplicationActionRaw(context, request, cq));
    }
    // * Get all actions *
    virtual ::grpc::Status GetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::ressource::GetAllActionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllActionsRsp>> AsyncGetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllActionsRsp>>(AsyncGetAllActionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllActionsRsp>> PrepareAsyncGetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllActionsRsp>>(PrepareAsyncGetAllActionsRaw(context, request, cq));
    }
    // *  *
    virtual ::grpc::Status GetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::ressource::GetPermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetPermissionsRsp>> AsyncGetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetPermissionsRsp>>(AsyncGetPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetPermissionsRsp>> PrepareAsyncGetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetPermissionsRsp>>(PrepareAsyncGetPermissionsRaw(context, request, cq));
    }
    // * Set a file permission, create new one if not already exist. *
    virtual ::grpc::Status SetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::ressource::SetPermissionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetPermissionRsp>> AsyncSetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetPermissionRsp>>(AsyncSetPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetPermissionRsp>> PrepareAsyncSetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetPermissionRsp>>(PrepareAsyncSetPermissionRaw(context, request, cq));
    }
    // * Delete a file permissions *
    virtual ::grpc::Status DeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::ressource::DeletePermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeletePermissionsRsp>> AsyncDeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeletePermissionsRsp>>(AsyncDeletePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeletePermissionsRsp>> PrepareAsyncDeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeletePermissionsRsp>>(PrepareAsyncDeletePermissionsRaw(context, request, cq));
    }
    // * Set Ressource owner *
    virtual ::grpc::Status SetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::ressource::SetRessourceOwnerRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetRessourceOwnerRsp>> AsyncSetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetRessourceOwnerRsp>>(AsyncSetRessourceOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetRessourceOwnerRsp>> PrepareAsyncSetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetRessourceOwnerRsp>>(PrepareAsyncSetRessourceOwnerRaw(context, request, cq));
    }
    // * Get the ressource owners *
    virtual ::grpc::Status GetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::ressource::GetRessourceOwnersRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetRessourceOwnersRsp>> AsyncGetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetRessourceOwnersRsp>>(AsyncGetRessourceOwnersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetRessourceOwnersRsp>> PrepareAsyncGetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetRessourceOwnersRsp>>(PrepareAsyncGetRessourceOwnersRaw(context, request, cq));
    }
    // * Delete the ressource owner *
    virtual ::grpc::Status DeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::ressource::DeleteRessourceOwnerRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRessourceOwnerRsp>> AsyncDeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRessourceOwnerRsp>>(AsyncDeleteRessourceOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRessourceOwnerRsp>> PrepareAsyncDeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRessourceOwnerRsp>>(PrepareAsyncDeleteRessourceOwnerRaw(context, request, cq));
    }
    // * Delete the ressource owners *
    virtual ::grpc::Status DeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::ressource::DeleteRessourceOwnersRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRessourceOwnersRsp>> AsyncDeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRessourceOwnersRsp>>(AsyncDeleteRessourceOwnersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRessourceOwnersRsp>> PrepareAsyncDeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRessourceOwnersRsp>>(PrepareAsyncDeleteRessourceOwnersRaw(context, request, cq));
    }
    // * Retrun a json string with all file info *
    virtual ::grpc::Status GetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::ressource::GetAllFilesInfoRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllFilesInfoRsp>> AsyncGetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllFilesInfoRsp>>(AsyncGetAllFilesInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllFilesInfoRsp>> PrepareAsyncGetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllFilesInfoRsp>>(PrepareAsyncGetAllFilesInfoRaw(context, request, cq));
    }
    // * Validate a token *
    virtual ::grpc::Status ValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::ressource::ValidateTokenRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateTokenRsp>> AsyncValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateTokenRsp>>(AsyncValidateTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateTokenRsp>> PrepareAsyncValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateTokenRsp>>(PrepareAsyncValidateTokenRaw(context, request, cq));
    }
    // * Validate if user can access a given ressource. *
    virtual ::grpc::Status ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::ressource::ValidateUserRessourceAccessRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateUserRessourceAccessRsp>> AsyncValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateUserRessourceAccessRsp>>(AsyncValidateUserRessourceAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateUserRessourceAccessRsp>> PrepareAsyncValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateUserRessourceAccessRsp>>(PrepareAsyncValidateUserRessourceAccessRaw(context, request, cq));
    }
    // * Validate if application can access a given ressouce. *
    virtual ::grpc::Status ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::ressource::ValidateApplicationRessourceAccessRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateApplicationRessourceAccessRsp>> AsyncValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateApplicationRessourceAccessRsp>>(AsyncValidateApplicationRessourceAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateApplicationRessourceAccessRsp>> PrepareAsyncValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateApplicationRessourceAccessRsp>>(PrepareAsyncValidateApplicationRessourceAccessRaw(context, request, cq));
    }
    // * Validate if user can access a given method. *
    virtual ::grpc::Status ValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::ressource::ValidateUserAccessRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateUserAccessRsp>> AsyncValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateUserAccessRsp>>(AsyncValidateUserAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateUserAccessRsp>> PrepareAsyncValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateUserAccessRsp>>(PrepareAsyncValidateUserAccessRaw(context, request, cq));
    }
    // * Validate if application can access a given method. *
    virtual ::grpc::Status ValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::ressource::ValidateApplicationAccessRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateApplicationAccessRsp>> AsyncValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateApplicationAccessRsp>>(AsyncValidateApplicationAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateApplicationAccessRsp>> PrepareAsyncValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateApplicationAccessRsp>>(PrepareAsyncValidateApplicationAccessRaw(context, request, cq));
    }
    // * Delete all permission for a given account *
    virtual ::grpc::Status DeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::ressource::DeleteAccountPermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteAccountPermissionsRsp>> AsyncDeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteAccountPermissionsRsp>>(AsyncDeleteAccountPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteAccountPermissionsRsp>> PrepareAsyncDeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteAccountPermissionsRsp>>(PrepareAsyncDeleteAccountPermissionsRaw(context, request, cq));
    }
    // * Delete all permission for a given role *
    virtual ::grpc::Status DeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::ressource::DeleteRolePermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRolePermissionsRsp>> AsyncDeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRolePermissionsRsp>>(AsyncDeleteRolePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRolePermissionsRsp>> PrepareAsyncDeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRolePermissionsRsp>>(PrepareAsyncDeleteRolePermissionsRaw(context, request, cq));
    }
    // * Return a json string with all applications informations *
    virtual ::grpc::Status GetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::ressource::GetAllApplicationsInfoRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllApplicationsInfoRsp>> AsyncGetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllApplicationsInfoRsp>>(AsyncGetAllApplicationsInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllApplicationsInfoRsp>> PrepareAsyncGetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllApplicationsInfoRsp>>(PrepareAsyncGetAllApplicationsInfoRaw(context, request, cq));
    }
    // * Delete an application from the server. *
    virtual ::grpc::Status DeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::ressource::DeleteApplicationRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteApplicationRsp>> AsyncDeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteApplicationRsp>>(AsyncDeleteApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteApplicationRsp>> PrepareAsyncDeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteApplicationRsp>>(PrepareAsyncDeleteApplicationRaw(context, request, cq));
    }
    // * Set a method into the log... *
    virtual ::grpc::Status Log(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::ressource::LogRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::LogRsp>> AsyncLog(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::LogRsp>>(AsyncLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::LogRsp>> PrepareAsyncLog(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::LogRsp>>(PrepareAsyncLogRaw(context, request, cq));
    }
    // * Get the list of logs *
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ressource::GetLogRsp>> GetLog(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ressource::GetLogRsp>>(GetLogRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ressource::GetLogRsp>> AsyncGetLog(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ressource::GetLogRsp>>(AsyncGetLogRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ressource::GetLogRsp>> PrepareAsyncGetLog(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ressource::GetLogRsp>>(PrepareAsyncGetLogRaw(context, request, cq));
    }
    // * Delete a single log entry *
    virtual ::grpc::Status DeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::ressource::DeleteLogRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteLogRsp>> AsyncDeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteLogRsp>>(AsyncDeleteLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteLogRsp>> PrepareAsyncDeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteLogRsp>>(PrepareAsyncDeleteLogRaw(context, request, cq));
    }
    // * Delete all log *
    virtual ::grpc::Status ClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::ressource::ClearAllLogRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ClearAllLogRsp>> AsyncClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ClearAllLogRsp>>(AsyncClearAllLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ClearAllLogRsp>> PrepareAsyncClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ClearAllLogRsp>>(PrepareAsyncClearAllLogRaw(context, request, cq));
    }
    // * Get all ressources 
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ressource::GetRessourcesRsp>> GetRessources(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ressource::GetRessourcesRsp>>(GetRessourcesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ressource::GetRessourcesRsp>> AsyncGetRessources(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ressource::GetRessourcesRsp>>(AsyncGetRessourcesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ressource::GetRessourcesRsp>> PrepareAsyncGetRessources(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ressource::GetRessourcesRsp>>(PrepareAsyncGetRessourcesRaw(context, request, cq));
    }
    // * Set a ressource from a client (custom service) to globular 
    virtual ::grpc::Status SetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::ressource::SetRessourceRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetRessourceRsp>> AsyncSetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetRessourceRsp>>(AsyncSetRessourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetRessourceRsp>> PrepareAsyncSetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetRessourceRsp>>(PrepareAsyncSetRessourceRaw(context, request, cq));
    }
    // * Remove a ressource from a client (custom service) to globular 
    virtual ::grpc::Status RemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::ressource::RemoveRessourceRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveRessourceRsp>> AsyncRemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveRessourceRsp>>(AsyncRemoveRessourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveRessourceRsp>> PrepareAsyncRemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveRessourceRsp>>(PrepareAsyncRemoveRessourceRaw(context, request, cq));
    }
    // * Set ressource action permission *
    virtual ::grpc::Status SetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::ressource::SetActionPermissionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetActionPermissionRsp>> AsyncSetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetActionPermissionRsp>>(AsyncSetActionPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetActionPermissionRsp>> PrepareAsyncSetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetActionPermissionRsp>>(PrepareAsyncSetActionPermissionRaw(context, request, cq));
    }
    // * Remove ressource action permission *
    virtual ::grpc::Status RemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::ressource::RemoveActionPermissionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveActionPermissionRsp>> AsyncRemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveActionPermissionRsp>>(AsyncRemoveActionPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveActionPermissionRsp>> PrepareAsyncRemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveActionPermissionRsp>>(PrepareAsyncRemoveActionPermissionRaw(context, request, cq));
    }
    // * Get ressource action permission *
    virtual ::grpc::Status GetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::ressource::GetActionPermissionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetActionPermissionRsp>> AsyncGetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetActionPermissionRsp>>(AsyncGetActionPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetActionPermissionRsp>> PrepareAsyncGetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetActionPermissionRsp>>(PrepareAsyncGetActionPermissionRaw(context, request, cq));
    }
    // * Create Permission for a dir (recursive) *
    virtual ::grpc::Status CreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::ressource::CreateDirPermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::CreateDirPermissionsRsp>> AsyncCreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::CreateDirPermissionsRsp>>(AsyncCreateDirPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::CreateDirPermissionsRsp>> PrepareAsyncCreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::CreateDirPermissionsRsp>>(PrepareAsyncCreateDirPermissionsRaw(context, request, cq));
    }
    // * Rename file/dir permission *
    virtual ::grpc::Status RenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::ressource::RenameFilePermissionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RenameFilePermissionRsp>> AsyncRenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RenameFilePermissionRsp>>(AsyncRenameFilePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RenameFilePermissionRsp>> PrepareAsyncRenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RenameFilePermissionRsp>>(PrepareAsyncRenameFilePermissionRaw(context, request, cq));
    }
    // * Delete Permission for a dir (recursive) *
    virtual ::grpc::Status DeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::ressource::DeleteDirPermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteDirPermissionsRsp>> AsyncDeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteDirPermissionsRsp>>(AsyncDeleteDirPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteDirPermissionsRsp>> PrepareAsyncDeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteDirPermissionsRsp>>(PrepareAsyncDeleteDirPermissionsRaw(context, request, cq));
    }
    // * Delete a single file permission *
    virtual ::grpc::Status DeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::ressource::DeleteFilePermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteFilePermissionsRsp>> AsyncDeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteFilePermissionsRsp>>(AsyncDeleteFilePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteFilePermissionsRsp>> PrepareAsyncDeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteFilePermissionsRsp>>(PrepareAsyncDeleteFilePermissionsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // * Register a new Account *
      virtual void RegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst* request, ::ressource::RegisterAccountRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RegisterAccountRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst* request, ::ressource::RegisterAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst* request, ::ressource::RegisterAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RegisterAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RegisterAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete an account *
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst* request, ::ressource::DeleteAccountRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst* request, ::ressource::DeleteAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst* request, ::ressource::DeleteAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Authenticate a user *
      virtual void Authenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst* request, ::ressource::AuthenticateRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AuthenticateRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Authenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst* request, ::ressource::AuthenticateRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Authenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst* request, ::ressource::AuthenticateRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AuthenticateRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AuthenticateRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Synchronize Ressource with LDAP if connection exist *
      virtual void SynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst* request, ::ressource::SynchronizeLdapRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SynchronizeLdapRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst* request, ::ressource::SynchronizeLdapRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst* request, ::ressource::SynchronizeLdapRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SynchronizeLdapRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SynchronizeLdapRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Refresh token get a new token *
      virtual void RefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst* request, ::ressource::RefreshTokenRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RefreshTokenRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst* request, ::ressource::RefreshTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst* request, ::ressource::RefreshTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RefreshTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RefreshTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Add role to a given account *
      virtual void AddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst* request, ::ressource::AddAccountRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddAccountRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst* request, ::ressource::AddAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst* request, ::ressource::AddAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Remove a role from a given account *
      virtual void RemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst* request, ::ressource::RemoveAccountRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveAccountRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst* request, ::ressource::RemoveAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst* request, ::ressource::RemoveAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Create a role with given action list *
      virtual void CreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst* request, ::ressource::CreateRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst* request, ::ressource::CreateRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst* request, ::ressource::CreateRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete a role with a given id *
      virtual void DeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst* request, ::ressource::DeleteRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRoleRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst* request, ::ressource::DeleteRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst* request, ::ressource::DeleteRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Append an action to existing role. *
      virtual void AddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst* request, ::ressource::AddRoleActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddRoleActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst* request, ::ressource::AddRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst* request, ::ressource::AddRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Remove an action to existing role. *
      virtual void RemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst* request, ::ressource::RemoveRoleActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRoleActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst* request, ::ressource::RemoveRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst* request, ::ressource::RemoveRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Append an action to existing applications. *
      virtual void AddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst* request, ::ressource::AddApplicationActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddApplicationActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst* request, ::ressource::AddApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst* request, ::ressource::AddApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Remove an action to existing applications. *
      virtual void RemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst* request, ::ressource::RemoveApplicationActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveApplicationActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst* request, ::ressource::RemoveApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst* request, ::ressource::RemoveApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Get all actions *
      virtual void GetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst* request, ::ressource::GetAllActionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllActionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst* request, ::ressource::GetAllActionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst* request, ::ressource::GetAllActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllActionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *  *
      virtual void GetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst* request, ::ressource::GetPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst* request, ::ressource::GetPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst* request, ::ressource::GetPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Set a file permission, create new one if not already exist. *
      virtual void SetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst* request, ::ressource::SetPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst* request, ::ressource::SetPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst* request, ::ressource::SetPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete a file permissions *
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst* request, ::ressource::DeletePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeletePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst* request, ::ressource::DeletePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst* request, ::ressource::DeletePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeletePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeletePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Set Ressource owner *
      virtual void SetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst* request, ::ressource::SetRessourceOwnerRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceOwnerRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst* request, ::ressource::SetRessourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst* request, ::ressource::SetRessourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Get the ressource owners *
      virtual void GetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst* request, ::ressource::GetRessourceOwnersRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetRessourceOwnersRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst* request, ::ressource::GetRessourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst* request, ::ressource::GetRessourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetRessourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetRessourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete the ressource owner *
      virtual void DeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst* request, ::ressource::DeleteRessourceOwnerRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnerRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst* request, ::ressource::DeleteRessourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst* request, ::ressource::DeleteRessourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete the ressource owners *
      virtual void DeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst* request, ::ressource::DeleteRessourceOwnersRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnersRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst* request, ::ressource::DeleteRessourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst* request, ::ressource::DeleteRessourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Retrun a json string with all file info *
      virtual void GetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst* request, ::ressource::GetAllFilesInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllFilesInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst* request, ::ressource::GetAllFilesInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst* request, ::ressource::GetAllFilesInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllFilesInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllFilesInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate a token *
      virtual void ValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst* request, ::ressource::ValidateTokenRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateTokenRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst* request, ::ressource::ValidateTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst* request, ::ressource::ValidateTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate if user can access a given ressource. *
      virtual void ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst* request, ::ressource::ValidateUserRessourceAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserRessourceAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst* request, ::ressource::ValidateUserRessourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst* request, ::ressource::ValidateUserRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserRessourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate if application can access a given ressouce. *
      virtual void ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate if user can access a given method. *
      virtual void ValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst* request, ::ressource::ValidateUserAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst* request, ::ressource::ValidateUserAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst* request, ::ressource::ValidateUserAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate if application can access a given method. *
      virtual void ValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst* request, ::ressource::ValidateApplicationAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst* request, ::ressource::ValidateApplicationAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst* request, ::ressource::ValidateApplicationAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete all permission for a given account *
      virtual void DeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst* request, ::ressource::DeleteAccountPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst* request, ::ressource::DeleteAccountPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst* request, ::ressource::DeleteAccountPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete all permission for a given role *
      virtual void DeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst* request, ::ressource::DeleteRolePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRolePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst* request, ::ressource::DeleteRolePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst* request, ::ressource::DeleteRolePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRolePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRolePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Return a json string with all applications informations *
      virtual void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst* request, ::ressource::GetAllApplicationsInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllApplicationsInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst* request, ::ressource::GetAllApplicationsInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst* request, ::ressource::GetAllApplicationsInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllApplicationsInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllApplicationsInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete an application from the server. *
      virtual void DeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst* request, ::ressource::DeleteApplicationRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteApplicationRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst* request, ::ressource::DeleteApplicationRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst* request, ::ressource::DeleteApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteApplicationRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Set a method into the log... *
      virtual void Log(::grpc::ClientContext* context, const ::ressource::LogRqst* request, ::ressource::LogRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::LogRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Log(::grpc::ClientContext* context, const ::ressource::LogRqst* request, ::ressource::LogRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Log(::grpc::ClientContext* context, const ::ressource::LogRqst* request, ::ressource::LogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::LogRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::LogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Get the list of logs *
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLog(::grpc::ClientContext* context, ::ressource::GetLogRqst* request, ::grpc::ClientReadReactor< ::ressource::GetLogRsp>* reactor) = 0;
      #else
      virtual void GetLog(::grpc::ClientContext* context, ::ressource::GetLogRqst* request, ::grpc::experimental::ClientReadReactor< ::ressource::GetLogRsp>* reactor) = 0;
      #endif
      // * Delete a single log entry *
      virtual void DeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst* request, ::ressource::DeleteLogRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteLogRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst* request, ::ressource::DeleteLogRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst* request, ::ressource::DeleteLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteLogRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete all log *
      virtual void ClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst* request, ::ressource::ClearAllLogRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ClearAllLogRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst* request, ::ressource::ClearAllLogRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst* request, ::ressource::ClearAllLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ClearAllLogRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ClearAllLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Get all ressources 
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRessources(::grpc::ClientContext* context, ::ressource::GetRessourcesRqst* request, ::grpc::ClientReadReactor< ::ressource::GetRessourcesRsp>* reactor) = 0;
      #else
      virtual void GetRessources(::grpc::ClientContext* context, ::ressource::GetRessourcesRqst* request, ::grpc::experimental::ClientReadReactor< ::ressource::GetRessourcesRsp>* reactor) = 0;
      #endif
      // * Set a ressource from a client (custom service) to globular 
      virtual void SetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst* request, ::ressource::SetRessourceRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst* request, ::ressource::SetRessourceRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst* request, ::ressource::SetRessourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Remove a ressource from a client (custom service) to globular 
      virtual void RemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst* request, ::ressource::RemoveRessourceRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRessourceRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst* request, ::ressource::RemoveRessourceRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst* request, ::ressource::RemoveRessourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRessourceRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRessourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Set ressource action permission *
      virtual void SetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst* request, ::ressource::SetActionPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetActionPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst* request, ::ressource::SetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst* request, ::ressource::SetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Remove ressource action permission *
      virtual void RemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst* request, ::ressource::RemoveActionPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveActionPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst* request, ::ressource::RemoveActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst* request, ::ressource::RemoveActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Get ressource action permission *
      virtual void GetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst* request, ::ressource::GetActionPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetActionPermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst* request, ::ressource::GetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst* request, ::ressource::GetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Create Permission for a dir (recursive) *
      virtual void CreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst* request, ::ressource::CreateDirPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateDirPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst* request, ::ressource::CreateDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst* request, ::ressource::CreateDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Rename file/dir permission *
      virtual void RenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst* request, ::ressource::RenameFilePermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RenameFilePermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst* request, ::ressource::RenameFilePermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst* request, ::ressource::RenameFilePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RenameFilePermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RenameFilePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete Permission for a dir (recursive) *
      virtual void DeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst* request, ::ressource::DeleteDirPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteDirPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst* request, ::ressource::DeleteDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst* request, ::ressource::DeleteDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete a single file permission *
      virtual void DeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst* request, ::ressource::DeleteFilePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteFilePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst* request, ::ressource::DeleteFilePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst* request, ::ressource::DeleteFilePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteFilePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteFilePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RegisterAccountRsp>* AsyncRegisterAccountRaw(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RegisterAccountRsp>* PrepareAsyncRegisterAccountRaw(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteAccountRsp>* AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteAccountRsp>* PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AuthenticateRsp>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AuthenticateRsp>* PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SynchronizeLdapRsp>* AsyncSynchronizeLdapRaw(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SynchronizeLdapRsp>* PrepareAsyncSynchronizeLdapRaw(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RefreshTokenRsp>* AsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RefreshTokenRsp>* PrepareAsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddAccountRoleRsp>* AsyncAddAccountRoleRaw(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddAccountRoleRsp>* PrepareAsyncAddAccountRoleRaw(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveAccountRoleRsp>* AsyncRemoveAccountRoleRaw(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveAccountRoleRsp>* PrepareAsyncRemoveAccountRoleRaw(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::CreateRoleRsp>* AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::CreateRoleRsp>* PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRoleRsp>* AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRoleRsp>* PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddRoleActionRsp>* AsyncAddRoleActionRaw(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddRoleActionRsp>* PrepareAsyncAddRoleActionRaw(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveRoleActionRsp>* AsyncRemoveRoleActionRaw(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveRoleActionRsp>* PrepareAsyncRemoveRoleActionRaw(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddApplicationActionRsp>* AsyncAddApplicationActionRaw(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::AddApplicationActionRsp>* PrepareAsyncAddApplicationActionRaw(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveApplicationActionRsp>* AsyncRemoveApplicationActionRaw(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveApplicationActionRsp>* PrepareAsyncRemoveApplicationActionRaw(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllActionsRsp>* AsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllActionsRsp>* PrepareAsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetPermissionsRsp>* AsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetPermissionsRsp>* PrepareAsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetPermissionRsp>* AsyncSetPermissionRaw(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetPermissionRsp>* PrepareAsyncSetPermissionRaw(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeletePermissionsRsp>* AsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeletePermissionsRsp>* PrepareAsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetRessourceOwnerRsp>* AsyncSetRessourceOwnerRaw(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetRessourceOwnerRsp>* PrepareAsyncSetRessourceOwnerRaw(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetRessourceOwnersRsp>* AsyncGetRessourceOwnersRaw(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetRessourceOwnersRsp>* PrepareAsyncGetRessourceOwnersRaw(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRessourceOwnerRsp>* AsyncDeleteRessourceOwnerRaw(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRessourceOwnerRsp>* PrepareAsyncDeleteRessourceOwnerRaw(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRessourceOwnersRsp>* AsyncDeleteRessourceOwnersRaw(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRessourceOwnersRsp>* PrepareAsyncDeleteRessourceOwnersRaw(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllFilesInfoRsp>* AsyncGetAllFilesInfoRaw(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllFilesInfoRsp>* PrepareAsyncGetAllFilesInfoRaw(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateTokenRsp>* AsyncValidateTokenRaw(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateTokenRsp>* PrepareAsyncValidateTokenRaw(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateUserRessourceAccessRsp>* AsyncValidateUserRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateUserRessourceAccessRsp>* PrepareAsyncValidateUserRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateApplicationRessourceAccessRsp>* AsyncValidateApplicationRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateApplicationRessourceAccessRsp>* PrepareAsyncValidateApplicationRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateUserAccessRsp>* AsyncValidateUserAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateUserAccessRsp>* PrepareAsyncValidateUserAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateApplicationAccessRsp>* AsyncValidateApplicationAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ValidateApplicationAccessRsp>* PrepareAsyncValidateApplicationAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteAccountPermissionsRsp>* AsyncDeleteAccountPermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteAccountPermissionsRsp>* PrepareAsyncDeleteAccountPermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRolePermissionsRsp>* AsyncDeleteRolePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteRolePermissionsRsp>* PrepareAsyncDeleteRolePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllApplicationsInfoRsp>* AsyncGetAllApplicationsInfoRaw(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetAllApplicationsInfoRsp>* PrepareAsyncGetAllApplicationsInfoRaw(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteApplicationRsp>* AsyncDeleteApplicationRaw(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteApplicationRsp>* PrepareAsyncDeleteApplicationRaw(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::LogRsp>* AsyncLogRaw(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::LogRsp>* PrepareAsyncLogRaw(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ressource::GetLogRsp>* GetLogRaw(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ressource::GetLogRsp>* AsyncGetLogRaw(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ressource::GetLogRsp>* PrepareAsyncGetLogRaw(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteLogRsp>* AsyncDeleteLogRaw(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteLogRsp>* PrepareAsyncDeleteLogRaw(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ClearAllLogRsp>* AsyncClearAllLogRaw(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::ClearAllLogRsp>* PrepareAsyncClearAllLogRaw(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ressource::GetRessourcesRsp>* GetRessourcesRaw(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ressource::GetRessourcesRsp>* AsyncGetRessourcesRaw(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ressource::GetRessourcesRsp>* PrepareAsyncGetRessourcesRaw(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetRessourceRsp>* AsyncSetRessourceRaw(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetRessourceRsp>* PrepareAsyncSetRessourceRaw(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveRessourceRsp>* AsyncRemoveRessourceRaw(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveRessourceRsp>* PrepareAsyncRemoveRessourceRaw(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetActionPermissionRsp>* AsyncSetActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::SetActionPermissionRsp>* PrepareAsyncSetActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveActionPermissionRsp>* AsyncRemoveActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RemoveActionPermissionRsp>* PrepareAsyncRemoveActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetActionPermissionRsp>* AsyncGetActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::GetActionPermissionRsp>* PrepareAsyncGetActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::CreateDirPermissionsRsp>* AsyncCreateDirPermissionsRaw(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::CreateDirPermissionsRsp>* PrepareAsyncCreateDirPermissionsRaw(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RenameFilePermissionRsp>* AsyncRenameFilePermissionRaw(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::RenameFilePermissionRsp>* PrepareAsyncRenameFilePermissionRaw(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteDirPermissionsRsp>* AsyncDeleteDirPermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteDirPermissionsRsp>* PrepareAsyncDeleteDirPermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteFilePermissionsRsp>* AsyncDeleteFilePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ressource::DeleteFilePermissionsRsp>* PrepareAsyncDeleteFilePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::ressource::RegisterAccountRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RegisterAccountRsp>> AsyncRegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RegisterAccountRsp>>(AsyncRegisterAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RegisterAccountRsp>> PrepareAsyncRegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RegisterAccountRsp>>(PrepareAsyncRegisterAccountRaw(context, request, cq));
    }
    ::grpc::Status DeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::ressource::DeleteAccountRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountRsp>> AsyncDeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountRsp>>(AsyncDeleteAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountRsp>> PrepareAsyncDeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountRsp>>(PrepareAsyncDeleteAccountRaw(context, request, cq));
    }
    ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::ressource::AuthenticateRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AuthenticateRsp>> AsyncAuthenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AuthenticateRsp>>(AsyncAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AuthenticateRsp>> PrepareAsyncAuthenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AuthenticateRsp>>(PrepareAsyncAuthenticateRaw(context, request, cq));
    }
    ::grpc::Status SynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::ressource::SynchronizeLdapRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SynchronizeLdapRsp>> AsyncSynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SynchronizeLdapRsp>>(AsyncSynchronizeLdapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SynchronizeLdapRsp>> PrepareAsyncSynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SynchronizeLdapRsp>>(PrepareAsyncSynchronizeLdapRaw(context, request, cq));
    }
    ::grpc::Status RefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::ressource::RefreshTokenRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RefreshTokenRsp>> AsyncRefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RefreshTokenRsp>>(AsyncRefreshTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RefreshTokenRsp>> PrepareAsyncRefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RefreshTokenRsp>>(PrepareAsyncRefreshTokenRaw(context, request, cq));
    }
    ::grpc::Status AddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::ressource::AddAccountRoleRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AddAccountRoleRsp>> AsyncAddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AddAccountRoleRsp>>(AsyncAddAccountRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AddAccountRoleRsp>> PrepareAsyncAddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AddAccountRoleRsp>>(PrepareAsyncAddAccountRoleRaw(context, request, cq));
    }
    ::grpc::Status RemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::ressource::RemoveAccountRoleRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveAccountRoleRsp>> AsyncRemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveAccountRoleRsp>>(AsyncRemoveAccountRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveAccountRoleRsp>> PrepareAsyncRemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveAccountRoleRsp>>(PrepareAsyncRemoveAccountRoleRaw(context, request, cq));
    }
    ::grpc::Status CreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::ressource::CreateRoleRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::CreateRoleRsp>> AsyncCreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::CreateRoleRsp>>(AsyncCreateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::CreateRoleRsp>> PrepareAsyncCreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::CreateRoleRsp>>(PrepareAsyncCreateRoleRaw(context, request, cq));
    }
    ::grpc::Status DeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::ressource::DeleteRoleRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRoleRsp>> AsyncDeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRoleRsp>>(AsyncDeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRoleRsp>> PrepareAsyncDeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRoleRsp>>(PrepareAsyncDeleteRoleRaw(context, request, cq));
    }
    ::grpc::Status AddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::ressource::AddRoleActionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AddRoleActionRsp>> AsyncAddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AddRoleActionRsp>>(AsyncAddRoleActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AddRoleActionRsp>> PrepareAsyncAddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AddRoleActionRsp>>(PrepareAsyncAddRoleActionRaw(context, request, cq));
    }
    ::grpc::Status RemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::ressource::RemoveRoleActionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveRoleActionRsp>> AsyncRemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveRoleActionRsp>>(AsyncRemoveRoleActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveRoleActionRsp>> PrepareAsyncRemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveRoleActionRsp>>(PrepareAsyncRemoveRoleActionRaw(context, request, cq));
    }
    ::grpc::Status AddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::ressource::AddApplicationActionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AddApplicationActionRsp>> AsyncAddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AddApplicationActionRsp>>(AsyncAddApplicationActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AddApplicationActionRsp>> PrepareAsyncAddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::AddApplicationActionRsp>>(PrepareAsyncAddApplicationActionRaw(context, request, cq));
    }
    ::grpc::Status RemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::ressource::RemoveApplicationActionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveApplicationActionRsp>> AsyncRemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveApplicationActionRsp>>(AsyncRemoveApplicationActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveApplicationActionRsp>> PrepareAsyncRemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveApplicationActionRsp>>(PrepareAsyncRemoveApplicationActionRaw(context, request, cq));
    }
    ::grpc::Status GetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::ressource::GetAllActionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetAllActionsRsp>> AsyncGetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetAllActionsRsp>>(AsyncGetAllActionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetAllActionsRsp>> PrepareAsyncGetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetAllActionsRsp>>(PrepareAsyncGetAllActionsRaw(context, request, cq));
    }
    ::grpc::Status GetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::ressource::GetPermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetPermissionsRsp>> AsyncGetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetPermissionsRsp>>(AsyncGetPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetPermissionsRsp>> PrepareAsyncGetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetPermissionsRsp>>(PrepareAsyncGetPermissionsRaw(context, request, cq));
    }
    ::grpc::Status SetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::ressource::SetPermissionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetPermissionRsp>> AsyncSetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetPermissionRsp>>(AsyncSetPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetPermissionRsp>> PrepareAsyncSetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetPermissionRsp>>(PrepareAsyncSetPermissionRaw(context, request, cq));
    }
    ::grpc::Status DeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::ressource::DeletePermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeletePermissionsRsp>> AsyncDeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeletePermissionsRsp>>(AsyncDeletePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeletePermissionsRsp>> PrepareAsyncDeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeletePermissionsRsp>>(PrepareAsyncDeletePermissionsRaw(context, request, cq));
    }
    ::grpc::Status SetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::ressource::SetRessourceOwnerRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceOwnerRsp>> AsyncSetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceOwnerRsp>>(AsyncSetRessourceOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceOwnerRsp>> PrepareAsyncSetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceOwnerRsp>>(PrepareAsyncSetRessourceOwnerRaw(context, request, cq));
    }
    ::grpc::Status GetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::ressource::GetRessourceOwnersRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetRessourceOwnersRsp>> AsyncGetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetRessourceOwnersRsp>>(AsyncGetRessourceOwnersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetRessourceOwnersRsp>> PrepareAsyncGetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetRessourceOwnersRsp>>(PrepareAsyncGetRessourceOwnersRaw(context, request, cq));
    }
    ::grpc::Status DeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::ressource::DeleteRessourceOwnerRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnerRsp>> AsyncDeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnerRsp>>(AsyncDeleteRessourceOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnerRsp>> PrepareAsyncDeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnerRsp>>(PrepareAsyncDeleteRessourceOwnerRaw(context, request, cq));
    }
    ::grpc::Status DeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::ressource::DeleteRessourceOwnersRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnersRsp>> AsyncDeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnersRsp>>(AsyncDeleteRessourceOwnersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnersRsp>> PrepareAsyncDeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnersRsp>>(PrepareAsyncDeleteRessourceOwnersRaw(context, request, cq));
    }
    ::grpc::Status GetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::ressource::GetAllFilesInfoRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetAllFilesInfoRsp>> AsyncGetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetAllFilesInfoRsp>>(AsyncGetAllFilesInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetAllFilesInfoRsp>> PrepareAsyncGetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetAllFilesInfoRsp>>(PrepareAsyncGetAllFilesInfoRaw(context, request, cq));
    }
    ::grpc::Status ValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::ressource::ValidateTokenRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateTokenRsp>> AsyncValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateTokenRsp>>(AsyncValidateTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateTokenRsp>> PrepareAsyncValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateTokenRsp>>(PrepareAsyncValidateTokenRaw(context, request, cq));
    }
    ::grpc::Status ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::ressource::ValidateUserRessourceAccessRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserRessourceAccessRsp>> AsyncValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserRessourceAccessRsp>>(AsyncValidateUserRessourceAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserRessourceAccessRsp>> PrepareAsyncValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserRessourceAccessRsp>>(PrepareAsyncValidateUserRessourceAccessRaw(context, request, cq));
    }
    ::grpc::Status ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::ressource::ValidateApplicationRessourceAccessRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationRessourceAccessRsp>> AsyncValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationRessourceAccessRsp>>(AsyncValidateApplicationRessourceAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationRessourceAccessRsp>> PrepareAsyncValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationRessourceAccessRsp>>(PrepareAsyncValidateApplicationRessourceAccessRaw(context, request, cq));
    }
    ::grpc::Status ValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::ressource::ValidateUserAccessRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserAccessRsp>> AsyncValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserAccessRsp>>(AsyncValidateUserAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserAccessRsp>> PrepareAsyncValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserAccessRsp>>(PrepareAsyncValidateUserAccessRaw(context, request, cq));
    }
    ::grpc::Status ValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::ressource::ValidateApplicationAccessRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationAccessRsp>> AsyncValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationAccessRsp>>(AsyncValidateApplicationAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationAccessRsp>> PrepareAsyncValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationAccessRsp>>(PrepareAsyncValidateApplicationAccessRaw(context, request, cq));
    }
    ::grpc::Status DeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::ressource::DeleteAccountPermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountPermissionsRsp>> AsyncDeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountPermissionsRsp>>(AsyncDeleteAccountPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountPermissionsRsp>> PrepareAsyncDeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountPermissionsRsp>>(PrepareAsyncDeleteAccountPermissionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::ressource::DeleteRolePermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRolePermissionsRsp>> AsyncDeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRolePermissionsRsp>>(AsyncDeleteRolePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRolePermissionsRsp>> PrepareAsyncDeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRolePermissionsRsp>>(PrepareAsyncDeleteRolePermissionsRaw(context, request, cq));
    }
    ::grpc::Status GetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::ressource::GetAllApplicationsInfoRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetAllApplicationsInfoRsp>> AsyncGetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetAllApplicationsInfoRsp>>(AsyncGetAllApplicationsInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetAllApplicationsInfoRsp>> PrepareAsyncGetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetAllApplicationsInfoRsp>>(PrepareAsyncGetAllApplicationsInfoRaw(context, request, cq));
    }
    ::grpc::Status DeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::ressource::DeleteApplicationRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteApplicationRsp>> AsyncDeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteApplicationRsp>>(AsyncDeleteApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteApplicationRsp>> PrepareAsyncDeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteApplicationRsp>>(PrepareAsyncDeleteApplicationRaw(context, request, cq));
    }
    ::grpc::Status Log(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::ressource::LogRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::LogRsp>> AsyncLog(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::LogRsp>>(AsyncLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::LogRsp>> PrepareAsyncLog(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::LogRsp>>(PrepareAsyncLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ressource::GetLogRsp>> GetLog(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ressource::GetLogRsp>>(GetLogRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ressource::GetLogRsp>> AsyncGetLog(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ressource::GetLogRsp>>(AsyncGetLogRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ressource::GetLogRsp>> PrepareAsyncGetLog(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ressource::GetLogRsp>>(PrepareAsyncGetLogRaw(context, request, cq));
    }
    ::grpc::Status DeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::ressource::DeleteLogRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteLogRsp>> AsyncDeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteLogRsp>>(AsyncDeleteLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteLogRsp>> PrepareAsyncDeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteLogRsp>>(PrepareAsyncDeleteLogRaw(context, request, cq));
    }
    ::grpc::Status ClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::ressource::ClearAllLogRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ClearAllLogRsp>> AsyncClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ClearAllLogRsp>>(AsyncClearAllLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ClearAllLogRsp>> PrepareAsyncClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::ClearAllLogRsp>>(PrepareAsyncClearAllLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ressource::GetRessourcesRsp>> GetRessources(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ressource::GetRessourcesRsp>>(GetRessourcesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ressource::GetRessourcesRsp>> AsyncGetRessources(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ressource::GetRessourcesRsp>>(AsyncGetRessourcesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ressource::GetRessourcesRsp>> PrepareAsyncGetRessources(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ressource::GetRessourcesRsp>>(PrepareAsyncGetRessourcesRaw(context, request, cq));
    }
    ::grpc::Status SetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::ressource::SetRessourceRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceRsp>> AsyncSetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceRsp>>(AsyncSetRessourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceRsp>> PrepareAsyncSetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceRsp>>(PrepareAsyncSetRessourceRaw(context, request, cq));
    }
    ::grpc::Status RemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::ressource::RemoveRessourceRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveRessourceRsp>> AsyncRemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveRessourceRsp>>(AsyncRemoveRessourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveRessourceRsp>> PrepareAsyncRemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveRessourceRsp>>(PrepareAsyncRemoveRessourceRaw(context, request, cq));
    }
    ::grpc::Status SetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::ressource::SetActionPermissionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetActionPermissionRsp>> AsyncSetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetActionPermissionRsp>>(AsyncSetActionPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetActionPermissionRsp>> PrepareAsyncSetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::SetActionPermissionRsp>>(PrepareAsyncSetActionPermissionRaw(context, request, cq));
    }
    ::grpc::Status RemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::ressource::RemoveActionPermissionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveActionPermissionRsp>> AsyncRemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveActionPermissionRsp>>(AsyncRemoveActionPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveActionPermissionRsp>> PrepareAsyncRemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RemoveActionPermissionRsp>>(PrepareAsyncRemoveActionPermissionRaw(context, request, cq));
    }
    ::grpc::Status GetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::ressource::GetActionPermissionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetActionPermissionRsp>> AsyncGetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetActionPermissionRsp>>(AsyncGetActionPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetActionPermissionRsp>> PrepareAsyncGetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::GetActionPermissionRsp>>(PrepareAsyncGetActionPermissionRaw(context, request, cq));
    }
    ::grpc::Status CreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::ressource::CreateDirPermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::CreateDirPermissionsRsp>> AsyncCreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::CreateDirPermissionsRsp>>(AsyncCreateDirPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::CreateDirPermissionsRsp>> PrepareAsyncCreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::CreateDirPermissionsRsp>>(PrepareAsyncCreateDirPermissionsRaw(context, request, cq));
    }
    ::grpc::Status RenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::ressource::RenameFilePermissionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RenameFilePermissionRsp>> AsyncRenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RenameFilePermissionRsp>>(AsyncRenameFilePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RenameFilePermissionRsp>> PrepareAsyncRenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::RenameFilePermissionRsp>>(PrepareAsyncRenameFilePermissionRaw(context, request, cq));
    }
    ::grpc::Status DeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::ressource::DeleteDirPermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteDirPermissionsRsp>> AsyncDeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteDirPermissionsRsp>>(AsyncDeleteDirPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteDirPermissionsRsp>> PrepareAsyncDeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteDirPermissionsRsp>>(PrepareAsyncDeleteDirPermissionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::ressource::DeleteFilePermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteFilePermissionsRsp>> AsyncDeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteFilePermissionsRsp>>(AsyncDeleteFilePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteFilePermissionsRsp>> PrepareAsyncDeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ressource::DeleteFilePermissionsRsp>>(PrepareAsyncDeleteFilePermissionsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst* request, ::ressource::RegisterAccountRsp* response, std::function<void(::grpc::Status)>) override;
      void RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RegisterAccountRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst* request, ::ressource::RegisterAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterAccount(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst* request, ::ressource::RegisterAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RegisterAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RegisterAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst* request, ::ressource::DeleteAccountRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst* request, ::ressource::DeleteAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteAccount(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst* request, ::ressource::DeleteAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Authenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst* request, ::ressource::AuthenticateRsp* response, std::function<void(::grpc::Status)>) override;
      void Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AuthenticateRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Authenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst* request, ::ressource::AuthenticateRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Authenticate(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst* request, ::ressource::AuthenticateRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AuthenticateRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Authenticate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AuthenticateRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst* request, ::ressource::SynchronizeLdapRsp* response, std::function<void(::grpc::Status)>) override;
      void SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SynchronizeLdapRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst* request, ::ressource::SynchronizeLdapRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SynchronizeLdap(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst* request, ::ressource::SynchronizeLdapRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SynchronizeLdapRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SynchronizeLdap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SynchronizeLdapRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst* request, ::ressource::RefreshTokenRsp* response, std::function<void(::grpc::Status)>) override;
      void RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RefreshTokenRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst* request, ::ressource::RefreshTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RefreshToken(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst* request, ::ressource::RefreshTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RefreshTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RefreshToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RefreshTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst* request, ::ressource::AddAccountRoleRsp* response, std::function<void(::grpc::Status)>) override;
      void AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddAccountRoleRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst* request, ::ressource::AddAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddAccountRole(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst* request, ::ressource::AddAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst* request, ::ressource::RemoveAccountRoleRsp* response, std::function<void(::grpc::Status)>) override;
      void RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveAccountRoleRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst* request, ::ressource::RemoveAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveAccountRole(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst* request, ::ressource::RemoveAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveAccountRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst* request, ::ressource::CreateRoleRsp* response, std::function<void(::grpc::Status)>) override;
      void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateRoleRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst* request, ::ressource::CreateRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateRole(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst* request, ::ressource::CreateRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst* request, ::ressource::DeleteRoleRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRoleRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst* request, ::ressource::DeleteRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRole(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst* request, ::ressource::DeleteRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRoleRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst* request, ::ressource::AddRoleActionRsp* response, std::function<void(::grpc::Status)>) override;
      void AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddRoleActionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst* request, ::ressource::AddRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddRoleAction(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst* request, ::ressource::AddRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst* request, ::ressource::RemoveRoleActionRsp* response, std::function<void(::grpc::Status)>) override;
      void RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRoleActionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst* request, ::ressource::RemoveRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveRoleAction(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst* request, ::ressource::RemoveRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRoleActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst* request, ::ressource::AddApplicationActionRsp* response, std::function<void(::grpc::Status)>) override;
      void AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddApplicationActionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst* request, ::ressource::AddApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddApplicationAction(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst* request, ::ressource::AddApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::AddApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst* request, ::ressource::RemoveApplicationActionRsp* response, std::function<void(::grpc::Status)>) override;
      void RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveApplicationActionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst* request, ::ressource::RemoveApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveApplicationAction(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst* request, ::ressource::RemoveApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveApplicationActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst* request, ::ressource::GetAllActionsRsp* response, std::function<void(::grpc::Status)>) override;
      void GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllActionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst* request, ::ressource::GetAllActionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllActions(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst* request, ::ressource::GetAllActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllActionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst* request, ::ressource::GetPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst* request, ::ressource::GetPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPermissions(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst* request, ::ressource::GetPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst* request, ::ressource::SetPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      void SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst* request, ::ressource::SetPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPermission(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst* request, ::ressource::SetPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst* request, ::ressource::DeletePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeletePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst* request, ::ressource::DeletePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeletePermissions(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst* request, ::ressource::DeletePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeletePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeletePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeletePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst* request, ::ressource::SetRessourceOwnerRsp* response, std::function<void(::grpc::Status)>) override;
      void SetRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceOwnerRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst* request, ::ressource::SetRessourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetRessourceOwner(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst* request, ::ressource::SetRessourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst* request, ::ressource::GetRessourceOwnersRsp* response, std::function<void(::grpc::Status)>) override;
      void GetRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetRessourceOwnersRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst* request, ::ressource::GetRessourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRessourceOwners(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst* request, ::ressource::GetRessourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetRessourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetRessourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst* request, ::ressource::DeleteRessourceOwnerRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnerRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst* request, ::ressource::DeleteRessourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRessourceOwner(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst* request, ::ressource::DeleteRessourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRessourceOwner(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst* request, ::ressource::DeleteRessourceOwnersRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnersRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst* request, ::ressource::DeleteRessourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRessourceOwners(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst* request, ::ressource::DeleteRessourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnersRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRessourceOwners(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRessourceOwnersRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst* request, ::ressource::GetAllFilesInfoRsp* response, std::function<void(::grpc::Status)>) override;
      void GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllFilesInfoRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst* request, ::ressource::GetAllFilesInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllFilesInfo(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst* request, ::ressource::GetAllFilesInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllFilesInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllFilesInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllFilesInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst* request, ::ressource::ValidateTokenRsp* response, std::function<void(::grpc::Status)>) override;
      void ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateTokenRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst* request, ::ressource::ValidateTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateToken(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst* request, ::ressource::ValidateTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateTokenRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateTokenRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst* request, ::ressource::ValidateUserRessourceAccessRsp* response, std::function<void(::grpc::Status)>) override;
      void ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserRessourceAccessRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst* request, ::ressource::ValidateUserRessourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst* request, ::ressource::ValidateUserRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserRessourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateUserRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, std::function<void(::grpc::Status)>) override;
      void ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateApplicationRessourceAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationRessourceAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst* request, ::ressource::ValidateUserAccessRsp* response, std::function<void(::grpc::Status)>) override;
      void ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserAccessRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst* request, ::ressource::ValidateUserAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateUserAccess(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst* request, ::ressource::ValidateUserAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateUserAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateUserAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst* request, ::ressource::ValidateApplicationAccessRsp* response, std::function<void(::grpc::Status)>) override;
      void ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationAccessRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst* request, ::ressource::ValidateApplicationAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateApplicationAccess(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst* request, ::ressource::ValidateApplicationAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateApplicationAccess(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ValidateApplicationAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst* request, ::ressource::DeleteAccountPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst* request, ::ressource::DeleteAccountPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteAccountPermissions(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst* request, ::ressource::DeleteAccountPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteAccountPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteAccountPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst* request, ::ressource::DeleteRolePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRolePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst* request, ::ressource::DeleteRolePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRolePermissions(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst* request, ::ressource::DeleteRolePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRolePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteRolePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteRolePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst* request, ::ressource::GetAllApplicationsInfoRsp* response, std::function<void(::grpc::Status)>) override;
      void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllApplicationsInfoRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst* request, ::ressource::GetAllApplicationsInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst* request, ::ressource::GetAllApplicationsInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllApplicationsInfoRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllApplicationsInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetAllApplicationsInfoRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst* request, ::ressource::DeleteApplicationRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteApplicationRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst* request, ::ressource::DeleteApplicationRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteApplication(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst* request, ::ressource::DeleteApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteApplicationRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Log(::grpc::ClientContext* context, const ::ressource::LogRqst* request, ::ressource::LogRsp* response, std::function<void(::grpc::Status)>) override;
      void Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::LogRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Log(::grpc::ClientContext* context, const ::ressource::LogRqst* request, ::ressource::LogRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Log(::grpc::ClientContext* context, const ::ressource::LogRqst* request, ::ressource::LogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::LogRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Log(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::LogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLog(::grpc::ClientContext* context, ::ressource::GetLogRqst* request, ::grpc::ClientReadReactor< ::ressource::GetLogRsp>* reactor) override;
      #else
      void GetLog(::grpc::ClientContext* context, ::ressource::GetLogRqst* request, ::grpc::experimental::ClientReadReactor< ::ressource::GetLogRsp>* reactor) override;
      #endif
      void DeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst* request, ::ressource::DeleteLogRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteLogRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst* request, ::ressource::DeleteLogRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteLog(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst* request, ::ressource::DeleteLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteLogRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst* request, ::ressource::ClearAllLogRsp* response, std::function<void(::grpc::Status)>) override;
      void ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ClearAllLogRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst* request, ::ressource::ClearAllLogRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ClearAllLog(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst* request, ::ressource::ClearAllLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ClearAllLogRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ClearAllLog(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::ClearAllLogRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRessources(::grpc::ClientContext* context, ::ressource::GetRessourcesRqst* request, ::grpc::ClientReadReactor< ::ressource::GetRessourcesRsp>* reactor) override;
      #else
      void GetRessources(::grpc::ClientContext* context, ::ressource::GetRessourcesRqst* request, ::grpc::experimental::ClientReadReactor< ::ressource::GetRessourcesRsp>* reactor) override;
      #endif
      void SetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst* request, ::ressource::SetRessourceRsp* response, std::function<void(::grpc::Status)>) override;
      void SetRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst* request, ::ressource::SetRessourceRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetRessource(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst* request, ::ressource::SetRessourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetRessourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst* request, ::ressource::RemoveRessourceRsp* response, std::function<void(::grpc::Status)>) override;
      void RemoveRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRessourceRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst* request, ::ressource::RemoveRessourceRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveRessource(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst* request, ::ressource::RemoveRessourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRessourceRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveRessource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveRessourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst* request, ::ressource::SetActionPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      void SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetActionPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst* request, ::ressource::SetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetActionPermission(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst* request, ::ressource::SetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::SetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst* request, ::ressource::RemoveActionPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      void RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveActionPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst* request, ::ressource::RemoveActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveActionPermission(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst* request, ::ressource::RemoveActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RemoveActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst* request, ::ressource::GetActionPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      void GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetActionPermissionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst* request, ::ressource::GetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetActionPermission(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst* request, ::ressource::GetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetActionPermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetActionPermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::GetActionPermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst* request, ::ressource::CreateDirPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateDirPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst* request, ::ressource::CreateDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateDirPermissions(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst* request, ::ressource::CreateDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::CreateDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst* request, ::ressource::RenameFilePermissionRsp* response, std::function<void(::grpc::Status)>) override;
      void RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RenameFilePermissionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst* request, ::ressource::RenameFilePermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RenameFilePermission(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst* request, ::ressource::RenameFilePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RenameFilePermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RenameFilePermission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::RenameFilePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst* request, ::ressource::DeleteDirPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteDirPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst* request, ::ressource::DeleteDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteDirPermissions(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst* request, ::ressource::DeleteDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteDirPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteDirPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteDirPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst* request, ::ressource::DeleteFilePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteFilePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst* request, ::ressource::DeleteFilePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteFilePermissions(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst* request, ::ressource::DeleteFilePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteFilePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteFilePermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ressource::DeleteFilePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ressource::RegisterAccountRsp>* AsyncRegisterAccountRaw(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RegisterAccountRsp>* PrepareAsyncRegisterAccountRaw(::grpc::ClientContext* context, const ::ressource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountRsp>* AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountRsp>* PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::ressource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::AuthenticateRsp>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::AuthenticateRsp>* PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::ressource::AuthenticateRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::SynchronizeLdapRsp>* AsyncSynchronizeLdapRaw(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::SynchronizeLdapRsp>* PrepareAsyncSynchronizeLdapRaw(::grpc::ClientContext* context, const ::ressource::SynchronizeLdapRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RefreshTokenRsp>* AsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RefreshTokenRsp>* PrepareAsyncRefreshTokenRaw(::grpc::ClientContext* context, const ::ressource::RefreshTokenRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::AddAccountRoleRsp>* AsyncAddAccountRoleRaw(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::AddAccountRoleRsp>* PrepareAsyncAddAccountRoleRaw(::grpc::ClientContext* context, const ::ressource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RemoveAccountRoleRsp>* AsyncRemoveAccountRoleRaw(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RemoveAccountRoleRsp>* PrepareAsyncRemoveAccountRoleRaw(::grpc::ClientContext* context, const ::ressource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::CreateRoleRsp>* AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::CreateRoleRsp>* PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::ressource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRoleRsp>* AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRoleRsp>* PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::ressource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::AddRoleActionRsp>* AsyncAddRoleActionRaw(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::AddRoleActionRsp>* PrepareAsyncAddRoleActionRaw(::grpc::ClientContext* context, const ::ressource::AddRoleActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RemoveRoleActionRsp>* AsyncRemoveRoleActionRaw(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RemoveRoleActionRsp>* PrepareAsyncRemoveRoleActionRaw(::grpc::ClientContext* context, const ::ressource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::AddApplicationActionRsp>* AsyncAddApplicationActionRaw(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::AddApplicationActionRsp>* PrepareAsyncAddApplicationActionRaw(::grpc::ClientContext* context, const ::ressource::AddApplicationActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RemoveApplicationActionRsp>* AsyncRemoveApplicationActionRaw(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RemoveApplicationActionRsp>* PrepareAsyncRemoveApplicationActionRaw(::grpc::ClientContext* context, const ::ressource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::GetAllActionsRsp>* AsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::GetAllActionsRsp>* PrepareAsyncGetAllActionsRaw(::grpc::ClientContext* context, const ::ressource::GetAllActionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::GetPermissionsRsp>* AsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::GetPermissionsRsp>* PrepareAsyncGetPermissionsRaw(::grpc::ClientContext* context, const ::ressource::GetPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::SetPermissionRsp>* AsyncSetPermissionRaw(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::SetPermissionRsp>* PrepareAsyncSetPermissionRaw(::grpc::ClientContext* context, const ::ressource::SetPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeletePermissionsRsp>* AsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeletePermissionsRsp>* PrepareAsyncDeletePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeletePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceOwnerRsp>* AsyncSetRessourceOwnerRaw(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceOwnerRsp>* PrepareAsyncSetRessourceOwnerRaw(::grpc::ClientContext* context, const ::ressource::SetRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::GetRessourceOwnersRsp>* AsyncGetRessourceOwnersRaw(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::GetRessourceOwnersRsp>* PrepareAsyncGetRessourceOwnersRaw(::grpc::ClientContext* context, const ::ressource::GetRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnerRsp>* AsyncDeleteRessourceOwnerRaw(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnerRsp>* PrepareAsyncDeleteRessourceOwnerRaw(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnersRsp>* AsyncDeleteRessourceOwnersRaw(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRessourceOwnersRsp>* PrepareAsyncDeleteRessourceOwnersRaw(::grpc::ClientContext* context, const ::ressource::DeleteRessourceOwnersRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::GetAllFilesInfoRsp>* AsyncGetAllFilesInfoRaw(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::GetAllFilesInfoRsp>* PrepareAsyncGetAllFilesInfoRaw(::grpc::ClientContext* context, const ::ressource::GetAllFilesInfoRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::ValidateTokenRsp>* AsyncValidateTokenRaw(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::ValidateTokenRsp>* PrepareAsyncValidateTokenRaw(::grpc::ClientContext* context, const ::ressource::ValidateTokenRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserRessourceAccessRsp>* AsyncValidateUserRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserRessourceAccessRsp>* PrepareAsyncValidateUserRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateUserRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationRessourceAccessRsp>* AsyncValidateApplicationRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationRessourceAccessRsp>* PrepareAsyncValidateApplicationRessourceAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserAccessRsp>* AsyncValidateUserAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::ValidateUserAccessRsp>* PrepareAsyncValidateUserAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateUserAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationAccessRsp>* AsyncValidateApplicationAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::ValidateApplicationAccessRsp>* PrepareAsyncValidateApplicationAccessRaw(::grpc::ClientContext* context, const ::ressource::ValidateApplicationAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountPermissionsRsp>* AsyncDeleteAccountPermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteAccountPermissionsRsp>* PrepareAsyncDeleteAccountPermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteAccountPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRolePermissionsRsp>* AsyncDeleteRolePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteRolePermissionsRsp>* PrepareAsyncDeleteRolePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteRolePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::GetAllApplicationsInfoRsp>* AsyncGetAllApplicationsInfoRaw(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::GetAllApplicationsInfoRsp>* PrepareAsyncGetAllApplicationsInfoRaw(::grpc::ClientContext* context, const ::ressource::GetAllApplicationsInfoRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteApplicationRsp>* AsyncDeleteApplicationRaw(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteApplicationRsp>* PrepareAsyncDeleteApplicationRaw(::grpc::ClientContext* context, const ::ressource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::LogRsp>* AsyncLogRaw(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::LogRsp>* PrepareAsyncLogRaw(::grpc::ClientContext* context, const ::ressource::LogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ressource::GetLogRsp>* GetLogRaw(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request) override;
    ::grpc::ClientAsyncReader< ::ressource::GetLogRsp>* AsyncGetLogRaw(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ressource::GetLogRsp>* PrepareAsyncGetLogRaw(::grpc::ClientContext* context, const ::ressource::GetLogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteLogRsp>* AsyncDeleteLogRaw(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteLogRsp>* PrepareAsyncDeleteLogRaw(::grpc::ClientContext* context, const ::ressource::DeleteLogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::ClearAllLogRsp>* AsyncClearAllLogRaw(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::ClearAllLogRsp>* PrepareAsyncClearAllLogRaw(::grpc::ClientContext* context, const ::ressource::ClearAllLogRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ressource::GetRessourcesRsp>* GetRessourcesRaw(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request) override;
    ::grpc::ClientAsyncReader< ::ressource::GetRessourcesRsp>* AsyncGetRessourcesRaw(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ressource::GetRessourcesRsp>* PrepareAsyncGetRessourcesRaw(::grpc::ClientContext* context, const ::ressource::GetRessourcesRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceRsp>* AsyncSetRessourceRaw(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::SetRessourceRsp>* PrepareAsyncSetRessourceRaw(::grpc::ClientContext* context, const ::ressource::SetRessourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RemoveRessourceRsp>* AsyncRemoveRessourceRaw(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RemoveRessourceRsp>* PrepareAsyncRemoveRessourceRaw(::grpc::ClientContext* context, const ::ressource::RemoveRessourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::SetActionPermissionRsp>* AsyncSetActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::SetActionPermissionRsp>* PrepareAsyncSetActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::SetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RemoveActionPermissionRsp>* AsyncRemoveActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RemoveActionPermissionRsp>* PrepareAsyncRemoveActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::RemoveActionPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::GetActionPermissionRsp>* AsyncGetActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::GetActionPermissionRsp>* PrepareAsyncGetActionPermissionRaw(::grpc::ClientContext* context, const ::ressource::GetActionPermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::CreateDirPermissionsRsp>* AsyncCreateDirPermissionsRaw(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::CreateDirPermissionsRsp>* PrepareAsyncCreateDirPermissionsRaw(::grpc::ClientContext* context, const ::ressource::CreateDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RenameFilePermissionRsp>* AsyncRenameFilePermissionRaw(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::RenameFilePermissionRsp>* PrepareAsyncRenameFilePermissionRaw(::grpc::ClientContext* context, const ::ressource::RenameFilePermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteDirPermissionsRsp>* AsyncDeleteDirPermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteDirPermissionsRsp>* PrepareAsyncDeleteDirPermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteDirPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteFilePermissionsRsp>* AsyncDeleteFilePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ressource::DeleteFilePermissionsRsp>* PrepareAsyncDeleteFilePermissionsRaw(::grpc::ClientContext* context, const ::ressource::DeleteFilePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_Authenticate_;
    const ::grpc::internal::RpcMethod rpcmethod_SynchronizeLdap_;
    const ::grpc::internal::RpcMethod rpcmethod_RefreshToken_;
    const ::grpc::internal::RpcMethod rpcmethod_AddAccountRole_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveAccountRole_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRole_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRole_;
    const ::grpc::internal::RpcMethod rpcmethod_AddRoleAction_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveRoleAction_;
    const ::grpc::internal::RpcMethod rpcmethod_AddApplicationAction_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveApplicationAction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllActions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPermission_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRessourceOwner_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRessourceOwners_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRessourceOwner_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRessourceOwners_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllFilesInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateToken_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateUserRessourceAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateApplicationRessourceAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateUserAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateApplicationAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAccountPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRolePermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllApplicationsInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteApplication_;
    const ::grpc::internal::RpcMethod rpcmethod_Log_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLog_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteLog_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearAllLog_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRessources_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRessource_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveRessource_;
    const ::grpc::internal::RpcMethod rpcmethod_SetActionPermission_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveActionPermission_;
    const ::grpc::internal::RpcMethod rpcmethod_GetActionPermission_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDirPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_RenameFilePermission_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDirPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFilePermissions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // * Register a new Account *
    virtual ::grpc::Status RegisterAccount(::grpc::ServerContext* context, const ::ressource::RegisterAccountRqst* request, ::ressource::RegisterAccountRsp* response);
    // * Delete an account *
    virtual ::grpc::Status DeleteAccount(::grpc::ServerContext* context, const ::ressource::DeleteAccountRqst* request, ::ressource::DeleteAccountRsp* response);
    // * Authenticate a user *
    virtual ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::ressource::AuthenticateRqst* request, ::ressource::AuthenticateRsp* response);
    // * Synchronize Ressource with LDAP if connection exist *
    virtual ::grpc::Status SynchronizeLdap(::grpc::ServerContext* context, const ::ressource::SynchronizeLdapRqst* request, ::ressource::SynchronizeLdapRsp* response);
    // * Refresh token get a new token *
    virtual ::grpc::Status RefreshToken(::grpc::ServerContext* context, const ::ressource::RefreshTokenRqst* request, ::ressource::RefreshTokenRsp* response);
    // * Add role to a given account *
    virtual ::grpc::Status AddAccountRole(::grpc::ServerContext* context, const ::ressource::AddAccountRoleRqst* request, ::ressource::AddAccountRoleRsp* response);
    // * Remove a role from a given account *
    virtual ::grpc::Status RemoveAccountRole(::grpc::ServerContext* context, const ::ressource::RemoveAccountRoleRqst* request, ::ressource::RemoveAccountRoleRsp* response);
    // * Create a role with given action list *
    virtual ::grpc::Status CreateRole(::grpc::ServerContext* context, const ::ressource::CreateRoleRqst* request, ::ressource::CreateRoleRsp* response);
    // * Delete a role with a given id *
    virtual ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::ressource::DeleteRoleRqst* request, ::ressource::DeleteRoleRsp* response);
    // * Append an action to existing role. *
    virtual ::grpc::Status AddRoleAction(::grpc::ServerContext* context, const ::ressource::AddRoleActionRqst* request, ::ressource::AddRoleActionRsp* response);
    // * Remove an action to existing role. *
    virtual ::grpc::Status RemoveRoleAction(::grpc::ServerContext* context, const ::ressource::RemoveRoleActionRqst* request, ::ressource::RemoveRoleActionRsp* response);
    // * Append an action to existing applications. *
    virtual ::grpc::Status AddApplicationAction(::grpc::ServerContext* context, const ::ressource::AddApplicationActionRqst* request, ::ressource::AddApplicationActionRsp* response);
    // * Remove an action to existing applications. *
    virtual ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* context, const ::ressource::RemoveApplicationActionRqst* request, ::ressource::RemoveApplicationActionRsp* response);
    // * Get all actions *
    virtual ::grpc::Status GetAllActions(::grpc::ServerContext* context, const ::ressource::GetAllActionsRqst* request, ::ressource::GetAllActionsRsp* response);
    // *  *
    virtual ::grpc::Status GetPermissions(::grpc::ServerContext* context, const ::ressource::GetPermissionsRqst* request, ::ressource::GetPermissionsRsp* response);
    // * Set a file permission, create new one if not already exist. *
    virtual ::grpc::Status SetPermission(::grpc::ServerContext* context, const ::ressource::SetPermissionRqst* request, ::ressource::SetPermissionRsp* response);
    // * Delete a file permissions *
    virtual ::grpc::Status DeletePermissions(::grpc::ServerContext* context, const ::ressource::DeletePermissionsRqst* request, ::ressource::DeletePermissionsRsp* response);
    // * Set Ressource owner *
    virtual ::grpc::Status SetRessourceOwner(::grpc::ServerContext* context, const ::ressource::SetRessourceOwnerRqst* request, ::ressource::SetRessourceOwnerRsp* response);
    // * Get the ressource owners *
    virtual ::grpc::Status GetRessourceOwners(::grpc::ServerContext* context, const ::ressource::GetRessourceOwnersRqst* request, ::ressource::GetRessourceOwnersRsp* response);
    // * Delete the ressource owner *
    virtual ::grpc::Status DeleteRessourceOwner(::grpc::ServerContext* context, const ::ressource::DeleteRessourceOwnerRqst* request, ::ressource::DeleteRessourceOwnerRsp* response);
    // * Delete the ressource owners *
    virtual ::grpc::Status DeleteRessourceOwners(::grpc::ServerContext* context, const ::ressource::DeleteRessourceOwnersRqst* request, ::ressource::DeleteRessourceOwnersRsp* response);
    // * Retrun a json string with all file info *
    virtual ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* context, const ::ressource::GetAllFilesInfoRqst* request, ::ressource::GetAllFilesInfoRsp* response);
    // * Validate a token *
    virtual ::grpc::Status ValidateToken(::grpc::ServerContext* context, const ::ressource::ValidateTokenRqst* request, ::ressource::ValidateTokenRsp* response);
    // * Validate if user can access a given ressource. *
    virtual ::grpc::Status ValidateUserRessourceAccess(::grpc::ServerContext* context, const ::ressource::ValidateUserRessourceAccessRqst* request, ::ressource::ValidateUserRessourceAccessRsp* response);
    // * Validate if application can access a given ressouce. *
    virtual ::grpc::Status ValidateApplicationRessourceAccess(::grpc::ServerContext* context, const ::ressource::ValidateApplicationRessourceAccessRqst* request, ::ressource::ValidateApplicationRessourceAccessRsp* response);
    // * Validate if user can access a given method. *
    virtual ::grpc::Status ValidateUserAccess(::grpc::ServerContext* context, const ::ressource::ValidateUserAccessRqst* request, ::ressource::ValidateUserAccessRsp* response);
    // * Validate if application can access a given method. *
    virtual ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* context, const ::ressource::ValidateApplicationAccessRqst* request, ::ressource::ValidateApplicationAccessRsp* response);
    // * Delete all permission for a given account *
    virtual ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* context, const ::ressource::DeleteAccountPermissionsRqst* request, ::ressource::DeleteAccountPermissionsRsp* response);
    // * Delete all permission for a given role *
    virtual ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* context, const ::ressource::DeleteRolePermissionsRqst* request, ::ressource::DeleteRolePermissionsRsp* response);
    // * Return a json string with all applications informations *
    virtual ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* context, const ::ressource::GetAllApplicationsInfoRqst* request, ::ressource::GetAllApplicationsInfoRsp* response);
    // * Delete an application from the server. *
    virtual ::grpc::Status DeleteApplication(::grpc::ServerContext* context, const ::ressource::DeleteApplicationRqst* request, ::ressource::DeleteApplicationRsp* response);
    // * Set a method into the log... *
    virtual ::grpc::Status Log(::grpc::ServerContext* context, const ::ressource::LogRqst* request, ::ressource::LogRsp* response);
    // * Get the list of logs *
    virtual ::grpc::Status GetLog(::grpc::ServerContext* context, const ::ressource::GetLogRqst* request, ::grpc::ServerWriter< ::ressource::GetLogRsp>* writer);
    // * Delete a single log entry *
    virtual ::grpc::Status DeleteLog(::grpc::ServerContext* context, const ::ressource::DeleteLogRqst* request, ::ressource::DeleteLogRsp* response);
    // * Delete all log *
    virtual ::grpc::Status ClearAllLog(::grpc::ServerContext* context, const ::ressource::ClearAllLogRqst* request, ::ressource::ClearAllLogRsp* response);
    // * Get all ressources 
    virtual ::grpc::Status GetRessources(::grpc::ServerContext* context, const ::ressource::GetRessourcesRqst* request, ::grpc::ServerWriter< ::ressource::GetRessourcesRsp>* writer);
    // * Set a ressource from a client (custom service) to globular 
    virtual ::grpc::Status SetRessource(::grpc::ServerContext* context, const ::ressource::SetRessourceRqst* request, ::ressource::SetRessourceRsp* response);
    // * Remove a ressource from a client (custom service) to globular 
    virtual ::grpc::Status RemoveRessource(::grpc::ServerContext* context, const ::ressource::RemoveRessourceRqst* request, ::ressource::RemoveRessourceRsp* response);
    // * Set ressource action permission *
    virtual ::grpc::Status SetActionPermission(::grpc::ServerContext* context, const ::ressource::SetActionPermissionRqst* request, ::ressource::SetActionPermissionRsp* response);
    // * Remove ressource action permission *
    virtual ::grpc::Status RemoveActionPermission(::grpc::ServerContext* context, const ::ressource::RemoveActionPermissionRqst* request, ::ressource::RemoveActionPermissionRsp* response);
    // * Get ressource action permission *
    virtual ::grpc::Status GetActionPermission(::grpc::ServerContext* context, const ::ressource::GetActionPermissionRqst* request, ::ressource::GetActionPermissionRsp* response);
    // * Create Permission for a dir (recursive) *
    virtual ::grpc::Status CreateDirPermissions(::grpc::ServerContext* context, const ::ressource::CreateDirPermissionsRqst* request, ::ressource::CreateDirPermissionsRsp* response);
    // * Rename file/dir permission *
    virtual ::grpc::Status RenameFilePermission(::grpc::ServerContext* context, const ::ressource::RenameFilePermissionRqst* request, ::ressource::RenameFilePermissionRsp* response);
    // * Delete Permission for a dir (recursive) *
    virtual ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* context, const ::ressource::DeleteDirPermissionsRqst* request, ::ressource::DeleteDirPermissionsRsp* response);
    // * Delete a single file permission *
    virtual ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* context, const ::ressource::DeleteFilePermissionsRqst* request, ::ressource::DeleteFilePermissionsRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterAccount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAccount(::grpc::ServerContext* /*context*/, const ::ressource::RegisterAccountRqst* /*request*/, ::ressource::RegisterAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterAccount(::grpc::ServerContext* context, ::ressource::RegisterAccountRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::RegisterAccountRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::ressource::DeleteAccountRqst* /*request*/, ::ressource::DeleteAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccount(::grpc::ServerContext* context, ::ressource::DeleteAccountRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::DeleteAccountRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Authenticate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::ressource::AuthenticateRqst* /*request*/, ::ressource::AuthenticateRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::ressource::AuthenticateRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::AuthenticateRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SynchronizeLdap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SynchronizeLdap() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SynchronizeLdap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchronizeLdap(::grpc::ServerContext* /*context*/, const ::ressource::SynchronizeLdapRqst* /*request*/, ::ressource::SynchronizeLdapRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynchronizeLdap(::grpc::ServerContext* context, ::ressource::SynchronizeLdapRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::SynchronizeLdapRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RefreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RefreshToken() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RefreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshToken(::grpc::ServerContext* /*context*/, const ::ressource::RefreshTokenRqst* /*request*/, ::ressource::RefreshTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRefreshToken(::grpc::ServerContext* context, ::ressource::RefreshTokenRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::RefreshTokenRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddAccountRole() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AddAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccountRole(::grpc::ServerContext* /*context*/, const ::ressource::AddAccountRoleRqst* /*request*/, ::ressource::AddAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddAccountRole(::grpc::ServerContext* context, ::ressource::AddAccountRoleRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::AddAccountRoleRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveAccountRole() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RemoveAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAccountRole(::grpc::ServerContext* /*context*/, const ::ressource::RemoveAccountRoleRqst* /*request*/, ::ressource::RemoveAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveAccountRole(::grpc::ServerContext* context, ::ressource::RemoveAccountRoleRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::RemoveAccountRoleRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRole() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::ressource::CreateRoleRqst* /*request*/, ::ressource::CreateRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRole(::grpc::ServerContext* context, ::ressource::CreateRoleRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::CreateRoleRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRole() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRoleRqst* /*request*/, ::ressource::DeleteRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRole(::grpc::ServerContext* context, ::ressource::DeleteRoleRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::DeleteRoleRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddRoleAction() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_AddRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleAction(::grpc::ServerContext* /*context*/, const ::ressource::AddRoleActionRqst* /*request*/, ::ressource::AddRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRoleAction(::grpc::ServerContext* context, ::ressource::AddRoleActionRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::AddRoleActionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveRoleAction() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_RemoveRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRoleAction(::grpc::ServerContext* /*context*/, const ::ressource::RemoveRoleActionRqst* /*request*/, ::ressource::RemoveRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveRoleAction(::grpc::ServerContext* context, ::ressource::RemoveRoleActionRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::RemoveRoleActionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddApplicationAction() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_AddApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddApplicationAction(::grpc::ServerContext* /*context*/, const ::ressource::AddApplicationActionRqst* /*request*/, ::ressource::AddApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddApplicationAction(::grpc::ServerContext* context, ::ressource::AddApplicationActionRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::AddApplicationActionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveApplicationAction() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_RemoveApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* /*context*/, const ::ressource::RemoveApplicationActionRqst* /*request*/, ::ressource::RemoveApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveApplicationAction(::grpc::ServerContext* context, ::ressource::RemoveApplicationActionRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::RemoveApplicationActionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllActions() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::ressource::GetAllActionsRqst* /*request*/, ::ressource::GetAllActionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllActions(::grpc::ServerContext* context, ::ressource::GetAllActionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::GetAllActionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPermissions() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::ressource::GetPermissionsRqst* /*request*/, ::ressource::GetPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissions(::grpc::ServerContext* context, ::ressource::GetPermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::GetPermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPermission() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::ressource::SetPermissionRqst* /*request*/, ::ressource::SetPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPermission(::grpc::ServerContext* context, ::ressource::SetPermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::SetPermissionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeletePermissionsRqst* /*request*/, ::ressource::DeletePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermissions(::grpc::ServerContext* context, ::ressource::DeletePermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::DeletePermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRessourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetRessourceOwner() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_SetRessourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRessourceOwner(::grpc::ServerContext* /*context*/, const ::ressource::SetRessourceOwnerRqst* /*request*/, ::ressource::SetRessourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRessourceOwner(::grpc::ServerContext* context, ::ressource::SetRessourceOwnerRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::SetRessourceOwnerRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRessourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRessourceOwners() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetRessourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRessourceOwners(::grpc::ServerContext* /*context*/, const ::ressource::GetRessourceOwnersRqst* /*request*/, ::ressource::GetRessourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRessourceOwners(::grpc::ServerContext* context, ::ressource::GetRessourceOwnersRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::GetRessourceOwnersRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRessourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRessourceOwner() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_DeleteRessourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRessourceOwner(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRessourceOwnerRqst* /*request*/, ::ressource::DeleteRessourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRessourceOwner(::grpc::ServerContext* context, ::ressource::DeleteRessourceOwnerRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::DeleteRessourceOwnerRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRessourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRessourceOwners() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_DeleteRessourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRessourceOwners(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRessourceOwnersRqst* /*request*/, ::ressource::DeleteRessourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRessourceOwners(::grpc::ServerContext* context, ::ressource::DeleteRessourceOwnersRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::DeleteRessourceOwnersRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllFilesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllFilesInfo() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_GetAllFilesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* /*context*/, const ::ressource::GetAllFilesInfoRqst* /*request*/, ::ressource::GetAllFilesInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllFilesInfo(::grpc::ServerContext* context, ::ressource::GetAllFilesInfoRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::GetAllFilesInfoRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateToken() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::ressource::ValidateTokenRqst* /*request*/, ::ressource::ValidateTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateToken(::grpc::ServerContext* context, ::ressource::ValidateTokenRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::ValidateTokenRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateUserRessourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateUserRessourceAccess() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_ValidateUserRessourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserRessourceAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateUserRessourceAccessRqst* /*request*/, ::ressource::ValidateUserRessourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateUserRessourceAccess(::grpc::ServerContext* context, ::ressource::ValidateUserRessourceAccessRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::ValidateUserRessourceAccessRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateApplicationRessourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateApplicationRessourceAccess() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_ValidateApplicationRessourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationRessourceAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateApplicationRessourceAccessRqst* /*request*/, ::ressource::ValidateApplicationRessourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateApplicationRessourceAccess(::grpc::ServerContext* context, ::ressource::ValidateApplicationRessourceAccessRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::ValidateApplicationRessourceAccessRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateUserAccess() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_ValidateUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateUserAccessRqst* /*request*/, ::ressource::ValidateUserAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateUserAccess(::grpc::ServerContext* context, ::ressource::ValidateUserAccessRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::ValidateUserAccessRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateApplicationAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateApplicationAccess() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_ValidateApplicationAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateApplicationAccessRqst* /*request*/, ::ressource::ValidateApplicationAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateApplicationAccess(::grpc::ServerContext* context, ::ressource::ValidateApplicationAccessRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::ValidateApplicationAccessRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAccountPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAccountPermissions() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_DeleteAccountPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteAccountPermissionsRqst* /*request*/, ::ressource::DeleteAccountPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccountPermissions(::grpc::ServerContext* context, ::ressource::DeleteAccountPermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::DeleteAccountPermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRolePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRolePermissions() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_DeleteRolePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRolePermissionsRqst* /*request*/, ::ressource::DeleteRolePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRolePermissions(::grpc::ServerContext* context, ::ressource::DeleteRolePermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::DeleteRolePermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllApplicationsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllApplicationsInfo() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_GetAllApplicationsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* /*context*/, const ::ressource::GetAllApplicationsInfoRqst* /*request*/, ::ressource::GetAllApplicationsInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllApplicationsInfo(::grpc::ServerContext* context, ::ressource::GetAllApplicationsInfoRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::GetAllApplicationsInfoRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteApplication() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_DeleteApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApplication(::grpc::ServerContext* /*context*/, const ::ressource::DeleteApplicationRqst* /*request*/, ::ressource::DeleteApplicationRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteApplication(::grpc::ServerContext* context, ::ressource::DeleteApplicationRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::DeleteApplicationRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Log() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::ressource::LogRqst* /*request*/, ::ressource::LogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLog(::grpc::ServerContext* context, ::ressource::LogRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::LogRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLog() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::ressource::GetLogRqst* /*request*/, ::grpc::ServerWriter< ::ressource::GetLogRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLog(::grpc::ServerContext* context, ::ressource::GetLogRqst* request, ::grpc::ServerAsyncWriter< ::ressource::GetLogRsp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(32, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteLog() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_DeleteLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* /*context*/, const ::ressource::DeleteLogRqst* /*request*/, ::ressource::DeleteLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLog(::grpc::ServerContext* context, ::ressource::DeleteLogRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::DeleteLogRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearAllLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearAllLog() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_ClearAllLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearAllLog(::grpc::ServerContext* /*context*/, const ::ressource::ClearAllLogRqst* /*request*/, ::ressource::ClearAllLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearAllLog(::grpc::ServerContext* context, ::ressource::ClearAllLogRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::ClearAllLogRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRessources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRessources() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_GetRessources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRessources(::grpc::ServerContext* /*context*/, const ::ressource::GetRessourcesRqst* /*request*/, ::grpc::ServerWriter< ::ressource::GetRessourcesRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRessources(::grpc::ServerContext* context, ::ressource::GetRessourcesRqst* request, ::grpc::ServerAsyncWriter< ::ressource::GetRessourcesRsp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(35, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRessource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetRessource() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_SetRessource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRessource(::grpc::ServerContext* /*context*/, const ::ressource::SetRessourceRqst* /*request*/, ::ressource::SetRessourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRessource(::grpc::ServerContext* context, ::ressource::SetRessourceRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::SetRessourceRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveRessource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveRessource() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_RemoveRessource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRessource(::grpc::ServerContext* /*context*/, const ::ressource::RemoveRessourceRqst* /*request*/, ::ressource::RemoveRessourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveRessource(::grpc::ServerContext* context, ::ressource::RemoveRessourceRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::RemoveRessourceRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetActionPermission() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_SetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::SetActionPermissionRqst* /*request*/, ::ressource::SetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetActionPermission(::grpc::ServerContext* context, ::ressource::SetActionPermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::SetActionPermissionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveActionPermission() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_RemoveActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::RemoveActionPermissionRqst* /*request*/, ::ressource::RemoveActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveActionPermission(::grpc::ServerContext* context, ::ressource::RemoveActionPermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::RemoveActionPermissionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetActionPermission() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_GetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::GetActionPermissionRqst* /*request*/, ::ressource::GetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetActionPermission(::grpc::ServerContext* context, ::ressource::GetActionPermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::GetActionPermissionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDirPermissions() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_CreateDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirPermissions(::grpc::ServerContext* /*context*/, const ::ressource::CreateDirPermissionsRqst* /*request*/, ::ressource::CreateDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDirPermissions(::grpc::ServerContext* context, ::ressource::CreateDirPermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::CreateDirPermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RenameFilePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RenameFilePermission() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_RenameFilePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameFilePermission(::grpc::ServerContext* /*context*/, const ::ressource::RenameFilePermissionRqst* /*request*/, ::ressource::RenameFilePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenameFilePermission(::grpc::ServerContext* context, ::ressource::RenameFilePermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::RenameFilePermissionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDirPermissions() {
      ::grpc::Service::MarkMethodAsync(43);
    }
    ~WithAsyncMethod_DeleteDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteDirPermissionsRqst* /*request*/, ::ressource::DeleteDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDirPermissions(::grpc::ServerContext* context, ::ressource::DeleteDirPermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::DeleteDirPermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFilePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteFilePermissions() {
      ::grpc::Service::MarkMethodAsync(44);
    }
    ~WithAsyncMethod_DeleteFilePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteFilePermissionsRqst* /*request*/, ::ressource::DeleteFilePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFilePermissions(::grpc::ServerContext* context, ::ressource::DeleteFilePermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::ressource::DeleteFilePermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterAccount<WithAsyncMethod_DeleteAccount<WithAsyncMethod_Authenticate<WithAsyncMethod_SynchronizeLdap<WithAsyncMethod_RefreshToken<WithAsyncMethod_AddAccountRole<WithAsyncMethod_RemoveAccountRole<WithAsyncMethod_CreateRole<WithAsyncMethod_DeleteRole<WithAsyncMethod_AddRoleAction<WithAsyncMethod_RemoveRoleAction<WithAsyncMethod_AddApplicationAction<WithAsyncMethod_RemoveApplicationAction<WithAsyncMethod_GetAllActions<WithAsyncMethod_GetPermissions<WithAsyncMethod_SetPermission<WithAsyncMethod_DeletePermissions<WithAsyncMethod_SetRessourceOwner<WithAsyncMethod_GetRessourceOwners<WithAsyncMethod_DeleteRessourceOwner<WithAsyncMethod_DeleteRessourceOwners<WithAsyncMethod_GetAllFilesInfo<WithAsyncMethod_ValidateToken<WithAsyncMethod_ValidateUserRessourceAccess<WithAsyncMethod_ValidateApplicationRessourceAccess<WithAsyncMethod_ValidateUserAccess<WithAsyncMethod_ValidateApplicationAccess<WithAsyncMethod_DeleteAccountPermissions<WithAsyncMethod_DeleteRolePermissions<WithAsyncMethod_GetAllApplicationsInfo<WithAsyncMethod_DeleteApplication<WithAsyncMethod_Log<WithAsyncMethod_GetLog<WithAsyncMethod_DeleteLog<WithAsyncMethod_ClearAllLog<WithAsyncMethod_GetRessources<WithAsyncMethod_SetRessource<WithAsyncMethod_RemoveRessource<WithAsyncMethod_SetActionPermission<WithAsyncMethod_RemoveActionPermission<WithAsyncMethod_GetActionPermission<WithAsyncMethod_CreateDirPermissions<WithAsyncMethod_RenameFilePermission<WithAsyncMethod_DeleteDirPermissions<WithAsyncMethod_DeleteFilePermissions<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RegisterAccountRqst, ::ressource::RegisterAccountRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::RegisterAccountRqst* request, ::ressource::RegisterAccountRsp* response) { return this->RegisterAccount(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterAccount(
        ::grpc::experimental::MessageAllocator< ::ressource::RegisterAccountRqst, ::ressource::RegisterAccountRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RegisterAccountRqst, ::ressource::RegisterAccountRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAccount(::grpc::ServerContext* /*context*/, const ::ressource::RegisterAccountRqst* /*request*/, ::ressource::RegisterAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::RegisterAccountRqst* /*request*/, ::ressource::RegisterAccountRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::RegisterAccountRqst* /*request*/, ::ressource::RegisterAccountRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteAccountRqst, ::ressource::DeleteAccountRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::DeleteAccountRqst* request, ::ressource::DeleteAccountRsp* response) { return this->DeleteAccount(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAccount(
        ::grpc::experimental::MessageAllocator< ::ressource::DeleteAccountRqst, ::ressource::DeleteAccountRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteAccountRqst, ::ressource::DeleteAccountRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::ressource::DeleteAccountRqst* /*request*/, ::ressource::DeleteAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::DeleteAccountRqst* /*request*/, ::ressource::DeleteAccountRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::DeleteAccountRqst* /*request*/, ::ressource::DeleteAccountRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Authenticate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::AuthenticateRqst, ::ressource::AuthenticateRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::AuthenticateRqst* request, ::ressource::AuthenticateRsp* response) { return this->Authenticate(context, request, response); }));}
    void SetMessageAllocatorFor_Authenticate(
        ::grpc::experimental::MessageAllocator< ::ressource::AuthenticateRqst, ::ressource::AuthenticateRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::AuthenticateRqst, ::ressource::AuthenticateRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::ressource::AuthenticateRqst* /*request*/, ::ressource::AuthenticateRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Authenticate(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::AuthenticateRqst* /*request*/, ::ressource::AuthenticateRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Authenticate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::AuthenticateRqst* /*request*/, ::ressource::AuthenticateRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SynchronizeLdap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SynchronizeLdap() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::SynchronizeLdapRqst, ::ressource::SynchronizeLdapRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::SynchronizeLdapRqst* request, ::ressource::SynchronizeLdapRsp* response) { return this->SynchronizeLdap(context, request, response); }));}
    void SetMessageAllocatorFor_SynchronizeLdap(
        ::grpc::experimental::MessageAllocator< ::ressource::SynchronizeLdapRqst, ::ressource::SynchronizeLdapRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::SynchronizeLdapRqst, ::ressource::SynchronizeLdapRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SynchronizeLdap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchronizeLdap(::grpc::ServerContext* /*context*/, const ::ressource::SynchronizeLdapRqst* /*request*/, ::ressource::SynchronizeLdapRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SynchronizeLdap(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::SynchronizeLdapRqst* /*request*/, ::ressource::SynchronizeLdapRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SynchronizeLdap(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::SynchronizeLdapRqst* /*request*/, ::ressource::SynchronizeLdapRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RefreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RefreshToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RefreshTokenRqst, ::ressource::RefreshTokenRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::RefreshTokenRqst* request, ::ressource::RefreshTokenRsp* response) { return this->RefreshToken(context, request, response); }));}
    void SetMessageAllocatorFor_RefreshToken(
        ::grpc::experimental::MessageAllocator< ::ressource::RefreshTokenRqst, ::ressource::RefreshTokenRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RefreshTokenRqst, ::ressource::RefreshTokenRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RefreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshToken(::grpc::ServerContext* /*context*/, const ::ressource::RefreshTokenRqst* /*request*/, ::ressource::RefreshTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RefreshToken(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::RefreshTokenRqst* /*request*/, ::ressource::RefreshTokenRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RefreshToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::RefreshTokenRqst* /*request*/, ::ressource::RefreshTokenRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddAccountRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::AddAccountRoleRqst, ::ressource::AddAccountRoleRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::AddAccountRoleRqst* request, ::ressource::AddAccountRoleRsp* response) { return this->AddAccountRole(context, request, response); }));}
    void SetMessageAllocatorFor_AddAccountRole(
        ::grpc::experimental::MessageAllocator< ::ressource::AddAccountRoleRqst, ::ressource::AddAccountRoleRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::AddAccountRoleRqst, ::ressource::AddAccountRoleRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccountRole(::grpc::ServerContext* /*context*/, const ::ressource::AddAccountRoleRqst* /*request*/, ::ressource::AddAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddAccountRole(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::AddAccountRoleRqst* /*request*/, ::ressource::AddAccountRoleRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddAccountRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::AddAccountRoleRqst* /*request*/, ::ressource::AddAccountRoleRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveAccountRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RemoveAccountRoleRqst, ::ressource::RemoveAccountRoleRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::RemoveAccountRoleRqst* request, ::ressource::RemoveAccountRoleRsp* response) { return this->RemoveAccountRole(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveAccountRole(
        ::grpc::experimental::MessageAllocator< ::ressource::RemoveAccountRoleRqst, ::ressource::RemoveAccountRoleRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RemoveAccountRoleRqst, ::ressource::RemoveAccountRoleRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAccountRole(::grpc::ServerContext* /*context*/, const ::ressource::RemoveAccountRoleRqst* /*request*/, ::ressource::RemoveAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveAccountRole(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::RemoveAccountRoleRqst* /*request*/, ::ressource::RemoveAccountRoleRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveAccountRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::RemoveAccountRoleRqst* /*request*/, ::ressource::RemoveAccountRoleRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::CreateRoleRqst, ::ressource::CreateRoleRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::CreateRoleRqst* request, ::ressource::CreateRoleRsp* response) { return this->CreateRole(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRole(
        ::grpc::experimental::MessageAllocator< ::ressource::CreateRoleRqst, ::ressource::CreateRoleRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::CreateRoleRqst, ::ressource::CreateRoleRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::ressource::CreateRoleRqst* /*request*/, ::ressource::CreateRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateRole(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::CreateRoleRqst* /*request*/, ::ressource::CreateRoleRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::CreateRoleRqst* /*request*/, ::ressource::CreateRoleRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteRoleRqst, ::ressource::DeleteRoleRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::DeleteRoleRqst* request, ::ressource::DeleteRoleRsp* response) { return this->DeleteRole(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRole(
        ::grpc::experimental::MessageAllocator< ::ressource::DeleteRoleRqst, ::ressource::DeleteRoleRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteRoleRqst, ::ressource::DeleteRoleRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRoleRqst* /*request*/, ::ressource::DeleteRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRole(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::DeleteRoleRqst* /*request*/, ::ressource::DeleteRoleRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::DeleteRoleRqst* /*request*/, ::ressource::DeleteRoleRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddRoleAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::AddRoleActionRqst, ::ressource::AddRoleActionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::AddRoleActionRqst* request, ::ressource::AddRoleActionRsp* response) { return this->AddRoleAction(context, request, response); }));}
    void SetMessageAllocatorFor_AddRoleAction(
        ::grpc::experimental::MessageAllocator< ::ressource::AddRoleActionRqst, ::ressource::AddRoleActionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::AddRoleActionRqst, ::ressource::AddRoleActionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleAction(::grpc::ServerContext* /*context*/, const ::ressource::AddRoleActionRqst* /*request*/, ::ressource::AddRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddRoleAction(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::AddRoleActionRqst* /*request*/, ::ressource::AddRoleActionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddRoleAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::AddRoleActionRqst* /*request*/, ::ressource::AddRoleActionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveRoleAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RemoveRoleActionRqst, ::ressource::RemoveRoleActionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::RemoveRoleActionRqst* request, ::ressource::RemoveRoleActionRsp* response) { return this->RemoveRoleAction(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveRoleAction(
        ::grpc::experimental::MessageAllocator< ::ressource::RemoveRoleActionRqst, ::ressource::RemoveRoleActionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RemoveRoleActionRqst, ::ressource::RemoveRoleActionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRoleAction(::grpc::ServerContext* /*context*/, const ::ressource::RemoveRoleActionRqst* /*request*/, ::ressource::RemoveRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveRoleAction(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::RemoveRoleActionRqst* /*request*/, ::ressource::RemoveRoleActionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveRoleAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::RemoveRoleActionRqst* /*request*/, ::ressource::RemoveRoleActionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddApplicationAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::AddApplicationActionRqst, ::ressource::AddApplicationActionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::AddApplicationActionRqst* request, ::ressource::AddApplicationActionRsp* response) { return this->AddApplicationAction(context, request, response); }));}
    void SetMessageAllocatorFor_AddApplicationAction(
        ::grpc::experimental::MessageAllocator< ::ressource::AddApplicationActionRqst, ::ressource::AddApplicationActionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::AddApplicationActionRqst, ::ressource::AddApplicationActionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddApplicationAction(::grpc::ServerContext* /*context*/, const ::ressource::AddApplicationActionRqst* /*request*/, ::ressource::AddApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddApplicationAction(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::AddApplicationActionRqst* /*request*/, ::ressource::AddApplicationActionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddApplicationAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::AddApplicationActionRqst* /*request*/, ::ressource::AddApplicationActionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveApplicationAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RemoveApplicationActionRqst, ::ressource::RemoveApplicationActionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::RemoveApplicationActionRqst* request, ::ressource::RemoveApplicationActionRsp* response) { return this->RemoveApplicationAction(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveApplicationAction(
        ::grpc::experimental::MessageAllocator< ::ressource::RemoveApplicationActionRqst, ::ressource::RemoveApplicationActionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RemoveApplicationActionRqst, ::ressource::RemoveApplicationActionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* /*context*/, const ::ressource::RemoveApplicationActionRqst* /*request*/, ::ressource::RemoveApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveApplicationAction(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::RemoveApplicationActionRqst* /*request*/, ::ressource::RemoveApplicationActionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveApplicationAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::RemoveApplicationActionRqst* /*request*/, ::ressource::RemoveApplicationActionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAllActions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::GetAllActionsRqst, ::ressource::GetAllActionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::GetAllActionsRqst* request, ::ressource::GetAllActionsRsp* response) { return this->GetAllActions(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllActions(
        ::grpc::experimental::MessageAllocator< ::ressource::GetAllActionsRqst, ::ressource::GetAllActionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::GetAllActionsRqst, ::ressource::GetAllActionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::ressource::GetAllActionsRqst* /*request*/, ::ressource::GetAllActionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllActions(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::GetAllActionsRqst* /*request*/, ::ressource::GetAllActionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllActions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::GetAllActionsRqst* /*request*/, ::ressource::GetAllActionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::GetPermissionsRqst, ::ressource::GetPermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::GetPermissionsRqst* request, ::ressource::GetPermissionsRsp* response) { return this->GetPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_GetPermissions(
        ::grpc::experimental::MessageAllocator< ::ressource::GetPermissionsRqst, ::ressource::GetPermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::GetPermissionsRqst, ::ressource::GetPermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::ressource::GetPermissionsRqst* /*request*/, ::ressource::GetPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::GetPermissionsRqst* /*request*/, ::ressource::GetPermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::GetPermissionsRqst* /*request*/, ::ressource::GetPermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::SetPermissionRqst, ::ressource::SetPermissionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::SetPermissionRqst* request, ::ressource::SetPermissionRsp* response) { return this->SetPermission(context, request, response); }));}
    void SetMessageAllocatorFor_SetPermission(
        ::grpc::experimental::MessageAllocator< ::ressource::SetPermissionRqst, ::ressource::SetPermissionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::SetPermissionRqst, ::ressource::SetPermissionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::ressource::SetPermissionRqst* /*request*/, ::ressource::SetPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::SetPermissionRqst* /*request*/, ::ressource::SetPermissionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::SetPermissionRqst* /*request*/, ::ressource::SetPermissionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeletePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(16,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeletePermissionsRqst, ::ressource::DeletePermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::DeletePermissionsRqst* request, ::ressource::DeletePermissionsRsp* response) { return this->DeletePermissions(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePermissions(
        ::grpc::experimental::MessageAllocator< ::ressource::DeletePermissionsRqst, ::ressource::DeletePermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(16);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeletePermissionsRqst, ::ressource::DeletePermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeletePermissionsRqst* /*request*/, ::ressource::DeletePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeletePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::DeletePermissionsRqst* /*request*/, ::ressource::DeletePermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeletePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::DeletePermissionsRqst* /*request*/, ::ressource::DeletePermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetRessourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetRessourceOwner() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(17,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::SetRessourceOwnerRqst, ::ressource::SetRessourceOwnerRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::SetRessourceOwnerRqst* request, ::ressource::SetRessourceOwnerRsp* response) { return this->SetRessourceOwner(context, request, response); }));}
    void SetMessageAllocatorFor_SetRessourceOwner(
        ::grpc::experimental::MessageAllocator< ::ressource::SetRessourceOwnerRqst, ::ressource::SetRessourceOwnerRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(17);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::SetRessourceOwnerRqst, ::ressource::SetRessourceOwnerRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetRessourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRessourceOwner(::grpc::ServerContext* /*context*/, const ::ressource::SetRessourceOwnerRqst* /*request*/, ::ressource::SetRessourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetRessourceOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::SetRessourceOwnerRqst* /*request*/, ::ressource::SetRessourceOwnerRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetRessourceOwner(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::SetRessourceOwnerRqst* /*request*/, ::ressource::SetRessourceOwnerRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRessourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRessourceOwners() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(18,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::GetRessourceOwnersRqst, ::ressource::GetRessourceOwnersRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::GetRessourceOwnersRqst* request, ::ressource::GetRessourceOwnersRsp* response) { return this->GetRessourceOwners(context, request, response); }));}
    void SetMessageAllocatorFor_GetRessourceOwners(
        ::grpc::experimental::MessageAllocator< ::ressource::GetRessourceOwnersRqst, ::ressource::GetRessourceOwnersRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(18);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::GetRessourceOwnersRqst, ::ressource::GetRessourceOwnersRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRessourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRessourceOwners(::grpc::ServerContext* /*context*/, const ::ressource::GetRessourceOwnersRqst* /*request*/, ::ressource::GetRessourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRessourceOwners(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::GetRessourceOwnersRqst* /*request*/, ::ressource::GetRessourceOwnersRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRessourceOwners(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::GetRessourceOwnersRqst* /*request*/, ::ressource::GetRessourceOwnersRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteRessourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteRessourceOwner() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(19,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteRessourceOwnerRqst, ::ressource::DeleteRessourceOwnerRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::DeleteRessourceOwnerRqst* request, ::ressource::DeleteRessourceOwnerRsp* response) { return this->DeleteRessourceOwner(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRessourceOwner(
        ::grpc::experimental::MessageAllocator< ::ressource::DeleteRessourceOwnerRqst, ::ressource::DeleteRessourceOwnerRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(19);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteRessourceOwnerRqst, ::ressource::DeleteRessourceOwnerRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteRessourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRessourceOwner(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRessourceOwnerRqst* /*request*/, ::ressource::DeleteRessourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRessourceOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::DeleteRessourceOwnerRqst* /*request*/, ::ressource::DeleteRessourceOwnerRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRessourceOwner(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::DeleteRessourceOwnerRqst* /*request*/, ::ressource::DeleteRessourceOwnerRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteRessourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteRessourceOwners() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(20,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteRessourceOwnersRqst, ::ressource::DeleteRessourceOwnersRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::DeleteRessourceOwnersRqst* request, ::ressource::DeleteRessourceOwnersRsp* response) { return this->DeleteRessourceOwners(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRessourceOwners(
        ::grpc::experimental::MessageAllocator< ::ressource::DeleteRessourceOwnersRqst, ::ressource::DeleteRessourceOwnersRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(20);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteRessourceOwnersRqst, ::ressource::DeleteRessourceOwnersRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteRessourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRessourceOwners(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRessourceOwnersRqst* /*request*/, ::ressource::DeleteRessourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRessourceOwners(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::DeleteRessourceOwnersRqst* /*request*/, ::ressource::DeleteRessourceOwnersRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRessourceOwners(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::DeleteRessourceOwnersRqst* /*request*/, ::ressource::DeleteRessourceOwnersRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllFilesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAllFilesInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(21,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::GetAllFilesInfoRqst, ::ressource::GetAllFilesInfoRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::GetAllFilesInfoRqst* request, ::ressource::GetAllFilesInfoRsp* response) { return this->GetAllFilesInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllFilesInfo(
        ::grpc::experimental::MessageAllocator< ::ressource::GetAllFilesInfoRqst, ::ressource::GetAllFilesInfoRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(21);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::GetAllFilesInfoRqst, ::ressource::GetAllFilesInfoRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllFilesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* /*context*/, const ::ressource::GetAllFilesInfoRqst* /*request*/, ::ressource::GetAllFilesInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllFilesInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::GetAllFilesInfoRqst* /*request*/, ::ressource::GetAllFilesInfoRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllFilesInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::GetAllFilesInfoRqst* /*request*/, ::ressource::GetAllFilesInfoRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(22,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::ValidateTokenRqst, ::ressource::ValidateTokenRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::ValidateTokenRqst* request, ::ressource::ValidateTokenRsp* response) { return this->ValidateToken(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateToken(
        ::grpc::experimental::MessageAllocator< ::ressource::ValidateTokenRqst, ::ressource::ValidateTokenRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(22);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::ValidateTokenRqst, ::ressource::ValidateTokenRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::ressource::ValidateTokenRqst* /*request*/, ::ressource::ValidateTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateToken(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::ValidateTokenRqst* /*request*/, ::ressource::ValidateTokenRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::ValidateTokenRqst* /*request*/, ::ressource::ValidateTokenRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateUserRessourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateUserRessourceAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(23,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::ValidateUserRessourceAccessRqst, ::ressource::ValidateUserRessourceAccessRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::ValidateUserRessourceAccessRqst* request, ::ressource::ValidateUserRessourceAccessRsp* response) { return this->ValidateUserRessourceAccess(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateUserRessourceAccess(
        ::grpc::experimental::MessageAllocator< ::ressource::ValidateUserRessourceAccessRqst, ::ressource::ValidateUserRessourceAccessRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(23);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::ValidateUserRessourceAccessRqst, ::ressource::ValidateUserRessourceAccessRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateUserRessourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserRessourceAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateUserRessourceAccessRqst* /*request*/, ::ressource::ValidateUserRessourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateUserRessourceAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::ValidateUserRessourceAccessRqst* /*request*/, ::ressource::ValidateUserRessourceAccessRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateUserRessourceAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::ValidateUserRessourceAccessRqst* /*request*/, ::ressource::ValidateUserRessourceAccessRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateApplicationRessourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateApplicationRessourceAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(24,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::ValidateApplicationRessourceAccessRqst, ::ressource::ValidateApplicationRessourceAccessRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::ValidateApplicationRessourceAccessRqst* request, ::ressource::ValidateApplicationRessourceAccessRsp* response) { return this->ValidateApplicationRessourceAccess(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateApplicationRessourceAccess(
        ::grpc::experimental::MessageAllocator< ::ressource::ValidateApplicationRessourceAccessRqst, ::ressource::ValidateApplicationRessourceAccessRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(24);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::ValidateApplicationRessourceAccessRqst, ::ressource::ValidateApplicationRessourceAccessRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateApplicationRessourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationRessourceAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateApplicationRessourceAccessRqst* /*request*/, ::ressource::ValidateApplicationRessourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateApplicationRessourceAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::ValidateApplicationRessourceAccessRqst* /*request*/, ::ressource::ValidateApplicationRessourceAccessRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateApplicationRessourceAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::ValidateApplicationRessourceAccessRqst* /*request*/, ::ressource::ValidateApplicationRessourceAccessRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateUserAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(25,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::ValidateUserAccessRqst, ::ressource::ValidateUserAccessRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::ValidateUserAccessRqst* request, ::ressource::ValidateUserAccessRsp* response) { return this->ValidateUserAccess(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateUserAccess(
        ::grpc::experimental::MessageAllocator< ::ressource::ValidateUserAccessRqst, ::ressource::ValidateUserAccessRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(25);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::ValidateUserAccessRqst, ::ressource::ValidateUserAccessRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateUserAccessRqst* /*request*/, ::ressource::ValidateUserAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateUserAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::ValidateUserAccessRqst* /*request*/, ::ressource::ValidateUserAccessRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateUserAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::ValidateUserAccessRqst* /*request*/, ::ressource::ValidateUserAccessRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateApplicationAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateApplicationAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(26,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::ValidateApplicationAccessRqst, ::ressource::ValidateApplicationAccessRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::ValidateApplicationAccessRqst* request, ::ressource::ValidateApplicationAccessRsp* response) { return this->ValidateApplicationAccess(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateApplicationAccess(
        ::grpc::experimental::MessageAllocator< ::ressource::ValidateApplicationAccessRqst, ::ressource::ValidateApplicationAccessRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(26);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::ValidateApplicationAccessRqst, ::ressource::ValidateApplicationAccessRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateApplicationAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateApplicationAccessRqst* /*request*/, ::ressource::ValidateApplicationAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateApplicationAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::ValidateApplicationAccessRqst* /*request*/, ::ressource::ValidateApplicationAccessRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateApplicationAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::ValidateApplicationAccessRqst* /*request*/, ::ressource::ValidateApplicationAccessRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteAccountPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteAccountPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(27,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteAccountPermissionsRqst, ::ressource::DeleteAccountPermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::DeleteAccountPermissionsRqst* request, ::ressource::DeleteAccountPermissionsRsp* response) { return this->DeleteAccountPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAccountPermissions(
        ::grpc::experimental::MessageAllocator< ::ressource::DeleteAccountPermissionsRqst, ::ressource::DeleteAccountPermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(27);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteAccountPermissionsRqst, ::ressource::DeleteAccountPermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteAccountPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteAccountPermissionsRqst* /*request*/, ::ressource::DeleteAccountPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteAccountPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::DeleteAccountPermissionsRqst* /*request*/, ::ressource::DeleteAccountPermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteAccountPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::DeleteAccountPermissionsRqst* /*request*/, ::ressource::DeleteAccountPermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteRolePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteRolePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(28,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteRolePermissionsRqst, ::ressource::DeleteRolePermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::DeleteRolePermissionsRqst* request, ::ressource::DeleteRolePermissionsRsp* response) { return this->DeleteRolePermissions(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRolePermissions(
        ::grpc::experimental::MessageAllocator< ::ressource::DeleteRolePermissionsRqst, ::ressource::DeleteRolePermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(28);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteRolePermissionsRqst, ::ressource::DeleteRolePermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteRolePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRolePermissionsRqst* /*request*/, ::ressource::DeleteRolePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRolePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::DeleteRolePermissionsRqst* /*request*/, ::ressource::DeleteRolePermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRolePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::DeleteRolePermissionsRqst* /*request*/, ::ressource::DeleteRolePermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllApplicationsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAllApplicationsInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(29,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::GetAllApplicationsInfoRqst, ::ressource::GetAllApplicationsInfoRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::GetAllApplicationsInfoRqst* request, ::ressource::GetAllApplicationsInfoRsp* response) { return this->GetAllApplicationsInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllApplicationsInfo(
        ::grpc::experimental::MessageAllocator< ::ressource::GetAllApplicationsInfoRqst, ::ressource::GetAllApplicationsInfoRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(29);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::GetAllApplicationsInfoRqst, ::ressource::GetAllApplicationsInfoRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllApplicationsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* /*context*/, const ::ressource::GetAllApplicationsInfoRqst* /*request*/, ::ressource::GetAllApplicationsInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllApplicationsInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::GetAllApplicationsInfoRqst* /*request*/, ::ressource::GetAllApplicationsInfoRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllApplicationsInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::GetAllApplicationsInfoRqst* /*request*/, ::ressource::GetAllApplicationsInfoRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteApplication() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(30,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteApplicationRqst, ::ressource::DeleteApplicationRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::DeleteApplicationRqst* request, ::ressource::DeleteApplicationRsp* response) { return this->DeleteApplication(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteApplication(
        ::grpc::experimental::MessageAllocator< ::ressource::DeleteApplicationRqst, ::ressource::DeleteApplicationRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(30);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteApplicationRqst, ::ressource::DeleteApplicationRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApplication(::grpc::ServerContext* /*context*/, const ::ressource::DeleteApplicationRqst* /*request*/, ::ressource::DeleteApplicationRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteApplication(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::DeleteApplicationRqst* /*request*/, ::ressource::DeleteApplicationRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteApplication(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::DeleteApplicationRqst* /*request*/, ::ressource::DeleteApplicationRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Log() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(31,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::LogRqst, ::ressource::LogRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::LogRqst* request, ::ressource::LogRsp* response) { return this->Log(context, request, response); }));}
    void SetMessageAllocatorFor_Log(
        ::grpc::experimental::MessageAllocator< ::ressource::LogRqst, ::ressource::LogRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(31);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::LogRqst, ::ressource::LogRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::ressource::LogRqst* /*request*/, ::ressource::LogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Log(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::LogRqst* /*request*/, ::ressource::LogRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Log(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::LogRqst* /*request*/, ::ressource::LogRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(32,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::ressource::GetLogRqst, ::ressource::GetLogRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::GetLogRqst* request) { return this->GetLog(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::ressource::GetLogRqst* /*request*/, ::grpc::ServerWriter< ::ressource::GetLogRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::ressource::GetLogRsp>* GetLog(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::GetLogRqst* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::ressource::GetLogRsp>* GetLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::GetLogRqst* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(33,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteLogRqst, ::ressource::DeleteLogRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::DeleteLogRqst* request, ::ressource::DeleteLogRsp* response) { return this->DeleteLog(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteLog(
        ::grpc::experimental::MessageAllocator< ::ressource::DeleteLogRqst, ::ressource::DeleteLogRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(33);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteLogRqst, ::ressource::DeleteLogRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* /*context*/, const ::ressource::DeleteLogRqst* /*request*/, ::ressource::DeleteLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteLog(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::DeleteLogRqst* /*request*/, ::ressource::DeleteLogRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::DeleteLogRqst* /*request*/, ::ressource::DeleteLogRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ClearAllLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ClearAllLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(34,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::ClearAllLogRqst, ::ressource::ClearAllLogRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::ClearAllLogRqst* request, ::ressource::ClearAllLogRsp* response) { return this->ClearAllLog(context, request, response); }));}
    void SetMessageAllocatorFor_ClearAllLog(
        ::grpc::experimental::MessageAllocator< ::ressource::ClearAllLogRqst, ::ressource::ClearAllLogRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(34);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::ClearAllLogRqst, ::ressource::ClearAllLogRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ClearAllLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearAllLog(::grpc::ServerContext* /*context*/, const ::ressource::ClearAllLogRqst* /*request*/, ::ressource::ClearAllLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClearAllLog(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::ClearAllLogRqst* /*request*/, ::ressource::ClearAllLogRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClearAllLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::ClearAllLogRqst* /*request*/, ::ressource::ClearAllLogRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRessources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRessources() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(35,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::ressource::GetRessourcesRqst, ::ressource::GetRessourcesRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::GetRessourcesRqst* request) { return this->GetRessources(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetRessources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRessources(::grpc::ServerContext* /*context*/, const ::ressource::GetRessourcesRqst* /*request*/, ::grpc::ServerWriter< ::ressource::GetRessourcesRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::ressource::GetRessourcesRsp>* GetRessources(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::GetRessourcesRqst* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::ressource::GetRessourcesRsp>* GetRessources(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::GetRessourcesRqst* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetRessource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetRessource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(36,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::SetRessourceRqst, ::ressource::SetRessourceRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::SetRessourceRqst* request, ::ressource::SetRessourceRsp* response) { return this->SetRessource(context, request, response); }));}
    void SetMessageAllocatorFor_SetRessource(
        ::grpc::experimental::MessageAllocator< ::ressource::SetRessourceRqst, ::ressource::SetRessourceRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(36);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::SetRessourceRqst, ::ressource::SetRessourceRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetRessource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRessource(::grpc::ServerContext* /*context*/, const ::ressource::SetRessourceRqst* /*request*/, ::ressource::SetRessourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetRessource(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::SetRessourceRqst* /*request*/, ::ressource::SetRessourceRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetRessource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::SetRessourceRqst* /*request*/, ::ressource::SetRessourceRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveRessource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveRessource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(37,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RemoveRessourceRqst, ::ressource::RemoveRessourceRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::RemoveRessourceRqst* request, ::ressource::RemoveRessourceRsp* response) { return this->RemoveRessource(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveRessource(
        ::grpc::experimental::MessageAllocator< ::ressource::RemoveRessourceRqst, ::ressource::RemoveRessourceRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(37);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RemoveRessourceRqst, ::ressource::RemoveRessourceRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveRessource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRessource(::grpc::ServerContext* /*context*/, const ::ressource::RemoveRessourceRqst* /*request*/, ::ressource::RemoveRessourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveRessource(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::RemoveRessourceRqst* /*request*/, ::ressource::RemoveRessourceRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveRessource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::RemoveRessourceRqst* /*request*/, ::ressource::RemoveRessourceRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetActionPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(38,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::SetActionPermissionRqst, ::ressource::SetActionPermissionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::SetActionPermissionRqst* request, ::ressource::SetActionPermissionRsp* response) { return this->SetActionPermission(context, request, response); }));}
    void SetMessageAllocatorFor_SetActionPermission(
        ::grpc::experimental::MessageAllocator< ::ressource::SetActionPermissionRqst, ::ressource::SetActionPermissionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(38);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(38);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::SetActionPermissionRqst, ::ressource::SetActionPermissionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::SetActionPermissionRqst* /*request*/, ::ressource::SetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetActionPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::SetActionPermissionRqst* /*request*/, ::ressource::SetActionPermissionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetActionPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::SetActionPermissionRqst* /*request*/, ::ressource::SetActionPermissionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveActionPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(39,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RemoveActionPermissionRqst, ::ressource::RemoveActionPermissionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::RemoveActionPermissionRqst* request, ::ressource::RemoveActionPermissionRsp* response) { return this->RemoveActionPermission(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveActionPermission(
        ::grpc::experimental::MessageAllocator< ::ressource::RemoveActionPermissionRqst, ::ressource::RemoveActionPermissionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(39);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(39);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RemoveActionPermissionRqst, ::ressource::RemoveActionPermissionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::RemoveActionPermissionRqst* /*request*/, ::ressource::RemoveActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveActionPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::RemoveActionPermissionRqst* /*request*/, ::ressource::RemoveActionPermissionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveActionPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::RemoveActionPermissionRqst* /*request*/, ::ressource::RemoveActionPermissionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetActionPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(40,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::GetActionPermissionRqst, ::ressource::GetActionPermissionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::GetActionPermissionRqst* request, ::ressource::GetActionPermissionRsp* response) { return this->GetActionPermission(context, request, response); }));}
    void SetMessageAllocatorFor_GetActionPermission(
        ::grpc::experimental::MessageAllocator< ::ressource::GetActionPermissionRqst, ::ressource::GetActionPermissionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(40);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(40);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::GetActionPermissionRqst, ::ressource::GetActionPermissionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::GetActionPermissionRqst* /*request*/, ::ressource::GetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetActionPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::GetActionPermissionRqst* /*request*/, ::ressource::GetActionPermissionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetActionPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::GetActionPermissionRqst* /*request*/, ::ressource::GetActionPermissionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateDirPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(41,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::CreateDirPermissionsRqst, ::ressource::CreateDirPermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::CreateDirPermissionsRqst* request, ::ressource::CreateDirPermissionsRsp* response) { return this->CreateDirPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDirPermissions(
        ::grpc::experimental::MessageAllocator< ::ressource::CreateDirPermissionsRqst, ::ressource::CreateDirPermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(41);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(41);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::CreateDirPermissionsRqst, ::ressource::CreateDirPermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirPermissions(::grpc::ServerContext* /*context*/, const ::ressource::CreateDirPermissionsRqst* /*request*/, ::ressource::CreateDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateDirPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::CreateDirPermissionsRqst* /*request*/, ::ressource::CreateDirPermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateDirPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::CreateDirPermissionsRqst* /*request*/, ::ressource::CreateDirPermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RenameFilePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RenameFilePermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(42,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RenameFilePermissionRqst, ::ressource::RenameFilePermissionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::RenameFilePermissionRqst* request, ::ressource::RenameFilePermissionRsp* response) { return this->RenameFilePermission(context, request, response); }));}
    void SetMessageAllocatorFor_RenameFilePermission(
        ::grpc::experimental::MessageAllocator< ::ressource::RenameFilePermissionRqst, ::ressource::RenameFilePermissionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(42);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(42);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::RenameFilePermissionRqst, ::ressource::RenameFilePermissionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RenameFilePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameFilePermission(::grpc::ServerContext* /*context*/, const ::ressource::RenameFilePermissionRqst* /*request*/, ::ressource::RenameFilePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RenameFilePermission(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::RenameFilePermissionRqst* /*request*/, ::ressource::RenameFilePermissionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RenameFilePermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::RenameFilePermissionRqst* /*request*/, ::ressource::RenameFilePermissionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteDirPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(43,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteDirPermissionsRqst, ::ressource::DeleteDirPermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::DeleteDirPermissionsRqst* request, ::ressource::DeleteDirPermissionsRsp* response) { return this->DeleteDirPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDirPermissions(
        ::grpc::experimental::MessageAllocator< ::ressource::DeleteDirPermissionsRqst, ::ressource::DeleteDirPermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(43);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(43);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteDirPermissionsRqst, ::ressource::DeleteDirPermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteDirPermissionsRqst* /*request*/, ::ressource::DeleteDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteDirPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::DeleteDirPermissionsRqst* /*request*/, ::ressource::DeleteDirPermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteDirPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::DeleteDirPermissionsRqst* /*request*/, ::ressource::DeleteDirPermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteFilePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteFilePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(44,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteFilePermissionsRqst, ::ressource::DeleteFilePermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ressource::DeleteFilePermissionsRqst* request, ::ressource::DeleteFilePermissionsRsp* response) { return this->DeleteFilePermissions(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteFilePermissions(
        ::grpc::experimental::MessageAllocator< ::ressource::DeleteFilePermissionsRqst, ::ressource::DeleteFilePermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(44);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(44);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ressource::DeleteFilePermissionsRqst, ::ressource::DeleteFilePermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteFilePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteFilePermissionsRqst* /*request*/, ::ressource::DeleteFilePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteFilePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::ressource::DeleteFilePermissionsRqst* /*request*/, ::ressource::DeleteFilePermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteFilePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ressource::DeleteFilePermissionsRqst* /*request*/, ::ressource::DeleteFilePermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterAccount<ExperimentalWithCallbackMethod_DeleteAccount<ExperimentalWithCallbackMethod_Authenticate<ExperimentalWithCallbackMethod_SynchronizeLdap<ExperimentalWithCallbackMethod_RefreshToken<ExperimentalWithCallbackMethod_AddAccountRole<ExperimentalWithCallbackMethod_RemoveAccountRole<ExperimentalWithCallbackMethod_CreateRole<ExperimentalWithCallbackMethod_DeleteRole<ExperimentalWithCallbackMethod_AddRoleAction<ExperimentalWithCallbackMethod_RemoveRoleAction<ExperimentalWithCallbackMethod_AddApplicationAction<ExperimentalWithCallbackMethod_RemoveApplicationAction<ExperimentalWithCallbackMethod_GetAllActions<ExperimentalWithCallbackMethod_GetPermissions<ExperimentalWithCallbackMethod_SetPermission<ExperimentalWithCallbackMethod_DeletePermissions<ExperimentalWithCallbackMethod_SetRessourceOwner<ExperimentalWithCallbackMethod_GetRessourceOwners<ExperimentalWithCallbackMethod_DeleteRessourceOwner<ExperimentalWithCallbackMethod_DeleteRessourceOwners<ExperimentalWithCallbackMethod_GetAllFilesInfo<ExperimentalWithCallbackMethod_ValidateToken<ExperimentalWithCallbackMethod_ValidateUserRessourceAccess<ExperimentalWithCallbackMethod_ValidateApplicationRessourceAccess<ExperimentalWithCallbackMethod_ValidateUserAccess<ExperimentalWithCallbackMethod_ValidateApplicationAccess<ExperimentalWithCallbackMethod_DeleteAccountPermissions<ExperimentalWithCallbackMethod_DeleteRolePermissions<ExperimentalWithCallbackMethod_GetAllApplicationsInfo<ExperimentalWithCallbackMethod_DeleteApplication<ExperimentalWithCallbackMethod_Log<ExperimentalWithCallbackMethod_GetLog<ExperimentalWithCallbackMethod_DeleteLog<ExperimentalWithCallbackMethod_ClearAllLog<ExperimentalWithCallbackMethod_GetRessources<ExperimentalWithCallbackMethod_SetRessource<ExperimentalWithCallbackMethod_RemoveRessource<ExperimentalWithCallbackMethod_SetActionPermission<ExperimentalWithCallbackMethod_RemoveActionPermission<ExperimentalWithCallbackMethod_GetActionPermission<ExperimentalWithCallbackMethod_CreateDirPermissions<ExperimentalWithCallbackMethod_RenameFilePermission<ExperimentalWithCallbackMethod_DeleteDirPermissions<ExperimentalWithCallbackMethod_DeleteFilePermissions<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterAccount<ExperimentalWithCallbackMethod_DeleteAccount<ExperimentalWithCallbackMethod_Authenticate<ExperimentalWithCallbackMethod_SynchronizeLdap<ExperimentalWithCallbackMethod_RefreshToken<ExperimentalWithCallbackMethod_AddAccountRole<ExperimentalWithCallbackMethod_RemoveAccountRole<ExperimentalWithCallbackMethod_CreateRole<ExperimentalWithCallbackMethod_DeleteRole<ExperimentalWithCallbackMethod_AddRoleAction<ExperimentalWithCallbackMethod_RemoveRoleAction<ExperimentalWithCallbackMethod_AddApplicationAction<ExperimentalWithCallbackMethod_RemoveApplicationAction<ExperimentalWithCallbackMethod_GetAllActions<ExperimentalWithCallbackMethod_GetPermissions<ExperimentalWithCallbackMethod_SetPermission<ExperimentalWithCallbackMethod_DeletePermissions<ExperimentalWithCallbackMethod_SetRessourceOwner<ExperimentalWithCallbackMethod_GetRessourceOwners<ExperimentalWithCallbackMethod_DeleteRessourceOwner<ExperimentalWithCallbackMethod_DeleteRessourceOwners<ExperimentalWithCallbackMethod_GetAllFilesInfo<ExperimentalWithCallbackMethod_ValidateToken<ExperimentalWithCallbackMethod_ValidateUserRessourceAccess<ExperimentalWithCallbackMethod_ValidateApplicationRessourceAccess<ExperimentalWithCallbackMethod_ValidateUserAccess<ExperimentalWithCallbackMethod_ValidateApplicationAccess<ExperimentalWithCallbackMethod_DeleteAccountPermissions<ExperimentalWithCallbackMethod_DeleteRolePermissions<ExperimentalWithCallbackMethod_GetAllApplicationsInfo<ExperimentalWithCallbackMethod_DeleteApplication<ExperimentalWithCallbackMethod_Log<ExperimentalWithCallbackMethod_GetLog<ExperimentalWithCallbackMethod_DeleteLog<ExperimentalWithCallbackMethod_ClearAllLog<ExperimentalWithCallbackMethod_GetRessources<ExperimentalWithCallbackMethod_SetRessource<ExperimentalWithCallbackMethod_RemoveRessource<ExperimentalWithCallbackMethod_SetActionPermission<ExperimentalWithCallbackMethod_RemoveActionPermission<ExperimentalWithCallbackMethod_GetActionPermission<ExperimentalWithCallbackMethod_CreateDirPermissions<ExperimentalWithCallbackMethod_RenameFilePermission<ExperimentalWithCallbackMethod_DeleteDirPermissions<ExperimentalWithCallbackMethod_DeleteFilePermissions<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterAccount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAccount(::grpc::ServerContext* /*context*/, const ::ressource::RegisterAccountRqst* /*request*/, ::ressource::RegisterAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::ressource::DeleteAccountRqst* /*request*/, ::ressource::DeleteAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Authenticate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::ressource::AuthenticateRqst* /*request*/, ::ressource::AuthenticateRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SynchronizeLdap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SynchronizeLdap() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SynchronizeLdap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchronizeLdap(::grpc::ServerContext* /*context*/, const ::ressource::SynchronizeLdapRqst* /*request*/, ::ressource::SynchronizeLdapRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RefreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RefreshToken() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RefreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshToken(::grpc::ServerContext* /*context*/, const ::ressource::RefreshTokenRqst* /*request*/, ::ressource::RefreshTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddAccountRole() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AddAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccountRole(::grpc::ServerContext* /*context*/, const ::ressource::AddAccountRoleRqst* /*request*/, ::ressource::AddAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveAccountRole() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RemoveAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAccountRole(::grpc::ServerContext* /*context*/, const ::ressource::RemoveAccountRoleRqst* /*request*/, ::ressource::RemoveAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRole() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::ressource::CreateRoleRqst* /*request*/, ::ressource::CreateRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRole() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRoleRqst* /*request*/, ::ressource::DeleteRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddRoleAction() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_AddRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleAction(::grpc::ServerContext* /*context*/, const ::ressource::AddRoleActionRqst* /*request*/, ::ressource::AddRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveRoleAction() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_RemoveRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRoleAction(::grpc::ServerContext* /*context*/, const ::ressource::RemoveRoleActionRqst* /*request*/, ::ressource::RemoveRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddApplicationAction() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_AddApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddApplicationAction(::grpc::ServerContext* /*context*/, const ::ressource::AddApplicationActionRqst* /*request*/, ::ressource::AddApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveApplicationAction() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_RemoveApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* /*context*/, const ::ressource::RemoveApplicationActionRqst* /*request*/, ::ressource::RemoveApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllActions() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::ressource::GetAllActionsRqst* /*request*/, ::ressource::GetAllActionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPermissions() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::ressource::GetPermissionsRqst* /*request*/, ::ressource::GetPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPermission() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::ressource::SetPermissionRqst* /*request*/, ::ressource::SetPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeletePermissionsRqst* /*request*/, ::ressource::DeletePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRessourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetRessourceOwner() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_SetRessourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRessourceOwner(::grpc::ServerContext* /*context*/, const ::ressource::SetRessourceOwnerRqst* /*request*/, ::ressource::SetRessourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRessourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRessourceOwners() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetRessourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRessourceOwners(::grpc::ServerContext* /*context*/, const ::ressource::GetRessourceOwnersRqst* /*request*/, ::ressource::GetRessourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRessourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRessourceOwner() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_DeleteRessourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRessourceOwner(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRessourceOwnerRqst* /*request*/, ::ressource::DeleteRessourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRessourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRessourceOwners() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_DeleteRessourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRessourceOwners(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRessourceOwnersRqst* /*request*/, ::ressource::DeleteRessourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllFilesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllFilesInfo() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_GetAllFilesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* /*context*/, const ::ressource::GetAllFilesInfoRqst* /*request*/, ::ressource::GetAllFilesInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateToken() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::ressource::ValidateTokenRqst* /*request*/, ::ressource::ValidateTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateUserRessourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateUserRessourceAccess() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_ValidateUserRessourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserRessourceAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateUserRessourceAccessRqst* /*request*/, ::ressource::ValidateUserRessourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateApplicationRessourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateApplicationRessourceAccess() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_ValidateApplicationRessourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationRessourceAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateApplicationRessourceAccessRqst* /*request*/, ::ressource::ValidateApplicationRessourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateUserAccess() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_ValidateUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateUserAccessRqst* /*request*/, ::ressource::ValidateUserAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateApplicationAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateApplicationAccess() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_ValidateApplicationAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateApplicationAccessRqst* /*request*/, ::ressource::ValidateApplicationAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAccountPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAccountPermissions() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_DeleteAccountPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteAccountPermissionsRqst* /*request*/, ::ressource::DeleteAccountPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRolePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRolePermissions() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_DeleteRolePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRolePermissionsRqst* /*request*/, ::ressource::DeleteRolePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllApplicationsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllApplicationsInfo() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_GetAllApplicationsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* /*context*/, const ::ressource::GetAllApplicationsInfoRqst* /*request*/, ::ressource::GetAllApplicationsInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteApplication() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_DeleteApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApplication(::grpc::ServerContext* /*context*/, const ::ressource::DeleteApplicationRqst* /*request*/, ::ressource::DeleteApplicationRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Log() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::ressource::LogRqst* /*request*/, ::ressource::LogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLog() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::ressource::GetLogRqst* /*request*/, ::grpc::ServerWriter< ::ressource::GetLogRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteLog() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_DeleteLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* /*context*/, const ::ressource::DeleteLogRqst* /*request*/, ::ressource::DeleteLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearAllLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearAllLog() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_ClearAllLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearAllLog(::grpc::ServerContext* /*context*/, const ::ressource::ClearAllLogRqst* /*request*/, ::ressource::ClearAllLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRessources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRessources() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_GetRessources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRessources(::grpc::ServerContext* /*context*/, const ::ressource::GetRessourcesRqst* /*request*/, ::grpc::ServerWriter< ::ressource::GetRessourcesRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRessource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetRessource() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_SetRessource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRessource(::grpc::ServerContext* /*context*/, const ::ressource::SetRessourceRqst* /*request*/, ::ressource::SetRessourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveRessource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveRessource() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_RemoveRessource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRessource(::grpc::ServerContext* /*context*/, const ::ressource::RemoveRessourceRqst* /*request*/, ::ressource::RemoveRessourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetActionPermission() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_SetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::SetActionPermissionRqst* /*request*/, ::ressource::SetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveActionPermission() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_RemoveActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::RemoveActionPermissionRqst* /*request*/, ::ressource::RemoveActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetActionPermission() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_GetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::GetActionPermissionRqst* /*request*/, ::ressource::GetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDirPermissions() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_CreateDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirPermissions(::grpc::ServerContext* /*context*/, const ::ressource::CreateDirPermissionsRqst* /*request*/, ::ressource::CreateDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RenameFilePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RenameFilePermission() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_RenameFilePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameFilePermission(::grpc::ServerContext* /*context*/, const ::ressource::RenameFilePermissionRqst* /*request*/, ::ressource::RenameFilePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDirPermissions() {
      ::grpc::Service::MarkMethodGeneric(43);
    }
    ~WithGenericMethod_DeleteDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteDirPermissionsRqst* /*request*/, ::ressource::DeleteDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFilePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteFilePermissions() {
      ::grpc::Service::MarkMethodGeneric(44);
    }
    ~WithGenericMethod_DeleteFilePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteFilePermissionsRqst* /*request*/, ::ressource::DeleteFilePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterAccount() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAccount(::grpc::ServerContext* /*context*/, const ::ressource::RegisterAccountRqst* /*request*/, ::ressource::RegisterAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::ressource::DeleteAccountRqst* /*request*/, ::ressource::DeleteAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Authenticate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::ressource::AuthenticateRqst* /*request*/, ::ressource::AuthenticateRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SynchronizeLdap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SynchronizeLdap() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SynchronizeLdap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchronizeLdap(::grpc::ServerContext* /*context*/, const ::ressource::SynchronizeLdapRqst* /*request*/, ::ressource::SynchronizeLdapRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynchronizeLdap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RefreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RefreshToken() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RefreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshToken(::grpc::ServerContext* /*context*/, const ::ressource::RefreshTokenRqst* /*request*/, ::ressource::RefreshTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRefreshToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddAccountRole() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AddAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccountRole(::grpc::ServerContext* /*context*/, const ::ressource::AddAccountRoleRqst* /*request*/, ::ressource::AddAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddAccountRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveAccountRole() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RemoveAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAccountRole(::grpc::ServerContext* /*context*/, const ::ressource::RemoveAccountRoleRqst* /*request*/, ::ressource::RemoveAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveAccountRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRole() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::ressource::CreateRoleRqst* /*request*/, ::ressource::CreateRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRole() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRoleRqst* /*request*/, ::ressource::DeleteRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRole(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddRoleAction() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_AddRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleAction(::grpc::ServerContext* /*context*/, const ::ressource::AddRoleActionRqst* /*request*/, ::ressource::AddRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRoleAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveRoleAction() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_RemoveRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRoleAction(::grpc::ServerContext* /*context*/, const ::ressource::RemoveRoleActionRqst* /*request*/, ::ressource::RemoveRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveRoleAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddApplicationAction() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_AddApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddApplicationAction(::grpc::ServerContext* /*context*/, const ::ressource::AddApplicationActionRqst* /*request*/, ::ressource::AddApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddApplicationAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveApplicationAction() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_RemoveApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* /*context*/, const ::ressource::RemoveApplicationActionRqst* /*request*/, ::ressource::RemoveApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveApplicationAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllActions() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::ressource::GetAllActionsRqst* /*request*/, ::ressource::GetAllActionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllActions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPermissions() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::ressource::GetPermissionsRqst* /*request*/, ::ressource::GetPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPermission() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::ressource::SetPermissionRqst* /*request*/, ::ressource::SetPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeletePermissionsRqst* /*request*/, ::ressource::DeletePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRessourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetRessourceOwner() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_SetRessourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRessourceOwner(::grpc::ServerContext* /*context*/, const ::ressource::SetRessourceOwnerRqst* /*request*/, ::ressource::SetRessourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRessourceOwner(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRessourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRessourceOwners() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GetRessourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRessourceOwners(::grpc::ServerContext* /*context*/, const ::ressource::GetRessourceOwnersRqst* /*request*/, ::ressource::GetRessourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRessourceOwners(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRessourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRessourceOwner() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_DeleteRessourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRessourceOwner(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRessourceOwnerRqst* /*request*/, ::ressource::DeleteRessourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRessourceOwner(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRessourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRessourceOwners() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_DeleteRessourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRessourceOwners(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRessourceOwnersRqst* /*request*/, ::ressource::DeleteRessourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRessourceOwners(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllFilesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllFilesInfo() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_GetAllFilesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* /*context*/, const ::ressource::GetAllFilesInfoRqst* /*request*/, ::ressource::GetAllFilesInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllFilesInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateToken() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::ressource::ValidateTokenRqst* /*request*/, ::ressource::ValidateTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateUserRessourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateUserRessourceAccess() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_ValidateUserRessourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserRessourceAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateUserRessourceAccessRqst* /*request*/, ::ressource::ValidateUserRessourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateUserRessourceAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateApplicationRessourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateApplicationRessourceAccess() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_ValidateApplicationRessourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationRessourceAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateApplicationRessourceAccessRqst* /*request*/, ::ressource::ValidateApplicationRessourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateApplicationRessourceAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateUserAccess() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_ValidateUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateUserAccessRqst* /*request*/, ::ressource::ValidateUserAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateUserAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateApplicationAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateApplicationAccess() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_ValidateApplicationAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateApplicationAccessRqst* /*request*/, ::ressource::ValidateApplicationAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateApplicationAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAccountPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAccountPermissions() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_DeleteAccountPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteAccountPermissionsRqst* /*request*/, ::ressource::DeleteAccountPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccountPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRolePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRolePermissions() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_DeleteRolePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRolePermissionsRqst* /*request*/, ::ressource::DeleteRolePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRolePermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllApplicationsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllApplicationsInfo() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_GetAllApplicationsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* /*context*/, const ::ressource::GetAllApplicationsInfoRqst* /*request*/, ::ressource::GetAllApplicationsInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllApplicationsInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteApplication() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_DeleteApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApplication(::grpc::ServerContext* /*context*/, const ::ressource::DeleteApplicationRqst* /*request*/, ::ressource::DeleteApplicationRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteApplication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Log() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::ressource::LogRqst* /*request*/, ::ressource::LogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLog() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::ressource::GetLogRqst* /*request*/, ::grpc::ServerWriter< ::ressource::GetLogRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(32, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteLog() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_DeleteLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* /*context*/, const ::ressource::DeleteLogRqst* /*request*/, ::ressource::DeleteLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearAllLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearAllLog() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_ClearAllLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearAllLog(::grpc::ServerContext* /*context*/, const ::ressource::ClearAllLogRqst* /*request*/, ::ressource::ClearAllLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearAllLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRessources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRessources() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_GetRessources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRessources(::grpc::ServerContext* /*context*/, const ::ressource::GetRessourcesRqst* /*request*/, ::grpc::ServerWriter< ::ressource::GetRessourcesRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRessources(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(35, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRessource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetRessource() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_SetRessource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRessource(::grpc::ServerContext* /*context*/, const ::ressource::SetRessourceRqst* /*request*/, ::ressource::SetRessourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRessource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveRessource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveRessource() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_RemoveRessource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRessource(::grpc::ServerContext* /*context*/, const ::ressource::RemoveRessourceRqst* /*request*/, ::ressource::RemoveRessourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveRessource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetActionPermission() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_SetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::SetActionPermissionRqst* /*request*/, ::ressource::SetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetActionPermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveActionPermission() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_RemoveActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::RemoveActionPermissionRqst* /*request*/, ::ressource::RemoveActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveActionPermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetActionPermission() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_GetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::GetActionPermissionRqst* /*request*/, ::ressource::GetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetActionPermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDirPermissions() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_CreateDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirPermissions(::grpc::ServerContext* /*context*/, const ::ressource::CreateDirPermissionsRqst* /*request*/, ::ressource::CreateDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDirPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RenameFilePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RenameFilePermission() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_RenameFilePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameFilePermission(::grpc::ServerContext* /*context*/, const ::ressource::RenameFilePermissionRqst* /*request*/, ::ressource::RenameFilePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenameFilePermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDirPermissions() {
      ::grpc::Service::MarkMethodRaw(43);
    }
    ~WithRawMethod_DeleteDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteDirPermissionsRqst* /*request*/, ::ressource::DeleteDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDirPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteFilePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteFilePermissions() {
      ::grpc::Service::MarkMethodRaw(44);
    }
    ~WithRawMethod_DeleteFilePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteFilePermissionsRqst* /*request*/, ::ressource::DeleteFilePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFilePermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterAccount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAccount(::grpc::ServerContext* /*context*/, const ::ressource::RegisterAccountRqst* /*request*/, ::ressource::RegisterAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAccount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::ressource::DeleteAccountRqst* /*request*/, ::ressource::DeleteAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Authenticate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Authenticate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::ressource::AuthenticateRqst* /*request*/, ::ressource::AuthenticateRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Authenticate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Authenticate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SynchronizeLdap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SynchronizeLdap() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SynchronizeLdap(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SynchronizeLdap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchronizeLdap(::grpc::ServerContext* /*context*/, const ::ressource::SynchronizeLdapRqst* /*request*/, ::ressource::SynchronizeLdapRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SynchronizeLdap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SynchronizeLdap(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RefreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RefreshToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RefreshToken(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RefreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RefreshToken(::grpc::ServerContext* /*context*/, const ::ressource::RefreshTokenRqst* /*request*/, ::ressource::RefreshTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RefreshToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RefreshToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddAccountRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddAccountRole(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAccountRole(::grpc::ServerContext* /*context*/, const ::ressource::AddAccountRoleRqst* /*request*/, ::ressource::AddAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddAccountRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddAccountRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveAccountRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveAccountRole(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAccountRole(::grpc::ServerContext* /*context*/, const ::ressource::RemoveAccountRoleRqst* /*request*/, ::ressource::RemoveAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveAccountRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveAccountRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRole(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::ressource::CreateRoleRqst* /*request*/, ::ressource::CreateRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteRole() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRole(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRoleRqst* /*request*/, ::ressource::DeleteRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRole(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRole(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddRoleAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddRoleAction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRoleAction(::grpc::ServerContext* /*context*/, const ::ressource::AddRoleActionRqst* /*request*/, ::ressource::AddRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddRoleAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddRoleAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveRoleAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveRoleAction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRoleAction(::grpc::ServerContext* /*context*/, const ::ressource::RemoveRoleActionRqst* /*request*/, ::ressource::RemoveRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveRoleAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveRoleAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddApplicationAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddApplicationAction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddApplicationAction(::grpc::ServerContext* /*context*/, const ::ressource::AddApplicationActionRqst* /*request*/, ::ressource::AddApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddApplicationAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddApplicationAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveApplicationAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveApplicationAction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* /*context*/, const ::ressource::RemoveApplicationActionRqst* /*request*/, ::ressource::RemoveApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveApplicationAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveApplicationAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllActions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllActions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::ressource::GetAllActionsRqst* /*request*/, ::ressource::GetAllActionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllActions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllActions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::ressource::GetPermissionsRqst* /*request*/, ::ressource::GetPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::ressource::SetPermissionRqst* /*request*/, ::ressource::SetPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeletePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(16,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeletePermissionsRqst* /*request*/, ::ressource::DeletePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeletePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeletePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetRessourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetRessourceOwner() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(17,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetRessourceOwner(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetRessourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRessourceOwner(::grpc::ServerContext* /*context*/, const ::ressource::SetRessourceOwnerRqst* /*request*/, ::ressource::SetRessourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetRessourceOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetRessourceOwner(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRessourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRessourceOwners() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(18,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRessourceOwners(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRessourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRessourceOwners(::grpc::ServerContext* /*context*/, const ::ressource::GetRessourceOwnersRqst* /*request*/, ::ressource::GetRessourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRessourceOwners(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRessourceOwners(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteRessourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteRessourceOwner() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(19,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRessourceOwner(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteRessourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRessourceOwner(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRessourceOwnerRqst* /*request*/, ::ressource::DeleteRessourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRessourceOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRessourceOwner(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteRessourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteRessourceOwners() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(20,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRessourceOwners(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteRessourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRessourceOwners(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRessourceOwnersRqst* /*request*/, ::ressource::DeleteRessourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRessourceOwners(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRessourceOwners(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllFilesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllFilesInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(21,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllFilesInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllFilesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* /*context*/, const ::ressource::GetAllFilesInfoRqst* /*request*/, ::ressource::GetAllFilesInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllFilesInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllFilesInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(22,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateToken(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::ressource::ValidateTokenRqst* /*request*/, ::ressource::ValidateTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateUserRessourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateUserRessourceAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(23,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateUserRessourceAccess(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateUserRessourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserRessourceAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateUserRessourceAccessRqst* /*request*/, ::ressource::ValidateUserRessourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateUserRessourceAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateUserRessourceAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateApplicationRessourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateApplicationRessourceAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(24,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateApplicationRessourceAccess(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateApplicationRessourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationRessourceAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateApplicationRessourceAccessRqst* /*request*/, ::ressource::ValidateApplicationRessourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateApplicationRessourceAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateApplicationRessourceAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateUserAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(25,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateUserAccess(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateUserAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateUserAccessRqst* /*request*/, ::ressource::ValidateUserAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateUserAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateUserAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateApplicationAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateApplicationAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(26,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateApplicationAccess(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateApplicationAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateApplicationAccessRqst* /*request*/, ::ressource::ValidateApplicationAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateApplicationAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateApplicationAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteAccountPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteAccountPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(27,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAccountPermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteAccountPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteAccountPermissionsRqst* /*request*/, ::ressource::DeleteAccountPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteAccountPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteAccountPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteRolePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteRolePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(28,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRolePermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteRolePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRolePermissionsRqst* /*request*/, ::ressource::DeleteRolePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteRolePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteRolePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllApplicationsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllApplicationsInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(29,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllApplicationsInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllApplicationsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* /*context*/, const ::ressource::GetAllApplicationsInfoRqst* /*request*/, ::ressource::GetAllApplicationsInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllApplicationsInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllApplicationsInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteApplication() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(30,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteApplication(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteApplication(::grpc::ServerContext* /*context*/, const ::ressource::DeleteApplicationRqst* /*request*/, ::ressource::DeleteApplicationRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteApplication(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteApplication(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Log() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(31,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Log(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::ressource::LogRqst* /*request*/, ::ressource::LogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Log(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Log(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(32,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetLog(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::ressource::GetLogRqst* /*request*/, ::grpc::ServerWriter< ::ressource::GetLogRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(33,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteLog(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* /*context*/, const ::ressource::DeleteLogRqst* /*request*/, ::ressource::DeleteLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ClearAllLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ClearAllLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(34,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearAllLog(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ClearAllLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearAllLog(::grpc::ServerContext* /*context*/, const ::ressource::ClearAllLogRqst* /*request*/, ::ressource::ClearAllLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClearAllLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClearAllLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRessources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRessources() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(35,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetRessources(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRessources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRessources(::grpc::ServerContext* /*context*/, const ::ressource::GetRessourcesRqst* /*request*/, ::grpc::ServerWriter< ::ressource::GetRessourcesRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetRessources(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetRessources(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetRessource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetRessource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(36,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetRessource(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetRessource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRessource(::grpc::ServerContext* /*context*/, const ::ressource::SetRessourceRqst* /*request*/, ::ressource::SetRessourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetRessource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetRessource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveRessource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveRessource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(37,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveRessource(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveRessource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveRessource(::grpc::ServerContext* /*context*/, const ::ressource::RemoveRessourceRqst* /*request*/, ::ressource::RemoveRessourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveRessource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveRessource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetActionPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(38,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetActionPermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::SetActionPermissionRqst* /*request*/, ::ressource::SetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetActionPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetActionPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveActionPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(39,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveActionPermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::RemoveActionPermissionRqst* /*request*/, ::ressource::RemoveActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveActionPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveActionPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetActionPermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(40,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetActionPermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::GetActionPermissionRqst* /*request*/, ::ressource::GetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetActionPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetActionPermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateDirPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(41,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDirPermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDirPermissions(::grpc::ServerContext* /*context*/, const ::ressource::CreateDirPermissionsRqst* /*request*/, ::ressource::CreateDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateDirPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateDirPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RenameFilePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RenameFilePermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(42,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RenameFilePermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RenameFilePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameFilePermission(::grpc::ServerContext* /*context*/, const ::ressource::RenameFilePermissionRqst* /*request*/, ::ressource::RenameFilePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RenameFilePermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RenameFilePermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteDirPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(43,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDirPermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteDirPermissionsRqst* /*request*/, ::ressource::DeleteDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteDirPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteDirPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteFilePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteFilePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(44,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteFilePermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteFilePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteFilePermissionsRqst* /*request*/, ::ressource::DeleteFilePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteFilePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteFilePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterAccount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::RegisterAccountRqst, ::ressource::RegisterAccountRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::RegisterAccountRqst, ::ressource::RegisterAccountRsp>* streamer) {
                       return this->StreamedRegisterAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterAccount(::grpc::ServerContext* /*context*/, const ::ressource::RegisterAccountRqst* /*request*/, ::ressource::RegisterAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::RegisterAccountRqst,::ressource::RegisterAccountRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::DeleteAccountRqst, ::ressource::DeleteAccountRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::DeleteAccountRqst, ::ressource::DeleteAccountRsp>* streamer) {
                       return this->StreamedDeleteAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::ressource::DeleteAccountRqst* /*request*/, ::ressource::DeleteAccountRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::DeleteAccountRqst,::ressource::DeleteAccountRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Authenticate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::AuthenticateRqst, ::ressource::AuthenticateRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::AuthenticateRqst, ::ressource::AuthenticateRsp>* streamer) {
                       return this->StreamedAuthenticate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::ressource::AuthenticateRqst* /*request*/, ::ressource::AuthenticateRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthenticate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::AuthenticateRqst,::ressource::AuthenticateRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SynchronizeLdap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SynchronizeLdap() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::SynchronizeLdapRqst, ::ressource::SynchronizeLdapRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::SynchronizeLdapRqst, ::ressource::SynchronizeLdapRsp>* streamer) {
                       return this->StreamedSynchronizeLdap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SynchronizeLdap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SynchronizeLdap(::grpc::ServerContext* /*context*/, const ::ressource::SynchronizeLdapRqst* /*request*/, ::ressource::SynchronizeLdapRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSynchronizeLdap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::SynchronizeLdapRqst,::ressource::SynchronizeLdapRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RefreshToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RefreshToken() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::RefreshTokenRqst, ::ressource::RefreshTokenRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::RefreshTokenRqst, ::ressource::RefreshTokenRsp>* streamer) {
                       return this->StreamedRefreshToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RefreshToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RefreshToken(::grpc::ServerContext* /*context*/, const ::ressource::RefreshTokenRqst* /*request*/, ::ressource::RefreshTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRefreshToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::RefreshTokenRqst,::ressource::RefreshTokenRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddAccountRole() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::AddAccountRoleRqst, ::ressource::AddAccountRoleRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::AddAccountRoleRqst, ::ressource::AddAccountRoleRsp>* streamer) {
                       return this->StreamedAddAccountRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddAccountRole(::grpc::ServerContext* /*context*/, const ::ressource::AddAccountRoleRqst* /*request*/, ::ressource::AddAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddAccountRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::AddAccountRoleRqst,::ressource::AddAccountRoleRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveAccountRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveAccountRole() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::RemoveAccountRoleRqst, ::ressource::RemoveAccountRoleRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::RemoveAccountRoleRqst, ::ressource::RemoveAccountRoleRsp>* streamer) {
                       return this->StreamedRemoveAccountRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveAccountRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveAccountRole(::grpc::ServerContext* /*context*/, const ::ressource::RemoveAccountRoleRqst* /*request*/, ::ressource::RemoveAccountRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveAccountRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::RemoveAccountRoleRqst,::ressource::RemoveAccountRoleRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRole() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::CreateRoleRqst, ::ressource::CreateRoleRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::CreateRoleRqst, ::ressource::CreateRoleRsp>* streamer) {
                       return this->StreamedCreateRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* /*context*/, const ::ressource::CreateRoleRqst* /*request*/, ::ressource::CreateRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::CreateRoleRqst,::ressource::CreateRoleRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRole() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::DeleteRoleRqst, ::ressource::DeleteRoleRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::DeleteRoleRqst, ::ressource::DeleteRoleRsp>* streamer) {
                       return this->StreamedDeleteRole(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRoleRqst* /*request*/, ::ressource::DeleteRoleRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::DeleteRoleRqst,::ressource::DeleteRoleRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddRoleAction() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::AddRoleActionRqst, ::ressource::AddRoleActionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::AddRoleActionRqst, ::ressource::AddRoleActionRsp>* streamer) {
                       return this->StreamedAddRoleAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddRoleAction(::grpc::ServerContext* /*context*/, const ::ressource::AddRoleActionRqst* /*request*/, ::ressource::AddRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddRoleAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::AddRoleActionRqst,::ressource::AddRoleActionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveRoleAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveRoleAction() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::RemoveRoleActionRqst, ::ressource::RemoveRoleActionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::RemoveRoleActionRqst, ::ressource::RemoveRoleActionRsp>* streamer) {
                       return this->StreamedRemoveRoleAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveRoleAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveRoleAction(::grpc::ServerContext* /*context*/, const ::ressource::RemoveRoleActionRqst* /*request*/, ::ressource::RemoveRoleActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveRoleAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::RemoveRoleActionRqst,::ressource::RemoveRoleActionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddApplicationAction() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::AddApplicationActionRqst, ::ressource::AddApplicationActionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::AddApplicationActionRqst, ::ressource::AddApplicationActionRsp>* streamer) {
                       return this->StreamedAddApplicationAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddApplicationAction(::grpc::ServerContext* /*context*/, const ::ressource::AddApplicationActionRqst* /*request*/, ::ressource::AddApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddApplicationAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::AddApplicationActionRqst,::ressource::AddApplicationActionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveApplicationAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveApplicationAction() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::RemoveApplicationActionRqst, ::ressource::RemoveApplicationActionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::RemoveApplicationActionRqst, ::ressource::RemoveApplicationActionRsp>* streamer) {
                       return this->StreamedRemoveApplicationAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveApplicationAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveApplicationAction(::grpc::ServerContext* /*context*/, const ::ressource::RemoveApplicationActionRqst* /*request*/, ::ressource::RemoveApplicationActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveApplicationAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::RemoveApplicationActionRqst,::ressource::RemoveApplicationActionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllActions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllActions() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::GetAllActionsRqst, ::ressource::GetAllActionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::GetAllActionsRqst, ::ressource::GetAllActionsRsp>* streamer) {
                       return this->StreamedGetAllActions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllActions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllActions(::grpc::ServerContext* /*context*/, const ::ressource::GetAllActionsRqst* /*request*/, ::ressource::GetAllActionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllActions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::GetAllActionsRqst,::ressource::GetAllActionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPermissions() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::GetPermissionsRqst, ::ressource::GetPermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::GetPermissionsRqst, ::ressource::GetPermissionsRsp>* streamer) {
                       return this->StreamedGetPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPermissions(::grpc::ServerContext* /*context*/, const ::ressource::GetPermissionsRqst* /*request*/, ::ressource::GetPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::GetPermissionsRqst,::ressource::GetPermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPermission() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::SetPermissionRqst, ::ressource::SetPermissionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::SetPermissionRqst, ::ressource::SetPermissionRsp>* streamer) {
                       return this->StreamedSetPermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::ressource::SetPermissionRqst* /*request*/, ::ressource::SetPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::SetPermissionRqst,::ressource::SetPermissionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePermissions() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::DeletePermissionsRqst, ::ressource::DeletePermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::DeletePermissionsRqst, ::ressource::DeletePermissionsRsp>* streamer) {
                       return this->StreamedDeletePermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeletePermissionsRqst* /*request*/, ::ressource::DeletePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::DeletePermissionsRqst,::ressource::DeletePermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRessourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetRessourceOwner() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::SetRessourceOwnerRqst, ::ressource::SetRessourceOwnerRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::SetRessourceOwnerRqst, ::ressource::SetRessourceOwnerRsp>* streamer) {
                       return this->StreamedSetRessourceOwner(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetRessourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRessourceOwner(::grpc::ServerContext* /*context*/, const ::ressource::SetRessourceOwnerRqst* /*request*/, ::ressource::SetRessourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRessourceOwner(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::SetRessourceOwnerRqst,::ressource::SetRessourceOwnerRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRessourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRessourceOwners() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::GetRessourceOwnersRqst, ::ressource::GetRessourceOwnersRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::GetRessourceOwnersRqst, ::ressource::GetRessourceOwnersRsp>* streamer) {
                       return this->StreamedGetRessourceOwners(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRessourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRessourceOwners(::grpc::ServerContext* /*context*/, const ::ressource::GetRessourceOwnersRqst* /*request*/, ::ressource::GetRessourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRessourceOwners(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::GetRessourceOwnersRqst,::ressource::GetRessourceOwnersRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRessourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRessourceOwner() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::DeleteRessourceOwnerRqst, ::ressource::DeleteRessourceOwnerRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::DeleteRessourceOwnerRqst, ::ressource::DeleteRessourceOwnerRsp>* streamer) {
                       return this->StreamedDeleteRessourceOwner(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRessourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRessourceOwner(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRessourceOwnerRqst* /*request*/, ::ressource::DeleteRessourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRessourceOwner(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::DeleteRessourceOwnerRqst,::ressource::DeleteRessourceOwnerRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRessourceOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRessourceOwners() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::DeleteRessourceOwnersRqst, ::ressource::DeleteRessourceOwnersRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::DeleteRessourceOwnersRqst, ::ressource::DeleteRessourceOwnersRsp>* streamer) {
                       return this->StreamedDeleteRessourceOwners(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRessourceOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRessourceOwners(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRessourceOwnersRqst* /*request*/, ::ressource::DeleteRessourceOwnersRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRessourceOwners(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::DeleteRessourceOwnersRqst,::ressource::DeleteRessourceOwnersRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllFilesInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllFilesInfo() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::GetAllFilesInfoRqst, ::ressource::GetAllFilesInfoRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::GetAllFilesInfoRqst, ::ressource::GetAllFilesInfoRsp>* streamer) {
                       return this->StreamedGetAllFilesInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllFilesInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllFilesInfo(::grpc::ServerContext* /*context*/, const ::ressource::GetAllFilesInfoRqst* /*request*/, ::ressource::GetAllFilesInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllFilesInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::GetAllFilesInfoRqst,::ressource::GetAllFilesInfoRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateToken() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::ValidateTokenRqst, ::ressource::ValidateTokenRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::ValidateTokenRqst, ::ressource::ValidateTokenRsp>* streamer) {
                       return this->StreamedValidateToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateToken(::grpc::ServerContext* /*context*/, const ::ressource::ValidateTokenRqst* /*request*/, ::ressource::ValidateTokenRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::ValidateTokenRqst,::ressource::ValidateTokenRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateUserRessourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateUserRessourceAccess() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::ValidateUserRessourceAccessRqst, ::ressource::ValidateUserRessourceAccessRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::ValidateUserRessourceAccessRqst, ::ressource::ValidateUserRessourceAccessRsp>* streamer) {
                       return this->StreamedValidateUserRessourceAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateUserRessourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateUserRessourceAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateUserRessourceAccessRqst* /*request*/, ::ressource::ValidateUserRessourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateUserRessourceAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::ValidateUserRessourceAccessRqst,::ressource::ValidateUserRessourceAccessRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateApplicationRessourceAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateApplicationRessourceAccess() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::ValidateApplicationRessourceAccessRqst, ::ressource::ValidateApplicationRessourceAccessRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::ValidateApplicationRessourceAccessRqst, ::ressource::ValidateApplicationRessourceAccessRsp>* streamer) {
                       return this->StreamedValidateApplicationRessourceAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateApplicationRessourceAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateApplicationRessourceAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateApplicationRessourceAccessRqst* /*request*/, ::ressource::ValidateApplicationRessourceAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateApplicationRessourceAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::ValidateApplicationRessourceAccessRqst,::ressource::ValidateApplicationRessourceAccessRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateUserAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateUserAccess() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::ValidateUserAccessRqst, ::ressource::ValidateUserAccessRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::ValidateUserAccessRqst, ::ressource::ValidateUserAccessRsp>* streamer) {
                       return this->StreamedValidateUserAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateUserAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateUserAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateUserAccessRqst* /*request*/, ::ressource::ValidateUserAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateUserAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::ValidateUserAccessRqst,::ressource::ValidateUserAccessRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateApplicationAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateApplicationAccess() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::ValidateApplicationAccessRqst, ::ressource::ValidateApplicationAccessRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::ValidateApplicationAccessRqst, ::ressource::ValidateApplicationAccessRsp>* streamer) {
                       return this->StreamedValidateApplicationAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateApplicationAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateApplicationAccess(::grpc::ServerContext* /*context*/, const ::ressource::ValidateApplicationAccessRqst* /*request*/, ::ressource::ValidateApplicationAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateApplicationAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::ValidateApplicationAccessRqst,::ressource::ValidateApplicationAccessRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAccountPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAccountPermissions() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::DeleteAccountPermissionsRqst, ::ressource::DeleteAccountPermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::DeleteAccountPermissionsRqst, ::ressource::DeleteAccountPermissionsRsp>* streamer) {
                       return this->StreamedDeleteAccountPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAccountPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAccountPermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteAccountPermissionsRqst* /*request*/, ::ressource::DeleteAccountPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAccountPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::DeleteAccountPermissionsRqst,::ressource::DeleteAccountPermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRolePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRolePermissions() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::DeleteRolePermissionsRqst, ::ressource::DeleteRolePermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::DeleteRolePermissionsRqst, ::ressource::DeleteRolePermissionsRsp>* streamer) {
                       return this->StreamedDeleteRolePermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRolePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRolePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteRolePermissionsRqst* /*request*/, ::ressource::DeleteRolePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRolePermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::DeleteRolePermissionsRqst,::ressource::DeleteRolePermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllApplicationsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllApplicationsInfo() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::GetAllApplicationsInfoRqst, ::ressource::GetAllApplicationsInfoRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::GetAllApplicationsInfoRqst, ::ressource::GetAllApplicationsInfoRsp>* streamer) {
                       return this->StreamedGetAllApplicationsInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllApplicationsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllApplicationsInfo(::grpc::ServerContext* /*context*/, const ::ressource::GetAllApplicationsInfoRqst* /*request*/, ::ressource::GetAllApplicationsInfoRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllApplicationsInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::GetAllApplicationsInfoRqst,::ressource::GetAllApplicationsInfoRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteApplication() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::DeleteApplicationRqst, ::ressource::DeleteApplicationRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::DeleteApplicationRqst, ::ressource::DeleteApplicationRsp>* streamer) {
                       return this->StreamedDeleteApplication(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteApplication(::grpc::ServerContext* /*context*/, const ::ressource::DeleteApplicationRqst* /*request*/, ::ressource::DeleteApplicationRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteApplication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::DeleteApplicationRqst,::ressource::DeleteApplicationRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Log() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::LogRqst, ::ressource::LogRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::LogRqst, ::ressource::LogRsp>* streamer) {
                       return this->StreamedLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::ressource::LogRqst* /*request*/, ::ressource::LogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::LogRqst,::ressource::LogRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteLog() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::DeleteLogRqst, ::ressource::DeleteLogRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::DeleteLogRqst, ::ressource::DeleteLogRsp>* streamer) {
                       return this->StreamedDeleteLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteLog(::grpc::ServerContext* /*context*/, const ::ressource::DeleteLogRqst* /*request*/, ::ressource::DeleteLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::DeleteLogRqst,::ressource::DeleteLogRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearAllLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearAllLog() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::ClearAllLogRqst, ::ressource::ClearAllLogRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::ClearAllLogRqst, ::ressource::ClearAllLogRsp>* streamer) {
                       return this->StreamedClearAllLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearAllLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearAllLog(::grpc::ServerContext* /*context*/, const ::ressource::ClearAllLogRqst* /*request*/, ::ressource::ClearAllLogRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearAllLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::ClearAllLogRqst,::ressource::ClearAllLogRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRessource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetRessource() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::SetRessourceRqst, ::ressource::SetRessourceRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::SetRessourceRqst, ::ressource::SetRessourceRsp>* streamer) {
                       return this->StreamedSetRessource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetRessource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRessource(::grpc::ServerContext* /*context*/, const ::ressource::SetRessourceRqst* /*request*/, ::ressource::SetRessourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRessource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::SetRessourceRqst,::ressource::SetRessourceRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveRessource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveRessource() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::RemoveRessourceRqst, ::ressource::RemoveRessourceRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::RemoveRessourceRqst, ::ressource::RemoveRessourceRsp>* streamer) {
                       return this->StreamedRemoveRessource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveRessource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveRessource(::grpc::ServerContext* /*context*/, const ::ressource::RemoveRessourceRqst* /*request*/, ::ressource::RemoveRessourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveRessource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::RemoveRessourceRqst,::ressource::RemoveRessourceRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetActionPermission() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::SetActionPermissionRqst, ::ressource::SetActionPermissionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::SetActionPermissionRqst, ::ressource::SetActionPermissionRsp>* streamer) {
                       return this->StreamedSetActionPermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::SetActionPermissionRqst* /*request*/, ::ressource::SetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetActionPermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::SetActionPermissionRqst,::ressource::SetActionPermissionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveActionPermission() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::RemoveActionPermissionRqst, ::ressource::RemoveActionPermissionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::RemoveActionPermissionRqst, ::ressource::RemoveActionPermissionRsp>* streamer) {
                       return this->StreamedRemoveActionPermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::RemoveActionPermissionRqst* /*request*/, ::ressource::RemoveActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveActionPermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::RemoveActionPermissionRqst,::ressource::RemoveActionPermissionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetActionPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetActionPermission() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::GetActionPermissionRqst, ::ressource::GetActionPermissionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::GetActionPermissionRqst, ::ressource::GetActionPermissionRsp>* streamer) {
                       return this->StreamedGetActionPermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetActionPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetActionPermission(::grpc::ServerContext* /*context*/, const ::ressource::GetActionPermissionRqst* /*request*/, ::ressource::GetActionPermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetActionPermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::GetActionPermissionRqst,::ressource::GetActionPermissionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDirPermissions() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::CreateDirPermissionsRqst, ::ressource::CreateDirPermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::CreateDirPermissionsRqst, ::ressource::CreateDirPermissionsRsp>* streamer) {
                       return this->StreamedCreateDirPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDirPermissions(::grpc::ServerContext* /*context*/, const ::ressource::CreateDirPermissionsRqst* /*request*/, ::ressource::CreateDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDirPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::CreateDirPermissionsRqst,::ressource::CreateDirPermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RenameFilePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RenameFilePermission() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::RenameFilePermissionRqst, ::ressource::RenameFilePermissionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::RenameFilePermissionRqst, ::ressource::RenameFilePermissionRsp>* streamer) {
                       return this->StreamedRenameFilePermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RenameFilePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RenameFilePermission(::grpc::ServerContext* /*context*/, const ::ressource::RenameFilePermissionRqst* /*request*/, ::ressource::RenameFilePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRenameFilePermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::RenameFilePermissionRqst,::ressource::RenameFilePermissionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDirPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDirPermissions() {
      ::grpc::Service::MarkMethodStreamed(43,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::DeleteDirPermissionsRqst, ::ressource::DeleteDirPermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::DeleteDirPermissionsRqst, ::ressource::DeleteDirPermissionsRsp>* streamer) {
                       return this->StreamedDeleteDirPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteDirPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDirPermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteDirPermissionsRqst* /*request*/, ::ressource::DeleteDirPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDirPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::DeleteDirPermissionsRqst,::ressource::DeleteDirPermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFilePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteFilePermissions() {
      ::grpc::Service::MarkMethodStreamed(44,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ressource::DeleteFilePermissionsRqst, ::ressource::DeleteFilePermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ressource::DeleteFilePermissionsRqst, ::ressource::DeleteFilePermissionsRsp>* streamer) {
                       return this->StreamedDeleteFilePermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteFilePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFilePermissions(::grpc::ServerContext* /*context*/, const ::ressource::DeleteFilePermissionsRqst* /*request*/, ::ressource::DeleteFilePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFilePermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ressource::DeleteFilePermissionsRqst,::ressource::DeleteFilePermissionsRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterAccount<WithStreamedUnaryMethod_DeleteAccount<WithStreamedUnaryMethod_Authenticate<WithStreamedUnaryMethod_SynchronizeLdap<WithStreamedUnaryMethod_RefreshToken<WithStreamedUnaryMethod_AddAccountRole<WithStreamedUnaryMethod_RemoveAccountRole<WithStreamedUnaryMethod_CreateRole<WithStreamedUnaryMethod_DeleteRole<WithStreamedUnaryMethod_AddRoleAction<WithStreamedUnaryMethod_RemoveRoleAction<WithStreamedUnaryMethod_AddApplicationAction<WithStreamedUnaryMethod_RemoveApplicationAction<WithStreamedUnaryMethod_GetAllActions<WithStreamedUnaryMethod_GetPermissions<WithStreamedUnaryMethod_SetPermission<WithStreamedUnaryMethod_DeletePermissions<WithStreamedUnaryMethod_SetRessourceOwner<WithStreamedUnaryMethod_GetRessourceOwners<WithStreamedUnaryMethod_DeleteRessourceOwner<WithStreamedUnaryMethod_DeleteRessourceOwners<WithStreamedUnaryMethod_GetAllFilesInfo<WithStreamedUnaryMethod_ValidateToken<WithStreamedUnaryMethod_ValidateUserRessourceAccess<WithStreamedUnaryMethod_ValidateApplicationRessourceAccess<WithStreamedUnaryMethod_ValidateUserAccess<WithStreamedUnaryMethod_ValidateApplicationAccess<WithStreamedUnaryMethod_DeleteAccountPermissions<WithStreamedUnaryMethod_DeleteRolePermissions<WithStreamedUnaryMethod_GetAllApplicationsInfo<WithStreamedUnaryMethod_DeleteApplication<WithStreamedUnaryMethod_Log<WithStreamedUnaryMethod_DeleteLog<WithStreamedUnaryMethod_ClearAllLog<WithStreamedUnaryMethod_SetRessource<WithStreamedUnaryMethod_RemoveRessource<WithStreamedUnaryMethod_SetActionPermission<WithStreamedUnaryMethod_RemoveActionPermission<WithStreamedUnaryMethod_GetActionPermission<WithStreamedUnaryMethod_CreateDirPermissions<WithStreamedUnaryMethod_RenameFilePermission<WithStreamedUnaryMethod_DeleteDirPermissions<WithStreamedUnaryMethod_DeleteFilePermissions<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetLog() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::ressource::GetLogRqst, ::ressource::GetLogRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::ressource::GetLogRqst, ::ressource::GetLogRsp>* streamer) {
                       return this->StreamedGetLog(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::ressource::GetLogRqst* /*request*/, ::grpc::ServerWriter< ::ressource::GetLogRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetLog(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ressource::GetLogRqst,::ressource::GetLogRsp>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetRessources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetRessources() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::ressource::GetRessourcesRqst, ::ressource::GetRessourcesRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::ressource::GetRessourcesRqst, ::ressource::GetRessourcesRsp>* streamer) {
                       return this->StreamedGetRessources(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetRessources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRessources(::grpc::ServerContext* /*context*/, const ::ressource::GetRessourcesRqst* /*request*/, ::grpc::ServerWriter< ::ressource::GetRessourcesRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetRessources(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ressource::GetRessourcesRqst,::ressource::GetRessourcesRsp>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetLog<WithSplitStreamingMethod_GetRessources<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterAccount<WithStreamedUnaryMethod_DeleteAccount<WithStreamedUnaryMethod_Authenticate<WithStreamedUnaryMethod_SynchronizeLdap<WithStreamedUnaryMethod_RefreshToken<WithStreamedUnaryMethod_AddAccountRole<WithStreamedUnaryMethod_RemoveAccountRole<WithStreamedUnaryMethod_CreateRole<WithStreamedUnaryMethod_DeleteRole<WithStreamedUnaryMethod_AddRoleAction<WithStreamedUnaryMethod_RemoveRoleAction<WithStreamedUnaryMethod_AddApplicationAction<WithStreamedUnaryMethod_RemoveApplicationAction<WithStreamedUnaryMethod_GetAllActions<WithStreamedUnaryMethod_GetPermissions<WithStreamedUnaryMethod_SetPermission<WithStreamedUnaryMethod_DeletePermissions<WithStreamedUnaryMethod_SetRessourceOwner<WithStreamedUnaryMethod_GetRessourceOwners<WithStreamedUnaryMethod_DeleteRessourceOwner<WithStreamedUnaryMethod_DeleteRessourceOwners<WithStreamedUnaryMethod_GetAllFilesInfo<WithStreamedUnaryMethod_ValidateToken<WithStreamedUnaryMethod_ValidateUserRessourceAccess<WithStreamedUnaryMethod_ValidateApplicationRessourceAccess<WithStreamedUnaryMethod_ValidateUserAccess<WithStreamedUnaryMethod_ValidateApplicationAccess<WithStreamedUnaryMethod_DeleteAccountPermissions<WithStreamedUnaryMethod_DeleteRolePermissions<WithStreamedUnaryMethod_GetAllApplicationsInfo<WithStreamedUnaryMethod_DeleteApplication<WithStreamedUnaryMethod_Log<WithSplitStreamingMethod_GetLog<WithStreamedUnaryMethod_DeleteLog<WithStreamedUnaryMethod_ClearAllLog<WithSplitStreamingMethod_GetRessources<WithStreamedUnaryMethod_SetRessource<WithStreamedUnaryMethod_RemoveRessource<WithStreamedUnaryMethod_SetActionPermission<WithStreamedUnaryMethod_RemoveActionPermission<WithStreamedUnaryMethod_GetActionPermission<WithStreamedUnaryMethod_CreateDirPermissions<WithStreamedUnaryMethod_RenameFilePermission<WithStreamedUnaryMethod_DeleteDirPermissions<WithStreamedUnaryMethod_DeleteFilePermissions<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace ressource


#endif  // GRPC_ressource_2eproto__INCLUDED
