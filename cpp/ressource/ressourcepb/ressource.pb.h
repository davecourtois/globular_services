// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ressource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ressource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ressource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ressource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ressource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[99]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ressource_2eproto;
namespace ressource {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class AccountExistRqst;
class AccountExistRqstDefaultTypeInternal;
extern AccountExistRqstDefaultTypeInternal _AccountExistRqst_default_instance_;
class AccountExistRsp;
class AccountExistRspDefaultTypeInternal;
extern AccountExistRspDefaultTypeInternal _AccountExistRsp_default_instance_;
class ActionParameterRessourcePermission;
class ActionParameterRessourcePermissionDefaultTypeInternal;
extern ActionParameterRessourcePermissionDefaultTypeInternal _ActionParameterRessourcePermission_default_instance_;
class AddAccountRoleRqst;
class AddAccountRoleRqstDefaultTypeInternal;
extern AddAccountRoleRqstDefaultTypeInternal _AddAccountRoleRqst_default_instance_;
class AddAccountRoleRsp;
class AddAccountRoleRspDefaultTypeInternal;
extern AddAccountRoleRspDefaultTypeInternal _AddAccountRoleRsp_default_instance_;
class AddApplicationActionRqst;
class AddApplicationActionRqstDefaultTypeInternal;
extern AddApplicationActionRqstDefaultTypeInternal _AddApplicationActionRqst_default_instance_;
class AddApplicationActionRsp;
class AddApplicationActionRspDefaultTypeInternal;
extern AddApplicationActionRspDefaultTypeInternal _AddApplicationActionRsp_default_instance_;
class AddRoleActionRqst;
class AddRoleActionRqstDefaultTypeInternal;
extern AddRoleActionRqstDefaultTypeInternal _AddRoleActionRqst_default_instance_;
class AddRoleActionRsp;
class AddRoleActionRspDefaultTypeInternal;
extern AddRoleActionRspDefaultTypeInternal _AddRoleActionRsp_default_instance_;
class AuthenticateRqst;
class AuthenticateRqstDefaultTypeInternal;
extern AuthenticateRqstDefaultTypeInternal _AuthenticateRqst_default_instance_;
class AuthenticateRsp;
class AuthenticateRspDefaultTypeInternal;
extern AuthenticateRspDefaultTypeInternal _AuthenticateRsp_default_instance_;
class ClearAllLogRqst;
class ClearAllLogRqstDefaultTypeInternal;
extern ClearAllLogRqstDefaultTypeInternal _ClearAllLogRqst_default_instance_;
class ClearAllLogRsp;
class ClearAllLogRspDefaultTypeInternal;
extern ClearAllLogRspDefaultTypeInternal _ClearAllLogRsp_default_instance_;
class CreateRoleRqst;
class CreateRoleRqstDefaultTypeInternal;
extern CreateRoleRqstDefaultTypeInternal _CreateRoleRqst_default_instance_;
class CreateRoleRsp;
class CreateRoleRspDefaultTypeInternal;
extern CreateRoleRspDefaultTypeInternal _CreateRoleRsp_default_instance_;
class DeleteAccountPermissionsRqst;
class DeleteAccountPermissionsRqstDefaultTypeInternal;
extern DeleteAccountPermissionsRqstDefaultTypeInternal _DeleteAccountPermissionsRqst_default_instance_;
class DeleteAccountPermissionsRsp;
class DeleteAccountPermissionsRspDefaultTypeInternal;
extern DeleteAccountPermissionsRspDefaultTypeInternal _DeleteAccountPermissionsRsp_default_instance_;
class DeleteAccountRqst;
class DeleteAccountRqstDefaultTypeInternal;
extern DeleteAccountRqstDefaultTypeInternal _DeleteAccountRqst_default_instance_;
class DeleteAccountRsp;
class DeleteAccountRspDefaultTypeInternal;
extern DeleteAccountRspDefaultTypeInternal _DeleteAccountRsp_default_instance_;
class DeleteApplicationRqst;
class DeleteApplicationRqstDefaultTypeInternal;
extern DeleteApplicationRqstDefaultTypeInternal _DeleteApplicationRqst_default_instance_;
class DeleteApplicationRsp;
class DeleteApplicationRspDefaultTypeInternal;
extern DeleteApplicationRspDefaultTypeInternal _DeleteApplicationRsp_default_instance_;
class DeleteLogRqst;
class DeleteLogRqstDefaultTypeInternal;
extern DeleteLogRqstDefaultTypeInternal _DeleteLogRqst_default_instance_;
class DeleteLogRsp;
class DeleteLogRspDefaultTypeInternal;
extern DeleteLogRspDefaultTypeInternal _DeleteLogRsp_default_instance_;
class DeletePermissionsRqst;
class DeletePermissionsRqstDefaultTypeInternal;
extern DeletePermissionsRqstDefaultTypeInternal _DeletePermissionsRqst_default_instance_;
class DeletePermissionsRsp;
class DeletePermissionsRspDefaultTypeInternal;
extern DeletePermissionsRspDefaultTypeInternal _DeletePermissionsRsp_default_instance_;
class DeleteRessourceOwnerRqst;
class DeleteRessourceOwnerRqstDefaultTypeInternal;
extern DeleteRessourceOwnerRqstDefaultTypeInternal _DeleteRessourceOwnerRqst_default_instance_;
class DeleteRessourceOwnerRsp;
class DeleteRessourceOwnerRspDefaultTypeInternal;
extern DeleteRessourceOwnerRspDefaultTypeInternal _DeleteRessourceOwnerRsp_default_instance_;
class DeleteRessourceOwnersRqst;
class DeleteRessourceOwnersRqstDefaultTypeInternal;
extern DeleteRessourceOwnersRqstDefaultTypeInternal _DeleteRessourceOwnersRqst_default_instance_;
class DeleteRessourceOwnersRsp;
class DeleteRessourceOwnersRspDefaultTypeInternal;
extern DeleteRessourceOwnersRspDefaultTypeInternal _DeleteRessourceOwnersRsp_default_instance_;
class DeleteRolePermissionsRqst;
class DeleteRolePermissionsRqstDefaultTypeInternal;
extern DeleteRolePermissionsRqstDefaultTypeInternal _DeleteRolePermissionsRqst_default_instance_;
class DeleteRolePermissionsRsp;
class DeleteRolePermissionsRspDefaultTypeInternal;
extern DeleteRolePermissionsRspDefaultTypeInternal _DeleteRolePermissionsRsp_default_instance_;
class DeleteRoleRqst;
class DeleteRoleRqstDefaultTypeInternal;
extern DeleteRoleRqstDefaultTypeInternal _DeleteRoleRqst_default_instance_;
class DeleteRoleRsp;
class DeleteRoleRspDefaultTypeInternal;
extern DeleteRoleRspDefaultTypeInternal _DeleteRoleRsp_default_instance_;
class GetActionPermissionRqst;
class GetActionPermissionRqstDefaultTypeInternal;
extern GetActionPermissionRqstDefaultTypeInternal _GetActionPermissionRqst_default_instance_;
class GetActionPermissionRsp;
class GetActionPermissionRspDefaultTypeInternal;
extern GetActionPermissionRspDefaultTypeInternal _GetActionPermissionRsp_default_instance_;
class GetAllActionsRqst;
class GetAllActionsRqstDefaultTypeInternal;
extern GetAllActionsRqstDefaultTypeInternal _GetAllActionsRqst_default_instance_;
class GetAllActionsRsp;
class GetAllActionsRspDefaultTypeInternal;
extern GetAllActionsRspDefaultTypeInternal _GetAllActionsRsp_default_instance_;
class GetAllApplicationsInfoRqst;
class GetAllApplicationsInfoRqstDefaultTypeInternal;
extern GetAllApplicationsInfoRqstDefaultTypeInternal _GetAllApplicationsInfoRqst_default_instance_;
class GetAllApplicationsInfoRsp;
class GetAllApplicationsInfoRspDefaultTypeInternal;
extern GetAllApplicationsInfoRspDefaultTypeInternal _GetAllApplicationsInfoRsp_default_instance_;
class GetAllFilesInfoRqst;
class GetAllFilesInfoRqstDefaultTypeInternal;
extern GetAllFilesInfoRqstDefaultTypeInternal _GetAllFilesInfoRqst_default_instance_;
class GetAllFilesInfoRsp;
class GetAllFilesInfoRspDefaultTypeInternal;
extern GetAllFilesInfoRspDefaultTypeInternal _GetAllFilesInfoRsp_default_instance_;
class GetLogMethodsRqst;
class GetLogMethodsRqstDefaultTypeInternal;
extern GetLogMethodsRqstDefaultTypeInternal _GetLogMethodsRqst_default_instance_;
class GetLogMethodsRsp;
class GetLogMethodsRspDefaultTypeInternal;
extern GetLogMethodsRspDefaultTypeInternal _GetLogMethodsRsp_default_instance_;
class GetLogRqst;
class GetLogRqstDefaultTypeInternal;
extern GetLogRqstDefaultTypeInternal _GetLogRqst_default_instance_;
class GetLogRsp;
class GetLogRspDefaultTypeInternal;
extern GetLogRspDefaultTypeInternal _GetLogRsp_default_instance_;
class GetPermissionsRqst;
class GetPermissionsRqstDefaultTypeInternal;
extern GetPermissionsRqstDefaultTypeInternal _GetPermissionsRqst_default_instance_;
class GetPermissionsRsp;
class GetPermissionsRspDefaultTypeInternal;
extern GetPermissionsRspDefaultTypeInternal _GetPermissionsRsp_default_instance_;
class GetRessourceOwnersRqst;
class GetRessourceOwnersRqstDefaultTypeInternal;
extern GetRessourceOwnersRqstDefaultTypeInternal _GetRessourceOwnersRqst_default_instance_;
class GetRessourceOwnersRsp;
class GetRessourceOwnersRspDefaultTypeInternal;
extern GetRessourceOwnersRspDefaultTypeInternal _GetRessourceOwnersRsp_default_instance_;
class GetRessourcesRqst;
class GetRessourcesRqstDefaultTypeInternal;
extern GetRessourcesRqstDefaultTypeInternal _GetRessourcesRqst_default_instance_;
class GetRessourcesRsp;
class GetRessourcesRspDefaultTypeInternal;
extern GetRessourcesRspDefaultTypeInternal _GetRessourcesRsp_default_instance_;
class GroupSyncInfos;
class GroupSyncInfosDefaultTypeInternal;
extern GroupSyncInfosDefaultTypeInternal _GroupSyncInfos_default_instance_;
class LdapSyncInfos;
class LdapSyncInfosDefaultTypeInternal;
extern LdapSyncInfosDefaultTypeInternal _LdapSyncInfos_default_instance_;
class LogInfo;
class LogInfoDefaultTypeInternal;
extern LogInfoDefaultTypeInternal _LogInfo_default_instance_;
class LogRqst;
class LogRqstDefaultTypeInternal;
extern LogRqstDefaultTypeInternal _LogRqst_default_instance_;
class LogRsp;
class LogRspDefaultTypeInternal;
extern LogRspDefaultTypeInternal _LogRsp_default_instance_;
class RefreshTokenRqst;
class RefreshTokenRqstDefaultTypeInternal;
extern RefreshTokenRqstDefaultTypeInternal _RefreshTokenRqst_default_instance_;
class RefreshTokenRsp;
class RefreshTokenRspDefaultTypeInternal;
extern RefreshTokenRspDefaultTypeInternal _RefreshTokenRsp_default_instance_;
class RegisterAccountRqst;
class RegisterAccountRqstDefaultTypeInternal;
extern RegisterAccountRqstDefaultTypeInternal _RegisterAccountRqst_default_instance_;
class RegisterAccountRsp;
class RegisterAccountRspDefaultTypeInternal;
extern RegisterAccountRspDefaultTypeInternal _RegisterAccountRsp_default_instance_;
class RemoveAccountRoleRqst;
class RemoveAccountRoleRqstDefaultTypeInternal;
extern RemoveAccountRoleRqstDefaultTypeInternal _RemoveAccountRoleRqst_default_instance_;
class RemoveAccountRoleRsp;
class RemoveAccountRoleRspDefaultTypeInternal;
extern RemoveAccountRoleRspDefaultTypeInternal _RemoveAccountRoleRsp_default_instance_;
class RemoveActionPermissionRqst;
class RemoveActionPermissionRqstDefaultTypeInternal;
extern RemoveActionPermissionRqstDefaultTypeInternal _RemoveActionPermissionRqst_default_instance_;
class RemoveActionPermissionRsp;
class RemoveActionPermissionRspDefaultTypeInternal;
extern RemoveActionPermissionRspDefaultTypeInternal _RemoveActionPermissionRsp_default_instance_;
class RemoveApplicationActionRqst;
class RemoveApplicationActionRqstDefaultTypeInternal;
extern RemoveApplicationActionRqstDefaultTypeInternal _RemoveApplicationActionRqst_default_instance_;
class RemoveApplicationActionRsp;
class RemoveApplicationActionRspDefaultTypeInternal;
extern RemoveApplicationActionRspDefaultTypeInternal _RemoveApplicationActionRsp_default_instance_;
class RemoveRessourceRqst;
class RemoveRessourceRqstDefaultTypeInternal;
extern RemoveRessourceRqstDefaultTypeInternal _RemoveRessourceRqst_default_instance_;
class RemoveRessourceRsp;
class RemoveRessourceRspDefaultTypeInternal;
extern RemoveRessourceRspDefaultTypeInternal _RemoveRessourceRsp_default_instance_;
class RemoveRoleActionRqst;
class RemoveRoleActionRqstDefaultTypeInternal;
extern RemoveRoleActionRqstDefaultTypeInternal _RemoveRoleActionRqst_default_instance_;
class RemoveRoleActionRsp;
class RemoveRoleActionRspDefaultTypeInternal;
extern RemoveRoleActionRspDefaultTypeInternal _RemoveRoleActionRsp_default_instance_;
class ResetLogMethodRqst;
class ResetLogMethodRqstDefaultTypeInternal;
extern ResetLogMethodRqstDefaultTypeInternal _ResetLogMethodRqst_default_instance_;
class ResetLogMethodRsp;
class ResetLogMethodRspDefaultTypeInternal;
extern ResetLogMethodRspDefaultTypeInternal _ResetLogMethodRsp_default_instance_;
class Ressource;
class RessourceDefaultTypeInternal;
extern RessourceDefaultTypeInternal _Ressource_default_instance_;
class RessourcePermission;
class RessourcePermissionDefaultTypeInternal;
extern RessourcePermissionDefaultTypeInternal _RessourcePermission_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class SetActionPermissionRqst;
class SetActionPermissionRqstDefaultTypeInternal;
extern SetActionPermissionRqstDefaultTypeInternal _SetActionPermissionRqst_default_instance_;
class SetActionPermissionRsp;
class SetActionPermissionRspDefaultTypeInternal;
extern SetActionPermissionRspDefaultTypeInternal _SetActionPermissionRsp_default_instance_;
class SetLogMethodRqst;
class SetLogMethodRqstDefaultTypeInternal;
extern SetLogMethodRqstDefaultTypeInternal _SetLogMethodRqst_default_instance_;
class SetLogMethodRsp;
class SetLogMethodRspDefaultTypeInternal;
extern SetLogMethodRspDefaultTypeInternal _SetLogMethodRsp_default_instance_;
class SetPermissionRqst;
class SetPermissionRqstDefaultTypeInternal;
extern SetPermissionRqstDefaultTypeInternal _SetPermissionRqst_default_instance_;
class SetPermissionRsp;
class SetPermissionRspDefaultTypeInternal;
extern SetPermissionRspDefaultTypeInternal _SetPermissionRsp_default_instance_;
class SetRessourceOwnerRqst;
class SetRessourceOwnerRqstDefaultTypeInternal;
extern SetRessourceOwnerRqstDefaultTypeInternal _SetRessourceOwnerRqst_default_instance_;
class SetRessourceOwnerRsp;
class SetRessourceOwnerRspDefaultTypeInternal;
extern SetRessourceOwnerRspDefaultTypeInternal _SetRessourceOwnerRsp_default_instance_;
class SetRessourceRqst;
class SetRessourceRqstDefaultTypeInternal;
extern SetRessourceRqstDefaultTypeInternal _SetRessourceRqst_default_instance_;
class SetRessourceRsp;
class SetRessourceRspDefaultTypeInternal;
extern SetRessourceRspDefaultTypeInternal _SetRessourceRsp_default_instance_;
class SynchronizeLdapRqst;
class SynchronizeLdapRqstDefaultTypeInternal;
extern SynchronizeLdapRqstDefaultTypeInternal _SynchronizeLdapRqst_default_instance_;
class SynchronizeLdapRsp;
class SynchronizeLdapRspDefaultTypeInternal;
extern SynchronizeLdapRspDefaultTypeInternal _SynchronizeLdapRsp_default_instance_;
class UserSyncInfos;
class UserSyncInfosDefaultTypeInternal;
extern UserSyncInfosDefaultTypeInternal _UserSyncInfos_default_instance_;
class ValidateApplicationAccessRqst;
class ValidateApplicationAccessRqstDefaultTypeInternal;
extern ValidateApplicationAccessRqstDefaultTypeInternal _ValidateApplicationAccessRqst_default_instance_;
class ValidateApplicationAccessRsp;
class ValidateApplicationAccessRspDefaultTypeInternal;
extern ValidateApplicationAccessRspDefaultTypeInternal _ValidateApplicationAccessRsp_default_instance_;
class ValidateApplicationRessourceAccessRqst;
class ValidateApplicationRessourceAccessRqstDefaultTypeInternal;
extern ValidateApplicationRessourceAccessRqstDefaultTypeInternal _ValidateApplicationRessourceAccessRqst_default_instance_;
class ValidateApplicationRessourceAccessRsp;
class ValidateApplicationRessourceAccessRspDefaultTypeInternal;
extern ValidateApplicationRessourceAccessRspDefaultTypeInternal _ValidateApplicationRessourceAccessRsp_default_instance_;
class ValidateTokenRqst;
class ValidateTokenRqstDefaultTypeInternal;
extern ValidateTokenRqstDefaultTypeInternal _ValidateTokenRqst_default_instance_;
class ValidateTokenRsp;
class ValidateTokenRspDefaultTypeInternal;
extern ValidateTokenRspDefaultTypeInternal _ValidateTokenRsp_default_instance_;
class ValidateUserAccessRqst;
class ValidateUserAccessRqstDefaultTypeInternal;
extern ValidateUserAccessRqstDefaultTypeInternal _ValidateUserAccessRqst_default_instance_;
class ValidateUserAccessRsp;
class ValidateUserAccessRspDefaultTypeInternal;
extern ValidateUserAccessRspDefaultTypeInternal _ValidateUserAccessRsp_default_instance_;
class ValidateUserRessourceAccessRqst;
class ValidateUserRessourceAccessRqstDefaultTypeInternal;
extern ValidateUserRessourceAccessRqstDefaultTypeInternal _ValidateUserRessourceAccessRqst_default_instance_;
class ValidateUserRessourceAccessRsp;
class ValidateUserRessourceAccessRspDefaultTypeInternal;
extern ValidateUserRessourceAccessRspDefaultTypeInternal _ValidateUserRessourceAccessRsp_default_instance_;
}  // namespace ressource
PROTOBUF_NAMESPACE_OPEN
template<> ::ressource::Account* Arena::CreateMaybeMessage<::ressource::Account>(Arena*);
template<> ::ressource::AccountExistRqst* Arena::CreateMaybeMessage<::ressource::AccountExistRqst>(Arena*);
template<> ::ressource::AccountExistRsp* Arena::CreateMaybeMessage<::ressource::AccountExistRsp>(Arena*);
template<> ::ressource::ActionParameterRessourcePermission* Arena::CreateMaybeMessage<::ressource::ActionParameterRessourcePermission>(Arena*);
template<> ::ressource::AddAccountRoleRqst* Arena::CreateMaybeMessage<::ressource::AddAccountRoleRqst>(Arena*);
template<> ::ressource::AddAccountRoleRsp* Arena::CreateMaybeMessage<::ressource::AddAccountRoleRsp>(Arena*);
template<> ::ressource::AddApplicationActionRqst* Arena::CreateMaybeMessage<::ressource::AddApplicationActionRqst>(Arena*);
template<> ::ressource::AddApplicationActionRsp* Arena::CreateMaybeMessage<::ressource::AddApplicationActionRsp>(Arena*);
template<> ::ressource::AddRoleActionRqst* Arena::CreateMaybeMessage<::ressource::AddRoleActionRqst>(Arena*);
template<> ::ressource::AddRoleActionRsp* Arena::CreateMaybeMessage<::ressource::AddRoleActionRsp>(Arena*);
template<> ::ressource::AuthenticateRqst* Arena::CreateMaybeMessage<::ressource::AuthenticateRqst>(Arena*);
template<> ::ressource::AuthenticateRsp* Arena::CreateMaybeMessage<::ressource::AuthenticateRsp>(Arena*);
template<> ::ressource::ClearAllLogRqst* Arena::CreateMaybeMessage<::ressource::ClearAllLogRqst>(Arena*);
template<> ::ressource::ClearAllLogRsp* Arena::CreateMaybeMessage<::ressource::ClearAllLogRsp>(Arena*);
template<> ::ressource::CreateRoleRqst* Arena::CreateMaybeMessage<::ressource::CreateRoleRqst>(Arena*);
template<> ::ressource::CreateRoleRsp* Arena::CreateMaybeMessage<::ressource::CreateRoleRsp>(Arena*);
template<> ::ressource::DeleteAccountPermissionsRqst* Arena::CreateMaybeMessage<::ressource::DeleteAccountPermissionsRqst>(Arena*);
template<> ::ressource::DeleteAccountPermissionsRsp* Arena::CreateMaybeMessage<::ressource::DeleteAccountPermissionsRsp>(Arena*);
template<> ::ressource::DeleteAccountRqst* Arena::CreateMaybeMessage<::ressource::DeleteAccountRqst>(Arena*);
template<> ::ressource::DeleteAccountRsp* Arena::CreateMaybeMessage<::ressource::DeleteAccountRsp>(Arena*);
template<> ::ressource::DeleteApplicationRqst* Arena::CreateMaybeMessage<::ressource::DeleteApplicationRqst>(Arena*);
template<> ::ressource::DeleteApplicationRsp* Arena::CreateMaybeMessage<::ressource::DeleteApplicationRsp>(Arena*);
template<> ::ressource::DeleteLogRqst* Arena::CreateMaybeMessage<::ressource::DeleteLogRqst>(Arena*);
template<> ::ressource::DeleteLogRsp* Arena::CreateMaybeMessage<::ressource::DeleteLogRsp>(Arena*);
template<> ::ressource::DeletePermissionsRqst* Arena::CreateMaybeMessage<::ressource::DeletePermissionsRqst>(Arena*);
template<> ::ressource::DeletePermissionsRsp* Arena::CreateMaybeMessage<::ressource::DeletePermissionsRsp>(Arena*);
template<> ::ressource::DeleteRessourceOwnerRqst* Arena::CreateMaybeMessage<::ressource::DeleteRessourceOwnerRqst>(Arena*);
template<> ::ressource::DeleteRessourceOwnerRsp* Arena::CreateMaybeMessage<::ressource::DeleteRessourceOwnerRsp>(Arena*);
template<> ::ressource::DeleteRessourceOwnersRqst* Arena::CreateMaybeMessage<::ressource::DeleteRessourceOwnersRqst>(Arena*);
template<> ::ressource::DeleteRessourceOwnersRsp* Arena::CreateMaybeMessage<::ressource::DeleteRessourceOwnersRsp>(Arena*);
template<> ::ressource::DeleteRolePermissionsRqst* Arena::CreateMaybeMessage<::ressource::DeleteRolePermissionsRqst>(Arena*);
template<> ::ressource::DeleteRolePermissionsRsp* Arena::CreateMaybeMessage<::ressource::DeleteRolePermissionsRsp>(Arena*);
template<> ::ressource::DeleteRoleRqst* Arena::CreateMaybeMessage<::ressource::DeleteRoleRqst>(Arena*);
template<> ::ressource::DeleteRoleRsp* Arena::CreateMaybeMessage<::ressource::DeleteRoleRsp>(Arena*);
template<> ::ressource::GetActionPermissionRqst* Arena::CreateMaybeMessage<::ressource::GetActionPermissionRqst>(Arena*);
template<> ::ressource::GetActionPermissionRsp* Arena::CreateMaybeMessage<::ressource::GetActionPermissionRsp>(Arena*);
template<> ::ressource::GetAllActionsRqst* Arena::CreateMaybeMessage<::ressource::GetAllActionsRqst>(Arena*);
template<> ::ressource::GetAllActionsRsp* Arena::CreateMaybeMessage<::ressource::GetAllActionsRsp>(Arena*);
template<> ::ressource::GetAllApplicationsInfoRqst* Arena::CreateMaybeMessage<::ressource::GetAllApplicationsInfoRqst>(Arena*);
template<> ::ressource::GetAllApplicationsInfoRsp* Arena::CreateMaybeMessage<::ressource::GetAllApplicationsInfoRsp>(Arena*);
template<> ::ressource::GetAllFilesInfoRqst* Arena::CreateMaybeMessage<::ressource::GetAllFilesInfoRqst>(Arena*);
template<> ::ressource::GetAllFilesInfoRsp* Arena::CreateMaybeMessage<::ressource::GetAllFilesInfoRsp>(Arena*);
template<> ::ressource::GetLogMethodsRqst* Arena::CreateMaybeMessage<::ressource::GetLogMethodsRqst>(Arena*);
template<> ::ressource::GetLogMethodsRsp* Arena::CreateMaybeMessage<::ressource::GetLogMethodsRsp>(Arena*);
template<> ::ressource::GetLogRqst* Arena::CreateMaybeMessage<::ressource::GetLogRqst>(Arena*);
template<> ::ressource::GetLogRsp* Arena::CreateMaybeMessage<::ressource::GetLogRsp>(Arena*);
template<> ::ressource::GetPermissionsRqst* Arena::CreateMaybeMessage<::ressource::GetPermissionsRqst>(Arena*);
template<> ::ressource::GetPermissionsRsp* Arena::CreateMaybeMessage<::ressource::GetPermissionsRsp>(Arena*);
template<> ::ressource::GetRessourceOwnersRqst* Arena::CreateMaybeMessage<::ressource::GetRessourceOwnersRqst>(Arena*);
template<> ::ressource::GetRessourceOwnersRsp* Arena::CreateMaybeMessage<::ressource::GetRessourceOwnersRsp>(Arena*);
template<> ::ressource::GetRessourcesRqst* Arena::CreateMaybeMessage<::ressource::GetRessourcesRqst>(Arena*);
template<> ::ressource::GetRessourcesRsp* Arena::CreateMaybeMessage<::ressource::GetRessourcesRsp>(Arena*);
template<> ::ressource::GroupSyncInfos* Arena::CreateMaybeMessage<::ressource::GroupSyncInfos>(Arena*);
template<> ::ressource::LdapSyncInfos* Arena::CreateMaybeMessage<::ressource::LdapSyncInfos>(Arena*);
template<> ::ressource::LogInfo* Arena::CreateMaybeMessage<::ressource::LogInfo>(Arena*);
template<> ::ressource::LogRqst* Arena::CreateMaybeMessage<::ressource::LogRqst>(Arena*);
template<> ::ressource::LogRsp* Arena::CreateMaybeMessage<::ressource::LogRsp>(Arena*);
template<> ::ressource::RefreshTokenRqst* Arena::CreateMaybeMessage<::ressource::RefreshTokenRqst>(Arena*);
template<> ::ressource::RefreshTokenRsp* Arena::CreateMaybeMessage<::ressource::RefreshTokenRsp>(Arena*);
template<> ::ressource::RegisterAccountRqst* Arena::CreateMaybeMessage<::ressource::RegisterAccountRqst>(Arena*);
template<> ::ressource::RegisterAccountRsp* Arena::CreateMaybeMessage<::ressource::RegisterAccountRsp>(Arena*);
template<> ::ressource::RemoveAccountRoleRqst* Arena::CreateMaybeMessage<::ressource::RemoveAccountRoleRqst>(Arena*);
template<> ::ressource::RemoveAccountRoleRsp* Arena::CreateMaybeMessage<::ressource::RemoveAccountRoleRsp>(Arena*);
template<> ::ressource::RemoveActionPermissionRqst* Arena::CreateMaybeMessage<::ressource::RemoveActionPermissionRqst>(Arena*);
template<> ::ressource::RemoveActionPermissionRsp* Arena::CreateMaybeMessage<::ressource::RemoveActionPermissionRsp>(Arena*);
template<> ::ressource::RemoveApplicationActionRqst* Arena::CreateMaybeMessage<::ressource::RemoveApplicationActionRqst>(Arena*);
template<> ::ressource::RemoveApplicationActionRsp* Arena::CreateMaybeMessage<::ressource::RemoveApplicationActionRsp>(Arena*);
template<> ::ressource::RemoveRessourceRqst* Arena::CreateMaybeMessage<::ressource::RemoveRessourceRqst>(Arena*);
template<> ::ressource::RemoveRessourceRsp* Arena::CreateMaybeMessage<::ressource::RemoveRessourceRsp>(Arena*);
template<> ::ressource::RemoveRoleActionRqst* Arena::CreateMaybeMessage<::ressource::RemoveRoleActionRqst>(Arena*);
template<> ::ressource::RemoveRoleActionRsp* Arena::CreateMaybeMessage<::ressource::RemoveRoleActionRsp>(Arena*);
template<> ::ressource::ResetLogMethodRqst* Arena::CreateMaybeMessage<::ressource::ResetLogMethodRqst>(Arena*);
template<> ::ressource::ResetLogMethodRsp* Arena::CreateMaybeMessage<::ressource::ResetLogMethodRsp>(Arena*);
template<> ::ressource::Ressource* Arena::CreateMaybeMessage<::ressource::Ressource>(Arena*);
template<> ::ressource::RessourcePermission* Arena::CreateMaybeMessage<::ressource::RessourcePermission>(Arena*);
template<> ::ressource::Role* Arena::CreateMaybeMessage<::ressource::Role>(Arena*);
template<> ::ressource::SetActionPermissionRqst* Arena::CreateMaybeMessage<::ressource::SetActionPermissionRqst>(Arena*);
template<> ::ressource::SetActionPermissionRsp* Arena::CreateMaybeMessage<::ressource::SetActionPermissionRsp>(Arena*);
template<> ::ressource::SetLogMethodRqst* Arena::CreateMaybeMessage<::ressource::SetLogMethodRqst>(Arena*);
template<> ::ressource::SetLogMethodRsp* Arena::CreateMaybeMessage<::ressource::SetLogMethodRsp>(Arena*);
template<> ::ressource::SetPermissionRqst* Arena::CreateMaybeMessage<::ressource::SetPermissionRqst>(Arena*);
template<> ::ressource::SetPermissionRsp* Arena::CreateMaybeMessage<::ressource::SetPermissionRsp>(Arena*);
template<> ::ressource::SetRessourceOwnerRqst* Arena::CreateMaybeMessage<::ressource::SetRessourceOwnerRqst>(Arena*);
template<> ::ressource::SetRessourceOwnerRsp* Arena::CreateMaybeMessage<::ressource::SetRessourceOwnerRsp>(Arena*);
template<> ::ressource::SetRessourceRqst* Arena::CreateMaybeMessage<::ressource::SetRessourceRqst>(Arena*);
template<> ::ressource::SetRessourceRsp* Arena::CreateMaybeMessage<::ressource::SetRessourceRsp>(Arena*);
template<> ::ressource::SynchronizeLdapRqst* Arena::CreateMaybeMessage<::ressource::SynchronizeLdapRqst>(Arena*);
template<> ::ressource::SynchronizeLdapRsp* Arena::CreateMaybeMessage<::ressource::SynchronizeLdapRsp>(Arena*);
template<> ::ressource::UserSyncInfos* Arena::CreateMaybeMessage<::ressource::UserSyncInfos>(Arena*);
template<> ::ressource::ValidateApplicationAccessRqst* Arena::CreateMaybeMessage<::ressource::ValidateApplicationAccessRqst>(Arena*);
template<> ::ressource::ValidateApplicationAccessRsp* Arena::CreateMaybeMessage<::ressource::ValidateApplicationAccessRsp>(Arena*);
template<> ::ressource::ValidateApplicationRessourceAccessRqst* Arena::CreateMaybeMessage<::ressource::ValidateApplicationRessourceAccessRqst>(Arena*);
template<> ::ressource::ValidateApplicationRessourceAccessRsp* Arena::CreateMaybeMessage<::ressource::ValidateApplicationRessourceAccessRsp>(Arena*);
template<> ::ressource::ValidateTokenRqst* Arena::CreateMaybeMessage<::ressource::ValidateTokenRqst>(Arena*);
template<> ::ressource::ValidateTokenRsp* Arena::CreateMaybeMessage<::ressource::ValidateTokenRsp>(Arena*);
template<> ::ressource::ValidateUserAccessRqst* Arena::CreateMaybeMessage<::ressource::ValidateUserAccessRqst>(Arena*);
template<> ::ressource::ValidateUserAccessRsp* Arena::CreateMaybeMessage<::ressource::ValidateUserAccessRsp>(Arena*);
template<> ::ressource::ValidateUserRessourceAccessRqst* Arena::CreateMaybeMessage<::ressource::ValidateUserRessourceAccessRqst>(Arena*);
template<> ::ressource::ValidateUserRessourceAccessRsp* Arena::CreateMaybeMessage<::ressource::ValidateUserRessourceAccessRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ressource {

enum LogType : int {
  INFO_MESSAGE = 0,
  ERROR_MESSAGE = 1,
  LogType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogType_IsValid(int value);
constexpr LogType LogType_MIN = INFO_MESSAGE;
constexpr LogType LogType_MAX = ERROR_MESSAGE;
constexpr int LogType_ARRAYSIZE = LogType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogType_descriptor();
template<typename T>
inline const std::string& LogType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogType_descriptor(), enum_t_value);
}
inline bool LogType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogType>(
    LogType_descriptor(), name, value);
}
// ===================================================================

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kPasswordFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:ressource.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class Role PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.Role) */ {
 public:
  inline Role() : Role(nullptr) {}
  virtual ~Role();

  Role(const Role& from);
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  inline Role& operator=(Role&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }
  inline void Swap(Role* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Role* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(nullptr);
  }

  Role* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.Role";
  }
  protected:
  explicit Role(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 3,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated string actions = 3;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  const std::string& actions(int index) const;
  std::string* mutable_actions(int index);
  void set_actions(int index, const std::string& value);
  void set_actions(int index, std::string&& value);
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  std::string* add_actions();
  void add_actions(const std::string& value);
  void add_actions(std::string&& value);
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& actions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_actions();
  private:
  const std::string& _internal_actions(int index) const;
  std::string* _internal_add_actions();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ressource.Role)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RegisterAccountRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RegisterAccountRqst) */ {
 public:
  inline RegisterAccountRqst() : RegisterAccountRqst(nullptr) {}
  virtual ~RegisterAccountRqst();

  RegisterAccountRqst(const RegisterAccountRqst& from);
  RegisterAccountRqst(RegisterAccountRqst&& from) noexcept
    : RegisterAccountRqst() {
    *this = ::std::move(from);
  }

  inline RegisterAccountRqst& operator=(const RegisterAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAccountRqst& operator=(RegisterAccountRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountRqst* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountRqst*>(
               &_RegisterAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterAccountRqst& a, RegisterAccountRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAccountRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterAccountRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountRqst* New() const final {
    return CreateMaybeMessage<RegisterAccountRqst>(nullptr);
  }

  RegisterAccountRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterAccountRqst& from);
  void MergeFrom(const RegisterAccountRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RegisterAccountRqst";
  }
  protected:
  explicit RegisterAccountRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kConfirmPasswordFieldNumber = 3,
    kAccountFieldNumber = 1,
  };
  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string confirm_password = 3;
  void clear_confirm_password();
  const std::string& confirm_password() const;
  void set_confirm_password(const std::string& value);
  void set_confirm_password(std::string&& value);
  void set_confirm_password(const char* value);
  void set_confirm_password(const char* value, size_t size);
  std::string* mutable_confirm_password();
  std::string* release_confirm_password();
  void set_allocated_confirm_password(std::string* confirm_password);
  private:
  const std::string& _internal_confirm_password() const;
  void _internal_set_confirm_password(const std::string& value);
  std::string* _internal_mutable_confirm_password();
  public:

  // .ressource.Account account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::ressource::Account& account() const;
  ::ressource::Account* release_account();
  ::ressource::Account* mutable_account();
  void set_allocated_account(::ressource::Account* account);
  private:
  const ::ressource::Account& _internal_account() const;
  ::ressource::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::ressource::Account* account);
  ::ressource::Account* unsafe_arena_release_account();

  // @@protoc_insertion_point(class_scope:ressource.RegisterAccountRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confirm_password_;
  ::ressource::Account* account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RegisterAccountRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RegisterAccountRsp) */ {
 public:
  inline RegisterAccountRsp() : RegisterAccountRsp(nullptr) {}
  virtual ~RegisterAccountRsp();

  RegisterAccountRsp(const RegisterAccountRsp& from);
  RegisterAccountRsp(RegisterAccountRsp&& from) noexcept
    : RegisterAccountRsp() {
    *this = ::std::move(from);
  }

  inline RegisterAccountRsp& operator=(const RegisterAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAccountRsp& operator=(RegisterAccountRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountRsp* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountRsp*>(
               &_RegisterAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterAccountRsp& a, RegisterAccountRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAccountRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterAccountRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountRsp* New() const final {
    return CreateMaybeMessage<RegisterAccountRsp>(nullptr);
  }

  RegisterAccountRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterAccountRsp& from);
  void MergeFrom(const RegisterAccountRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RegisterAccountRsp";
  }
  protected:
  explicit RegisterAccountRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:ressource.RegisterAccountRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteAccountRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteAccountRqst) */ {
 public:
  inline DeleteAccountRqst() : DeleteAccountRqst(nullptr) {}
  virtual ~DeleteAccountRqst();

  DeleteAccountRqst(const DeleteAccountRqst& from);
  DeleteAccountRqst(DeleteAccountRqst&& from) noexcept
    : DeleteAccountRqst() {
    *this = ::std::move(from);
  }

  inline DeleteAccountRqst& operator=(const DeleteAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAccountRqst& operator=(DeleteAccountRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAccountRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteAccountRqst*>(
               &_DeleteAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteAccountRqst& a, DeleteAccountRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAccountRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAccountRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAccountRqst* New() const final {
    return CreateMaybeMessage<DeleteAccountRqst>(nullptr);
  }

  DeleteAccountRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAccountRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAccountRqst& from);
  void MergeFrom(const DeleteAccountRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAccountRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteAccountRqst";
  }
  protected:
  explicit DeleteAccountRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteAccountRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteAccountRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteAccountRsp) */ {
 public:
  inline DeleteAccountRsp() : DeleteAccountRsp(nullptr) {}
  virtual ~DeleteAccountRsp();

  DeleteAccountRsp(const DeleteAccountRsp& from);
  DeleteAccountRsp(DeleteAccountRsp&& from) noexcept
    : DeleteAccountRsp() {
    *this = ::std::move(from);
  }

  inline DeleteAccountRsp& operator=(const DeleteAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAccountRsp& operator=(DeleteAccountRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAccountRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteAccountRsp*>(
               &_DeleteAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteAccountRsp& a, DeleteAccountRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAccountRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAccountRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAccountRsp* New() const final {
    return CreateMaybeMessage<DeleteAccountRsp>(nullptr);
  }

  DeleteAccountRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAccountRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAccountRsp& from);
  void MergeFrom(const DeleteAccountRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAccountRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteAccountRsp";
  }
  protected:
  explicit DeleteAccountRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteAccountRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.AuthenticateRqst) */ {
 public:
  inline AuthenticateRqst() : AuthenticateRqst(nullptr) {}
  virtual ~AuthenticateRqst();

  AuthenticateRqst(const AuthenticateRqst& from);
  AuthenticateRqst(AuthenticateRqst&& from) noexcept
    : AuthenticateRqst() {
    *this = ::std::move(from);
  }

  inline AuthenticateRqst& operator=(const AuthenticateRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateRqst& operator=(AuthenticateRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateRqst* internal_default_instance() {
    return reinterpret_cast<const AuthenticateRqst*>(
               &_AuthenticateRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AuthenticateRqst& a, AuthenticateRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateRqst* New() const final {
    return CreateMaybeMessage<AuthenticateRqst>(nullptr);
  }

  AuthenticateRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateRqst& from);
  void MergeFrom(const AuthenticateRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.AuthenticateRqst";
  }
  protected:
  explicit AuthenticateRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:ressource.AuthenticateRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.AuthenticateRsp) */ {
 public:
  inline AuthenticateRsp() : AuthenticateRsp(nullptr) {}
  virtual ~AuthenticateRsp();

  AuthenticateRsp(const AuthenticateRsp& from);
  AuthenticateRsp(AuthenticateRsp&& from) noexcept
    : AuthenticateRsp() {
    *this = ::std::move(from);
  }

  inline AuthenticateRsp& operator=(const AuthenticateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateRsp& operator=(AuthenticateRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateRsp* internal_default_instance() {
    return reinterpret_cast<const AuthenticateRsp*>(
               &_AuthenticateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AuthenticateRsp& a, AuthenticateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateRsp* New() const final {
    return CreateMaybeMessage<AuthenticateRsp>(nullptr);
  }

  AuthenticateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateRsp& from);
  void MergeFrom(const AuthenticateRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.AuthenticateRsp";
  }
  protected:
  explicit AuthenticateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:ressource.AuthenticateRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RefreshTokenRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RefreshTokenRqst) */ {
 public:
  inline RefreshTokenRqst() : RefreshTokenRqst(nullptr) {}
  virtual ~RefreshTokenRqst();

  RefreshTokenRqst(const RefreshTokenRqst& from);
  RefreshTokenRqst(RefreshTokenRqst&& from) noexcept
    : RefreshTokenRqst() {
    *this = ::std::move(from);
  }

  inline RefreshTokenRqst& operator=(const RefreshTokenRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshTokenRqst& operator=(RefreshTokenRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshTokenRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshTokenRqst* internal_default_instance() {
    return reinterpret_cast<const RefreshTokenRqst*>(
               &_RefreshTokenRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RefreshTokenRqst& a, RefreshTokenRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshTokenRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshTokenRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshTokenRqst* New() const final {
    return CreateMaybeMessage<RefreshTokenRqst>(nullptr);
  }

  RefreshTokenRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshTokenRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshTokenRqst& from);
  void MergeFrom(const RefreshTokenRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshTokenRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RefreshTokenRqst";
  }
  protected:
  explicit RefreshTokenRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:ressource.RefreshTokenRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RefreshTokenRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RefreshTokenRsp) */ {
 public:
  inline RefreshTokenRsp() : RefreshTokenRsp(nullptr) {}
  virtual ~RefreshTokenRsp();

  RefreshTokenRsp(const RefreshTokenRsp& from);
  RefreshTokenRsp(RefreshTokenRsp&& from) noexcept
    : RefreshTokenRsp() {
    *this = ::std::move(from);
  }

  inline RefreshTokenRsp& operator=(const RefreshTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshTokenRsp& operator=(RefreshTokenRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshTokenRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshTokenRsp* internal_default_instance() {
    return reinterpret_cast<const RefreshTokenRsp*>(
               &_RefreshTokenRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RefreshTokenRsp& a, RefreshTokenRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshTokenRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshTokenRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshTokenRsp* New() const final {
    return CreateMaybeMessage<RefreshTokenRsp>(nullptr);
  }

  RefreshTokenRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshTokenRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshTokenRsp& from);
  void MergeFrom(const RefreshTokenRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshTokenRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RefreshTokenRsp";
  }
  protected:
  explicit RefreshTokenRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:ressource.RefreshTokenRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class AddAccountRoleRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.AddAccountRoleRqst) */ {
 public:
  inline AddAccountRoleRqst() : AddAccountRoleRqst(nullptr) {}
  virtual ~AddAccountRoleRqst();

  AddAccountRoleRqst(const AddAccountRoleRqst& from);
  AddAccountRoleRqst(AddAccountRoleRqst&& from) noexcept
    : AddAccountRoleRqst() {
    *this = ::std::move(from);
  }

  inline AddAccountRoleRqst& operator=(const AddAccountRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAccountRoleRqst& operator=(AddAccountRoleRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddAccountRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddAccountRoleRqst* internal_default_instance() {
    return reinterpret_cast<const AddAccountRoleRqst*>(
               &_AddAccountRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AddAccountRoleRqst& a, AddAccountRoleRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAccountRoleRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAccountRoleRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddAccountRoleRqst* New() const final {
    return CreateMaybeMessage<AddAccountRoleRqst>(nullptr);
  }

  AddAccountRoleRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddAccountRoleRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddAccountRoleRqst& from);
  void MergeFrom(const AddAccountRoleRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddAccountRoleRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.AddAccountRoleRqst";
  }
  protected:
  explicit AddAccountRoleRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
  };
  // string accountId = 1;
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // string roleId = 2;
  void clear_roleid();
  const std::string& roleid() const;
  void set_roleid(const std::string& value);
  void set_roleid(std::string&& value);
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  std::string* mutable_roleid();
  std::string* release_roleid();
  void set_allocated_roleid(std::string* roleid);
  private:
  const std::string& _internal_roleid() const;
  void _internal_set_roleid(const std::string& value);
  std::string* _internal_mutable_roleid();
  public:

  // @@protoc_insertion_point(class_scope:ressource.AddAccountRoleRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class AddAccountRoleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.AddAccountRoleRsp) */ {
 public:
  inline AddAccountRoleRsp() : AddAccountRoleRsp(nullptr) {}
  virtual ~AddAccountRoleRsp();

  AddAccountRoleRsp(const AddAccountRoleRsp& from);
  AddAccountRoleRsp(AddAccountRoleRsp&& from) noexcept
    : AddAccountRoleRsp() {
    *this = ::std::move(from);
  }

  inline AddAccountRoleRsp& operator=(const AddAccountRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAccountRoleRsp& operator=(AddAccountRoleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddAccountRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddAccountRoleRsp* internal_default_instance() {
    return reinterpret_cast<const AddAccountRoleRsp*>(
               &_AddAccountRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AddAccountRoleRsp& a, AddAccountRoleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAccountRoleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAccountRoleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddAccountRoleRsp* New() const final {
    return CreateMaybeMessage<AddAccountRoleRsp>(nullptr);
  }

  AddAccountRoleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddAccountRoleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddAccountRoleRsp& from);
  void MergeFrom(const AddAccountRoleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddAccountRoleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.AddAccountRoleRsp";
  }
  protected:
  explicit AddAccountRoleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.AddAccountRoleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RemoveAccountRoleRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RemoveAccountRoleRqst) */ {
 public:
  inline RemoveAccountRoleRqst() : RemoveAccountRoleRqst(nullptr) {}
  virtual ~RemoveAccountRoleRqst();

  RemoveAccountRoleRqst(const RemoveAccountRoleRqst& from);
  RemoveAccountRoleRqst(RemoveAccountRoleRqst&& from) noexcept
    : RemoveAccountRoleRqst() {
    *this = ::std::move(from);
  }

  inline RemoveAccountRoleRqst& operator=(const RemoveAccountRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAccountRoleRqst& operator=(RemoveAccountRoleRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveAccountRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveAccountRoleRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveAccountRoleRqst*>(
               &_RemoveAccountRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RemoveAccountRoleRqst& a, RemoveAccountRoleRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAccountRoleRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveAccountRoleRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveAccountRoleRqst* New() const final {
    return CreateMaybeMessage<RemoveAccountRoleRqst>(nullptr);
  }

  RemoveAccountRoleRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveAccountRoleRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveAccountRoleRqst& from);
  void MergeFrom(const RemoveAccountRoleRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAccountRoleRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RemoveAccountRoleRqst";
  }
  protected:
  explicit RemoveAccountRoleRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
  };
  // string accountId = 1;
  void clear_accountid();
  const std::string& accountid() const;
  void set_accountid(const std::string& value);
  void set_accountid(std::string&& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  std::string* mutable_accountid();
  std::string* release_accountid();
  void set_allocated_accountid(std::string* accountid);
  private:
  const std::string& _internal_accountid() const;
  void _internal_set_accountid(const std::string& value);
  std::string* _internal_mutable_accountid();
  public:

  // string roleId = 2;
  void clear_roleid();
  const std::string& roleid() const;
  void set_roleid(const std::string& value);
  void set_roleid(std::string&& value);
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  std::string* mutable_roleid();
  std::string* release_roleid();
  void set_allocated_roleid(std::string* roleid);
  private:
  const std::string& _internal_roleid() const;
  void _internal_set_roleid(const std::string& value);
  std::string* _internal_mutable_roleid();
  public:

  // @@protoc_insertion_point(class_scope:ressource.RemoveAccountRoleRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RemoveAccountRoleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RemoveAccountRoleRsp) */ {
 public:
  inline RemoveAccountRoleRsp() : RemoveAccountRoleRsp(nullptr) {}
  virtual ~RemoveAccountRoleRsp();

  RemoveAccountRoleRsp(const RemoveAccountRoleRsp& from);
  RemoveAccountRoleRsp(RemoveAccountRoleRsp&& from) noexcept
    : RemoveAccountRoleRsp() {
    *this = ::std::move(from);
  }

  inline RemoveAccountRoleRsp& operator=(const RemoveAccountRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAccountRoleRsp& operator=(RemoveAccountRoleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveAccountRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveAccountRoleRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveAccountRoleRsp*>(
               &_RemoveAccountRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RemoveAccountRoleRsp& a, RemoveAccountRoleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAccountRoleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveAccountRoleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveAccountRoleRsp* New() const final {
    return CreateMaybeMessage<RemoveAccountRoleRsp>(nullptr);
  }

  RemoveAccountRoleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveAccountRoleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveAccountRoleRsp& from);
  void MergeFrom(const RemoveAccountRoleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAccountRoleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RemoveAccountRoleRsp";
  }
  protected:
  explicit RemoveAccountRoleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.RemoveAccountRoleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.CreateRoleRqst) */ {
 public:
  inline CreateRoleRqst() : CreateRoleRqst(nullptr) {}
  virtual ~CreateRoleRqst();

  CreateRoleRqst(const CreateRoleRqst& from);
  CreateRoleRqst(CreateRoleRqst&& from) noexcept
    : CreateRoleRqst() {
    *this = ::std::move(from);
  }

  inline CreateRoleRqst& operator=(const CreateRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleRqst& operator=(CreateRoleRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoleRqst* internal_default_instance() {
    return reinterpret_cast<const CreateRoleRqst*>(
               &_CreateRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CreateRoleRqst& a, CreateRoleRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleRqst* New() const final {
    return CreateMaybeMessage<CreateRoleRqst>(nullptr);
  }

  CreateRoleRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoleRqst& from);
  void MergeFrom(const CreateRoleRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.CreateRoleRqst";
  }
  protected:
  explicit CreateRoleRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // .ressource.Role role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::ressource::Role& role() const;
  ::ressource::Role* release_role();
  ::ressource::Role* mutable_role();
  void set_allocated_role(::ressource::Role* role);
  private:
  const ::ressource::Role& _internal_role() const;
  ::ressource::Role* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::ressource::Role* role);
  ::ressource::Role* unsafe_arena_release_role();

  // @@protoc_insertion_point(class_scope:ressource.CreateRoleRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ressource::Role* role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.CreateRoleRsp) */ {
 public:
  inline CreateRoleRsp() : CreateRoleRsp(nullptr) {}
  virtual ~CreateRoleRsp();

  CreateRoleRsp(const CreateRoleRsp& from);
  CreateRoleRsp(CreateRoleRsp&& from) noexcept
    : CreateRoleRsp() {
    *this = ::std::move(from);
  }

  inline CreateRoleRsp& operator=(const CreateRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleRsp& operator=(CreateRoleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoleRsp* internal_default_instance() {
    return reinterpret_cast<const CreateRoleRsp*>(
               &_CreateRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CreateRoleRsp& a, CreateRoleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleRsp* New() const final {
    return CreateMaybeMessage<CreateRoleRsp>(nullptr);
  }

  CreateRoleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoleRsp& from);
  void MergeFrom(const CreateRoleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.CreateRoleRsp";
  }
  protected:
  explicit CreateRoleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.CreateRoleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteRoleRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteRoleRqst) */ {
 public:
  inline DeleteRoleRqst() : DeleteRoleRqst(nullptr) {}
  virtual ~DeleteRoleRqst();

  DeleteRoleRqst(const DeleteRoleRqst& from);
  DeleteRoleRqst(DeleteRoleRqst&& from) noexcept
    : DeleteRoleRqst() {
    *this = ::std::move(from);
  }

  inline DeleteRoleRqst& operator=(const DeleteRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRoleRqst& operator=(DeleteRoleRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRoleRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleRqst*>(
               &_DeleteRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeleteRoleRqst& a, DeleteRoleRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRoleRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRoleRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleRqst* New() const final {
    return CreateMaybeMessage<DeleteRoleRqst>(nullptr);
  }

  DeleteRoleRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRoleRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRoleRqst& from);
  void MergeFrom(const DeleteRoleRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRoleRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteRoleRqst";
  }
  protected:
  explicit DeleteRoleRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // string roleId = 1;
  void clear_roleid();
  const std::string& roleid() const;
  void set_roleid(const std::string& value);
  void set_roleid(std::string&& value);
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  std::string* mutable_roleid();
  std::string* release_roleid();
  void set_allocated_roleid(std::string* roleid);
  private:
  const std::string& _internal_roleid() const;
  void _internal_set_roleid(const std::string& value);
  std::string* _internal_mutable_roleid();
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteRoleRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteRoleRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteRoleRsp) */ {
 public:
  inline DeleteRoleRsp() : DeleteRoleRsp(nullptr) {}
  virtual ~DeleteRoleRsp();

  DeleteRoleRsp(const DeleteRoleRsp& from);
  DeleteRoleRsp(DeleteRoleRsp&& from) noexcept
    : DeleteRoleRsp() {
    *this = ::std::move(from);
  }

  inline DeleteRoleRsp& operator=(const DeleteRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRoleRsp& operator=(DeleteRoleRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRoleRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleRsp*>(
               &_DeleteRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeleteRoleRsp& a, DeleteRoleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRoleRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRoleRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleRsp* New() const final {
    return CreateMaybeMessage<DeleteRoleRsp>(nullptr);
  }

  DeleteRoleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRoleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRoleRsp& from);
  void MergeFrom(const DeleteRoleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRoleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteRoleRsp";
  }
  protected:
  explicit DeleteRoleRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteRoleRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class AddRoleActionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.AddRoleActionRqst) */ {
 public:
  inline AddRoleActionRqst() : AddRoleActionRqst(nullptr) {}
  virtual ~AddRoleActionRqst();

  AddRoleActionRqst(const AddRoleActionRqst& from);
  AddRoleActionRqst(AddRoleActionRqst&& from) noexcept
    : AddRoleActionRqst() {
    *this = ::std::move(from);
  }

  inline AddRoleActionRqst& operator=(const AddRoleActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRoleActionRqst& operator=(AddRoleActionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRoleActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRoleActionRqst* internal_default_instance() {
    return reinterpret_cast<const AddRoleActionRqst*>(
               &_AddRoleActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AddRoleActionRqst& a, AddRoleActionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRoleActionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRoleActionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRoleActionRqst* New() const final {
    return CreateMaybeMessage<AddRoleActionRqst>(nullptr);
  }

  AddRoleActionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRoleActionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRoleActionRqst& from);
  void MergeFrom(const AddRoleActionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRoleActionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.AddRoleActionRqst";
  }
  protected:
  explicit AddRoleActionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string roleId = 1;
  void clear_roleid();
  const std::string& roleid() const;
  void set_roleid(const std::string& value);
  void set_roleid(std::string&& value);
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  std::string* mutable_roleid();
  std::string* release_roleid();
  void set_allocated_roleid(std::string* roleid);
  private:
  const std::string& _internal_roleid() const;
  void _internal_set_roleid(const std::string& value);
  std::string* _internal_mutable_roleid();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:ressource.AddRoleActionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roleid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class AddRoleActionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.AddRoleActionRsp) */ {
 public:
  inline AddRoleActionRsp() : AddRoleActionRsp(nullptr) {}
  virtual ~AddRoleActionRsp();

  AddRoleActionRsp(const AddRoleActionRsp& from);
  AddRoleActionRsp(AddRoleActionRsp&& from) noexcept
    : AddRoleActionRsp() {
    *this = ::std::move(from);
  }

  inline AddRoleActionRsp& operator=(const AddRoleActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRoleActionRsp& operator=(AddRoleActionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRoleActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRoleActionRsp* internal_default_instance() {
    return reinterpret_cast<const AddRoleActionRsp*>(
               &_AddRoleActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AddRoleActionRsp& a, AddRoleActionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRoleActionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRoleActionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRoleActionRsp* New() const final {
    return CreateMaybeMessage<AddRoleActionRsp>(nullptr);
  }

  AddRoleActionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRoleActionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRoleActionRsp& from);
  void MergeFrom(const AddRoleActionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRoleActionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.AddRoleActionRsp";
  }
  protected:
  explicit AddRoleActionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.AddRoleActionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RemoveRoleActionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RemoveRoleActionRqst) */ {
 public:
  inline RemoveRoleActionRqst() : RemoveRoleActionRqst(nullptr) {}
  virtual ~RemoveRoleActionRqst();

  RemoveRoleActionRqst(const RemoveRoleActionRqst& from);
  RemoveRoleActionRqst(RemoveRoleActionRqst&& from) noexcept
    : RemoveRoleActionRqst() {
    *this = ::std::move(from);
  }

  inline RemoveRoleActionRqst& operator=(const RemoveRoleActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRoleActionRqst& operator=(RemoveRoleActionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveRoleActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRoleActionRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveRoleActionRqst*>(
               &_RemoveRoleActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RemoveRoleActionRqst& a, RemoveRoleActionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRoleActionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRoleActionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveRoleActionRqst* New() const final {
    return CreateMaybeMessage<RemoveRoleActionRqst>(nullptr);
  }

  RemoveRoleActionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRoleActionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveRoleActionRqst& from);
  void MergeFrom(const RemoveRoleActionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRoleActionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RemoveRoleActionRqst";
  }
  protected:
  explicit RemoveRoleActionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string roleId = 1;
  void clear_roleid();
  const std::string& roleid() const;
  void set_roleid(const std::string& value);
  void set_roleid(std::string&& value);
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  std::string* mutable_roleid();
  std::string* release_roleid();
  void set_allocated_roleid(std::string* roleid);
  private:
  const std::string& _internal_roleid() const;
  void _internal_set_roleid(const std::string& value);
  std::string* _internal_mutable_roleid();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:ressource.RemoveRoleActionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roleid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RemoveRoleActionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RemoveRoleActionRsp) */ {
 public:
  inline RemoveRoleActionRsp() : RemoveRoleActionRsp(nullptr) {}
  virtual ~RemoveRoleActionRsp();

  RemoveRoleActionRsp(const RemoveRoleActionRsp& from);
  RemoveRoleActionRsp(RemoveRoleActionRsp&& from) noexcept
    : RemoveRoleActionRsp() {
    *this = ::std::move(from);
  }

  inline RemoveRoleActionRsp& operator=(const RemoveRoleActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRoleActionRsp& operator=(RemoveRoleActionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveRoleActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRoleActionRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveRoleActionRsp*>(
               &_RemoveRoleActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RemoveRoleActionRsp& a, RemoveRoleActionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRoleActionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRoleActionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveRoleActionRsp* New() const final {
    return CreateMaybeMessage<RemoveRoleActionRsp>(nullptr);
  }

  RemoveRoleActionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRoleActionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveRoleActionRsp& from);
  void MergeFrom(const RemoveRoleActionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRoleActionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RemoveRoleActionRsp";
  }
  protected:
  explicit RemoveRoleActionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.RemoveRoleActionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class AddApplicationActionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.AddApplicationActionRqst) */ {
 public:
  inline AddApplicationActionRqst() : AddApplicationActionRqst(nullptr) {}
  virtual ~AddApplicationActionRqst();

  AddApplicationActionRqst(const AddApplicationActionRqst& from);
  AddApplicationActionRqst(AddApplicationActionRqst&& from) noexcept
    : AddApplicationActionRqst() {
    *this = ::std::move(from);
  }

  inline AddApplicationActionRqst& operator=(const AddApplicationActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddApplicationActionRqst& operator=(AddApplicationActionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddApplicationActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddApplicationActionRqst* internal_default_instance() {
    return reinterpret_cast<const AddApplicationActionRqst*>(
               &_AddApplicationActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AddApplicationActionRqst& a, AddApplicationActionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AddApplicationActionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddApplicationActionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddApplicationActionRqst* New() const final {
    return CreateMaybeMessage<AddApplicationActionRqst>(nullptr);
  }

  AddApplicationActionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddApplicationActionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddApplicationActionRqst& from);
  void MergeFrom(const AddApplicationActionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddApplicationActionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.AddApplicationActionRqst";
  }
  protected:
  explicit AddApplicationActionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string applicationId = 1;
  void clear_applicationid();
  const std::string& applicationid() const;
  void set_applicationid(const std::string& value);
  void set_applicationid(std::string&& value);
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  std::string* mutable_applicationid();
  std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:ressource.AddApplicationActionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class AddApplicationActionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.AddApplicationActionRsp) */ {
 public:
  inline AddApplicationActionRsp() : AddApplicationActionRsp(nullptr) {}
  virtual ~AddApplicationActionRsp();

  AddApplicationActionRsp(const AddApplicationActionRsp& from);
  AddApplicationActionRsp(AddApplicationActionRsp&& from) noexcept
    : AddApplicationActionRsp() {
    *this = ::std::move(from);
  }

  inline AddApplicationActionRsp& operator=(const AddApplicationActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddApplicationActionRsp& operator=(AddApplicationActionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddApplicationActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddApplicationActionRsp* internal_default_instance() {
    return reinterpret_cast<const AddApplicationActionRsp*>(
               &_AddApplicationActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AddApplicationActionRsp& a, AddApplicationActionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddApplicationActionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddApplicationActionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddApplicationActionRsp* New() const final {
    return CreateMaybeMessage<AddApplicationActionRsp>(nullptr);
  }

  AddApplicationActionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddApplicationActionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddApplicationActionRsp& from);
  void MergeFrom(const AddApplicationActionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddApplicationActionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.AddApplicationActionRsp";
  }
  protected:
  explicit AddApplicationActionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.AddApplicationActionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RemoveApplicationActionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RemoveApplicationActionRqst) */ {
 public:
  inline RemoveApplicationActionRqst() : RemoveApplicationActionRqst(nullptr) {}
  virtual ~RemoveApplicationActionRqst();

  RemoveApplicationActionRqst(const RemoveApplicationActionRqst& from);
  RemoveApplicationActionRqst(RemoveApplicationActionRqst&& from) noexcept
    : RemoveApplicationActionRqst() {
    *this = ::std::move(from);
  }

  inline RemoveApplicationActionRqst& operator=(const RemoveApplicationActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveApplicationActionRqst& operator=(RemoveApplicationActionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveApplicationActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveApplicationActionRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveApplicationActionRqst*>(
               &_RemoveApplicationActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(RemoveApplicationActionRqst& a, RemoveApplicationActionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveApplicationActionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveApplicationActionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveApplicationActionRqst* New() const final {
    return CreateMaybeMessage<RemoveApplicationActionRqst>(nullptr);
  }

  RemoveApplicationActionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveApplicationActionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveApplicationActionRqst& from);
  void MergeFrom(const RemoveApplicationActionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveApplicationActionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RemoveApplicationActionRqst";
  }
  protected:
  explicit RemoveApplicationActionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string applicationId = 1;
  void clear_applicationid();
  const std::string& applicationid() const;
  void set_applicationid(const std::string& value);
  void set_applicationid(std::string&& value);
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  std::string* mutable_applicationid();
  std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:ressource.RemoveApplicationActionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RemoveApplicationActionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RemoveApplicationActionRsp) */ {
 public:
  inline RemoveApplicationActionRsp() : RemoveApplicationActionRsp(nullptr) {}
  virtual ~RemoveApplicationActionRsp();

  RemoveApplicationActionRsp(const RemoveApplicationActionRsp& from);
  RemoveApplicationActionRsp(RemoveApplicationActionRsp&& from) noexcept
    : RemoveApplicationActionRsp() {
    *this = ::std::move(from);
  }

  inline RemoveApplicationActionRsp& operator=(const RemoveApplicationActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveApplicationActionRsp& operator=(RemoveApplicationActionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveApplicationActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveApplicationActionRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveApplicationActionRsp*>(
               &_RemoveApplicationActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RemoveApplicationActionRsp& a, RemoveApplicationActionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveApplicationActionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveApplicationActionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveApplicationActionRsp* New() const final {
    return CreateMaybeMessage<RemoveApplicationActionRsp>(nullptr);
  }

  RemoveApplicationActionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveApplicationActionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveApplicationActionRsp& from);
  void MergeFrom(const RemoveApplicationActionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveApplicationActionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RemoveApplicationActionRsp";
  }
  protected:
  explicit RemoveApplicationActionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.RemoveApplicationActionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetAllActionsRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetAllActionsRqst) */ {
 public:
  inline GetAllActionsRqst() : GetAllActionsRqst(nullptr) {}
  virtual ~GetAllActionsRqst();

  GetAllActionsRqst(const GetAllActionsRqst& from);
  GetAllActionsRqst(GetAllActionsRqst&& from) noexcept
    : GetAllActionsRqst() {
    *this = ::std::move(from);
  }

  inline GetAllActionsRqst& operator=(const GetAllActionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllActionsRqst& operator=(GetAllActionsRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllActionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllActionsRqst* internal_default_instance() {
    return reinterpret_cast<const GetAllActionsRqst*>(
               &_GetAllActionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetAllActionsRqst& a, GetAllActionsRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllActionsRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllActionsRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllActionsRqst* New() const final {
    return CreateMaybeMessage<GetAllActionsRqst>(nullptr);
  }

  GetAllActionsRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllActionsRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllActionsRqst& from);
  void MergeFrom(const GetAllActionsRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllActionsRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetAllActionsRqst";
  }
  protected:
  explicit GetAllActionsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ressource.GetAllActionsRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetAllActionsRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetAllActionsRsp) */ {
 public:
  inline GetAllActionsRsp() : GetAllActionsRsp(nullptr) {}
  virtual ~GetAllActionsRsp();

  GetAllActionsRsp(const GetAllActionsRsp& from);
  GetAllActionsRsp(GetAllActionsRsp&& from) noexcept
    : GetAllActionsRsp() {
    *this = ::std::move(from);
  }

  inline GetAllActionsRsp& operator=(const GetAllActionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllActionsRsp& operator=(GetAllActionsRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllActionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllActionsRsp* internal_default_instance() {
    return reinterpret_cast<const GetAllActionsRsp*>(
               &_GetAllActionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetAllActionsRsp& a, GetAllActionsRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllActionsRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllActionsRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllActionsRsp* New() const final {
    return CreateMaybeMessage<GetAllActionsRsp>(nullptr);
  }

  GetAllActionsRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllActionsRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllActionsRsp& from);
  void MergeFrom(const GetAllActionsRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllActionsRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetAllActionsRsp";
  }
  protected:
  explicit GetAllActionsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 1,
  };
  // repeated string actions = 1;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  const std::string& actions(int index) const;
  std::string* mutable_actions(int index);
  void set_actions(int index, const std::string& value);
  void set_actions(int index, std::string&& value);
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  std::string* add_actions();
  void add_actions(const std::string& value);
  void add_actions(std::string&& value);
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& actions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_actions();
  private:
  const std::string& _internal_actions(int index) const;
  std::string* _internal_add_actions();
  public:

  // @@protoc_insertion_point(class_scope:ressource.GetAllActionsRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> actions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteApplicationRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteApplicationRqst) */ {
 public:
  inline DeleteApplicationRqst() : DeleteApplicationRqst(nullptr) {}
  virtual ~DeleteApplicationRqst();

  DeleteApplicationRqst(const DeleteApplicationRqst& from);
  DeleteApplicationRqst(DeleteApplicationRqst&& from) noexcept
    : DeleteApplicationRqst() {
    *this = ::std::move(from);
  }

  inline DeleteApplicationRqst& operator=(const DeleteApplicationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteApplicationRqst& operator=(DeleteApplicationRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteApplicationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteApplicationRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteApplicationRqst*>(
               &_DeleteApplicationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DeleteApplicationRqst& a, DeleteApplicationRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteApplicationRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteApplicationRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteApplicationRqst* New() const final {
    return CreateMaybeMessage<DeleteApplicationRqst>(nullptr);
  }

  DeleteApplicationRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteApplicationRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteApplicationRqst& from);
  void MergeFrom(const DeleteApplicationRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteApplicationRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteApplicationRqst";
  }
  protected:
  explicit DeleteApplicationRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
  };
  // string applicationId = 1;
  void clear_applicationid();
  const std::string& applicationid() const;
  void set_applicationid(const std::string& value);
  void set_applicationid(std::string&& value);
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  std::string* mutable_applicationid();
  std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteApplicationRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteApplicationRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteApplicationRsp) */ {
 public:
  inline DeleteApplicationRsp() : DeleteApplicationRsp(nullptr) {}
  virtual ~DeleteApplicationRsp();

  DeleteApplicationRsp(const DeleteApplicationRsp& from);
  DeleteApplicationRsp(DeleteApplicationRsp&& from) noexcept
    : DeleteApplicationRsp() {
    *this = ::std::move(from);
  }

  inline DeleteApplicationRsp& operator=(const DeleteApplicationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteApplicationRsp& operator=(DeleteApplicationRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteApplicationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteApplicationRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteApplicationRsp*>(
               &_DeleteApplicationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DeleteApplicationRsp& a, DeleteApplicationRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteApplicationRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteApplicationRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteApplicationRsp* New() const final {
    return CreateMaybeMessage<DeleteApplicationRsp>(nullptr);
  }

  DeleteApplicationRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteApplicationRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteApplicationRsp& from);
  void MergeFrom(const DeleteApplicationRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteApplicationRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteApplicationRsp";
  }
  protected:
  explicit DeleteApplicationRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteApplicationRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RessourcePermission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RessourcePermission) */ {
 public:
  inline RessourcePermission() : RessourcePermission(nullptr) {}
  virtual ~RessourcePermission();

  RessourcePermission(const RessourcePermission& from);
  RessourcePermission(RessourcePermission&& from) noexcept
    : RessourcePermission() {
    *this = ::std::move(from);
  }

  inline RessourcePermission& operator=(const RessourcePermission& from) {
    CopyFrom(from);
    return *this;
  }
  inline RessourcePermission& operator=(RessourcePermission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RessourcePermission& default_instance();

  enum OwnerCase {
    kUser = 3,
    kRole = 4,
    kApplication = 5,
    kService = 6,
    OWNER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RessourcePermission* internal_default_instance() {
    return reinterpret_cast<const RessourcePermission*>(
               &_RessourcePermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(RessourcePermission& a, RessourcePermission& b) {
    a.Swap(&b);
  }
  inline void Swap(RessourcePermission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RessourcePermission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RessourcePermission* New() const final {
    return CreateMaybeMessage<RessourcePermission>(nullptr);
  }

  RessourcePermission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RessourcePermission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RessourcePermission& from);
  void MergeFrom(const RessourcePermission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RessourcePermission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RessourcePermission";
  }
  protected:
  explicit RessourcePermission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kNumberFieldNumber = 1,
    kUserFieldNumber = 3,
    kRoleFieldNumber = 4,
    kApplicationFieldNumber = 5,
    kServiceFieldNumber = 6,
  };
  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // string user = 3;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string role = 4;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // string application = 5;
  private:
  bool _internal_has_application() const;
  public:
  void clear_application();
  const std::string& application() const;
  void set_application(const std::string& value);
  void set_application(std::string&& value);
  void set_application(const char* value);
  void set_application(const char* value, size_t size);
  std::string* mutable_application();
  std::string* release_application();
  void set_allocated_application(std::string* application);
  private:
  const std::string& _internal_application() const;
  void _internal_set_application(const std::string& value);
  std::string* _internal_mutable_application();
  public:

  // string service = 6;
  private:
  bool _internal_has_service() const;
  public:
  void clear_service();
  const std::string& service() const;
  void set_service(const std::string& value);
  void set_service(std::string&& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  std::string* mutable_service();
  std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  void clear_owner();
  OwnerCase owner_case() const;
  // @@protoc_insertion_point(class_scope:ressource.RessourcePermission)
 private:
  class _Internal;
  void set_has_user();
  void set_has_role();
  void set_has_application();
  void set_has_service();

  inline bool has_owner() const;
  inline void clear_has_owner();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  union OwnerUnion {
    OwnerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  } owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetPermissionsRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetPermissionsRqst) */ {
 public:
  inline GetPermissionsRqst() : GetPermissionsRqst(nullptr) {}
  virtual ~GetPermissionsRqst();

  GetPermissionsRqst(const GetPermissionsRqst& from);
  GetPermissionsRqst(GetPermissionsRqst&& from) noexcept
    : GetPermissionsRqst() {
    *this = ::std::move(from);
  }

  inline GetPermissionsRqst& operator=(const GetPermissionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPermissionsRqst& operator=(GetPermissionsRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPermissionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPermissionsRqst* internal_default_instance() {
    return reinterpret_cast<const GetPermissionsRqst*>(
               &_GetPermissionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetPermissionsRqst& a, GetPermissionsRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPermissionsRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPermissionsRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPermissionsRqst* New() const final {
    return CreateMaybeMessage<GetPermissionsRqst>(nullptr);
  }

  GetPermissionsRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPermissionsRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPermissionsRqst& from);
  void MergeFrom(const GetPermissionsRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPermissionsRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetPermissionsRqst";
  }
  protected:
  explicit GetPermissionsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:ressource.GetPermissionsRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetPermissionsRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetPermissionsRsp) */ {
 public:
  inline GetPermissionsRsp() : GetPermissionsRsp(nullptr) {}
  virtual ~GetPermissionsRsp();

  GetPermissionsRsp(const GetPermissionsRsp& from);
  GetPermissionsRsp(GetPermissionsRsp&& from) noexcept
    : GetPermissionsRsp() {
    *this = ::std::move(from);
  }

  inline GetPermissionsRsp& operator=(const GetPermissionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPermissionsRsp& operator=(GetPermissionsRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPermissionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPermissionsRsp* internal_default_instance() {
    return reinterpret_cast<const GetPermissionsRsp*>(
               &_GetPermissionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetPermissionsRsp& a, GetPermissionsRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPermissionsRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPermissionsRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPermissionsRsp* New() const final {
    return CreateMaybeMessage<GetPermissionsRsp>(nullptr);
  }

  GetPermissionsRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPermissionsRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPermissionsRsp& from);
  void MergeFrom(const GetPermissionsRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPermissionsRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetPermissionsRsp";
  }
  protected:
  explicit GetPermissionsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 1,
  };
  // string permissions = 1;
  void clear_permissions();
  const std::string& permissions() const;
  void set_permissions(const std::string& value);
  void set_permissions(std::string&& value);
  void set_permissions(const char* value);
  void set_permissions(const char* value, size_t size);
  std::string* mutable_permissions();
  std::string* release_permissions();
  void set_allocated_permissions(std::string* permissions);
  private:
  const std::string& _internal_permissions() const;
  void _internal_set_permissions(const std::string& value);
  std::string* _internal_mutable_permissions();
  public:

  // @@protoc_insertion_point(class_scope:ressource.GetPermissionsRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permissions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class SetPermissionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.SetPermissionRqst) */ {
 public:
  inline SetPermissionRqst() : SetPermissionRqst(nullptr) {}
  virtual ~SetPermissionRqst();

  SetPermissionRqst(const SetPermissionRqst& from);
  SetPermissionRqst(SetPermissionRqst&& from) noexcept
    : SetPermissionRqst() {
    *this = ::std::move(from);
  }

  inline SetPermissionRqst& operator=(const SetPermissionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPermissionRqst& operator=(SetPermissionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPermissionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPermissionRqst* internal_default_instance() {
    return reinterpret_cast<const SetPermissionRqst*>(
               &_SetPermissionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SetPermissionRqst& a, SetPermissionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPermissionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPermissionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPermissionRqst* New() const final {
    return CreateMaybeMessage<SetPermissionRqst>(nullptr);
  }

  SetPermissionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPermissionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPermissionRqst& from);
  void MergeFrom(const SetPermissionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPermissionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.SetPermissionRqst";
  }
  protected:
  explicit SetPermissionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionFieldNumber = 1,
  };
  // .ressource.RessourcePermission permission = 1;
  bool has_permission() const;
  private:
  bool _internal_has_permission() const;
  public:
  void clear_permission();
  const ::ressource::RessourcePermission& permission() const;
  ::ressource::RessourcePermission* release_permission();
  ::ressource::RessourcePermission* mutable_permission();
  void set_allocated_permission(::ressource::RessourcePermission* permission);
  private:
  const ::ressource::RessourcePermission& _internal_permission() const;
  ::ressource::RessourcePermission* _internal_mutable_permission();
  public:
  void unsafe_arena_set_allocated_permission(
      ::ressource::RessourcePermission* permission);
  ::ressource::RessourcePermission* unsafe_arena_release_permission();

  // @@protoc_insertion_point(class_scope:ressource.SetPermissionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ressource::RessourcePermission* permission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class SetPermissionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.SetPermissionRsp) */ {
 public:
  inline SetPermissionRsp() : SetPermissionRsp(nullptr) {}
  virtual ~SetPermissionRsp();

  SetPermissionRsp(const SetPermissionRsp& from);
  SetPermissionRsp(SetPermissionRsp&& from) noexcept
    : SetPermissionRsp() {
    *this = ::std::move(from);
  }

  inline SetPermissionRsp& operator=(const SetPermissionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPermissionRsp& operator=(SetPermissionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPermissionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPermissionRsp* internal_default_instance() {
    return reinterpret_cast<const SetPermissionRsp*>(
               &_SetPermissionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SetPermissionRsp& a, SetPermissionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPermissionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPermissionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPermissionRsp* New() const final {
    return CreateMaybeMessage<SetPermissionRsp>(nullptr);
  }

  SetPermissionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPermissionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPermissionRsp& from);
  void MergeFrom(const SetPermissionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPermissionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.SetPermissionRsp";
  }
  protected:
  explicit SetPermissionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.SetPermissionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeletePermissionsRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeletePermissionsRqst) */ {
 public:
  inline DeletePermissionsRqst() : DeletePermissionsRqst(nullptr) {}
  virtual ~DeletePermissionsRqst();

  DeletePermissionsRqst(const DeletePermissionsRqst& from);
  DeletePermissionsRqst(DeletePermissionsRqst&& from) noexcept
    : DeletePermissionsRqst() {
    *this = ::std::move(from);
  }

  inline DeletePermissionsRqst& operator=(const DeletePermissionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePermissionsRqst& operator=(DeletePermissionsRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePermissionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePermissionsRqst* internal_default_instance() {
    return reinterpret_cast<const DeletePermissionsRqst*>(
               &_DeletePermissionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(DeletePermissionsRqst& a, DeletePermissionsRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePermissionsRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePermissionsRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePermissionsRqst* New() const final {
    return CreateMaybeMessage<DeletePermissionsRqst>(nullptr);
  }

  DeletePermissionsRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePermissionsRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePermissionsRqst& from);
  void MergeFrom(const DeletePermissionsRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePermissionsRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeletePermissionsRqst";
  }
  protected:
  explicit DeletePermissionsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string owner = 2;
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeletePermissionsRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeletePermissionsRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeletePermissionsRsp) */ {
 public:
  inline DeletePermissionsRsp() : DeletePermissionsRsp(nullptr) {}
  virtual ~DeletePermissionsRsp();

  DeletePermissionsRsp(const DeletePermissionsRsp& from);
  DeletePermissionsRsp(DeletePermissionsRsp&& from) noexcept
    : DeletePermissionsRsp() {
    *this = ::std::move(from);
  }

  inline DeletePermissionsRsp& operator=(const DeletePermissionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePermissionsRsp& operator=(DeletePermissionsRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePermissionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePermissionsRsp* internal_default_instance() {
    return reinterpret_cast<const DeletePermissionsRsp*>(
               &_DeletePermissionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(DeletePermissionsRsp& a, DeletePermissionsRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePermissionsRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePermissionsRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePermissionsRsp* New() const final {
    return CreateMaybeMessage<DeletePermissionsRsp>(nullptr);
  }

  DeletePermissionsRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePermissionsRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePermissionsRsp& from);
  void MergeFrom(const DeletePermissionsRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePermissionsRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeletePermissionsRsp";
  }
  protected:
  explicit DeletePermissionsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeletePermissionsRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetAllFilesInfoRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetAllFilesInfoRqst) */ {
 public:
  inline GetAllFilesInfoRqst() : GetAllFilesInfoRqst(nullptr) {}
  virtual ~GetAllFilesInfoRqst();

  GetAllFilesInfoRqst(const GetAllFilesInfoRqst& from);
  GetAllFilesInfoRqst(GetAllFilesInfoRqst&& from) noexcept
    : GetAllFilesInfoRqst() {
    *this = ::std::move(from);
  }

  inline GetAllFilesInfoRqst& operator=(const GetAllFilesInfoRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllFilesInfoRqst& operator=(GetAllFilesInfoRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllFilesInfoRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllFilesInfoRqst* internal_default_instance() {
    return reinterpret_cast<const GetAllFilesInfoRqst*>(
               &_GetAllFilesInfoRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetAllFilesInfoRqst& a, GetAllFilesInfoRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllFilesInfoRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllFilesInfoRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllFilesInfoRqst* New() const final {
    return CreateMaybeMessage<GetAllFilesInfoRqst>(nullptr);
  }

  GetAllFilesInfoRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllFilesInfoRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllFilesInfoRqst& from);
  void MergeFrom(const GetAllFilesInfoRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllFilesInfoRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetAllFilesInfoRqst";
  }
  protected:
  explicit GetAllFilesInfoRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ressource.GetAllFilesInfoRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetAllFilesInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetAllFilesInfoRsp) */ {
 public:
  inline GetAllFilesInfoRsp() : GetAllFilesInfoRsp(nullptr) {}
  virtual ~GetAllFilesInfoRsp();

  GetAllFilesInfoRsp(const GetAllFilesInfoRsp& from);
  GetAllFilesInfoRsp(GetAllFilesInfoRsp&& from) noexcept
    : GetAllFilesInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetAllFilesInfoRsp& operator=(const GetAllFilesInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllFilesInfoRsp& operator=(GetAllFilesInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllFilesInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllFilesInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetAllFilesInfoRsp*>(
               &_GetAllFilesInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetAllFilesInfoRsp& a, GetAllFilesInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllFilesInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllFilesInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllFilesInfoRsp* New() const final {
    return CreateMaybeMessage<GetAllFilesInfoRsp>(nullptr);
  }

  GetAllFilesInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllFilesInfoRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllFilesInfoRsp& from);
  void MergeFrom(const GetAllFilesInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllFilesInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetAllFilesInfoRsp";
  }
  protected:
  explicit GetAllFilesInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:ressource.GetAllFilesInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetAllApplicationsInfoRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetAllApplicationsInfoRqst) */ {
 public:
  inline GetAllApplicationsInfoRqst() : GetAllApplicationsInfoRqst(nullptr) {}
  virtual ~GetAllApplicationsInfoRqst();

  GetAllApplicationsInfoRqst(const GetAllApplicationsInfoRqst& from);
  GetAllApplicationsInfoRqst(GetAllApplicationsInfoRqst&& from) noexcept
    : GetAllApplicationsInfoRqst() {
    *this = ::std::move(from);
  }

  inline GetAllApplicationsInfoRqst& operator=(const GetAllApplicationsInfoRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllApplicationsInfoRqst& operator=(GetAllApplicationsInfoRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllApplicationsInfoRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllApplicationsInfoRqst* internal_default_instance() {
    return reinterpret_cast<const GetAllApplicationsInfoRqst*>(
               &_GetAllApplicationsInfoRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetAllApplicationsInfoRqst& a, GetAllApplicationsInfoRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllApplicationsInfoRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllApplicationsInfoRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllApplicationsInfoRqst* New() const final {
    return CreateMaybeMessage<GetAllApplicationsInfoRqst>(nullptr);
  }

  GetAllApplicationsInfoRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllApplicationsInfoRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllApplicationsInfoRqst& from);
  void MergeFrom(const GetAllApplicationsInfoRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllApplicationsInfoRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetAllApplicationsInfoRqst";
  }
  protected:
  explicit GetAllApplicationsInfoRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ressource.GetAllApplicationsInfoRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetAllApplicationsInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetAllApplicationsInfoRsp) */ {
 public:
  inline GetAllApplicationsInfoRsp() : GetAllApplicationsInfoRsp(nullptr) {}
  virtual ~GetAllApplicationsInfoRsp();

  GetAllApplicationsInfoRsp(const GetAllApplicationsInfoRsp& from);
  GetAllApplicationsInfoRsp(GetAllApplicationsInfoRsp&& from) noexcept
    : GetAllApplicationsInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetAllApplicationsInfoRsp& operator=(const GetAllApplicationsInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllApplicationsInfoRsp& operator=(GetAllApplicationsInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllApplicationsInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllApplicationsInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetAllApplicationsInfoRsp*>(
               &_GetAllApplicationsInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetAllApplicationsInfoRsp& a, GetAllApplicationsInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllApplicationsInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllApplicationsInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllApplicationsInfoRsp* New() const final {
    return CreateMaybeMessage<GetAllApplicationsInfoRsp>(nullptr);
  }

  GetAllApplicationsInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllApplicationsInfoRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllApplicationsInfoRsp& from);
  void MergeFrom(const GetAllApplicationsInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllApplicationsInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetAllApplicationsInfoRsp";
  }
  protected:
  explicit GetAllApplicationsInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:ressource.GetAllApplicationsInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class UserSyncInfos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.UserSyncInfos) */ {
 public:
  inline UserSyncInfos() : UserSyncInfos(nullptr) {}
  virtual ~UserSyncInfos();

  UserSyncInfos(const UserSyncInfos& from);
  UserSyncInfos(UserSyncInfos&& from) noexcept
    : UserSyncInfos() {
    *this = ::std::move(from);
  }

  inline UserSyncInfos& operator=(const UserSyncInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSyncInfos& operator=(UserSyncInfos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSyncInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSyncInfos* internal_default_instance() {
    return reinterpret_cast<const UserSyncInfos*>(
               &_UserSyncInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(UserSyncInfos& a, UserSyncInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSyncInfos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSyncInfos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSyncInfos* New() const final {
    return CreateMaybeMessage<UserSyncInfos>(nullptr);
  }

  UserSyncInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSyncInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSyncInfos& from);
  void MergeFrom(const UserSyncInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSyncInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.UserSyncInfos";
  }
  protected:
  explicit UserSyncInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kQueryFieldNumber = 2,
    kIdFieldNumber = 3,
    kEmailFieldNumber = 4,
  };
  // string base = 1;
  void clear_base();
  const std::string& base() const;
  void set_base(const std::string& value);
  void set_base(std::string&& value);
  void set_base(const char* value);
  void set_base(const char* value, size_t size);
  std::string* mutable_base();
  std::string* release_base();
  void set_allocated_base(std::string* base);
  private:
  const std::string& _internal_base() const;
  void _internal_set_base(const std::string& value);
  std::string* _internal_mutable_base();
  public:

  // string query = 2;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string email = 4;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:ressource.UserSyncInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GroupSyncInfos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GroupSyncInfos) */ {
 public:
  inline GroupSyncInfos() : GroupSyncInfos(nullptr) {}
  virtual ~GroupSyncInfos();

  GroupSyncInfos(const GroupSyncInfos& from);
  GroupSyncInfos(GroupSyncInfos&& from) noexcept
    : GroupSyncInfos() {
    *this = ::std::move(from);
  }

  inline GroupSyncInfos& operator=(const GroupSyncInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupSyncInfos& operator=(GroupSyncInfos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupSyncInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupSyncInfos* internal_default_instance() {
    return reinterpret_cast<const GroupSyncInfos*>(
               &_GroupSyncInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GroupSyncInfos& a, GroupSyncInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupSyncInfos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupSyncInfos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupSyncInfos* New() const final {
    return CreateMaybeMessage<GroupSyncInfos>(nullptr);
  }

  GroupSyncInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupSyncInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupSyncInfos& from);
  void MergeFrom(const GroupSyncInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupSyncInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GroupSyncInfos";
  }
  protected:
  explicit GroupSyncInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kQueryFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string base = 1;
  void clear_base();
  const std::string& base() const;
  void set_base(const std::string& value);
  void set_base(std::string&& value);
  void set_base(const char* value);
  void set_base(const char* value, size_t size);
  std::string* mutable_base();
  std::string* release_base();
  void set_allocated_base(std::string* base);
  private:
  const std::string& _internal_base() const;
  void _internal_set_base(const std::string& value);
  std::string* _internal_mutable_base();
  public:

  // string query = 2;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:ressource.GroupSyncInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class LdapSyncInfos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.LdapSyncInfos) */ {
 public:
  inline LdapSyncInfos() : LdapSyncInfos(nullptr) {}
  virtual ~LdapSyncInfos();

  LdapSyncInfos(const LdapSyncInfos& from);
  LdapSyncInfos(LdapSyncInfos&& from) noexcept
    : LdapSyncInfos() {
    *this = ::std::move(from);
  }

  inline LdapSyncInfos& operator=(const LdapSyncInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline LdapSyncInfos& operator=(LdapSyncInfos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LdapSyncInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LdapSyncInfos* internal_default_instance() {
    return reinterpret_cast<const LdapSyncInfos*>(
               &_LdapSyncInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(LdapSyncInfos& a, LdapSyncInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(LdapSyncInfos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LdapSyncInfos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LdapSyncInfos* New() const final {
    return CreateMaybeMessage<LdapSyncInfos>(nullptr);
  }

  LdapSyncInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LdapSyncInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LdapSyncInfos& from);
  void MergeFrom(const LdapSyncInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LdapSyncInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.LdapSyncInfos";
  }
  protected:
  explicit LdapSyncInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLdapSeriveIdFieldNumber = 1,
    kConnectionIdFieldNumber = 2,
    kUserSyncInfosFieldNumber = 4,
    kGroupSyncInfosFieldNumber = 5,
    kRefreshFieldNumber = 3,
  };
  // string ldapSeriveId = 1;
  void clear_ldapseriveid();
  const std::string& ldapseriveid() const;
  void set_ldapseriveid(const std::string& value);
  void set_ldapseriveid(std::string&& value);
  void set_ldapseriveid(const char* value);
  void set_ldapseriveid(const char* value, size_t size);
  std::string* mutable_ldapseriveid();
  std::string* release_ldapseriveid();
  void set_allocated_ldapseriveid(std::string* ldapseriveid);
  private:
  const std::string& _internal_ldapseriveid() const;
  void _internal_set_ldapseriveid(const std::string& value);
  std::string* _internal_mutable_ldapseriveid();
  public:

  // string connectionId = 2;
  void clear_connectionid();
  const std::string& connectionid() const;
  void set_connectionid(const std::string& value);
  void set_connectionid(std::string&& value);
  void set_connectionid(const char* value);
  void set_connectionid(const char* value, size_t size);
  std::string* mutable_connectionid();
  std::string* release_connectionid();
  void set_allocated_connectionid(std::string* connectionid);
  private:
  const std::string& _internal_connectionid() const;
  void _internal_set_connectionid(const std::string& value);
  std::string* _internal_mutable_connectionid();
  public:

  // .ressource.UserSyncInfos userSyncInfos = 4;
  bool has_usersyncinfos() const;
  private:
  bool _internal_has_usersyncinfos() const;
  public:
  void clear_usersyncinfos();
  const ::ressource::UserSyncInfos& usersyncinfos() const;
  ::ressource::UserSyncInfos* release_usersyncinfos();
  ::ressource::UserSyncInfos* mutable_usersyncinfos();
  void set_allocated_usersyncinfos(::ressource::UserSyncInfos* usersyncinfos);
  private:
  const ::ressource::UserSyncInfos& _internal_usersyncinfos() const;
  ::ressource::UserSyncInfos* _internal_mutable_usersyncinfos();
  public:
  void unsafe_arena_set_allocated_usersyncinfos(
      ::ressource::UserSyncInfos* usersyncinfos);
  ::ressource::UserSyncInfos* unsafe_arena_release_usersyncinfos();

  // .ressource.GroupSyncInfos groupSyncInfos = 5;
  bool has_groupsyncinfos() const;
  private:
  bool _internal_has_groupsyncinfos() const;
  public:
  void clear_groupsyncinfos();
  const ::ressource::GroupSyncInfos& groupsyncinfos() const;
  ::ressource::GroupSyncInfos* release_groupsyncinfos();
  ::ressource::GroupSyncInfos* mutable_groupsyncinfos();
  void set_allocated_groupsyncinfos(::ressource::GroupSyncInfos* groupsyncinfos);
  private:
  const ::ressource::GroupSyncInfos& _internal_groupsyncinfos() const;
  ::ressource::GroupSyncInfos* _internal_mutable_groupsyncinfos();
  public:
  void unsafe_arena_set_allocated_groupsyncinfos(
      ::ressource::GroupSyncInfos* groupsyncinfos);
  ::ressource::GroupSyncInfos* unsafe_arena_release_groupsyncinfos();

  // int32 refresh = 3;
  void clear_refresh();
  ::PROTOBUF_NAMESPACE_ID::int32 refresh() const;
  void set_refresh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refresh() const;
  void _internal_set_refresh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.LdapSyncInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ldapseriveid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connectionid_;
  ::ressource::UserSyncInfos* usersyncinfos_;
  ::ressource::GroupSyncInfos* groupsyncinfos_;
  ::PROTOBUF_NAMESPACE_ID::int32 refresh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class SynchronizeLdapRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.SynchronizeLdapRqst) */ {
 public:
  inline SynchronizeLdapRqst() : SynchronizeLdapRqst(nullptr) {}
  virtual ~SynchronizeLdapRqst();

  SynchronizeLdapRqst(const SynchronizeLdapRqst& from);
  SynchronizeLdapRqst(SynchronizeLdapRqst&& from) noexcept
    : SynchronizeLdapRqst() {
    *this = ::std::move(from);
  }

  inline SynchronizeLdapRqst& operator=(const SynchronizeLdapRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronizeLdapRqst& operator=(SynchronizeLdapRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SynchronizeLdapRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SynchronizeLdapRqst* internal_default_instance() {
    return reinterpret_cast<const SynchronizeLdapRqst*>(
               &_SynchronizeLdapRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SynchronizeLdapRqst& a, SynchronizeLdapRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(SynchronizeLdapRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronizeLdapRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SynchronizeLdapRqst* New() const final {
    return CreateMaybeMessage<SynchronizeLdapRqst>(nullptr);
  }

  SynchronizeLdapRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SynchronizeLdapRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SynchronizeLdapRqst& from);
  void MergeFrom(const SynchronizeLdapRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynchronizeLdapRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.SynchronizeLdapRqst";
  }
  protected:
  explicit SynchronizeLdapRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncInfoFieldNumber = 1,
  };
  // .ressource.LdapSyncInfos syncInfo = 1;
  bool has_syncinfo() const;
  private:
  bool _internal_has_syncinfo() const;
  public:
  void clear_syncinfo();
  const ::ressource::LdapSyncInfos& syncinfo() const;
  ::ressource::LdapSyncInfos* release_syncinfo();
  ::ressource::LdapSyncInfos* mutable_syncinfo();
  void set_allocated_syncinfo(::ressource::LdapSyncInfos* syncinfo);
  private:
  const ::ressource::LdapSyncInfos& _internal_syncinfo() const;
  ::ressource::LdapSyncInfos* _internal_mutable_syncinfo();
  public:
  void unsafe_arena_set_allocated_syncinfo(
      ::ressource::LdapSyncInfos* syncinfo);
  ::ressource::LdapSyncInfos* unsafe_arena_release_syncinfo();

  // @@protoc_insertion_point(class_scope:ressource.SynchronizeLdapRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ressource::LdapSyncInfos* syncinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class SynchronizeLdapRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.SynchronizeLdapRsp) */ {
 public:
  inline SynchronizeLdapRsp() : SynchronizeLdapRsp(nullptr) {}
  virtual ~SynchronizeLdapRsp();

  SynchronizeLdapRsp(const SynchronizeLdapRsp& from);
  SynchronizeLdapRsp(SynchronizeLdapRsp&& from) noexcept
    : SynchronizeLdapRsp() {
    *this = ::std::move(from);
  }

  inline SynchronizeLdapRsp& operator=(const SynchronizeLdapRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronizeLdapRsp& operator=(SynchronizeLdapRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SynchronizeLdapRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SynchronizeLdapRsp* internal_default_instance() {
    return reinterpret_cast<const SynchronizeLdapRsp*>(
               &_SynchronizeLdapRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SynchronizeLdapRsp& a, SynchronizeLdapRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SynchronizeLdapRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronizeLdapRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SynchronizeLdapRsp* New() const final {
    return CreateMaybeMessage<SynchronizeLdapRsp>(nullptr);
  }

  SynchronizeLdapRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SynchronizeLdapRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SynchronizeLdapRsp& from);
  void MergeFrom(const SynchronizeLdapRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynchronizeLdapRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.SynchronizeLdapRsp";
  }
  protected:
  explicit SynchronizeLdapRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.SynchronizeLdapRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class SetRessourceOwnerRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.SetRessourceOwnerRqst) */ {
 public:
  inline SetRessourceOwnerRqst() : SetRessourceOwnerRqst(nullptr) {}
  virtual ~SetRessourceOwnerRqst();

  SetRessourceOwnerRqst(const SetRessourceOwnerRqst& from);
  SetRessourceOwnerRqst(SetRessourceOwnerRqst&& from) noexcept
    : SetRessourceOwnerRqst() {
    *this = ::std::move(from);
  }

  inline SetRessourceOwnerRqst& operator=(const SetRessourceOwnerRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRessourceOwnerRqst& operator=(SetRessourceOwnerRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRessourceOwnerRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRessourceOwnerRqst* internal_default_instance() {
    return reinterpret_cast<const SetRessourceOwnerRqst*>(
               &_SetRessourceOwnerRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SetRessourceOwnerRqst& a, SetRessourceOwnerRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRessourceOwnerRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRessourceOwnerRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetRessourceOwnerRqst* New() const final {
    return CreateMaybeMessage<SetRessourceOwnerRqst>(nullptr);
  }

  SetRessourceOwnerRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRessourceOwnerRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRessourceOwnerRqst& from);
  void MergeFrom(const SetRessourceOwnerRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRessourceOwnerRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.SetRessourceOwnerRqst";
  }
  protected:
  explicit SetRessourceOwnerRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string owner = 2;
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // @@protoc_insertion_point(class_scope:ressource.SetRessourceOwnerRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class SetRessourceOwnerRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.SetRessourceOwnerRsp) */ {
 public:
  inline SetRessourceOwnerRsp() : SetRessourceOwnerRsp(nullptr) {}
  virtual ~SetRessourceOwnerRsp();

  SetRessourceOwnerRsp(const SetRessourceOwnerRsp& from);
  SetRessourceOwnerRsp(SetRessourceOwnerRsp&& from) noexcept
    : SetRessourceOwnerRsp() {
    *this = ::std::move(from);
  }

  inline SetRessourceOwnerRsp& operator=(const SetRessourceOwnerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRessourceOwnerRsp& operator=(SetRessourceOwnerRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRessourceOwnerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRessourceOwnerRsp* internal_default_instance() {
    return reinterpret_cast<const SetRessourceOwnerRsp*>(
               &_SetRessourceOwnerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SetRessourceOwnerRsp& a, SetRessourceOwnerRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRessourceOwnerRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRessourceOwnerRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetRessourceOwnerRsp* New() const final {
    return CreateMaybeMessage<SetRessourceOwnerRsp>(nullptr);
  }

  SetRessourceOwnerRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRessourceOwnerRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRessourceOwnerRsp& from);
  void MergeFrom(const SetRessourceOwnerRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRessourceOwnerRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.SetRessourceOwnerRsp";
  }
  protected:
  explicit SetRessourceOwnerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.SetRessourceOwnerRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetRessourceOwnersRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetRessourceOwnersRqst) */ {
 public:
  inline GetRessourceOwnersRqst() : GetRessourceOwnersRqst(nullptr) {}
  virtual ~GetRessourceOwnersRqst();

  GetRessourceOwnersRqst(const GetRessourceOwnersRqst& from);
  GetRessourceOwnersRqst(GetRessourceOwnersRqst&& from) noexcept
    : GetRessourceOwnersRqst() {
    *this = ::std::move(from);
  }

  inline GetRessourceOwnersRqst& operator=(const GetRessourceOwnersRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRessourceOwnersRqst& operator=(GetRessourceOwnersRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRessourceOwnersRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRessourceOwnersRqst* internal_default_instance() {
    return reinterpret_cast<const GetRessourceOwnersRqst*>(
               &_GetRessourceOwnersRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetRessourceOwnersRqst& a, GetRessourceOwnersRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRessourceOwnersRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRessourceOwnersRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRessourceOwnersRqst* New() const final {
    return CreateMaybeMessage<GetRessourceOwnersRqst>(nullptr);
  }

  GetRessourceOwnersRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRessourceOwnersRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRessourceOwnersRqst& from);
  void MergeFrom(const GetRessourceOwnersRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRessourceOwnersRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetRessourceOwnersRqst";
  }
  protected:
  explicit GetRessourceOwnersRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:ressource.GetRessourceOwnersRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetRessourceOwnersRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetRessourceOwnersRsp) */ {
 public:
  inline GetRessourceOwnersRsp() : GetRessourceOwnersRsp(nullptr) {}
  virtual ~GetRessourceOwnersRsp();

  GetRessourceOwnersRsp(const GetRessourceOwnersRsp& from);
  GetRessourceOwnersRsp(GetRessourceOwnersRsp&& from) noexcept
    : GetRessourceOwnersRsp() {
    *this = ::std::move(from);
  }

  inline GetRessourceOwnersRsp& operator=(const GetRessourceOwnersRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRessourceOwnersRsp& operator=(GetRessourceOwnersRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRessourceOwnersRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRessourceOwnersRsp* internal_default_instance() {
    return reinterpret_cast<const GetRessourceOwnersRsp*>(
               &_GetRessourceOwnersRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetRessourceOwnersRsp& a, GetRessourceOwnersRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRessourceOwnersRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRessourceOwnersRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRessourceOwnersRsp* New() const final {
    return CreateMaybeMessage<GetRessourceOwnersRsp>(nullptr);
  }

  GetRessourceOwnersRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRessourceOwnersRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRessourceOwnersRsp& from);
  void MergeFrom(const GetRessourceOwnersRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRessourceOwnersRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetRessourceOwnersRsp";
  }
  protected:
  explicit GetRessourceOwnersRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnersFieldNumber = 1,
  };
  // repeated string owners = 1;
  int owners_size() const;
  private:
  int _internal_owners_size() const;
  public:
  void clear_owners();
  const std::string& owners(int index) const;
  std::string* mutable_owners(int index);
  void set_owners(int index, const std::string& value);
  void set_owners(int index, std::string&& value);
  void set_owners(int index, const char* value);
  void set_owners(int index, const char* value, size_t size);
  std::string* add_owners();
  void add_owners(const std::string& value);
  void add_owners(std::string&& value);
  void add_owners(const char* value);
  void add_owners(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& owners() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_owners();
  private:
  const std::string& _internal_owners(int index) const;
  std::string* _internal_add_owners();
  public:

  // @@protoc_insertion_point(class_scope:ressource.GetRessourceOwnersRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> owners_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteRessourceOwnerRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteRessourceOwnerRqst) */ {
 public:
  inline DeleteRessourceOwnerRqst() : DeleteRessourceOwnerRqst(nullptr) {}
  virtual ~DeleteRessourceOwnerRqst();

  DeleteRessourceOwnerRqst(const DeleteRessourceOwnerRqst& from);
  DeleteRessourceOwnerRqst(DeleteRessourceOwnerRqst&& from) noexcept
    : DeleteRessourceOwnerRqst() {
    *this = ::std::move(from);
  }

  inline DeleteRessourceOwnerRqst& operator=(const DeleteRessourceOwnerRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRessourceOwnerRqst& operator=(DeleteRessourceOwnerRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRessourceOwnerRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRessourceOwnerRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteRessourceOwnerRqst*>(
               &_DeleteRessourceOwnerRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(DeleteRessourceOwnerRqst& a, DeleteRessourceOwnerRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRessourceOwnerRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRessourceOwnerRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRessourceOwnerRqst* New() const final {
    return CreateMaybeMessage<DeleteRessourceOwnerRqst>(nullptr);
  }

  DeleteRessourceOwnerRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRessourceOwnerRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRessourceOwnerRqst& from);
  void MergeFrom(const DeleteRessourceOwnerRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRessourceOwnerRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteRessourceOwnerRqst";
  }
  protected:
  explicit DeleteRessourceOwnerRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string owner = 2;
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteRessourceOwnerRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteRessourceOwnerRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteRessourceOwnerRsp) */ {
 public:
  inline DeleteRessourceOwnerRsp() : DeleteRessourceOwnerRsp(nullptr) {}
  virtual ~DeleteRessourceOwnerRsp();

  DeleteRessourceOwnerRsp(const DeleteRessourceOwnerRsp& from);
  DeleteRessourceOwnerRsp(DeleteRessourceOwnerRsp&& from) noexcept
    : DeleteRessourceOwnerRsp() {
    *this = ::std::move(from);
  }

  inline DeleteRessourceOwnerRsp& operator=(const DeleteRessourceOwnerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRessourceOwnerRsp& operator=(DeleteRessourceOwnerRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRessourceOwnerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRessourceOwnerRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteRessourceOwnerRsp*>(
               &_DeleteRessourceOwnerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(DeleteRessourceOwnerRsp& a, DeleteRessourceOwnerRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRessourceOwnerRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRessourceOwnerRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRessourceOwnerRsp* New() const final {
    return CreateMaybeMessage<DeleteRessourceOwnerRsp>(nullptr);
  }

  DeleteRessourceOwnerRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRessourceOwnerRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRessourceOwnerRsp& from);
  void MergeFrom(const DeleteRessourceOwnerRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRessourceOwnerRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteRessourceOwnerRsp";
  }
  protected:
  explicit DeleteRessourceOwnerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteRessourceOwnerRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteRessourceOwnersRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteRessourceOwnersRqst) */ {
 public:
  inline DeleteRessourceOwnersRqst() : DeleteRessourceOwnersRqst(nullptr) {}
  virtual ~DeleteRessourceOwnersRqst();

  DeleteRessourceOwnersRqst(const DeleteRessourceOwnersRqst& from);
  DeleteRessourceOwnersRqst(DeleteRessourceOwnersRqst&& from) noexcept
    : DeleteRessourceOwnersRqst() {
    *this = ::std::move(from);
  }

  inline DeleteRessourceOwnersRqst& operator=(const DeleteRessourceOwnersRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRessourceOwnersRqst& operator=(DeleteRessourceOwnersRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRessourceOwnersRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRessourceOwnersRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteRessourceOwnersRqst*>(
               &_DeleteRessourceOwnersRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(DeleteRessourceOwnersRqst& a, DeleteRessourceOwnersRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRessourceOwnersRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRessourceOwnersRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRessourceOwnersRqst* New() const final {
    return CreateMaybeMessage<DeleteRessourceOwnersRqst>(nullptr);
  }

  DeleteRessourceOwnersRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRessourceOwnersRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRessourceOwnersRqst& from);
  void MergeFrom(const DeleteRessourceOwnersRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRessourceOwnersRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteRessourceOwnersRqst";
  }
  protected:
  explicit DeleteRessourceOwnersRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteRessourceOwnersRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteRessourceOwnersRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteRessourceOwnersRsp) */ {
 public:
  inline DeleteRessourceOwnersRsp() : DeleteRessourceOwnersRsp(nullptr) {}
  virtual ~DeleteRessourceOwnersRsp();

  DeleteRessourceOwnersRsp(const DeleteRessourceOwnersRsp& from);
  DeleteRessourceOwnersRsp(DeleteRessourceOwnersRsp&& from) noexcept
    : DeleteRessourceOwnersRsp() {
    *this = ::std::move(from);
  }

  inline DeleteRessourceOwnersRsp& operator=(const DeleteRessourceOwnersRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRessourceOwnersRsp& operator=(DeleteRessourceOwnersRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRessourceOwnersRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRessourceOwnersRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteRessourceOwnersRsp*>(
               &_DeleteRessourceOwnersRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(DeleteRessourceOwnersRsp& a, DeleteRessourceOwnersRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRessourceOwnersRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRessourceOwnersRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRessourceOwnersRsp* New() const final {
    return CreateMaybeMessage<DeleteRessourceOwnersRsp>(nullptr);
  }

  DeleteRessourceOwnersRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRessourceOwnersRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRessourceOwnersRsp& from);
  void MergeFrom(const DeleteRessourceOwnersRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRessourceOwnersRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteRessourceOwnersRsp";
  }
  protected:
  explicit DeleteRessourceOwnersRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteRessourceOwnersRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ValidateTokenRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ValidateTokenRqst) */ {
 public:
  inline ValidateTokenRqst() : ValidateTokenRqst(nullptr) {}
  virtual ~ValidateTokenRqst();

  ValidateTokenRqst(const ValidateTokenRqst& from);
  ValidateTokenRqst(ValidateTokenRqst&& from) noexcept
    : ValidateTokenRqst() {
    *this = ::std::move(from);
  }

  inline ValidateTokenRqst& operator=(const ValidateTokenRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateTokenRqst& operator=(ValidateTokenRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateTokenRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateTokenRqst* internal_default_instance() {
    return reinterpret_cast<const ValidateTokenRqst*>(
               &_ValidateTokenRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ValidateTokenRqst& a, ValidateTokenRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateTokenRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateTokenRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateTokenRqst* New() const final {
    return CreateMaybeMessage<ValidateTokenRqst>(nullptr);
  }

  ValidateTokenRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateTokenRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateTokenRqst& from);
  void MergeFrom(const ValidateTokenRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateTokenRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ValidateTokenRqst";
  }
  protected:
  explicit ValidateTokenRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:ressource.ValidateTokenRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ValidateTokenRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ValidateTokenRsp) */ {
 public:
  inline ValidateTokenRsp() : ValidateTokenRsp(nullptr) {}
  virtual ~ValidateTokenRsp();

  ValidateTokenRsp(const ValidateTokenRsp& from);
  ValidateTokenRsp(ValidateTokenRsp&& from) noexcept
    : ValidateTokenRsp() {
    *this = ::std::move(from);
  }

  inline ValidateTokenRsp& operator=(const ValidateTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateTokenRsp& operator=(ValidateTokenRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateTokenRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateTokenRsp* internal_default_instance() {
    return reinterpret_cast<const ValidateTokenRsp*>(
               &_ValidateTokenRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ValidateTokenRsp& a, ValidateTokenRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateTokenRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateTokenRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateTokenRsp* New() const final {
    return CreateMaybeMessage<ValidateTokenRsp>(nullptr);
  }

  ValidateTokenRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateTokenRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateTokenRsp& from);
  void MergeFrom(const ValidateTokenRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateTokenRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ValidateTokenRsp";
  }
  protected:
  explicit ValidateTokenRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kExpiredFieldNumber = 2,
  };
  // string clientId = 1;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // int64 expired = 2;
  void clear_expired();
  ::PROTOBUF_NAMESPACE_ID::int64 expired() const;
  void set_expired(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expired() const;
  void _internal_set_expired(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.ValidateTokenRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::int64 expired_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ValidateApplicationAccessRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ValidateApplicationAccessRqst) */ {
 public:
  inline ValidateApplicationAccessRqst() : ValidateApplicationAccessRqst(nullptr) {}
  virtual ~ValidateApplicationAccessRqst();

  ValidateApplicationAccessRqst(const ValidateApplicationAccessRqst& from);
  ValidateApplicationAccessRqst(ValidateApplicationAccessRqst&& from) noexcept
    : ValidateApplicationAccessRqst() {
    *this = ::std::move(from);
  }

  inline ValidateApplicationAccessRqst& operator=(const ValidateApplicationAccessRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateApplicationAccessRqst& operator=(ValidateApplicationAccessRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateApplicationAccessRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateApplicationAccessRqst* internal_default_instance() {
    return reinterpret_cast<const ValidateApplicationAccessRqst*>(
               &_ValidateApplicationAccessRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ValidateApplicationAccessRqst& a, ValidateApplicationAccessRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateApplicationAccessRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateApplicationAccessRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateApplicationAccessRqst* New() const final {
    return CreateMaybeMessage<ValidateApplicationAccessRqst>(nullptr);
  }

  ValidateApplicationAccessRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateApplicationAccessRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateApplicationAccessRqst& from);
  void MergeFrom(const ValidateApplicationAccessRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateApplicationAccessRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ValidateApplicationAccessRqst";
  }
  protected:
  explicit ValidateApplicationAccessRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string method = 2;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // @@protoc_insertion_point(class_scope:ressource.ValidateApplicationAccessRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ValidateApplicationAccessRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ValidateApplicationAccessRsp) */ {
 public:
  inline ValidateApplicationAccessRsp() : ValidateApplicationAccessRsp(nullptr) {}
  virtual ~ValidateApplicationAccessRsp();

  ValidateApplicationAccessRsp(const ValidateApplicationAccessRsp& from);
  ValidateApplicationAccessRsp(ValidateApplicationAccessRsp&& from) noexcept
    : ValidateApplicationAccessRsp() {
    *this = ::std::move(from);
  }

  inline ValidateApplicationAccessRsp& operator=(const ValidateApplicationAccessRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateApplicationAccessRsp& operator=(ValidateApplicationAccessRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateApplicationAccessRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateApplicationAccessRsp* internal_default_instance() {
    return reinterpret_cast<const ValidateApplicationAccessRsp*>(
               &_ValidateApplicationAccessRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ValidateApplicationAccessRsp& a, ValidateApplicationAccessRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateApplicationAccessRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateApplicationAccessRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateApplicationAccessRsp* New() const final {
    return CreateMaybeMessage<ValidateApplicationAccessRsp>(nullptr);
  }

  ValidateApplicationAccessRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateApplicationAccessRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateApplicationAccessRsp& from);
  void MergeFrom(const ValidateApplicationAccessRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateApplicationAccessRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ValidateApplicationAccessRsp";
  }
  protected:
  explicit ValidateApplicationAccessRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.ValidateApplicationAccessRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ValidateUserAccessRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ValidateUserAccessRqst) */ {
 public:
  inline ValidateUserAccessRqst() : ValidateUserAccessRqst(nullptr) {}
  virtual ~ValidateUserAccessRqst();

  ValidateUserAccessRqst(const ValidateUserAccessRqst& from);
  ValidateUserAccessRqst(ValidateUserAccessRqst&& from) noexcept
    : ValidateUserAccessRqst() {
    *this = ::std::move(from);
  }

  inline ValidateUserAccessRqst& operator=(const ValidateUserAccessRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateUserAccessRqst& operator=(ValidateUserAccessRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateUserAccessRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateUserAccessRqst* internal_default_instance() {
    return reinterpret_cast<const ValidateUserAccessRqst*>(
               &_ValidateUserAccessRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(ValidateUserAccessRqst& a, ValidateUserAccessRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateUserAccessRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateUserAccessRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateUserAccessRqst* New() const final {
    return CreateMaybeMessage<ValidateUserAccessRqst>(nullptr);
  }

  ValidateUserAccessRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateUserAccessRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateUserAccessRqst& from);
  void MergeFrom(const ValidateUserAccessRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateUserAccessRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ValidateUserAccessRqst";
  }
  protected:
  explicit ValidateUserAccessRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string method = 2;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // @@protoc_insertion_point(class_scope:ressource.ValidateUserAccessRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ValidateUserAccessRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ValidateUserAccessRsp) */ {
 public:
  inline ValidateUserAccessRsp() : ValidateUserAccessRsp(nullptr) {}
  virtual ~ValidateUserAccessRsp();

  ValidateUserAccessRsp(const ValidateUserAccessRsp& from);
  ValidateUserAccessRsp(ValidateUserAccessRsp&& from) noexcept
    : ValidateUserAccessRsp() {
    *this = ::std::move(from);
  }

  inline ValidateUserAccessRsp& operator=(const ValidateUserAccessRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateUserAccessRsp& operator=(ValidateUserAccessRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateUserAccessRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateUserAccessRsp* internal_default_instance() {
    return reinterpret_cast<const ValidateUserAccessRsp*>(
               &_ValidateUserAccessRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(ValidateUserAccessRsp& a, ValidateUserAccessRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateUserAccessRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateUserAccessRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateUserAccessRsp* New() const final {
    return CreateMaybeMessage<ValidateUserAccessRsp>(nullptr);
  }

  ValidateUserAccessRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateUserAccessRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateUserAccessRsp& from);
  void MergeFrom(const ValidateUserAccessRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateUserAccessRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ValidateUserAccessRsp";
  }
  protected:
  explicit ValidateUserAccessRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.ValidateUserAccessRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ValidateUserRessourceAccessRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ValidateUserRessourceAccessRqst) */ {
 public:
  inline ValidateUserRessourceAccessRqst() : ValidateUserRessourceAccessRqst(nullptr) {}
  virtual ~ValidateUserRessourceAccessRqst();

  ValidateUserRessourceAccessRqst(const ValidateUserRessourceAccessRqst& from);
  ValidateUserRessourceAccessRqst(ValidateUserRessourceAccessRqst&& from) noexcept
    : ValidateUserRessourceAccessRqst() {
    *this = ::std::move(from);
  }

  inline ValidateUserRessourceAccessRqst& operator=(const ValidateUserRessourceAccessRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateUserRessourceAccessRqst& operator=(ValidateUserRessourceAccessRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateUserRessourceAccessRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateUserRessourceAccessRqst* internal_default_instance() {
    return reinterpret_cast<const ValidateUserRessourceAccessRqst*>(
               &_ValidateUserRessourceAccessRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(ValidateUserRessourceAccessRqst& a, ValidateUserRessourceAccessRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateUserRessourceAccessRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateUserRessourceAccessRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateUserRessourceAccessRqst* New() const final {
    return CreateMaybeMessage<ValidateUserRessourceAccessRqst>(nullptr);
  }

  ValidateUserRessourceAccessRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateUserRessourceAccessRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateUserRessourceAccessRqst& from);
  void MergeFrom(const ValidateUserRessourceAccessRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateUserRessourceAccessRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ValidateUserRessourceAccessRqst";
  }
  protected:
  explicit ValidateUserRessourceAccessRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kMethodFieldNumber = 2,
    kPathFieldNumber = 3,
    kPermissionFieldNumber = 4,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string method = 2;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string path = 3;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 permission = 4;
  void clear_permission();
  ::PROTOBUF_NAMESPACE_ID::int32 permission() const;
  void set_permission(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_permission() const;
  void _internal_set_permission(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.ValidateUserRessourceAccessRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 permission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ValidateUserRessourceAccessRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ValidateUserRessourceAccessRsp) */ {
 public:
  inline ValidateUserRessourceAccessRsp() : ValidateUserRessourceAccessRsp(nullptr) {}
  virtual ~ValidateUserRessourceAccessRsp();

  ValidateUserRessourceAccessRsp(const ValidateUserRessourceAccessRsp& from);
  ValidateUserRessourceAccessRsp(ValidateUserRessourceAccessRsp&& from) noexcept
    : ValidateUserRessourceAccessRsp() {
    *this = ::std::move(from);
  }

  inline ValidateUserRessourceAccessRsp& operator=(const ValidateUserRessourceAccessRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateUserRessourceAccessRsp& operator=(ValidateUserRessourceAccessRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateUserRessourceAccessRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateUserRessourceAccessRsp* internal_default_instance() {
    return reinterpret_cast<const ValidateUserRessourceAccessRsp*>(
               &_ValidateUserRessourceAccessRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ValidateUserRessourceAccessRsp& a, ValidateUserRessourceAccessRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateUserRessourceAccessRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateUserRessourceAccessRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateUserRessourceAccessRsp* New() const final {
    return CreateMaybeMessage<ValidateUserRessourceAccessRsp>(nullptr);
  }

  ValidateUserRessourceAccessRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateUserRessourceAccessRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateUserRessourceAccessRsp& from);
  void MergeFrom(const ValidateUserRessourceAccessRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateUserRessourceAccessRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ValidateUserRessourceAccessRsp";
  }
  protected:
  explicit ValidateUserRessourceAccessRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.ValidateUserRessourceAccessRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ValidateApplicationRessourceAccessRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ValidateApplicationRessourceAccessRqst) */ {
 public:
  inline ValidateApplicationRessourceAccessRqst() : ValidateApplicationRessourceAccessRqst(nullptr) {}
  virtual ~ValidateApplicationRessourceAccessRqst();

  ValidateApplicationRessourceAccessRqst(const ValidateApplicationRessourceAccessRqst& from);
  ValidateApplicationRessourceAccessRqst(ValidateApplicationRessourceAccessRqst&& from) noexcept
    : ValidateApplicationRessourceAccessRqst() {
    *this = ::std::move(from);
  }

  inline ValidateApplicationRessourceAccessRqst& operator=(const ValidateApplicationRessourceAccessRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateApplicationRessourceAccessRqst& operator=(ValidateApplicationRessourceAccessRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateApplicationRessourceAccessRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateApplicationRessourceAccessRqst* internal_default_instance() {
    return reinterpret_cast<const ValidateApplicationRessourceAccessRqst*>(
               &_ValidateApplicationRessourceAccessRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ValidateApplicationRessourceAccessRqst& a, ValidateApplicationRessourceAccessRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateApplicationRessourceAccessRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateApplicationRessourceAccessRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateApplicationRessourceAccessRqst* New() const final {
    return CreateMaybeMessage<ValidateApplicationRessourceAccessRqst>(nullptr);
  }

  ValidateApplicationRessourceAccessRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateApplicationRessourceAccessRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateApplicationRessourceAccessRqst& from);
  void MergeFrom(const ValidateApplicationRessourceAccessRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateApplicationRessourceAccessRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ValidateApplicationRessourceAccessRqst";
  }
  protected:
  explicit ValidateApplicationRessourceAccessRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMethodFieldNumber = 2,
    kPathFieldNumber = 3,
    kPermissionFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string method = 2;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string path = 3;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 permission = 4;
  void clear_permission();
  ::PROTOBUF_NAMESPACE_ID::int32 permission() const;
  void set_permission(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_permission() const;
  void _internal_set_permission(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.ValidateApplicationRessourceAccessRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 permission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ValidateApplicationRessourceAccessRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ValidateApplicationRessourceAccessRsp) */ {
 public:
  inline ValidateApplicationRessourceAccessRsp() : ValidateApplicationRessourceAccessRsp(nullptr) {}
  virtual ~ValidateApplicationRessourceAccessRsp();

  ValidateApplicationRessourceAccessRsp(const ValidateApplicationRessourceAccessRsp& from);
  ValidateApplicationRessourceAccessRsp(ValidateApplicationRessourceAccessRsp&& from) noexcept
    : ValidateApplicationRessourceAccessRsp() {
    *this = ::std::move(from);
  }

  inline ValidateApplicationRessourceAccessRsp& operator=(const ValidateApplicationRessourceAccessRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateApplicationRessourceAccessRsp& operator=(ValidateApplicationRessourceAccessRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateApplicationRessourceAccessRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateApplicationRessourceAccessRsp* internal_default_instance() {
    return reinterpret_cast<const ValidateApplicationRessourceAccessRsp*>(
               &_ValidateApplicationRessourceAccessRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ValidateApplicationRessourceAccessRsp& a, ValidateApplicationRessourceAccessRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateApplicationRessourceAccessRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateApplicationRessourceAccessRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateApplicationRessourceAccessRsp* New() const final {
    return CreateMaybeMessage<ValidateApplicationRessourceAccessRsp>(nullptr);
  }

  ValidateApplicationRessourceAccessRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateApplicationRessourceAccessRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateApplicationRessourceAccessRsp& from);
  void MergeFrom(const ValidateApplicationRessourceAccessRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateApplicationRessourceAccessRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ValidateApplicationRessourceAccessRsp";
  }
  protected:
  explicit ValidateApplicationRessourceAccessRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.ValidateApplicationRessourceAccessRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class AccountExistRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.AccountExistRqst) */ {
 public:
  inline AccountExistRqst() : AccountExistRqst(nullptr) {}
  virtual ~AccountExistRqst();

  AccountExistRqst(const AccountExistRqst& from);
  AccountExistRqst(AccountExistRqst&& from) noexcept
    : AccountExistRqst() {
    *this = ::std::move(from);
  }

  inline AccountExistRqst& operator=(const AccountExistRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountExistRqst& operator=(AccountExistRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountExistRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountExistRqst* internal_default_instance() {
    return reinterpret_cast<const AccountExistRqst*>(
               &_AccountExistRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(AccountExistRqst& a, AccountExistRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountExistRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountExistRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountExistRqst* New() const final {
    return CreateMaybeMessage<AccountExistRqst>(nullptr);
  }

  AccountExistRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountExistRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountExistRqst& from);
  void MergeFrom(const AccountExistRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountExistRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.AccountExistRqst";
  }
  protected:
  explicit AccountExistRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:ressource.AccountExistRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class AccountExistRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.AccountExistRsp) */ {
 public:
  inline AccountExistRsp() : AccountExistRsp(nullptr) {}
  virtual ~AccountExistRsp();

  AccountExistRsp(const AccountExistRsp& from);
  AccountExistRsp(AccountExistRsp&& from) noexcept
    : AccountExistRsp() {
    *this = ::std::move(from);
  }

  inline AccountExistRsp& operator=(const AccountExistRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountExistRsp& operator=(AccountExistRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountExistRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountExistRsp* internal_default_instance() {
    return reinterpret_cast<const AccountExistRsp*>(
               &_AccountExistRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(AccountExistRsp& a, AccountExistRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountExistRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountExistRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountExistRsp* New() const final {
    return CreateMaybeMessage<AccountExistRsp>(nullptr);
  }

  AccountExistRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountExistRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountExistRsp& from);
  void MergeFrom(const AccountExistRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountExistRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.AccountExistRsp";
  }
  protected:
  explicit AccountExistRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.AccountExistRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteAccountPermissionsRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteAccountPermissionsRqst) */ {
 public:
  inline DeleteAccountPermissionsRqst() : DeleteAccountPermissionsRqst(nullptr) {}
  virtual ~DeleteAccountPermissionsRqst();

  DeleteAccountPermissionsRqst(const DeleteAccountPermissionsRqst& from);
  DeleteAccountPermissionsRqst(DeleteAccountPermissionsRqst&& from) noexcept
    : DeleteAccountPermissionsRqst() {
    *this = ::std::move(from);
  }

  inline DeleteAccountPermissionsRqst& operator=(const DeleteAccountPermissionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAccountPermissionsRqst& operator=(DeleteAccountPermissionsRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAccountPermissionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAccountPermissionsRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteAccountPermissionsRqst*>(
               &_DeleteAccountPermissionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(DeleteAccountPermissionsRqst& a, DeleteAccountPermissionsRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAccountPermissionsRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAccountPermissionsRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAccountPermissionsRqst* New() const final {
    return CreateMaybeMessage<DeleteAccountPermissionsRqst>(nullptr);
  }

  DeleteAccountPermissionsRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAccountPermissionsRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAccountPermissionsRqst& from);
  void MergeFrom(const DeleteAccountPermissionsRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAccountPermissionsRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteAccountPermissionsRqst";
  }
  protected:
  explicit DeleteAccountPermissionsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteAccountPermissionsRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteAccountPermissionsRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteAccountPermissionsRsp) */ {
 public:
  inline DeleteAccountPermissionsRsp() : DeleteAccountPermissionsRsp(nullptr) {}
  virtual ~DeleteAccountPermissionsRsp();

  DeleteAccountPermissionsRsp(const DeleteAccountPermissionsRsp& from);
  DeleteAccountPermissionsRsp(DeleteAccountPermissionsRsp&& from) noexcept
    : DeleteAccountPermissionsRsp() {
    *this = ::std::move(from);
  }

  inline DeleteAccountPermissionsRsp& operator=(const DeleteAccountPermissionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAccountPermissionsRsp& operator=(DeleteAccountPermissionsRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAccountPermissionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAccountPermissionsRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteAccountPermissionsRsp*>(
               &_DeleteAccountPermissionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(DeleteAccountPermissionsRsp& a, DeleteAccountPermissionsRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAccountPermissionsRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAccountPermissionsRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAccountPermissionsRsp* New() const final {
    return CreateMaybeMessage<DeleteAccountPermissionsRsp>(nullptr);
  }

  DeleteAccountPermissionsRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAccountPermissionsRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAccountPermissionsRsp& from);
  void MergeFrom(const DeleteAccountPermissionsRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAccountPermissionsRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteAccountPermissionsRsp";
  }
  protected:
  explicit DeleteAccountPermissionsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteAccountPermissionsRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteRolePermissionsRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteRolePermissionsRqst) */ {
 public:
  inline DeleteRolePermissionsRqst() : DeleteRolePermissionsRqst(nullptr) {}
  virtual ~DeleteRolePermissionsRqst();

  DeleteRolePermissionsRqst(const DeleteRolePermissionsRqst& from);
  DeleteRolePermissionsRqst(DeleteRolePermissionsRqst&& from) noexcept
    : DeleteRolePermissionsRqst() {
    *this = ::std::move(from);
  }

  inline DeleteRolePermissionsRqst& operator=(const DeleteRolePermissionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRolePermissionsRqst& operator=(DeleteRolePermissionsRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRolePermissionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRolePermissionsRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteRolePermissionsRqst*>(
               &_DeleteRolePermissionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(DeleteRolePermissionsRqst& a, DeleteRolePermissionsRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRolePermissionsRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRolePermissionsRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRolePermissionsRqst* New() const final {
    return CreateMaybeMessage<DeleteRolePermissionsRqst>(nullptr);
  }

  DeleteRolePermissionsRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRolePermissionsRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRolePermissionsRqst& from);
  void MergeFrom(const DeleteRolePermissionsRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRolePermissionsRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteRolePermissionsRqst";
  }
  protected:
  explicit DeleteRolePermissionsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteRolePermissionsRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteRolePermissionsRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteRolePermissionsRsp) */ {
 public:
  inline DeleteRolePermissionsRsp() : DeleteRolePermissionsRsp(nullptr) {}
  virtual ~DeleteRolePermissionsRsp();

  DeleteRolePermissionsRsp(const DeleteRolePermissionsRsp& from);
  DeleteRolePermissionsRsp(DeleteRolePermissionsRsp&& from) noexcept
    : DeleteRolePermissionsRsp() {
    *this = ::std::move(from);
  }

  inline DeleteRolePermissionsRsp& operator=(const DeleteRolePermissionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRolePermissionsRsp& operator=(DeleteRolePermissionsRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRolePermissionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRolePermissionsRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteRolePermissionsRsp*>(
               &_DeleteRolePermissionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(DeleteRolePermissionsRsp& a, DeleteRolePermissionsRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRolePermissionsRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRolePermissionsRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRolePermissionsRsp* New() const final {
    return CreateMaybeMessage<DeleteRolePermissionsRsp>(nullptr);
  }

  DeleteRolePermissionsRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRolePermissionsRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRolePermissionsRsp& from);
  void MergeFrom(const DeleteRolePermissionsRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRolePermissionsRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteRolePermissionsRsp";
  }
  protected:
  explicit DeleteRolePermissionsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteRolePermissionsRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class LogInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.LogInfo) */ {
 public:
  inline LogInfo() : LogInfo(nullptr) {}
  virtual ~LogInfo();

  LogInfo(const LogInfo& from);
  LogInfo(LogInfo&& from) noexcept
    : LogInfo() {
    *this = ::std::move(from);
  }

  inline LogInfo& operator=(const LogInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogInfo& operator=(LogInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogInfo* internal_default_instance() {
    return reinterpret_cast<const LogInfo*>(
               &_LogInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(LogInfo& a, LogInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LogInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogInfo* New() const final {
    return CreateMaybeMessage<LogInfo>(nullptr);
  }

  LogInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogInfo& from);
  void MergeFrom(const LogInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.LogInfo";
  }
  protected:
  explicit LogInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kUserNameFieldNumber = 5,
    kMethodFieldNumber = 6,
    kMessageFieldNumber = 7,
    kDateFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string application = 3;
  void clear_application();
  const std::string& application() const;
  void set_application(const std::string& value);
  void set_application(std::string&& value);
  void set_application(const char* value);
  void set_application(const char* value, size_t size);
  std::string* mutable_application();
  std::string* release_application();
  void set_allocated_application(std::string* application);
  private:
  const std::string& _internal_application() const;
  void _internal_set_application(const std::string& value);
  std::string* _internal_mutable_application();
  public:

  // string userId = 4;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string userName = 5;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string method = 6;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string message = 7;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 date = 1;
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::int64 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .ressource.LogType type = 2;
  void clear_type();
  ::ressource::LogType type() const;
  void set_type(::ressource::LogType value);
  private:
  ::ressource::LogType _internal_type() const;
  void _internal_set_type(::ressource::LogType value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.LogInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 date_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class LogRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.LogRqst) */ {
 public:
  inline LogRqst() : LogRqst(nullptr) {}
  virtual ~LogRqst();

  LogRqst(const LogRqst& from);
  LogRqst(LogRqst&& from) noexcept
    : LogRqst() {
    *this = ::std::move(from);
  }

  inline LogRqst& operator=(const LogRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRqst& operator=(LogRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogRqst* internal_default_instance() {
    return reinterpret_cast<const LogRqst*>(
               &_LogRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(LogRqst& a, LogRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogRqst* New() const final {
    return CreateMaybeMessage<LogRqst>(nullptr);
  }

  LogRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogRqst& from);
  void MergeFrom(const LogRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.LogRqst";
  }
  protected:
  explicit LogRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .ressource.LogInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ressource::LogInfo& info() const;
  ::ressource::LogInfo* release_info();
  ::ressource::LogInfo* mutable_info();
  void set_allocated_info(::ressource::LogInfo* info);
  private:
  const ::ressource::LogInfo& _internal_info() const;
  ::ressource::LogInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ressource::LogInfo* info);
  ::ressource::LogInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:ressource.LogRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ressource::LogInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class LogRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.LogRsp) */ {
 public:
  inline LogRsp() : LogRsp(nullptr) {}
  virtual ~LogRsp();

  LogRsp(const LogRsp& from);
  LogRsp(LogRsp&& from) noexcept
    : LogRsp() {
    *this = ::std::move(from);
  }

  inline LogRsp& operator=(const LogRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRsp& operator=(LogRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogRsp* internal_default_instance() {
    return reinterpret_cast<const LogRsp*>(
               &_LogRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(LogRsp& a, LogRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogRsp* New() const final {
    return CreateMaybeMessage<LogRsp>(nullptr);
  }

  LogRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogRsp& from);
  void MergeFrom(const LogRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.LogRsp";
  }
  protected:
  explicit LogRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.LogRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteLogRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteLogRqst) */ {
 public:
  inline DeleteLogRqst() : DeleteLogRqst(nullptr) {}
  virtual ~DeleteLogRqst();

  DeleteLogRqst(const DeleteLogRqst& from);
  DeleteLogRqst(DeleteLogRqst&& from) noexcept
    : DeleteLogRqst() {
    *this = ::std::move(from);
  }

  inline DeleteLogRqst& operator=(const DeleteLogRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLogRqst& operator=(DeleteLogRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteLogRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteLogRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteLogRqst*>(
               &_DeleteLogRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(DeleteLogRqst& a, DeleteLogRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLogRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLogRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteLogRqst* New() const final {
    return CreateMaybeMessage<DeleteLogRqst>(nullptr);
  }

  DeleteLogRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLogRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteLogRqst& from);
  void MergeFrom(const DeleteLogRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLogRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteLogRqst";
  }
  protected:
  explicit DeleteLogRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFieldNumber = 1,
  };
  // .ressource.LogInfo log = 1;
  bool has_log() const;
  private:
  bool _internal_has_log() const;
  public:
  void clear_log();
  const ::ressource::LogInfo& log() const;
  ::ressource::LogInfo* release_log();
  ::ressource::LogInfo* mutable_log();
  void set_allocated_log(::ressource::LogInfo* log);
  private:
  const ::ressource::LogInfo& _internal_log() const;
  ::ressource::LogInfo* _internal_mutable_log();
  public:
  void unsafe_arena_set_allocated_log(
      ::ressource::LogInfo* log);
  ::ressource::LogInfo* unsafe_arena_release_log();

  // @@protoc_insertion_point(class_scope:ressource.DeleteLogRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ressource::LogInfo* log_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class DeleteLogRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.DeleteLogRsp) */ {
 public:
  inline DeleteLogRsp() : DeleteLogRsp(nullptr) {}
  virtual ~DeleteLogRsp();

  DeleteLogRsp(const DeleteLogRsp& from);
  DeleteLogRsp(DeleteLogRsp&& from) noexcept
    : DeleteLogRsp() {
    *this = ::std::move(from);
  }

  inline DeleteLogRsp& operator=(const DeleteLogRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLogRsp& operator=(DeleteLogRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteLogRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteLogRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteLogRsp*>(
               &_DeleteLogRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(DeleteLogRsp& a, DeleteLogRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLogRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLogRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteLogRsp* New() const final {
    return CreateMaybeMessage<DeleteLogRsp>(nullptr);
  }

  DeleteLogRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLogRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteLogRsp& from);
  void MergeFrom(const DeleteLogRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLogRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.DeleteLogRsp";
  }
  protected:
  explicit DeleteLogRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.DeleteLogRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class SetLogMethodRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.SetLogMethodRqst) */ {
 public:
  inline SetLogMethodRqst() : SetLogMethodRqst(nullptr) {}
  virtual ~SetLogMethodRqst();

  SetLogMethodRqst(const SetLogMethodRqst& from);
  SetLogMethodRqst(SetLogMethodRqst&& from) noexcept
    : SetLogMethodRqst() {
    *this = ::std::move(from);
  }

  inline SetLogMethodRqst& operator=(const SetLogMethodRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLogMethodRqst& operator=(SetLogMethodRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLogMethodRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLogMethodRqst* internal_default_instance() {
    return reinterpret_cast<const SetLogMethodRqst*>(
               &_SetLogMethodRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(SetLogMethodRqst& a, SetLogMethodRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLogMethodRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLogMethodRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLogMethodRqst* New() const final {
    return CreateMaybeMessage<SetLogMethodRqst>(nullptr);
  }

  SetLogMethodRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLogMethodRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLogMethodRqst& from);
  void MergeFrom(const SetLogMethodRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLogMethodRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.SetLogMethodRqst";
  }
  protected:
  explicit SetLogMethodRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 1,
  };
  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // @@protoc_insertion_point(class_scope:ressource.SetLogMethodRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class SetLogMethodRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.SetLogMethodRsp) */ {
 public:
  inline SetLogMethodRsp() : SetLogMethodRsp(nullptr) {}
  virtual ~SetLogMethodRsp();

  SetLogMethodRsp(const SetLogMethodRsp& from);
  SetLogMethodRsp(SetLogMethodRsp&& from) noexcept
    : SetLogMethodRsp() {
    *this = ::std::move(from);
  }

  inline SetLogMethodRsp& operator=(const SetLogMethodRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLogMethodRsp& operator=(SetLogMethodRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLogMethodRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLogMethodRsp* internal_default_instance() {
    return reinterpret_cast<const SetLogMethodRsp*>(
               &_SetLogMethodRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SetLogMethodRsp& a, SetLogMethodRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLogMethodRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLogMethodRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLogMethodRsp* New() const final {
    return CreateMaybeMessage<SetLogMethodRsp>(nullptr);
  }

  SetLogMethodRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLogMethodRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLogMethodRsp& from);
  void MergeFrom(const SetLogMethodRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLogMethodRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.SetLogMethodRsp";
  }
  protected:
  explicit SetLogMethodRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.SetLogMethodRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ResetLogMethodRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ResetLogMethodRqst) */ {
 public:
  inline ResetLogMethodRqst() : ResetLogMethodRqst(nullptr) {}
  virtual ~ResetLogMethodRqst();

  ResetLogMethodRqst(const ResetLogMethodRqst& from);
  ResetLogMethodRqst(ResetLogMethodRqst&& from) noexcept
    : ResetLogMethodRqst() {
    *this = ::std::move(from);
  }

  inline ResetLogMethodRqst& operator=(const ResetLogMethodRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetLogMethodRqst& operator=(ResetLogMethodRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetLogMethodRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetLogMethodRqst* internal_default_instance() {
    return reinterpret_cast<const ResetLogMethodRqst*>(
               &_ResetLogMethodRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(ResetLogMethodRqst& a, ResetLogMethodRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetLogMethodRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetLogMethodRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetLogMethodRqst* New() const final {
    return CreateMaybeMessage<ResetLogMethodRqst>(nullptr);
  }

  ResetLogMethodRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetLogMethodRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetLogMethodRqst& from);
  void MergeFrom(const ResetLogMethodRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetLogMethodRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ResetLogMethodRqst";
  }
  protected:
  explicit ResetLogMethodRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 1,
  };
  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // @@protoc_insertion_point(class_scope:ressource.ResetLogMethodRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ResetLogMethodRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ResetLogMethodRsp) */ {
 public:
  inline ResetLogMethodRsp() : ResetLogMethodRsp(nullptr) {}
  virtual ~ResetLogMethodRsp();

  ResetLogMethodRsp(const ResetLogMethodRsp& from);
  ResetLogMethodRsp(ResetLogMethodRsp&& from) noexcept
    : ResetLogMethodRsp() {
    *this = ::std::move(from);
  }

  inline ResetLogMethodRsp& operator=(const ResetLogMethodRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetLogMethodRsp& operator=(ResetLogMethodRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetLogMethodRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetLogMethodRsp* internal_default_instance() {
    return reinterpret_cast<const ResetLogMethodRsp*>(
               &_ResetLogMethodRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(ResetLogMethodRsp& a, ResetLogMethodRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetLogMethodRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetLogMethodRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetLogMethodRsp* New() const final {
    return CreateMaybeMessage<ResetLogMethodRsp>(nullptr);
  }

  ResetLogMethodRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetLogMethodRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetLogMethodRsp& from);
  void MergeFrom(const ResetLogMethodRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetLogMethodRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ResetLogMethodRsp";
  }
  protected:
  explicit ResetLogMethodRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.ResetLogMethodRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetLogMethodsRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetLogMethodsRqst) */ {
 public:
  inline GetLogMethodsRqst() : GetLogMethodsRqst(nullptr) {}
  virtual ~GetLogMethodsRqst();

  GetLogMethodsRqst(const GetLogMethodsRqst& from);
  GetLogMethodsRqst(GetLogMethodsRqst&& from) noexcept
    : GetLogMethodsRqst() {
    *this = ::std::move(from);
  }

  inline GetLogMethodsRqst& operator=(const GetLogMethodsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogMethodsRqst& operator=(GetLogMethodsRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLogMethodsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLogMethodsRqst* internal_default_instance() {
    return reinterpret_cast<const GetLogMethodsRqst*>(
               &_GetLogMethodsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GetLogMethodsRqst& a, GetLogMethodsRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogMethodsRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogMethodsRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogMethodsRqst* New() const final {
    return CreateMaybeMessage<GetLogMethodsRqst>(nullptr);
  }

  GetLogMethodsRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogMethodsRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLogMethodsRqst& from);
  void MergeFrom(const GetLogMethodsRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogMethodsRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetLogMethodsRqst";
  }
  protected:
  explicit GetLogMethodsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ressource.GetLogMethodsRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetLogMethodsRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetLogMethodsRsp) */ {
 public:
  inline GetLogMethodsRsp() : GetLogMethodsRsp(nullptr) {}
  virtual ~GetLogMethodsRsp();

  GetLogMethodsRsp(const GetLogMethodsRsp& from);
  GetLogMethodsRsp(GetLogMethodsRsp&& from) noexcept
    : GetLogMethodsRsp() {
    *this = ::std::move(from);
  }

  inline GetLogMethodsRsp& operator=(const GetLogMethodsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogMethodsRsp& operator=(GetLogMethodsRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLogMethodsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLogMethodsRsp* internal_default_instance() {
    return reinterpret_cast<const GetLogMethodsRsp*>(
               &_GetLogMethodsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(GetLogMethodsRsp& a, GetLogMethodsRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogMethodsRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogMethodsRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogMethodsRsp* New() const final {
    return CreateMaybeMessage<GetLogMethodsRsp>(nullptr);
  }

  GetLogMethodsRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogMethodsRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLogMethodsRsp& from);
  void MergeFrom(const GetLogMethodsRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogMethodsRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetLogMethodsRsp";
  }
  protected:
  explicit GetLogMethodsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodsFieldNumber = 1,
  };
  // repeated string methods = 1;
  int methods_size() const;
  private:
  int _internal_methods_size() const;
  public:
  void clear_methods();
  const std::string& methods(int index) const;
  std::string* mutable_methods(int index);
  void set_methods(int index, const std::string& value);
  void set_methods(int index, std::string&& value);
  void set_methods(int index, const char* value);
  void set_methods(int index, const char* value, size_t size);
  std::string* add_methods();
  void add_methods(const std::string& value);
  void add_methods(std::string&& value);
  void add_methods(const char* value);
  void add_methods(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& methods() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_methods();
  private:
  const std::string& _internal_methods(int index) const;
  std::string* _internal_add_methods();
  public:

  // @@protoc_insertion_point(class_scope:ressource.GetLogMethodsRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> methods_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetLogRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetLogRqst) */ {
 public:
  inline GetLogRqst() : GetLogRqst(nullptr) {}
  virtual ~GetLogRqst();

  GetLogRqst(const GetLogRqst& from);
  GetLogRqst(GetLogRqst&& from) noexcept
    : GetLogRqst() {
    *this = ::std::move(from);
  }

  inline GetLogRqst& operator=(const GetLogRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogRqst& operator=(GetLogRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLogRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLogRqst* internal_default_instance() {
    return reinterpret_cast<const GetLogRqst*>(
               &_GetLogRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(GetLogRqst& a, GetLogRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogRqst* New() const final {
    return CreateMaybeMessage<GetLogRqst>(nullptr);
  }

  GetLogRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLogRqst& from);
  void MergeFrom(const GetLogRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetLogRqst";
  }
  protected:
  explicit GetLogRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:ressource.GetLogRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetLogRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetLogRsp) */ {
 public:
  inline GetLogRsp() : GetLogRsp(nullptr) {}
  virtual ~GetLogRsp();

  GetLogRsp(const GetLogRsp& from);
  GetLogRsp(GetLogRsp&& from) noexcept
    : GetLogRsp() {
    *this = ::std::move(from);
  }

  inline GetLogRsp& operator=(const GetLogRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogRsp& operator=(GetLogRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLogRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLogRsp* internal_default_instance() {
    return reinterpret_cast<const GetLogRsp*>(
               &_GetLogRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(GetLogRsp& a, GetLogRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogRsp* New() const final {
    return CreateMaybeMessage<GetLogRsp>(nullptr);
  }

  GetLogRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLogRsp& from);
  void MergeFrom(const GetLogRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetLogRsp";
  }
  protected:
  explicit GetLogRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .ressource.LogInfo info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::ressource::LogInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::LogInfo >*
      mutable_info();
  private:
  const ::ressource::LogInfo& _internal_info(int index) const;
  ::ressource::LogInfo* _internal_add_info();
  public:
  const ::ressource::LogInfo& info(int index) const;
  ::ressource::LogInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::LogInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:ressource.GetLogRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::LogInfo > info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ClearAllLogRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ClearAllLogRqst) */ {
 public:
  inline ClearAllLogRqst() : ClearAllLogRqst(nullptr) {}
  virtual ~ClearAllLogRqst();

  ClearAllLogRqst(const ClearAllLogRqst& from);
  ClearAllLogRqst(ClearAllLogRqst&& from) noexcept
    : ClearAllLogRqst() {
    *this = ::std::move(from);
  }

  inline ClearAllLogRqst& operator=(const ClearAllLogRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearAllLogRqst& operator=(ClearAllLogRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearAllLogRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearAllLogRqst* internal_default_instance() {
    return reinterpret_cast<const ClearAllLogRqst*>(
               &_ClearAllLogRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(ClearAllLogRqst& a, ClearAllLogRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearAllLogRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearAllLogRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearAllLogRqst* New() const final {
    return CreateMaybeMessage<ClearAllLogRqst>(nullptr);
  }

  ClearAllLogRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearAllLogRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearAllLogRqst& from);
  void MergeFrom(const ClearAllLogRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearAllLogRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ClearAllLogRqst";
  }
  protected:
  explicit ClearAllLogRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .ressource.LogType type = 1;
  void clear_type();
  ::ressource::LogType type() const;
  void set_type(::ressource::LogType value);
  private:
  ::ressource::LogType _internal_type() const;
  void _internal_set_type(::ressource::LogType value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.ClearAllLogRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ClearAllLogRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ClearAllLogRsp) */ {
 public:
  inline ClearAllLogRsp() : ClearAllLogRsp(nullptr) {}
  virtual ~ClearAllLogRsp();

  ClearAllLogRsp(const ClearAllLogRsp& from);
  ClearAllLogRsp(ClearAllLogRsp&& from) noexcept
    : ClearAllLogRsp() {
    *this = ::std::move(from);
  }

  inline ClearAllLogRsp& operator=(const ClearAllLogRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearAllLogRsp& operator=(ClearAllLogRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearAllLogRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearAllLogRsp* internal_default_instance() {
    return reinterpret_cast<const ClearAllLogRsp*>(
               &_ClearAllLogRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(ClearAllLogRsp& a, ClearAllLogRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearAllLogRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearAllLogRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearAllLogRsp* New() const final {
    return CreateMaybeMessage<ClearAllLogRsp>(nullptr);
  }

  ClearAllLogRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearAllLogRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearAllLogRsp& from);
  void MergeFrom(const ClearAllLogRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearAllLogRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ClearAllLogRsp";
  }
  protected:
  explicit ClearAllLogRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.ClearAllLogRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class Ressource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.Ressource) */ {
 public:
  inline Ressource() : Ressource(nullptr) {}
  virtual ~Ressource();

  Ressource(const Ressource& from);
  Ressource(Ressource&& from) noexcept
    : Ressource() {
    *this = ::std::move(from);
  }

  inline Ressource& operator=(const Ressource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ressource& operator=(Ressource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ressource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ressource* internal_default_instance() {
    return reinterpret_cast<const Ressource*>(
               &_Ressource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(Ressource& a, Ressource& b) {
    a.Swap(&b);
  }
  inline void Swap(Ressource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ressource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ressource* New() const final {
    return CreateMaybeMessage<Ressource>(nullptr);
  }

  Ressource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ressource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ressource& from);
  void MergeFrom(const Ressource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ressource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.Ressource";
  }
  protected:
  explicit Ressource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kModifiedFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 modified = 3;
  void clear_modified();
  ::PROTOBUF_NAMESPACE_ID::int64 modified() const;
  void set_modified(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_modified() const;
  void _internal_set_modified(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.Ressource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 modified_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class SetRessourceRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.SetRessourceRqst) */ {
 public:
  inline SetRessourceRqst() : SetRessourceRqst(nullptr) {}
  virtual ~SetRessourceRqst();

  SetRessourceRqst(const SetRessourceRqst& from);
  SetRessourceRqst(SetRessourceRqst&& from) noexcept
    : SetRessourceRqst() {
    *this = ::std::move(from);
  }

  inline SetRessourceRqst& operator=(const SetRessourceRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRessourceRqst& operator=(SetRessourceRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRessourceRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRessourceRqst* internal_default_instance() {
    return reinterpret_cast<const SetRessourceRqst*>(
               &_SetRessourceRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(SetRessourceRqst& a, SetRessourceRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRessourceRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRessourceRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetRessourceRqst* New() const final {
    return CreateMaybeMessage<SetRessourceRqst>(nullptr);
  }

  SetRessourceRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRessourceRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRessourceRqst& from);
  void MergeFrom(const SetRessourceRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRessourceRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.SetRessourceRqst";
  }
  protected:
  explicit SetRessourceRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRessourceFieldNumber = 1,
  };
  // .ressource.Ressource ressource = 1;
  bool has_ressource() const;
  private:
  bool _internal_has_ressource() const;
  public:
  void clear_ressource();
  const ::ressource::Ressource& ressource() const;
  ::ressource::Ressource* release_ressource();
  ::ressource::Ressource* mutable_ressource();
  void set_allocated_ressource(::ressource::Ressource* ressource);
  private:
  const ::ressource::Ressource& _internal_ressource() const;
  ::ressource::Ressource* _internal_mutable_ressource();
  public:
  void unsafe_arena_set_allocated_ressource(
      ::ressource::Ressource* ressource);
  ::ressource::Ressource* unsafe_arena_release_ressource();

  // @@protoc_insertion_point(class_scope:ressource.SetRessourceRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ressource::Ressource* ressource_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class SetRessourceRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.SetRessourceRsp) */ {
 public:
  inline SetRessourceRsp() : SetRessourceRsp(nullptr) {}
  virtual ~SetRessourceRsp();

  SetRessourceRsp(const SetRessourceRsp& from);
  SetRessourceRsp(SetRessourceRsp&& from) noexcept
    : SetRessourceRsp() {
    *this = ::std::move(from);
  }

  inline SetRessourceRsp& operator=(const SetRessourceRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRessourceRsp& operator=(SetRessourceRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRessourceRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRessourceRsp* internal_default_instance() {
    return reinterpret_cast<const SetRessourceRsp*>(
               &_SetRessourceRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(SetRessourceRsp& a, SetRessourceRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRessourceRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRessourceRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetRessourceRsp* New() const final {
    return CreateMaybeMessage<SetRessourceRsp>(nullptr);
  }

  SetRessourceRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRessourceRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRessourceRsp& from);
  void MergeFrom(const SetRessourceRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRessourceRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.SetRessourceRsp";
  }
  protected:
  explicit SetRessourceRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.SetRessourceRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class ActionParameterRessourcePermission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.ActionParameterRessourcePermission) */ {
 public:
  inline ActionParameterRessourcePermission() : ActionParameterRessourcePermission(nullptr) {}
  virtual ~ActionParameterRessourcePermission();

  ActionParameterRessourcePermission(const ActionParameterRessourcePermission& from);
  ActionParameterRessourcePermission(ActionParameterRessourcePermission&& from) noexcept
    : ActionParameterRessourcePermission() {
    *this = ::std::move(from);
  }

  inline ActionParameterRessourcePermission& operator=(const ActionParameterRessourcePermission& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionParameterRessourcePermission& operator=(ActionParameterRessourcePermission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionParameterRessourcePermission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionParameterRessourcePermission* internal_default_instance() {
    return reinterpret_cast<const ActionParameterRessourcePermission*>(
               &_ActionParameterRessourcePermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(ActionParameterRessourcePermission& a, ActionParameterRessourcePermission& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionParameterRessourcePermission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionParameterRessourcePermission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionParameterRessourcePermission* New() const final {
    return CreateMaybeMessage<ActionParameterRessourcePermission>(nullptr);
  }

  ActionParameterRessourcePermission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionParameterRessourcePermission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionParameterRessourcePermission& from);
  void MergeFrom(const ActionParameterRessourcePermission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionParameterRessourcePermission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.ActionParameterRessourcePermission";
  }
  protected:
  explicit ActionParameterRessourcePermission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kPermissionFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 permission = 2;
  void clear_permission();
  ::PROTOBUF_NAMESPACE_ID::int32 permission() const;
  void set_permission(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_permission() const;
  void _internal_set_permission(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.ActionParameterRessourcePermission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 permission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class SetActionPermissionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.SetActionPermissionRqst) */ {
 public:
  inline SetActionPermissionRqst() : SetActionPermissionRqst(nullptr) {}
  virtual ~SetActionPermissionRqst();

  SetActionPermissionRqst(const SetActionPermissionRqst& from);
  SetActionPermissionRqst(SetActionPermissionRqst&& from) noexcept
    : SetActionPermissionRqst() {
    *this = ::std::move(from);
  }

  inline SetActionPermissionRqst& operator=(const SetActionPermissionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActionPermissionRqst& operator=(SetActionPermissionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetActionPermissionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetActionPermissionRqst* internal_default_instance() {
    return reinterpret_cast<const SetActionPermissionRqst*>(
               &_SetActionPermissionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(SetActionPermissionRqst& a, SetActionPermissionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActionPermissionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetActionPermissionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetActionPermissionRqst* New() const final {
    return CreateMaybeMessage<SetActionPermissionRqst>(nullptr);
  }

  SetActionPermissionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetActionPermissionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetActionPermissionRqst& from);
  void MergeFrom(const SetActionPermissionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActionPermissionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.SetActionPermissionRqst";
  }
  protected:
  explicit SetActionPermissionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionParameterRessourcePermissionsFieldNumber = 2,
    kActionFieldNumber = 1,
  };
  // repeated .ressource.ActionParameterRessourcePermission actionParameterRessourcePermissions = 2;
  int actionparameterressourcepermissions_size() const;
  private:
  int _internal_actionparameterressourcepermissions_size() const;
  public:
  void clear_actionparameterressourcepermissions();
  ::ressource::ActionParameterRessourcePermission* mutable_actionparameterressourcepermissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::ActionParameterRessourcePermission >*
      mutable_actionparameterressourcepermissions();
  private:
  const ::ressource::ActionParameterRessourcePermission& _internal_actionparameterressourcepermissions(int index) const;
  ::ressource::ActionParameterRessourcePermission* _internal_add_actionparameterressourcepermissions();
  public:
  const ::ressource::ActionParameterRessourcePermission& actionparameterressourcepermissions(int index) const;
  ::ressource::ActionParameterRessourcePermission* add_actionparameterressourcepermissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::ActionParameterRessourcePermission >&
      actionparameterressourcepermissions() const;

  // string action = 1;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:ressource.SetActionPermissionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::ActionParameterRessourcePermission > actionparameterressourcepermissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class SetActionPermissionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.SetActionPermissionRsp) */ {
 public:
  inline SetActionPermissionRsp() : SetActionPermissionRsp(nullptr) {}
  virtual ~SetActionPermissionRsp();

  SetActionPermissionRsp(const SetActionPermissionRsp& from);
  SetActionPermissionRsp(SetActionPermissionRsp&& from) noexcept
    : SetActionPermissionRsp() {
    *this = ::std::move(from);
  }

  inline SetActionPermissionRsp& operator=(const SetActionPermissionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetActionPermissionRsp& operator=(SetActionPermissionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetActionPermissionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetActionPermissionRsp* internal_default_instance() {
    return reinterpret_cast<const SetActionPermissionRsp*>(
               &_SetActionPermissionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(SetActionPermissionRsp& a, SetActionPermissionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetActionPermissionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetActionPermissionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetActionPermissionRsp* New() const final {
    return CreateMaybeMessage<SetActionPermissionRsp>(nullptr);
  }

  SetActionPermissionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetActionPermissionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetActionPermissionRsp& from);
  void MergeFrom(const SetActionPermissionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActionPermissionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.SetActionPermissionRsp";
  }
  protected:
  explicit SetActionPermissionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.SetActionPermissionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetActionPermissionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetActionPermissionRqst) */ {
 public:
  inline GetActionPermissionRqst() : GetActionPermissionRqst(nullptr) {}
  virtual ~GetActionPermissionRqst();

  GetActionPermissionRqst(const GetActionPermissionRqst& from);
  GetActionPermissionRqst(GetActionPermissionRqst&& from) noexcept
    : GetActionPermissionRqst() {
    *this = ::std::move(from);
  }

  inline GetActionPermissionRqst& operator=(const GetActionPermissionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActionPermissionRqst& operator=(GetActionPermissionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetActionPermissionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetActionPermissionRqst* internal_default_instance() {
    return reinterpret_cast<const GetActionPermissionRqst*>(
               &_GetActionPermissionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GetActionPermissionRqst& a, GetActionPermissionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActionPermissionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActionPermissionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetActionPermissionRqst* New() const final {
    return CreateMaybeMessage<GetActionPermissionRqst>(nullptr);
  }

  GetActionPermissionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetActionPermissionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetActionPermissionRqst& from);
  void MergeFrom(const GetActionPermissionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActionPermissionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetActionPermissionRqst";
  }
  protected:
  explicit GetActionPermissionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:ressource.GetActionPermissionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetActionPermissionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetActionPermissionRsp) */ {
 public:
  inline GetActionPermissionRsp() : GetActionPermissionRsp(nullptr) {}
  virtual ~GetActionPermissionRsp();

  GetActionPermissionRsp(const GetActionPermissionRsp& from);
  GetActionPermissionRsp(GetActionPermissionRsp&& from) noexcept
    : GetActionPermissionRsp() {
    *this = ::std::move(from);
  }

  inline GetActionPermissionRsp& operator=(const GetActionPermissionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActionPermissionRsp& operator=(GetActionPermissionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetActionPermissionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetActionPermissionRsp* internal_default_instance() {
    return reinterpret_cast<const GetActionPermissionRsp*>(
               &_GetActionPermissionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(GetActionPermissionRsp& a, GetActionPermissionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActionPermissionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActionPermissionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetActionPermissionRsp* New() const final {
    return CreateMaybeMessage<GetActionPermissionRsp>(nullptr);
  }

  GetActionPermissionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetActionPermissionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetActionPermissionRsp& from);
  void MergeFrom(const GetActionPermissionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActionPermissionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetActionPermissionRsp";
  }
  protected:
  explicit GetActionPermissionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionParameterRessourcePermissionsFieldNumber = 1,
  };
  // repeated .ressource.ActionParameterRessourcePermission actionParameterRessourcePermissions = 1;
  int actionparameterressourcepermissions_size() const;
  private:
  int _internal_actionparameterressourcepermissions_size() const;
  public:
  void clear_actionparameterressourcepermissions();
  ::ressource::ActionParameterRessourcePermission* mutable_actionparameterressourcepermissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::ActionParameterRessourcePermission >*
      mutable_actionparameterressourcepermissions();
  private:
  const ::ressource::ActionParameterRessourcePermission& _internal_actionparameterressourcepermissions(int index) const;
  ::ressource::ActionParameterRessourcePermission* _internal_add_actionparameterressourcepermissions();
  public:
  const ::ressource::ActionParameterRessourcePermission& actionparameterressourcepermissions(int index) const;
  ::ressource::ActionParameterRessourcePermission* add_actionparameterressourcepermissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::ActionParameterRessourcePermission >&
      actionparameterressourcepermissions() const;

  // @@protoc_insertion_point(class_scope:ressource.GetActionPermissionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::ActionParameterRessourcePermission > actionparameterressourcepermissions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RemoveRessourceRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RemoveRessourceRqst) */ {
 public:
  inline RemoveRessourceRqst() : RemoveRessourceRqst(nullptr) {}
  virtual ~RemoveRessourceRqst();

  RemoveRessourceRqst(const RemoveRessourceRqst& from);
  RemoveRessourceRqst(RemoveRessourceRqst&& from) noexcept
    : RemoveRessourceRqst() {
    *this = ::std::move(from);
  }

  inline RemoveRessourceRqst& operator=(const RemoveRessourceRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRessourceRqst& operator=(RemoveRessourceRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveRessourceRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRessourceRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveRessourceRqst*>(
               &_RemoveRessourceRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(RemoveRessourceRqst& a, RemoveRessourceRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRessourceRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRessourceRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveRessourceRqst* New() const final {
    return CreateMaybeMessage<RemoveRessourceRqst>(nullptr);
  }

  RemoveRessourceRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRessourceRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveRessourceRqst& from);
  void MergeFrom(const RemoveRessourceRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRessourceRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RemoveRessourceRqst";
  }
  protected:
  explicit RemoveRessourceRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRessourceFieldNumber = 1,
  };
  // .ressource.Ressource ressource = 1;
  bool has_ressource() const;
  private:
  bool _internal_has_ressource() const;
  public:
  void clear_ressource();
  const ::ressource::Ressource& ressource() const;
  ::ressource::Ressource* release_ressource();
  ::ressource::Ressource* mutable_ressource();
  void set_allocated_ressource(::ressource::Ressource* ressource);
  private:
  const ::ressource::Ressource& _internal_ressource() const;
  ::ressource::Ressource* _internal_mutable_ressource();
  public:
  void unsafe_arena_set_allocated_ressource(
      ::ressource::Ressource* ressource);
  ::ressource::Ressource* unsafe_arena_release_ressource();

  // @@protoc_insertion_point(class_scope:ressource.RemoveRessourceRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ressource::Ressource* ressource_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RemoveRessourceRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RemoveRessourceRsp) */ {
 public:
  inline RemoveRessourceRsp() : RemoveRessourceRsp(nullptr) {}
  virtual ~RemoveRessourceRsp();

  RemoveRessourceRsp(const RemoveRessourceRsp& from);
  RemoveRessourceRsp(RemoveRessourceRsp&& from) noexcept
    : RemoveRessourceRsp() {
    *this = ::std::move(from);
  }

  inline RemoveRessourceRsp& operator=(const RemoveRessourceRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveRessourceRsp& operator=(RemoveRessourceRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveRessourceRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRessourceRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveRessourceRsp*>(
               &_RemoveRessourceRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(RemoveRessourceRsp& a, RemoveRessourceRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveRessourceRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveRessourceRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveRessourceRsp* New() const final {
    return CreateMaybeMessage<RemoveRessourceRsp>(nullptr);
  }

  RemoveRessourceRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRessourceRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveRessourceRsp& from);
  void MergeFrom(const RemoveRessourceRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRessourceRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RemoveRessourceRsp";
  }
  protected:
  explicit RemoveRessourceRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.RemoveRessourceRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetRessourcesRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetRessourcesRqst) */ {
 public:
  inline GetRessourcesRqst() : GetRessourcesRqst(nullptr) {}
  virtual ~GetRessourcesRqst();

  GetRessourcesRqst(const GetRessourcesRqst& from);
  GetRessourcesRqst(GetRessourcesRqst&& from) noexcept
    : GetRessourcesRqst() {
    *this = ::std::move(from);
  }

  inline GetRessourcesRqst& operator=(const GetRessourcesRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRessourcesRqst& operator=(GetRessourcesRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRessourcesRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRessourcesRqst* internal_default_instance() {
    return reinterpret_cast<const GetRessourcesRqst*>(
               &_GetRessourcesRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(GetRessourcesRqst& a, GetRessourcesRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRessourcesRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRessourcesRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRessourcesRqst* New() const final {
    return CreateMaybeMessage<GetRessourcesRqst>(nullptr);
  }

  GetRessourcesRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRessourcesRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRessourcesRqst& from);
  void MergeFrom(const GetRessourcesRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRessourcesRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetRessourcesRqst";
  }
  protected:
  explicit GetRessourcesRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ressource.GetRessourcesRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class GetRessourcesRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.GetRessourcesRsp) */ {
 public:
  inline GetRessourcesRsp() : GetRessourcesRsp(nullptr) {}
  virtual ~GetRessourcesRsp();

  GetRessourcesRsp(const GetRessourcesRsp& from);
  GetRessourcesRsp(GetRessourcesRsp&& from) noexcept
    : GetRessourcesRsp() {
    *this = ::std::move(from);
  }

  inline GetRessourcesRsp& operator=(const GetRessourcesRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRessourcesRsp& operator=(GetRessourcesRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRessourcesRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRessourcesRsp* internal_default_instance() {
    return reinterpret_cast<const GetRessourcesRsp*>(
               &_GetRessourcesRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(GetRessourcesRsp& a, GetRessourcesRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRessourcesRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRessourcesRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRessourcesRsp* New() const final {
    return CreateMaybeMessage<GetRessourcesRsp>(nullptr);
  }

  GetRessourcesRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRessourcesRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRessourcesRsp& from);
  void MergeFrom(const GetRessourcesRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRessourcesRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.GetRessourcesRsp";
  }
  protected:
  explicit GetRessourcesRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRessourcesFieldNumber = 1,
  };
  // repeated .ressource.Ressource ressources = 1;
  int ressources_size() const;
  private:
  int _internal_ressources_size() const;
  public:
  void clear_ressources();
  ::ressource::Ressource* mutable_ressources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::Ressource >*
      mutable_ressources();
  private:
  const ::ressource::Ressource& _internal_ressources(int index) const;
  ::ressource::Ressource* _internal_add_ressources();
  public:
  const ::ressource::Ressource& ressources(int index) const;
  ::ressource::Ressource* add_ressources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::Ressource >&
      ressources() const;

  // @@protoc_insertion_point(class_scope:ressource.GetRessourcesRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::Ressource > ressources_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RemoveActionPermissionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RemoveActionPermissionRqst) */ {
 public:
  inline RemoveActionPermissionRqst() : RemoveActionPermissionRqst(nullptr) {}
  virtual ~RemoveActionPermissionRqst();

  RemoveActionPermissionRqst(const RemoveActionPermissionRqst& from);
  RemoveActionPermissionRqst(RemoveActionPermissionRqst&& from) noexcept
    : RemoveActionPermissionRqst() {
    *this = ::std::move(from);
  }

  inline RemoveActionPermissionRqst& operator=(const RemoveActionPermissionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveActionPermissionRqst& operator=(RemoveActionPermissionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveActionPermissionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveActionPermissionRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveActionPermissionRqst*>(
               &_RemoveActionPermissionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(RemoveActionPermissionRqst& a, RemoveActionPermissionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveActionPermissionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveActionPermissionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveActionPermissionRqst* New() const final {
    return CreateMaybeMessage<RemoveActionPermissionRqst>(nullptr);
  }

  RemoveActionPermissionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveActionPermissionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveActionPermissionRqst& from);
  void MergeFrom(const RemoveActionPermissionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveActionPermissionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RemoveActionPermissionRqst";
  }
  protected:
  explicit RemoveActionPermissionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // string action = 1;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:ressource.RemoveActionPermissionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// -------------------------------------------------------------------

class RemoveActionPermissionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ressource.RemoveActionPermissionRsp) */ {
 public:
  inline RemoveActionPermissionRsp() : RemoveActionPermissionRsp(nullptr) {}
  virtual ~RemoveActionPermissionRsp();

  RemoveActionPermissionRsp(const RemoveActionPermissionRsp& from);
  RemoveActionPermissionRsp(RemoveActionPermissionRsp&& from) noexcept
    : RemoveActionPermissionRsp() {
    *this = ::std::move(from);
  }

  inline RemoveActionPermissionRsp& operator=(const RemoveActionPermissionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveActionPermissionRsp& operator=(RemoveActionPermissionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveActionPermissionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveActionPermissionRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveActionPermissionRsp*>(
               &_RemoveActionPermissionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(RemoveActionPermissionRsp& a, RemoveActionPermissionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveActionPermissionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveActionPermissionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveActionPermissionRsp* New() const final {
    return CreateMaybeMessage<RemoveActionPermissionRsp>(nullptr);
  }

  RemoveActionPermissionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveActionPermissionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveActionPermissionRsp& from);
  void MergeFrom(const RemoveActionPermissionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveActionPermissionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ressource.RemoveActionPermissionRsp";
  }
  protected:
  explicit RemoveActionPermissionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ressource_2eproto);
    return ::descriptor_table_ressource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ressource.RemoveActionPermissionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ressource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// string id = 1;
inline void Account::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Account::id() const {
  // @@protoc_insertion_point(field_get:ressource.Account.id)
  return _internal_id();
}
inline void Account::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ressource.Account.id)
}
inline std::string* Account::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ressource.Account.id)
  return _internal_mutable_id();
}
inline const std::string& Account::_internal_id() const {
  return id_.Get();
}
inline void Account::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Account::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.Account.id)
}
inline void Account::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.Account.id)
}
inline void Account::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.Account.id)
}
inline std::string* Account::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Account::release_id() {
  // @@protoc_insertion_point(field_release:ressource.Account.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.Account.id)
}

// string name = 2;
inline void Account::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Account::name() const {
  // @@protoc_insertion_point(field_get:ressource.Account.name)
  return _internal_name();
}
inline void Account::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ressource.Account.name)
}
inline std::string* Account::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ressource.Account.name)
  return _internal_mutable_name();
}
inline const std::string& Account::_internal_name() const {
  return name_.Get();
}
inline void Account::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Account::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.Account.name)
}
inline void Account::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.Account.name)
}
inline void Account::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.Account.name)
}
inline std::string* Account::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Account::release_name() {
  // @@protoc_insertion_point(field_release:ressource.Account.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.Account.name)
}

// string email = 3;
inline void Account::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Account::email() const {
  // @@protoc_insertion_point(field_get:ressource.Account.email)
  return _internal_email();
}
inline void Account::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:ressource.Account.email)
}
inline std::string* Account::mutable_email() {
  // @@protoc_insertion_point(field_mutable:ressource.Account.email)
  return _internal_mutable_email();
}
inline const std::string& Account::_internal_email() const {
  return email_.Get();
}
inline void Account::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Account::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.Account.email)
}
inline void Account::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.Account.email)
}
inline void Account::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.Account.email)
}
inline std::string* Account::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Account::release_email() {
  // @@protoc_insertion_point(field_release:ressource.Account.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.Account.email)
}

// string password = 4;
inline void Account::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Account::password() const {
  // @@protoc_insertion_point(field_get:ressource.Account.password)
  return _internal_password();
}
inline void Account::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:ressource.Account.password)
}
inline std::string* Account::mutable_password() {
  // @@protoc_insertion_point(field_mutable:ressource.Account.password)
  return _internal_mutable_password();
}
inline const std::string& Account::_internal_password() const {
  return password_.Get();
}
inline void Account::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Account::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.Account.password)
}
inline void Account::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.Account.password)
}
inline void Account::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.Account.password)
}
inline std::string* Account::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Account::release_password() {
  // @@protoc_insertion_point(field_release:ressource.Account.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.Account.password)
}

// -------------------------------------------------------------------

// Role

// string id = 1;
inline void Role::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Role::id() const {
  // @@protoc_insertion_point(field_get:ressource.Role.id)
  return _internal_id();
}
inline void Role::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ressource.Role.id)
}
inline std::string* Role::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ressource.Role.id)
  return _internal_mutable_id();
}
inline const std::string& Role::_internal_id() const {
  return id_.Get();
}
inline void Role::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Role::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.Role.id)
}
inline void Role::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.Role.id)
}
inline void Role::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.Role.id)
}
inline std::string* Role::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Role::release_id() {
  // @@protoc_insertion_point(field_release:ressource.Role.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Role::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.Role.id)
}

// string name = 2;
inline void Role::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:ressource.Role.name)
  return _internal_name();
}
inline void Role::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ressource.Role.name)
}
inline std::string* Role::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ressource.Role.name)
  return _internal_mutable_name();
}
inline const std::string& Role::_internal_name() const {
  return name_.Get();
}
inline void Role::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Role::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.Role.name)
}
inline void Role::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.Role.name)
}
inline void Role::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.Role.name)
}
inline std::string* Role::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:ressource.Role.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Role::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.Role.name)
}

// repeated string actions = 3;
inline int Role::_internal_actions_size() const {
  return actions_.size();
}
inline int Role::actions_size() const {
  return _internal_actions_size();
}
inline void Role::clear_actions() {
  actions_.Clear();
}
inline std::string* Role::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:ressource.Role.actions)
  return _internal_add_actions();
}
inline const std::string& Role::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const std::string& Role::actions(int index) const {
  // @@protoc_insertion_point(field_get:ressource.Role.actions)
  return _internal_actions(index);
}
inline std::string* Role::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:ressource.Role.actions)
  return actions_.Mutable(index);
}
inline void Role::set_actions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ressource.Role.actions)
  actions_.Mutable(index)->assign(value);
}
inline void Role::set_actions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ressource.Role.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
inline void Role::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ressource.Role.actions)
}
inline void Role::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ressource.Role.actions)
}
inline std::string* Role::_internal_add_actions() {
  return actions_.Add();
}
inline void Role::add_actions(const std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ressource.Role.actions)
}
inline void Role::add_actions(std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ressource.Role.actions)
}
inline void Role::add_actions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ressource.Role.actions)
}
inline void Role::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ressource.Role.actions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Role::actions() const {
  // @@protoc_insertion_point(field_list:ressource.Role.actions)
  return actions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Role::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:ressource.Role.actions)
  return &actions_;
}

// -------------------------------------------------------------------

// RegisterAccountRqst

// .ressource.Account account = 1;
inline bool RegisterAccountRqst::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool RegisterAccountRqst::has_account() const {
  return _internal_has_account();
}
inline void RegisterAccountRqst::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::ressource::Account& RegisterAccountRqst::_internal_account() const {
  const ::ressource::Account* p = account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ressource::Account*>(
      &::ressource::_Account_default_instance_);
}
inline const ::ressource::Account& RegisterAccountRqst::account() const {
  // @@protoc_insertion_point(field_get:ressource.RegisterAccountRqst.account)
  return _internal_account();
}
inline void RegisterAccountRqst::unsafe_arena_set_allocated_account(
    ::ressource::Account* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ressource.RegisterAccountRqst.account)
}
inline ::ressource::Account* RegisterAccountRqst::release_account() {
  
  ::ressource::Account* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ressource::Account* RegisterAccountRqst::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:ressource.RegisterAccountRqst.account)
  
  ::ressource::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::ressource::Account* RegisterAccountRqst::_internal_mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::ressource::Account>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::ressource::Account* RegisterAccountRqst::mutable_account() {
  // @@protoc_insertion_point(field_mutable:ressource.RegisterAccountRqst.account)
  return _internal_mutable_account();
}
inline void RegisterAccountRqst::set_allocated_account(::ressource::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:ressource.RegisterAccountRqst.account)
}

// string password = 2;
inline void RegisterAccountRqst::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterAccountRqst::password() const {
  // @@protoc_insertion_point(field_get:ressource.RegisterAccountRqst.password)
  return _internal_password();
}
inline void RegisterAccountRqst::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:ressource.RegisterAccountRqst.password)
}
inline std::string* RegisterAccountRqst::mutable_password() {
  // @@protoc_insertion_point(field_mutable:ressource.RegisterAccountRqst.password)
  return _internal_mutable_password();
}
inline const std::string& RegisterAccountRqst::_internal_password() const {
  return password_.Get();
}
inline void RegisterAccountRqst::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterAccountRqst::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RegisterAccountRqst.password)
}
inline void RegisterAccountRqst::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RegisterAccountRqst.password)
}
inline void RegisterAccountRqst::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RegisterAccountRqst.password)
}
inline std::string* RegisterAccountRqst::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterAccountRqst::release_password() {
  // @@protoc_insertion_point(field_release:ressource.RegisterAccountRqst.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterAccountRqst::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RegisterAccountRqst.password)
}

// string confirm_password = 3;
inline void RegisterAccountRqst::clear_confirm_password() {
  confirm_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterAccountRqst::confirm_password() const {
  // @@protoc_insertion_point(field_get:ressource.RegisterAccountRqst.confirm_password)
  return _internal_confirm_password();
}
inline void RegisterAccountRqst::set_confirm_password(const std::string& value) {
  _internal_set_confirm_password(value);
  // @@protoc_insertion_point(field_set:ressource.RegisterAccountRqst.confirm_password)
}
inline std::string* RegisterAccountRqst::mutable_confirm_password() {
  // @@protoc_insertion_point(field_mutable:ressource.RegisterAccountRqst.confirm_password)
  return _internal_mutable_confirm_password();
}
inline const std::string& RegisterAccountRqst::_internal_confirm_password() const {
  return confirm_password_.Get();
}
inline void RegisterAccountRqst::_internal_set_confirm_password(const std::string& value) {
  
  confirm_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterAccountRqst::set_confirm_password(std::string&& value) {
  
  confirm_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RegisterAccountRqst.confirm_password)
}
inline void RegisterAccountRqst::set_confirm_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  confirm_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RegisterAccountRqst.confirm_password)
}
inline void RegisterAccountRqst::set_confirm_password(const char* value,
    size_t size) {
  
  confirm_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RegisterAccountRqst.confirm_password)
}
inline std::string* RegisterAccountRqst::_internal_mutable_confirm_password() {
  
  return confirm_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterAccountRqst::release_confirm_password() {
  // @@protoc_insertion_point(field_release:ressource.RegisterAccountRqst.confirm_password)
  return confirm_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterAccountRqst::set_allocated_confirm_password(std::string* confirm_password) {
  if (confirm_password != nullptr) {
    
  } else {
    
  }
  confirm_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), confirm_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RegisterAccountRqst.confirm_password)
}

// -------------------------------------------------------------------

// RegisterAccountRsp

// string result = 1;
inline void RegisterAccountRsp::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.RegisterAccountRsp.result)
  return _internal_result();
}
inline void RegisterAccountRsp::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.RegisterAccountRsp.result)
}
inline std::string* RegisterAccountRsp::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ressource.RegisterAccountRsp.result)
  return _internal_mutable_result();
}
inline const std::string& RegisterAccountRsp::_internal_result() const {
  return result_.Get();
}
inline void RegisterAccountRsp::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterAccountRsp::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RegisterAccountRsp.result)
}
inline void RegisterAccountRsp::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RegisterAccountRsp.result)
}
inline void RegisterAccountRsp::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RegisterAccountRsp.result)
}
inline std::string* RegisterAccountRsp::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterAccountRsp::release_result() {
  // @@protoc_insertion_point(field_release:ressource.RegisterAccountRsp.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterAccountRsp::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RegisterAccountRsp.result)
}

// -------------------------------------------------------------------

// DeleteAccountRqst

// string id = 1;
inline void DeleteAccountRqst::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteAccountRqst::id() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteAccountRqst.id)
  return _internal_id();
}
inline void DeleteAccountRqst::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteAccountRqst.id)
}
inline std::string* DeleteAccountRqst::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ressource.DeleteAccountRqst.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteAccountRqst::_internal_id() const {
  return id_.Get();
}
inline void DeleteAccountRqst::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteAccountRqst::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.DeleteAccountRqst.id)
}
inline void DeleteAccountRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.DeleteAccountRqst.id)
}
inline void DeleteAccountRqst::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.DeleteAccountRqst.id)
}
inline std::string* DeleteAccountRqst::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteAccountRqst::release_id() {
  // @@protoc_insertion_point(field_release:ressource.DeleteAccountRqst.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteAccountRqst::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.DeleteAccountRqst.id)
}

// -------------------------------------------------------------------

// DeleteAccountRsp

// string result = 1;
inline void DeleteAccountRsp::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteAccountRsp.result)
  return _internal_result();
}
inline void DeleteAccountRsp::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteAccountRsp.result)
}
inline std::string* DeleteAccountRsp::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ressource.DeleteAccountRsp.result)
  return _internal_mutable_result();
}
inline const std::string& DeleteAccountRsp::_internal_result() const {
  return result_.Get();
}
inline void DeleteAccountRsp::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteAccountRsp::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.DeleteAccountRsp.result)
}
inline void DeleteAccountRsp::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.DeleteAccountRsp.result)
}
inline void DeleteAccountRsp::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.DeleteAccountRsp.result)
}
inline std::string* DeleteAccountRsp::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteAccountRsp::release_result() {
  // @@protoc_insertion_point(field_release:ressource.DeleteAccountRsp.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteAccountRsp::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.DeleteAccountRsp.result)
}

// -------------------------------------------------------------------

// AuthenticateRqst

// string name = 1;
inline void AuthenticateRqst::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRqst::name() const {
  // @@protoc_insertion_point(field_get:ressource.AuthenticateRqst.name)
  return _internal_name();
}
inline void AuthenticateRqst::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ressource.AuthenticateRqst.name)
}
inline std::string* AuthenticateRqst::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ressource.AuthenticateRqst.name)
  return _internal_mutable_name();
}
inline const std::string& AuthenticateRqst::_internal_name() const {
  return name_.Get();
}
inline void AuthenticateRqst::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRqst::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.AuthenticateRqst.name)
}
inline void AuthenticateRqst::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.AuthenticateRqst.name)
}
inline void AuthenticateRqst::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.AuthenticateRqst.name)
}
inline std::string* AuthenticateRqst::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRqst::release_name() {
  // @@protoc_insertion_point(field_release:ressource.AuthenticateRqst.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRqst::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.AuthenticateRqst.name)
}

// string password = 2;
inline void AuthenticateRqst::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRqst::password() const {
  // @@protoc_insertion_point(field_get:ressource.AuthenticateRqst.password)
  return _internal_password();
}
inline void AuthenticateRqst::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:ressource.AuthenticateRqst.password)
}
inline std::string* AuthenticateRqst::mutable_password() {
  // @@protoc_insertion_point(field_mutable:ressource.AuthenticateRqst.password)
  return _internal_mutable_password();
}
inline const std::string& AuthenticateRqst::_internal_password() const {
  return password_.Get();
}
inline void AuthenticateRqst::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRqst::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.AuthenticateRqst.password)
}
inline void AuthenticateRqst::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.AuthenticateRqst.password)
}
inline void AuthenticateRqst::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.AuthenticateRqst.password)
}
inline std::string* AuthenticateRqst::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRqst::release_password() {
  // @@protoc_insertion_point(field_release:ressource.AuthenticateRqst.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRqst::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.AuthenticateRqst.password)
}

// -------------------------------------------------------------------

// AuthenticateRsp

// string token = 1;
inline void AuthenticateRsp::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRsp::token() const {
  // @@protoc_insertion_point(field_get:ressource.AuthenticateRsp.token)
  return _internal_token();
}
inline void AuthenticateRsp::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ressource.AuthenticateRsp.token)
}
inline std::string* AuthenticateRsp::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ressource.AuthenticateRsp.token)
  return _internal_mutable_token();
}
inline const std::string& AuthenticateRsp::_internal_token() const {
  return token_.Get();
}
inline void AuthenticateRsp::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRsp::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.AuthenticateRsp.token)
}
inline void AuthenticateRsp::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.AuthenticateRsp.token)
}
inline void AuthenticateRsp::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.AuthenticateRsp.token)
}
inline std::string* AuthenticateRsp::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRsp::release_token() {
  // @@protoc_insertion_point(field_release:ressource.AuthenticateRsp.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRsp::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.AuthenticateRsp.token)
}

// -------------------------------------------------------------------

// RefreshTokenRqst

// string token = 1;
inline void RefreshTokenRqst::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RefreshTokenRqst::token() const {
  // @@protoc_insertion_point(field_get:ressource.RefreshTokenRqst.token)
  return _internal_token();
}
inline void RefreshTokenRqst::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ressource.RefreshTokenRqst.token)
}
inline std::string* RefreshTokenRqst::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ressource.RefreshTokenRqst.token)
  return _internal_mutable_token();
}
inline const std::string& RefreshTokenRqst::_internal_token() const {
  return token_.Get();
}
inline void RefreshTokenRqst::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RefreshTokenRqst::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RefreshTokenRqst.token)
}
inline void RefreshTokenRqst::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RefreshTokenRqst.token)
}
inline void RefreshTokenRqst::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RefreshTokenRqst.token)
}
inline std::string* RefreshTokenRqst::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RefreshTokenRqst::release_token() {
  // @@protoc_insertion_point(field_release:ressource.RefreshTokenRqst.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshTokenRqst::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RefreshTokenRqst.token)
}

// -------------------------------------------------------------------

// RefreshTokenRsp

// string token = 1;
inline void RefreshTokenRsp::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RefreshTokenRsp::token() const {
  // @@protoc_insertion_point(field_get:ressource.RefreshTokenRsp.token)
  return _internal_token();
}
inline void RefreshTokenRsp::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ressource.RefreshTokenRsp.token)
}
inline std::string* RefreshTokenRsp::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ressource.RefreshTokenRsp.token)
  return _internal_mutable_token();
}
inline const std::string& RefreshTokenRsp::_internal_token() const {
  return token_.Get();
}
inline void RefreshTokenRsp::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RefreshTokenRsp::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RefreshTokenRsp.token)
}
inline void RefreshTokenRsp::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RefreshTokenRsp.token)
}
inline void RefreshTokenRsp::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RefreshTokenRsp.token)
}
inline std::string* RefreshTokenRsp::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RefreshTokenRsp::release_token() {
  // @@protoc_insertion_point(field_release:ressource.RefreshTokenRsp.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RefreshTokenRsp::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RefreshTokenRsp.token)
}

// -------------------------------------------------------------------

// AddAccountRoleRqst

// string accountId = 1;
inline void AddAccountRoleRqst::clear_accountid() {
  accountid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddAccountRoleRqst::accountid() const {
  // @@protoc_insertion_point(field_get:ressource.AddAccountRoleRqst.accountId)
  return _internal_accountid();
}
inline void AddAccountRoleRqst::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:ressource.AddAccountRoleRqst.accountId)
}
inline std::string* AddAccountRoleRqst::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:ressource.AddAccountRoleRqst.accountId)
  return _internal_mutable_accountid();
}
inline const std::string& AddAccountRoleRqst::_internal_accountid() const {
  return accountid_.Get();
}
inline void AddAccountRoleRqst::_internal_set_accountid(const std::string& value) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddAccountRoleRqst::set_accountid(std::string&& value) {
  
  accountid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.AddAccountRoleRqst.accountId)
}
inline void AddAccountRoleRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.AddAccountRoleRqst.accountId)
}
inline void AddAccountRoleRqst::set_accountid(const char* value,
    size_t size) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.AddAccountRoleRqst.accountId)
}
inline std::string* AddAccountRoleRqst::_internal_mutable_accountid() {
  
  return accountid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddAccountRoleRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:ressource.AddAccountRoleRqst.accountId)
  return accountid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddAccountRoleRqst::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    
  } else {
    
  }
  accountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.AddAccountRoleRqst.accountId)
}

// string roleId = 2;
inline void AddAccountRoleRqst::clear_roleid() {
  roleid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddAccountRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:ressource.AddAccountRoleRqst.roleId)
  return _internal_roleid();
}
inline void AddAccountRoleRqst::set_roleid(const std::string& value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ressource.AddAccountRoleRqst.roleId)
}
inline std::string* AddAccountRoleRqst::mutable_roleid() {
  // @@protoc_insertion_point(field_mutable:ressource.AddAccountRoleRqst.roleId)
  return _internal_mutable_roleid();
}
inline const std::string& AddAccountRoleRqst::_internal_roleid() const {
  return roleid_.Get();
}
inline void AddAccountRoleRqst::_internal_set_roleid(const std::string& value) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddAccountRoleRqst::set_roleid(std::string&& value) {
  
  roleid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.AddAccountRoleRqst.roleId)
}
inline void AddAccountRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.AddAccountRoleRqst.roleId)
}
inline void AddAccountRoleRqst::set_roleid(const char* value,
    size_t size) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.AddAccountRoleRqst.roleId)
}
inline std::string* AddAccountRoleRqst::_internal_mutable_roleid() {
  
  return roleid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddAccountRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:ressource.AddAccountRoleRqst.roleId)
  return roleid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddAccountRoleRqst::set_allocated_roleid(std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.AddAccountRoleRqst.roleId)
}

// -------------------------------------------------------------------

// AddAccountRoleRsp

// bool result = 1;
inline void AddAccountRoleRsp::clear_result() {
  result_ = false;
}
inline bool AddAccountRoleRsp::_internal_result() const {
  return result_;
}
inline bool AddAccountRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.AddAccountRoleRsp.result)
  return _internal_result();
}
inline void AddAccountRoleRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddAccountRoleRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.AddAccountRoleRsp.result)
}

// -------------------------------------------------------------------

// RemoveAccountRoleRqst

// string accountId = 1;
inline void RemoveAccountRoleRqst::clear_accountid() {
  accountid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveAccountRoleRqst::accountid() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveAccountRoleRqst.accountId)
  return _internal_accountid();
}
inline void RemoveAccountRoleRqst::set_accountid(const std::string& value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:ressource.RemoveAccountRoleRqst.accountId)
}
inline std::string* RemoveAccountRoleRqst::mutable_accountid() {
  // @@protoc_insertion_point(field_mutable:ressource.RemoveAccountRoleRqst.accountId)
  return _internal_mutable_accountid();
}
inline const std::string& RemoveAccountRoleRqst::_internal_accountid() const {
  return accountid_.Get();
}
inline void RemoveAccountRoleRqst::_internal_set_accountid(const std::string& value) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveAccountRoleRqst::set_accountid(std::string&& value) {
  
  accountid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RemoveAccountRoleRqst.accountId)
}
inline void RemoveAccountRoleRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RemoveAccountRoleRqst.accountId)
}
inline void RemoveAccountRoleRqst::set_accountid(const char* value,
    size_t size) {
  
  accountid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RemoveAccountRoleRqst.accountId)
}
inline std::string* RemoveAccountRoleRqst::_internal_mutable_accountid() {
  
  return accountid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveAccountRoleRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:ressource.RemoveAccountRoleRqst.accountId)
  return accountid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveAccountRoleRqst::set_allocated_accountid(std::string* accountid) {
  if (accountid != nullptr) {
    
  } else {
    
  }
  accountid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RemoveAccountRoleRqst.accountId)
}

// string roleId = 2;
inline void RemoveAccountRoleRqst::clear_roleid() {
  roleid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveAccountRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveAccountRoleRqst.roleId)
  return _internal_roleid();
}
inline void RemoveAccountRoleRqst::set_roleid(const std::string& value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ressource.RemoveAccountRoleRqst.roleId)
}
inline std::string* RemoveAccountRoleRqst::mutable_roleid() {
  // @@protoc_insertion_point(field_mutable:ressource.RemoveAccountRoleRqst.roleId)
  return _internal_mutable_roleid();
}
inline const std::string& RemoveAccountRoleRqst::_internal_roleid() const {
  return roleid_.Get();
}
inline void RemoveAccountRoleRqst::_internal_set_roleid(const std::string& value) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveAccountRoleRqst::set_roleid(std::string&& value) {
  
  roleid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RemoveAccountRoleRqst.roleId)
}
inline void RemoveAccountRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RemoveAccountRoleRqst.roleId)
}
inline void RemoveAccountRoleRqst::set_roleid(const char* value,
    size_t size) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RemoveAccountRoleRqst.roleId)
}
inline std::string* RemoveAccountRoleRqst::_internal_mutable_roleid() {
  
  return roleid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveAccountRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:ressource.RemoveAccountRoleRqst.roleId)
  return roleid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveAccountRoleRqst::set_allocated_roleid(std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RemoveAccountRoleRqst.roleId)
}

// -------------------------------------------------------------------

// RemoveAccountRoleRsp

// bool result = 1;
inline void RemoveAccountRoleRsp::clear_result() {
  result_ = false;
}
inline bool RemoveAccountRoleRsp::_internal_result() const {
  return result_;
}
inline bool RemoveAccountRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveAccountRoleRsp.result)
  return _internal_result();
}
inline void RemoveAccountRoleRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveAccountRoleRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.RemoveAccountRoleRsp.result)
}

// -------------------------------------------------------------------

// CreateRoleRqst

// .ressource.Role role = 1;
inline bool CreateRoleRqst::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool CreateRoleRqst::has_role() const {
  return _internal_has_role();
}
inline void CreateRoleRqst::clear_role() {
  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
inline const ::ressource::Role& CreateRoleRqst::_internal_role() const {
  const ::ressource::Role* p = role_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ressource::Role*>(
      &::ressource::_Role_default_instance_);
}
inline const ::ressource::Role& CreateRoleRqst::role() const {
  // @@protoc_insertion_point(field_get:ressource.CreateRoleRqst.role)
  return _internal_role();
}
inline void CreateRoleRqst::unsafe_arena_set_allocated_role(
    ::ressource::Role* role) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ressource.CreateRoleRqst.role)
}
inline ::ressource::Role* CreateRoleRqst::release_role() {
  
  ::ressource::Role* temp = role_;
  role_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ressource::Role* CreateRoleRqst::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:ressource.CreateRoleRqst.role)
  
  ::ressource::Role* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::ressource::Role* CreateRoleRqst::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::ressource::Role>(GetArena());
    role_ = p;
  }
  return role_;
}
inline ::ressource::Role* CreateRoleRqst::mutable_role() {
  // @@protoc_insertion_point(field_mutable:ressource.CreateRoleRqst.role)
  return _internal_mutable_role();
}
inline void CreateRoleRqst::set_allocated_role(::ressource::Role* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:ressource.CreateRoleRqst.role)
}

// -------------------------------------------------------------------

// CreateRoleRsp

// bool result = 1;
inline void CreateRoleRsp::clear_result() {
  result_ = false;
}
inline bool CreateRoleRsp::_internal_result() const {
  return result_;
}
inline bool CreateRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.CreateRoleRsp.result)
  return _internal_result();
}
inline void CreateRoleRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void CreateRoleRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.CreateRoleRsp.result)
}

// -------------------------------------------------------------------

// DeleteRoleRqst

// string roleId = 1;
inline void DeleteRoleRqst::clear_roleid() {
  roleid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteRoleRqst.roleId)
  return _internal_roleid();
}
inline void DeleteRoleRqst::set_roleid(const std::string& value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteRoleRqst.roleId)
}
inline std::string* DeleteRoleRqst::mutable_roleid() {
  // @@protoc_insertion_point(field_mutable:ressource.DeleteRoleRqst.roleId)
  return _internal_mutable_roleid();
}
inline const std::string& DeleteRoleRqst::_internal_roleid() const {
  return roleid_.Get();
}
inline void DeleteRoleRqst::_internal_set_roleid(const std::string& value) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRoleRqst::set_roleid(std::string&& value) {
  
  roleid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.DeleteRoleRqst.roleId)
}
inline void DeleteRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.DeleteRoleRqst.roleId)
}
inline void DeleteRoleRqst::set_roleid(const char* value,
    size_t size) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.DeleteRoleRqst.roleId)
}
inline std::string* DeleteRoleRqst::_internal_mutable_roleid() {
  
  return roleid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:ressource.DeleteRoleRqst.roleId)
  return roleid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRoleRqst::set_allocated_roleid(std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.DeleteRoleRqst.roleId)
}

// -------------------------------------------------------------------

// DeleteRoleRsp

// bool result = 1;
inline void DeleteRoleRsp::clear_result() {
  result_ = false;
}
inline bool DeleteRoleRsp::_internal_result() const {
  return result_;
}
inline bool DeleteRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteRoleRsp.result)
  return _internal_result();
}
inline void DeleteRoleRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteRoleRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteRoleRsp.result)
}

// -------------------------------------------------------------------

// AddRoleActionRqst

// string roleId = 1;
inline void AddRoleActionRqst::clear_roleid() {
  roleid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddRoleActionRqst::roleid() const {
  // @@protoc_insertion_point(field_get:ressource.AddRoleActionRqst.roleId)
  return _internal_roleid();
}
inline void AddRoleActionRqst::set_roleid(const std::string& value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ressource.AddRoleActionRqst.roleId)
}
inline std::string* AddRoleActionRqst::mutable_roleid() {
  // @@protoc_insertion_point(field_mutable:ressource.AddRoleActionRqst.roleId)
  return _internal_mutable_roleid();
}
inline const std::string& AddRoleActionRqst::_internal_roleid() const {
  return roleid_.Get();
}
inline void AddRoleActionRqst::_internal_set_roleid(const std::string& value) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddRoleActionRqst::set_roleid(std::string&& value) {
  
  roleid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.AddRoleActionRqst.roleId)
}
inline void AddRoleActionRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.AddRoleActionRqst.roleId)
}
inline void AddRoleActionRqst::set_roleid(const char* value,
    size_t size) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.AddRoleActionRqst.roleId)
}
inline std::string* AddRoleActionRqst::_internal_mutable_roleid() {
  
  return roleid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddRoleActionRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:ressource.AddRoleActionRqst.roleId)
  return roleid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRoleActionRqst::set_allocated_roleid(std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.AddRoleActionRqst.roleId)
}

// string action = 2;
inline void AddRoleActionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddRoleActionRqst::action() const {
  // @@protoc_insertion_point(field_get:ressource.AddRoleActionRqst.action)
  return _internal_action();
}
inline void AddRoleActionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:ressource.AddRoleActionRqst.action)
}
inline std::string* AddRoleActionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:ressource.AddRoleActionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& AddRoleActionRqst::_internal_action() const {
  return action_.Get();
}
inline void AddRoleActionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddRoleActionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.AddRoleActionRqst.action)
}
inline void AddRoleActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.AddRoleActionRqst.action)
}
inline void AddRoleActionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.AddRoleActionRqst.action)
}
inline std::string* AddRoleActionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddRoleActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:ressource.AddRoleActionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRoleActionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.AddRoleActionRqst.action)
}

// -------------------------------------------------------------------

// AddRoleActionRsp

// bool result = 1;
inline void AddRoleActionRsp::clear_result() {
  result_ = false;
}
inline bool AddRoleActionRsp::_internal_result() const {
  return result_;
}
inline bool AddRoleActionRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.AddRoleActionRsp.result)
  return _internal_result();
}
inline void AddRoleActionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddRoleActionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.AddRoleActionRsp.result)
}

// -------------------------------------------------------------------

// RemoveRoleActionRqst

// string roleId = 1;
inline void RemoveRoleActionRqst::clear_roleid() {
  roleid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveRoleActionRqst::roleid() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveRoleActionRqst.roleId)
  return _internal_roleid();
}
inline void RemoveRoleActionRqst::set_roleid(const std::string& value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:ressource.RemoveRoleActionRqst.roleId)
}
inline std::string* RemoveRoleActionRqst::mutable_roleid() {
  // @@protoc_insertion_point(field_mutable:ressource.RemoveRoleActionRqst.roleId)
  return _internal_mutable_roleid();
}
inline const std::string& RemoveRoleActionRqst::_internal_roleid() const {
  return roleid_.Get();
}
inline void RemoveRoleActionRqst::_internal_set_roleid(const std::string& value) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveRoleActionRqst::set_roleid(std::string&& value) {
  
  roleid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RemoveRoleActionRqst.roleId)
}
inline void RemoveRoleActionRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RemoveRoleActionRqst.roleId)
}
inline void RemoveRoleActionRqst::set_roleid(const char* value,
    size_t size) {
  
  roleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RemoveRoleActionRqst.roleId)
}
inline std::string* RemoveRoleActionRqst::_internal_mutable_roleid() {
  
  return roleid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveRoleActionRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:ressource.RemoveRoleActionRqst.roleId)
  return roleid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveRoleActionRqst::set_allocated_roleid(std::string* roleid) {
  if (roleid != nullptr) {
    
  } else {
    
  }
  roleid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roleid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RemoveRoleActionRqst.roleId)
}

// string action = 2;
inline void RemoveRoleActionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveRoleActionRqst::action() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveRoleActionRqst.action)
  return _internal_action();
}
inline void RemoveRoleActionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:ressource.RemoveRoleActionRqst.action)
}
inline std::string* RemoveRoleActionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:ressource.RemoveRoleActionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& RemoveRoleActionRqst::_internal_action() const {
  return action_.Get();
}
inline void RemoveRoleActionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveRoleActionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RemoveRoleActionRqst.action)
}
inline void RemoveRoleActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RemoveRoleActionRqst.action)
}
inline void RemoveRoleActionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RemoveRoleActionRqst.action)
}
inline std::string* RemoveRoleActionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveRoleActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:ressource.RemoveRoleActionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveRoleActionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RemoveRoleActionRqst.action)
}

// -------------------------------------------------------------------

// RemoveRoleActionRsp

// bool result = 1;
inline void RemoveRoleActionRsp::clear_result() {
  result_ = false;
}
inline bool RemoveRoleActionRsp::_internal_result() const {
  return result_;
}
inline bool RemoveRoleActionRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveRoleActionRsp.result)
  return _internal_result();
}
inline void RemoveRoleActionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveRoleActionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.RemoveRoleActionRsp.result)
}

// -------------------------------------------------------------------

// AddApplicationActionRqst

// string applicationId = 1;
inline void AddApplicationActionRqst::clear_applicationid() {
  applicationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddApplicationActionRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:ressource.AddApplicationActionRqst.applicationId)
  return _internal_applicationid();
}
inline void AddApplicationActionRqst::set_applicationid(const std::string& value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:ressource.AddApplicationActionRqst.applicationId)
}
inline std::string* AddApplicationActionRqst::mutable_applicationid() {
  // @@protoc_insertion_point(field_mutable:ressource.AddApplicationActionRqst.applicationId)
  return _internal_mutable_applicationid();
}
inline const std::string& AddApplicationActionRqst::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void AddApplicationActionRqst::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddApplicationActionRqst::set_applicationid(std::string&& value) {
  
  applicationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.AddApplicationActionRqst.applicationId)
}
inline void AddApplicationActionRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.AddApplicationActionRqst.applicationId)
}
inline void AddApplicationActionRqst::set_applicationid(const char* value,
    size_t size) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.AddApplicationActionRqst.applicationId)
}
inline std::string* AddApplicationActionRqst::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddApplicationActionRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:ressource.AddApplicationActionRqst.applicationId)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddApplicationActionRqst::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.AddApplicationActionRqst.applicationId)
}

// string action = 2;
inline void AddApplicationActionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddApplicationActionRqst::action() const {
  // @@protoc_insertion_point(field_get:ressource.AddApplicationActionRqst.action)
  return _internal_action();
}
inline void AddApplicationActionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:ressource.AddApplicationActionRqst.action)
}
inline std::string* AddApplicationActionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:ressource.AddApplicationActionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& AddApplicationActionRqst::_internal_action() const {
  return action_.Get();
}
inline void AddApplicationActionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddApplicationActionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.AddApplicationActionRqst.action)
}
inline void AddApplicationActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.AddApplicationActionRqst.action)
}
inline void AddApplicationActionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.AddApplicationActionRqst.action)
}
inline std::string* AddApplicationActionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddApplicationActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:ressource.AddApplicationActionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddApplicationActionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.AddApplicationActionRqst.action)
}

// -------------------------------------------------------------------

// AddApplicationActionRsp

// bool result = 1;
inline void AddApplicationActionRsp::clear_result() {
  result_ = false;
}
inline bool AddApplicationActionRsp::_internal_result() const {
  return result_;
}
inline bool AddApplicationActionRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.AddApplicationActionRsp.result)
  return _internal_result();
}
inline void AddApplicationActionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddApplicationActionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.AddApplicationActionRsp.result)
}

// -------------------------------------------------------------------

// RemoveApplicationActionRqst

// string applicationId = 1;
inline void RemoveApplicationActionRqst::clear_applicationid() {
  applicationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveApplicationActionRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveApplicationActionRqst.applicationId)
  return _internal_applicationid();
}
inline void RemoveApplicationActionRqst::set_applicationid(const std::string& value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:ressource.RemoveApplicationActionRqst.applicationId)
}
inline std::string* RemoveApplicationActionRqst::mutable_applicationid() {
  // @@protoc_insertion_point(field_mutable:ressource.RemoveApplicationActionRqst.applicationId)
  return _internal_mutable_applicationid();
}
inline const std::string& RemoveApplicationActionRqst::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void RemoveApplicationActionRqst::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveApplicationActionRqst::set_applicationid(std::string&& value) {
  
  applicationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RemoveApplicationActionRqst.applicationId)
}
inline void RemoveApplicationActionRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RemoveApplicationActionRqst.applicationId)
}
inline void RemoveApplicationActionRqst::set_applicationid(const char* value,
    size_t size) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RemoveApplicationActionRqst.applicationId)
}
inline std::string* RemoveApplicationActionRqst::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveApplicationActionRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:ressource.RemoveApplicationActionRqst.applicationId)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveApplicationActionRqst::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RemoveApplicationActionRqst.applicationId)
}

// string action = 2;
inline void RemoveApplicationActionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveApplicationActionRqst::action() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveApplicationActionRqst.action)
  return _internal_action();
}
inline void RemoveApplicationActionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:ressource.RemoveApplicationActionRqst.action)
}
inline std::string* RemoveApplicationActionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:ressource.RemoveApplicationActionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& RemoveApplicationActionRqst::_internal_action() const {
  return action_.Get();
}
inline void RemoveApplicationActionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveApplicationActionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RemoveApplicationActionRqst.action)
}
inline void RemoveApplicationActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RemoveApplicationActionRqst.action)
}
inline void RemoveApplicationActionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RemoveApplicationActionRqst.action)
}
inline std::string* RemoveApplicationActionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveApplicationActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:ressource.RemoveApplicationActionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveApplicationActionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RemoveApplicationActionRqst.action)
}

// -------------------------------------------------------------------

// RemoveApplicationActionRsp

// bool result = 1;
inline void RemoveApplicationActionRsp::clear_result() {
  result_ = false;
}
inline bool RemoveApplicationActionRsp::_internal_result() const {
  return result_;
}
inline bool RemoveApplicationActionRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveApplicationActionRsp.result)
  return _internal_result();
}
inline void RemoveApplicationActionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveApplicationActionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.RemoveApplicationActionRsp.result)
}

// -------------------------------------------------------------------

// GetAllActionsRqst

// -------------------------------------------------------------------

// GetAllActionsRsp

// repeated string actions = 1;
inline int GetAllActionsRsp::_internal_actions_size() const {
  return actions_.size();
}
inline int GetAllActionsRsp::actions_size() const {
  return _internal_actions_size();
}
inline void GetAllActionsRsp::clear_actions() {
  actions_.Clear();
}
inline std::string* GetAllActionsRsp::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:ressource.GetAllActionsRsp.actions)
  return _internal_add_actions();
}
inline const std::string& GetAllActionsRsp::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const std::string& GetAllActionsRsp::actions(int index) const {
  // @@protoc_insertion_point(field_get:ressource.GetAllActionsRsp.actions)
  return _internal_actions(index);
}
inline std::string* GetAllActionsRsp::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:ressource.GetAllActionsRsp.actions)
  return actions_.Mutable(index);
}
inline void GetAllActionsRsp::set_actions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ressource.GetAllActionsRsp.actions)
  actions_.Mutable(index)->assign(value);
}
inline void GetAllActionsRsp::set_actions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ressource.GetAllActionsRsp.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
inline void GetAllActionsRsp::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ressource.GetAllActionsRsp.actions)
}
inline void GetAllActionsRsp::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ressource.GetAllActionsRsp.actions)
}
inline std::string* GetAllActionsRsp::_internal_add_actions() {
  return actions_.Add();
}
inline void GetAllActionsRsp::add_actions(const std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ressource.GetAllActionsRsp.actions)
}
inline void GetAllActionsRsp::add_actions(std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ressource.GetAllActionsRsp.actions)
}
inline void GetAllActionsRsp::add_actions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ressource.GetAllActionsRsp.actions)
}
inline void GetAllActionsRsp::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ressource.GetAllActionsRsp.actions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAllActionsRsp::actions() const {
  // @@protoc_insertion_point(field_list:ressource.GetAllActionsRsp.actions)
  return actions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAllActionsRsp::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:ressource.GetAllActionsRsp.actions)
  return &actions_;
}

// -------------------------------------------------------------------

// DeleteApplicationRqst

// string applicationId = 1;
inline void DeleteApplicationRqst::clear_applicationid() {
  applicationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteApplicationRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteApplicationRqst.applicationId)
  return _internal_applicationid();
}
inline void DeleteApplicationRqst::set_applicationid(const std::string& value) {
  _internal_set_applicationid(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteApplicationRqst.applicationId)
}
inline std::string* DeleteApplicationRqst::mutable_applicationid() {
  // @@protoc_insertion_point(field_mutable:ressource.DeleteApplicationRqst.applicationId)
  return _internal_mutable_applicationid();
}
inline const std::string& DeleteApplicationRqst::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void DeleteApplicationRqst::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteApplicationRqst::set_applicationid(std::string&& value) {
  
  applicationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.DeleteApplicationRqst.applicationId)
}
inline void DeleteApplicationRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.DeleteApplicationRqst.applicationId)
}
inline void DeleteApplicationRqst::set_applicationid(const char* value,
    size_t size) {
  
  applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.DeleteApplicationRqst.applicationId)
}
inline std::string* DeleteApplicationRqst::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteApplicationRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:ressource.DeleteApplicationRqst.applicationId)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteApplicationRqst::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.DeleteApplicationRqst.applicationId)
}

// -------------------------------------------------------------------

// DeleteApplicationRsp

// bool result = 1;
inline void DeleteApplicationRsp::clear_result() {
  result_ = false;
}
inline bool DeleteApplicationRsp::_internal_result() const {
  return result_;
}
inline bool DeleteApplicationRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteApplicationRsp.result)
  return _internal_result();
}
inline void DeleteApplicationRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteApplicationRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteApplicationRsp.result)
}

// -------------------------------------------------------------------

// RessourcePermission

// int32 number = 1;
inline void RessourcePermission::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RessourcePermission::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RessourcePermission::number() const {
  // @@protoc_insertion_point(field_get:ressource.RessourcePermission.number)
  return _internal_number();
}
inline void RessourcePermission::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void RessourcePermission::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:ressource.RessourcePermission.number)
}

// string path = 2;
inline void RessourcePermission::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RessourcePermission::path() const {
  // @@protoc_insertion_point(field_get:ressource.RessourcePermission.path)
  return _internal_path();
}
inline void RessourcePermission::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ressource.RessourcePermission.path)
}
inline std::string* RessourcePermission::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ressource.RessourcePermission.path)
  return _internal_mutable_path();
}
inline const std::string& RessourcePermission::_internal_path() const {
  return path_.Get();
}
inline void RessourcePermission::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RessourcePermission::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RessourcePermission.path)
}
inline void RessourcePermission::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RessourcePermission.path)
}
inline void RessourcePermission::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RessourcePermission.path)
}
inline std::string* RessourcePermission::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RessourcePermission::release_path() {
  // @@protoc_insertion_point(field_release:ressource.RessourcePermission.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RessourcePermission::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RessourcePermission.path)
}

// string user = 3;
inline bool RessourcePermission::_internal_has_user() const {
  return owner_case() == kUser;
}
inline void RessourcePermission::set_has_user() {
  _oneof_case_[0] = kUser;
}
inline void RessourcePermission::clear_user() {
  if (_internal_has_user()) {
    owner_.user_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_owner();
  }
}
inline const std::string& RessourcePermission::user() const {
  // @@protoc_insertion_point(field_get:ressource.RessourcePermission.user)
  return _internal_user();
}
inline void RessourcePermission::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:ressource.RessourcePermission.user)
}
inline std::string* RessourcePermission::mutable_user() {
  // @@protoc_insertion_point(field_mutable:ressource.RessourcePermission.user)
  return _internal_mutable_user();
}
inline const std::string& RessourcePermission::_internal_user() const {
  if (_internal_has_user()) {
    return owner_.user_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RessourcePermission::_internal_set_user(const std::string& value) {
  if (!_internal_has_user()) {
    clear_owner();
    set_has_user();
    owner_.user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RessourcePermission::set_user(std::string&& value) {
  // @@protoc_insertion_point(field_set:ressource.RessourcePermission.user)
  if (!_internal_has_user()) {
    clear_owner();
    set_has_user();
    owner_.user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RessourcePermission.user)
}
inline void RessourcePermission::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_user()) {
    clear_owner();
    set_has_user();
    owner_.user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RessourcePermission.user)
}
inline void RessourcePermission::set_user(const char* value,
                             size_t size) {
  if (!_internal_has_user()) {
    clear_owner();
    set_has_user();
    owner_.user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.user_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RessourcePermission.user)
}
inline std::string* RessourcePermission::_internal_mutable_user() {
  if (!_internal_has_user()) {
    clear_owner();
    set_has_user();
    owner_.user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return owner_.user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RessourcePermission::release_user() {
  // @@protoc_insertion_point(field_release:ressource.RessourcePermission.user)
  if (_internal_has_user()) {
    clear_has_owner();
    return owner_.user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RessourcePermission::set_allocated_user(std::string* user) {
  if (has_owner()) {
    clear_owner();
  }
  if (user != nullptr) {
    set_has_user();
    owner_.user_.UnsafeSetDefault(user);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(user);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ressource.RessourcePermission.user)
}

// string role = 4;
inline bool RessourcePermission::_internal_has_role() const {
  return owner_case() == kRole;
}
inline void RessourcePermission::set_has_role() {
  _oneof_case_[0] = kRole;
}
inline void RessourcePermission::clear_role() {
  if (_internal_has_role()) {
    owner_.role_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_owner();
  }
}
inline const std::string& RessourcePermission::role() const {
  // @@protoc_insertion_point(field_get:ressource.RessourcePermission.role)
  return _internal_role();
}
inline void RessourcePermission::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:ressource.RessourcePermission.role)
}
inline std::string* RessourcePermission::mutable_role() {
  // @@protoc_insertion_point(field_mutable:ressource.RessourcePermission.role)
  return _internal_mutable_role();
}
inline const std::string& RessourcePermission::_internal_role() const {
  if (_internal_has_role()) {
    return owner_.role_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RessourcePermission::_internal_set_role(const std::string& value) {
  if (!_internal_has_role()) {
    clear_owner();
    set_has_role();
    owner_.role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RessourcePermission::set_role(std::string&& value) {
  // @@protoc_insertion_point(field_set:ressource.RessourcePermission.role)
  if (!_internal_has_role()) {
    clear_owner();
    set_has_role();
    owner_.role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.role_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RessourcePermission.role)
}
inline void RessourcePermission::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_role()) {
    clear_owner();
    set_has_role();
    owner_.role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RessourcePermission.role)
}
inline void RessourcePermission::set_role(const char* value,
                             size_t size) {
  if (!_internal_has_role()) {
    clear_owner();
    set_has_role();
    owner_.role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.role_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RessourcePermission.role)
}
inline std::string* RessourcePermission::_internal_mutable_role() {
  if (!_internal_has_role()) {
    clear_owner();
    set_has_role();
    owner_.role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return owner_.role_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RessourcePermission::release_role() {
  // @@protoc_insertion_point(field_release:ressource.RessourcePermission.role)
  if (_internal_has_role()) {
    clear_has_owner();
    return owner_.role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RessourcePermission::set_allocated_role(std::string* role) {
  if (has_owner()) {
    clear_owner();
  }
  if (role != nullptr) {
    set_has_role();
    owner_.role_.UnsafeSetDefault(role);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(role);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ressource.RessourcePermission.role)
}

// string application = 5;
inline bool RessourcePermission::_internal_has_application() const {
  return owner_case() == kApplication;
}
inline void RessourcePermission::set_has_application() {
  _oneof_case_[0] = kApplication;
}
inline void RessourcePermission::clear_application() {
  if (_internal_has_application()) {
    owner_.application_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_owner();
  }
}
inline const std::string& RessourcePermission::application() const {
  // @@protoc_insertion_point(field_get:ressource.RessourcePermission.application)
  return _internal_application();
}
inline void RessourcePermission::set_application(const std::string& value) {
  _internal_set_application(value);
  // @@protoc_insertion_point(field_set:ressource.RessourcePermission.application)
}
inline std::string* RessourcePermission::mutable_application() {
  // @@protoc_insertion_point(field_mutable:ressource.RessourcePermission.application)
  return _internal_mutable_application();
}
inline const std::string& RessourcePermission::_internal_application() const {
  if (_internal_has_application()) {
    return owner_.application_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RessourcePermission::_internal_set_application(const std::string& value) {
  if (!_internal_has_application()) {
    clear_owner();
    set_has_application();
    owner_.application_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.application_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RessourcePermission::set_application(std::string&& value) {
  // @@protoc_insertion_point(field_set:ressource.RessourcePermission.application)
  if (!_internal_has_application()) {
    clear_owner();
    set_has_application();
    owner_.application_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.application_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RessourcePermission.application)
}
inline void RessourcePermission::set_application(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_application()) {
    clear_owner();
    set_has_application();
    owner_.application_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.application_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RessourcePermission.application)
}
inline void RessourcePermission::set_application(const char* value,
                             size_t size) {
  if (!_internal_has_application()) {
    clear_owner();
    set_has_application();
    owner_.application_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.application_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RessourcePermission.application)
}
inline std::string* RessourcePermission::_internal_mutable_application() {
  if (!_internal_has_application()) {
    clear_owner();
    set_has_application();
    owner_.application_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return owner_.application_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RessourcePermission::release_application() {
  // @@protoc_insertion_point(field_release:ressource.RessourcePermission.application)
  if (_internal_has_application()) {
    clear_has_owner();
    return owner_.application_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RessourcePermission::set_allocated_application(std::string* application) {
  if (has_owner()) {
    clear_owner();
  }
  if (application != nullptr) {
    set_has_application();
    owner_.application_.UnsafeSetDefault(application);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(application);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ressource.RessourcePermission.application)
}

// string service = 6;
inline bool RessourcePermission::_internal_has_service() const {
  return owner_case() == kService;
}
inline void RessourcePermission::set_has_service() {
  _oneof_case_[0] = kService;
}
inline void RessourcePermission::clear_service() {
  if (_internal_has_service()) {
    owner_.service_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_owner();
  }
}
inline const std::string& RessourcePermission::service() const {
  // @@protoc_insertion_point(field_get:ressource.RessourcePermission.service)
  return _internal_service();
}
inline void RessourcePermission::set_service(const std::string& value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:ressource.RessourcePermission.service)
}
inline std::string* RessourcePermission::mutable_service() {
  // @@protoc_insertion_point(field_mutable:ressource.RessourcePermission.service)
  return _internal_mutable_service();
}
inline const std::string& RessourcePermission::_internal_service() const {
  if (_internal_has_service()) {
    return owner_.service_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RessourcePermission::_internal_set_service(const std::string& value) {
  if (!_internal_has_service()) {
    clear_owner();
    set_has_service();
    owner_.service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.service_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RessourcePermission::set_service(std::string&& value) {
  // @@protoc_insertion_point(field_set:ressource.RessourcePermission.service)
  if (!_internal_has_service()) {
    clear_owner();
    set_has_service();
    owner_.service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.service_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RessourcePermission.service)
}
inline void RessourcePermission::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_service()) {
    clear_owner();
    set_has_service();
    owner_.service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.service_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RessourcePermission.service)
}
inline void RessourcePermission::set_service(const char* value,
                             size_t size) {
  if (!_internal_has_service()) {
    clear_owner();
    set_has_service();
    owner_.service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  owner_.service_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RessourcePermission.service)
}
inline std::string* RessourcePermission::_internal_mutable_service() {
  if (!_internal_has_service()) {
    clear_owner();
    set_has_service();
    owner_.service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return owner_.service_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RessourcePermission::release_service() {
  // @@protoc_insertion_point(field_release:ressource.RessourcePermission.service)
  if (_internal_has_service()) {
    clear_has_owner();
    return owner_.service_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void RessourcePermission::set_allocated_service(std::string* service) {
  if (has_owner()) {
    clear_owner();
  }
  if (service != nullptr) {
    set_has_service();
    owner_.service_.UnsafeSetDefault(service);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(service);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ressource.RessourcePermission.service)
}

inline bool RessourcePermission::has_owner() const {
  return owner_case() != OWNER_NOT_SET;
}
inline void RessourcePermission::clear_has_owner() {
  _oneof_case_[0] = OWNER_NOT_SET;
}
inline RessourcePermission::OwnerCase RessourcePermission::owner_case() const {
  return RessourcePermission::OwnerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetPermissionsRqst

// string path = 1;
inline void GetPermissionsRqst::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPermissionsRqst::path() const {
  // @@protoc_insertion_point(field_get:ressource.GetPermissionsRqst.path)
  return _internal_path();
}
inline void GetPermissionsRqst::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ressource.GetPermissionsRqst.path)
}
inline std::string* GetPermissionsRqst::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ressource.GetPermissionsRqst.path)
  return _internal_mutable_path();
}
inline const std::string& GetPermissionsRqst::_internal_path() const {
  return path_.Get();
}
inline void GetPermissionsRqst::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPermissionsRqst::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.GetPermissionsRqst.path)
}
inline void GetPermissionsRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.GetPermissionsRqst.path)
}
inline void GetPermissionsRqst::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.GetPermissionsRqst.path)
}
inline std::string* GetPermissionsRqst::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPermissionsRqst::release_path() {
  // @@protoc_insertion_point(field_release:ressource.GetPermissionsRqst.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPermissionsRqst::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.GetPermissionsRqst.path)
}

// -------------------------------------------------------------------

// GetPermissionsRsp

// string permissions = 1;
inline void GetPermissionsRsp::clear_permissions() {
  permissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPermissionsRsp::permissions() const {
  // @@protoc_insertion_point(field_get:ressource.GetPermissionsRsp.permissions)
  return _internal_permissions();
}
inline void GetPermissionsRsp::set_permissions(const std::string& value) {
  _internal_set_permissions(value);
  // @@protoc_insertion_point(field_set:ressource.GetPermissionsRsp.permissions)
}
inline std::string* GetPermissionsRsp::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable:ressource.GetPermissionsRsp.permissions)
  return _internal_mutable_permissions();
}
inline const std::string& GetPermissionsRsp::_internal_permissions() const {
  return permissions_.Get();
}
inline void GetPermissionsRsp::_internal_set_permissions(const std::string& value) {
  
  permissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPermissionsRsp::set_permissions(std::string&& value) {
  
  permissions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.GetPermissionsRsp.permissions)
}
inline void GetPermissionsRsp::set_permissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  permissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.GetPermissionsRsp.permissions)
}
inline void GetPermissionsRsp::set_permissions(const char* value,
    size_t size) {
  
  permissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.GetPermissionsRsp.permissions)
}
inline std::string* GetPermissionsRsp::_internal_mutable_permissions() {
  
  return permissions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPermissionsRsp::release_permissions() {
  // @@protoc_insertion_point(field_release:ressource.GetPermissionsRsp.permissions)
  return permissions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPermissionsRsp::set_allocated_permissions(std::string* permissions) {
  if (permissions != nullptr) {
    
  } else {
    
  }
  permissions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), permissions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.GetPermissionsRsp.permissions)
}

// -------------------------------------------------------------------

// SetPermissionRqst

// .ressource.RessourcePermission permission = 1;
inline bool SetPermissionRqst::_internal_has_permission() const {
  return this != internal_default_instance() && permission_ != nullptr;
}
inline bool SetPermissionRqst::has_permission() const {
  return _internal_has_permission();
}
inline void SetPermissionRqst::clear_permission() {
  if (GetArena() == nullptr && permission_ != nullptr) {
    delete permission_;
  }
  permission_ = nullptr;
}
inline const ::ressource::RessourcePermission& SetPermissionRqst::_internal_permission() const {
  const ::ressource::RessourcePermission* p = permission_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ressource::RessourcePermission*>(
      &::ressource::_RessourcePermission_default_instance_);
}
inline const ::ressource::RessourcePermission& SetPermissionRqst::permission() const {
  // @@protoc_insertion_point(field_get:ressource.SetPermissionRqst.permission)
  return _internal_permission();
}
inline void SetPermissionRqst::unsafe_arena_set_allocated_permission(
    ::ressource::RessourcePermission* permission) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permission_);
  }
  permission_ = permission;
  if (permission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ressource.SetPermissionRqst.permission)
}
inline ::ressource::RessourcePermission* SetPermissionRqst::release_permission() {
  
  ::ressource::RessourcePermission* temp = permission_;
  permission_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ressource::RessourcePermission* SetPermissionRqst::unsafe_arena_release_permission() {
  // @@protoc_insertion_point(field_release:ressource.SetPermissionRqst.permission)
  
  ::ressource::RessourcePermission* temp = permission_;
  permission_ = nullptr;
  return temp;
}
inline ::ressource::RessourcePermission* SetPermissionRqst::_internal_mutable_permission() {
  
  if (permission_ == nullptr) {
    auto* p = CreateMaybeMessage<::ressource::RessourcePermission>(GetArena());
    permission_ = p;
  }
  return permission_;
}
inline ::ressource::RessourcePermission* SetPermissionRqst::mutable_permission() {
  // @@protoc_insertion_point(field_mutable:ressource.SetPermissionRqst.permission)
  return _internal_mutable_permission();
}
inline void SetPermissionRqst::set_allocated_permission(::ressource::RessourcePermission* permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete permission_;
  }
  if (permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(permission);
    if (message_arena != submessage_arena) {
      permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permission, submessage_arena);
    }
    
  } else {
    
  }
  permission_ = permission;
  // @@protoc_insertion_point(field_set_allocated:ressource.SetPermissionRqst.permission)
}

// -------------------------------------------------------------------

// SetPermissionRsp

// bool result = 1;
inline void SetPermissionRsp::clear_result() {
  result_ = false;
}
inline bool SetPermissionRsp::_internal_result() const {
  return result_;
}
inline bool SetPermissionRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.SetPermissionRsp.result)
  return _internal_result();
}
inline void SetPermissionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void SetPermissionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.SetPermissionRsp.result)
}

// -------------------------------------------------------------------

// DeletePermissionsRqst

// string path = 1;
inline void DeletePermissionsRqst::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeletePermissionsRqst::path() const {
  // @@protoc_insertion_point(field_get:ressource.DeletePermissionsRqst.path)
  return _internal_path();
}
inline void DeletePermissionsRqst::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ressource.DeletePermissionsRqst.path)
}
inline std::string* DeletePermissionsRqst::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ressource.DeletePermissionsRqst.path)
  return _internal_mutable_path();
}
inline const std::string& DeletePermissionsRqst::_internal_path() const {
  return path_.Get();
}
inline void DeletePermissionsRqst::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeletePermissionsRqst::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.DeletePermissionsRqst.path)
}
inline void DeletePermissionsRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.DeletePermissionsRqst.path)
}
inline void DeletePermissionsRqst::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.DeletePermissionsRqst.path)
}
inline std::string* DeletePermissionsRqst::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeletePermissionsRqst::release_path() {
  // @@protoc_insertion_point(field_release:ressource.DeletePermissionsRqst.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeletePermissionsRqst::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.DeletePermissionsRqst.path)
}

// string owner = 2;
inline void DeletePermissionsRqst::clear_owner() {
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeletePermissionsRqst::owner() const {
  // @@protoc_insertion_point(field_get:ressource.DeletePermissionsRqst.owner)
  return _internal_owner();
}
inline void DeletePermissionsRqst::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:ressource.DeletePermissionsRqst.owner)
}
inline std::string* DeletePermissionsRqst::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:ressource.DeletePermissionsRqst.owner)
  return _internal_mutable_owner();
}
inline const std::string& DeletePermissionsRqst::_internal_owner() const {
  return owner_.Get();
}
inline void DeletePermissionsRqst::_internal_set_owner(const std::string& value) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeletePermissionsRqst::set_owner(std::string&& value) {
  
  owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.DeletePermissionsRqst.owner)
}
inline void DeletePermissionsRqst::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.DeletePermissionsRqst.owner)
}
inline void DeletePermissionsRqst::set_owner(const char* value,
    size_t size) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.DeletePermissionsRqst.owner)
}
inline std::string* DeletePermissionsRqst::_internal_mutable_owner() {
  
  return owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeletePermissionsRqst::release_owner() {
  // @@protoc_insertion_point(field_release:ressource.DeletePermissionsRqst.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeletePermissionsRqst::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.DeletePermissionsRqst.owner)
}

// -------------------------------------------------------------------

// DeletePermissionsRsp

// bool result = 1;
inline void DeletePermissionsRsp::clear_result() {
  result_ = false;
}
inline bool DeletePermissionsRsp::_internal_result() const {
  return result_;
}
inline bool DeletePermissionsRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.DeletePermissionsRsp.result)
  return _internal_result();
}
inline void DeletePermissionsRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeletePermissionsRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.DeletePermissionsRsp.result)
}

// -------------------------------------------------------------------

// GetAllFilesInfoRqst

// -------------------------------------------------------------------

// GetAllFilesInfoRsp

// string result = 1;
inline void GetAllFilesInfoRsp::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAllFilesInfoRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.GetAllFilesInfoRsp.result)
  return _internal_result();
}
inline void GetAllFilesInfoRsp::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.GetAllFilesInfoRsp.result)
}
inline std::string* GetAllFilesInfoRsp::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ressource.GetAllFilesInfoRsp.result)
  return _internal_mutable_result();
}
inline const std::string& GetAllFilesInfoRsp::_internal_result() const {
  return result_.Get();
}
inline void GetAllFilesInfoRsp::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAllFilesInfoRsp::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.GetAllFilesInfoRsp.result)
}
inline void GetAllFilesInfoRsp::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.GetAllFilesInfoRsp.result)
}
inline void GetAllFilesInfoRsp::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.GetAllFilesInfoRsp.result)
}
inline std::string* GetAllFilesInfoRsp::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAllFilesInfoRsp::release_result() {
  // @@protoc_insertion_point(field_release:ressource.GetAllFilesInfoRsp.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAllFilesInfoRsp::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.GetAllFilesInfoRsp.result)
}

// -------------------------------------------------------------------

// GetAllApplicationsInfoRqst

// -------------------------------------------------------------------

// GetAllApplicationsInfoRsp

// string result = 1;
inline void GetAllApplicationsInfoRsp::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAllApplicationsInfoRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.GetAllApplicationsInfoRsp.result)
  return _internal_result();
}
inline void GetAllApplicationsInfoRsp::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.GetAllApplicationsInfoRsp.result)
}
inline std::string* GetAllApplicationsInfoRsp::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ressource.GetAllApplicationsInfoRsp.result)
  return _internal_mutable_result();
}
inline const std::string& GetAllApplicationsInfoRsp::_internal_result() const {
  return result_.Get();
}
inline void GetAllApplicationsInfoRsp::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAllApplicationsInfoRsp::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.GetAllApplicationsInfoRsp.result)
}
inline void GetAllApplicationsInfoRsp::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.GetAllApplicationsInfoRsp.result)
}
inline void GetAllApplicationsInfoRsp::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.GetAllApplicationsInfoRsp.result)
}
inline std::string* GetAllApplicationsInfoRsp::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAllApplicationsInfoRsp::release_result() {
  // @@protoc_insertion_point(field_release:ressource.GetAllApplicationsInfoRsp.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAllApplicationsInfoRsp::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.GetAllApplicationsInfoRsp.result)
}

// -------------------------------------------------------------------

// UserSyncInfos

// string base = 1;
inline void UserSyncInfos::clear_base() {
  base_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserSyncInfos::base() const {
  // @@protoc_insertion_point(field_get:ressource.UserSyncInfos.base)
  return _internal_base();
}
inline void UserSyncInfos::set_base(const std::string& value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:ressource.UserSyncInfos.base)
}
inline std::string* UserSyncInfos::mutable_base() {
  // @@protoc_insertion_point(field_mutable:ressource.UserSyncInfos.base)
  return _internal_mutable_base();
}
inline const std::string& UserSyncInfos::_internal_base() const {
  return base_.Get();
}
inline void UserSyncInfos::_internal_set_base(const std::string& value) {
  
  base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserSyncInfos::set_base(std::string&& value) {
  
  base_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.UserSyncInfos.base)
}
inline void UserSyncInfos::set_base(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.UserSyncInfos.base)
}
inline void UserSyncInfos::set_base(const char* value,
    size_t size) {
  
  base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.UserSyncInfos.base)
}
inline std::string* UserSyncInfos::_internal_mutable_base() {
  
  return base_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserSyncInfos::release_base() {
  // @@protoc_insertion_point(field_release:ressource.UserSyncInfos.base)
  return base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSyncInfos::set_allocated_base(std::string* base) {
  if (base != nullptr) {
    
  } else {
    
  }
  base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.UserSyncInfos.base)
}

// string query = 2;
inline void UserSyncInfos::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserSyncInfos::query() const {
  // @@protoc_insertion_point(field_get:ressource.UserSyncInfos.query)
  return _internal_query();
}
inline void UserSyncInfos::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:ressource.UserSyncInfos.query)
}
inline std::string* UserSyncInfos::mutable_query() {
  // @@protoc_insertion_point(field_mutable:ressource.UserSyncInfos.query)
  return _internal_mutable_query();
}
inline const std::string& UserSyncInfos::_internal_query() const {
  return query_.Get();
}
inline void UserSyncInfos::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserSyncInfos::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.UserSyncInfos.query)
}
inline void UserSyncInfos::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.UserSyncInfos.query)
}
inline void UserSyncInfos::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.UserSyncInfos.query)
}
inline std::string* UserSyncInfos::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserSyncInfos::release_query() {
  // @@protoc_insertion_point(field_release:ressource.UserSyncInfos.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSyncInfos::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.UserSyncInfos.query)
}

// string id = 3;
inline void UserSyncInfos::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserSyncInfos::id() const {
  // @@protoc_insertion_point(field_get:ressource.UserSyncInfos.id)
  return _internal_id();
}
inline void UserSyncInfos::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ressource.UserSyncInfos.id)
}
inline std::string* UserSyncInfos::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ressource.UserSyncInfos.id)
  return _internal_mutable_id();
}
inline const std::string& UserSyncInfos::_internal_id() const {
  return id_.Get();
}
inline void UserSyncInfos::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserSyncInfos::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.UserSyncInfos.id)
}
inline void UserSyncInfos::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.UserSyncInfos.id)
}
inline void UserSyncInfos::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.UserSyncInfos.id)
}
inline std::string* UserSyncInfos::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserSyncInfos::release_id() {
  // @@protoc_insertion_point(field_release:ressource.UserSyncInfos.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSyncInfos::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.UserSyncInfos.id)
}

// string email = 4;
inline void UserSyncInfos::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserSyncInfos::email() const {
  // @@protoc_insertion_point(field_get:ressource.UserSyncInfos.email)
  return _internal_email();
}
inline void UserSyncInfos::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:ressource.UserSyncInfos.email)
}
inline std::string* UserSyncInfos::mutable_email() {
  // @@protoc_insertion_point(field_mutable:ressource.UserSyncInfos.email)
  return _internal_mutable_email();
}
inline const std::string& UserSyncInfos::_internal_email() const {
  return email_.Get();
}
inline void UserSyncInfos::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserSyncInfos::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.UserSyncInfos.email)
}
inline void UserSyncInfos::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.UserSyncInfos.email)
}
inline void UserSyncInfos::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.UserSyncInfos.email)
}
inline std::string* UserSyncInfos::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserSyncInfos::release_email() {
  // @@protoc_insertion_point(field_release:ressource.UserSyncInfos.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSyncInfos::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.UserSyncInfos.email)
}

// -------------------------------------------------------------------

// GroupSyncInfos

// string base = 1;
inline void GroupSyncInfos::clear_base() {
  base_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupSyncInfos::base() const {
  // @@protoc_insertion_point(field_get:ressource.GroupSyncInfos.base)
  return _internal_base();
}
inline void GroupSyncInfos::set_base(const std::string& value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:ressource.GroupSyncInfos.base)
}
inline std::string* GroupSyncInfos::mutable_base() {
  // @@protoc_insertion_point(field_mutable:ressource.GroupSyncInfos.base)
  return _internal_mutable_base();
}
inline const std::string& GroupSyncInfos::_internal_base() const {
  return base_.Get();
}
inline void GroupSyncInfos::_internal_set_base(const std::string& value) {
  
  base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupSyncInfos::set_base(std::string&& value) {
  
  base_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.GroupSyncInfos.base)
}
inline void GroupSyncInfos::set_base(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.GroupSyncInfos.base)
}
inline void GroupSyncInfos::set_base(const char* value,
    size_t size) {
  
  base_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.GroupSyncInfos.base)
}
inline std::string* GroupSyncInfos::_internal_mutable_base() {
  
  return base_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupSyncInfos::release_base() {
  // @@protoc_insertion_point(field_release:ressource.GroupSyncInfos.base)
  return base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupSyncInfos::set_allocated_base(std::string* base) {
  if (base != nullptr) {
    
  } else {
    
  }
  base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.GroupSyncInfos.base)
}

// string query = 2;
inline void GroupSyncInfos::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupSyncInfos::query() const {
  // @@protoc_insertion_point(field_get:ressource.GroupSyncInfos.query)
  return _internal_query();
}
inline void GroupSyncInfos::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:ressource.GroupSyncInfos.query)
}
inline std::string* GroupSyncInfos::mutable_query() {
  // @@protoc_insertion_point(field_mutable:ressource.GroupSyncInfos.query)
  return _internal_mutable_query();
}
inline const std::string& GroupSyncInfos::_internal_query() const {
  return query_.Get();
}
inline void GroupSyncInfos::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupSyncInfos::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.GroupSyncInfos.query)
}
inline void GroupSyncInfos::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.GroupSyncInfos.query)
}
inline void GroupSyncInfos::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.GroupSyncInfos.query)
}
inline std::string* GroupSyncInfos::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupSyncInfos::release_query() {
  // @@protoc_insertion_point(field_release:ressource.GroupSyncInfos.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupSyncInfos::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.GroupSyncInfos.query)
}

// string id = 3;
inline void GroupSyncInfos::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupSyncInfos::id() const {
  // @@protoc_insertion_point(field_get:ressource.GroupSyncInfos.id)
  return _internal_id();
}
inline void GroupSyncInfos::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ressource.GroupSyncInfos.id)
}
inline std::string* GroupSyncInfos::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ressource.GroupSyncInfos.id)
  return _internal_mutable_id();
}
inline const std::string& GroupSyncInfos::_internal_id() const {
  return id_.Get();
}
inline void GroupSyncInfos::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupSyncInfos::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.GroupSyncInfos.id)
}
inline void GroupSyncInfos::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.GroupSyncInfos.id)
}
inline void GroupSyncInfos::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.GroupSyncInfos.id)
}
inline std::string* GroupSyncInfos::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupSyncInfos::release_id() {
  // @@protoc_insertion_point(field_release:ressource.GroupSyncInfos.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupSyncInfos::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.GroupSyncInfos.id)
}

// -------------------------------------------------------------------

// LdapSyncInfos

// string ldapSeriveId = 1;
inline void LdapSyncInfos::clear_ldapseriveid() {
  ldapseriveid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LdapSyncInfos::ldapseriveid() const {
  // @@protoc_insertion_point(field_get:ressource.LdapSyncInfos.ldapSeriveId)
  return _internal_ldapseriveid();
}
inline void LdapSyncInfos::set_ldapseriveid(const std::string& value) {
  _internal_set_ldapseriveid(value);
  // @@protoc_insertion_point(field_set:ressource.LdapSyncInfos.ldapSeriveId)
}
inline std::string* LdapSyncInfos::mutable_ldapseriveid() {
  // @@protoc_insertion_point(field_mutable:ressource.LdapSyncInfos.ldapSeriveId)
  return _internal_mutable_ldapseriveid();
}
inline const std::string& LdapSyncInfos::_internal_ldapseriveid() const {
  return ldapseriveid_.Get();
}
inline void LdapSyncInfos::_internal_set_ldapseriveid(const std::string& value) {
  
  ldapseriveid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LdapSyncInfos::set_ldapseriveid(std::string&& value) {
  
  ldapseriveid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.LdapSyncInfos.ldapSeriveId)
}
inline void LdapSyncInfos::set_ldapseriveid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ldapseriveid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.LdapSyncInfos.ldapSeriveId)
}
inline void LdapSyncInfos::set_ldapseriveid(const char* value,
    size_t size) {
  
  ldapseriveid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.LdapSyncInfos.ldapSeriveId)
}
inline std::string* LdapSyncInfos::_internal_mutable_ldapseriveid() {
  
  return ldapseriveid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LdapSyncInfos::release_ldapseriveid() {
  // @@protoc_insertion_point(field_release:ressource.LdapSyncInfos.ldapSeriveId)
  return ldapseriveid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LdapSyncInfos::set_allocated_ldapseriveid(std::string* ldapseriveid) {
  if (ldapseriveid != nullptr) {
    
  } else {
    
  }
  ldapseriveid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ldapseriveid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.LdapSyncInfos.ldapSeriveId)
}

// string connectionId = 2;
inline void LdapSyncInfos::clear_connectionid() {
  connectionid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LdapSyncInfos::connectionid() const {
  // @@protoc_insertion_point(field_get:ressource.LdapSyncInfos.connectionId)
  return _internal_connectionid();
}
inline void LdapSyncInfos::set_connectionid(const std::string& value) {
  _internal_set_connectionid(value);
  // @@protoc_insertion_point(field_set:ressource.LdapSyncInfos.connectionId)
}
inline std::string* LdapSyncInfos::mutable_connectionid() {
  // @@protoc_insertion_point(field_mutable:ressource.LdapSyncInfos.connectionId)
  return _internal_mutable_connectionid();
}
inline const std::string& LdapSyncInfos::_internal_connectionid() const {
  return connectionid_.Get();
}
inline void LdapSyncInfos::_internal_set_connectionid(const std::string& value) {
  
  connectionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LdapSyncInfos::set_connectionid(std::string&& value) {
  
  connectionid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.LdapSyncInfos.connectionId)
}
inline void LdapSyncInfos::set_connectionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connectionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.LdapSyncInfos.connectionId)
}
inline void LdapSyncInfos::set_connectionid(const char* value,
    size_t size) {
  
  connectionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.LdapSyncInfos.connectionId)
}
inline std::string* LdapSyncInfos::_internal_mutable_connectionid() {
  
  return connectionid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LdapSyncInfos::release_connectionid() {
  // @@protoc_insertion_point(field_release:ressource.LdapSyncInfos.connectionId)
  return connectionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LdapSyncInfos::set_allocated_connectionid(std::string* connectionid) {
  if (connectionid != nullptr) {
    
  } else {
    
  }
  connectionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connectionid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.LdapSyncInfos.connectionId)
}

// int32 refresh = 3;
inline void LdapSyncInfos::clear_refresh() {
  refresh_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LdapSyncInfos::_internal_refresh() const {
  return refresh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LdapSyncInfos::refresh() const {
  // @@protoc_insertion_point(field_get:ressource.LdapSyncInfos.refresh)
  return _internal_refresh();
}
inline void LdapSyncInfos::_internal_set_refresh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  refresh_ = value;
}
inline void LdapSyncInfos::set_refresh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refresh(value);
  // @@protoc_insertion_point(field_set:ressource.LdapSyncInfos.refresh)
}

// .ressource.UserSyncInfos userSyncInfos = 4;
inline bool LdapSyncInfos::_internal_has_usersyncinfos() const {
  return this != internal_default_instance() && usersyncinfos_ != nullptr;
}
inline bool LdapSyncInfos::has_usersyncinfos() const {
  return _internal_has_usersyncinfos();
}
inline void LdapSyncInfos::clear_usersyncinfos() {
  if (GetArena() == nullptr && usersyncinfos_ != nullptr) {
    delete usersyncinfos_;
  }
  usersyncinfos_ = nullptr;
}
inline const ::ressource::UserSyncInfos& LdapSyncInfos::_internal_usersyncinfos() const {
  const ::ressource::UserSyncInfos* p = usersyncinfos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ressource::UserSyncInfos*>(
      &::ressource::_UserSyncInfos_default_instance_);
}
inline const ::ressource::UserSyncInfos& LdapSyncInfos::usersyncinfos() const {
  // @@protoc_insertion_point(field_get:ressource.LdapSyncInfos.userSyncInfos)
  return _internal_usersyncinfos();
}
inline void LdapSyncInfos::unsafe_arena_set_allocated_usersyncinfos(
    ::ressource::UserSyncInfos* usersyncinfos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usersyncinfos_);
  }
  usersyncinfos_ = usersyncinfos;
  if (usersyncinfos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ressource.LdapSyncInfos.userSyncInfos)
}
inline ::ressource::UserSyncInfos* LdapSyncInfos::release_usersyncinfos() {
  
  ::ressource::UserSyncInfos* temp = usersyncinfos_;
  usersyncinfos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ressource::UserSyncInfos* LdapSyncInfos::unsafe_arena_release_usersyncinfos() {
  // @@protoc_insertion_point(field_release:ressource.LdapSyncInfos.userSyncInfos)
  
  ::ressource::UserSyncInfos* temp = usersyncinfos_;
  usersyncinfos_ = nullptr;
  return temp;
}
inline ::ressource::UserSyncInfos* LdapSyncInfos::_internal_mutable_usersyncinfos() {
  
  if (usersyncinfos_ == nullptr) {
    auto* p = CreateMaybeMessage<::ressource::UserSyncInfos>(GetArena());
    usersyncinfos_ = p;
  }
  return usersyncinfos_;
}
inline ::ressource::UserSyncInfos* LdapSyncInfos::mutable_usersyncinfos() {
  // @@protoc_insertion_point(field_mutable:ressource.LdapSyncInfos.userSyncInfos)
  return _internal_mutable_usersyncinfos();
}
inline void LdapSyncInfos::set_allocated_usersyncinfos(::ressource::UserSyncInfos* usersyncinfos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete usersyncinfos_;
  }
  if (usersyncinfos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(usersyncinfos);
    if (message_arena != submessage_arena) {
      usersyncinfos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usersyncinfos, submessage_arena);
    }
    
  } else {
    
  }
  usersyncinfos_ = usersyncinfos;
  // @@protoc_insertion_point(field_set_allocated:ressource.LdapSyncInfos.userSyncInfos)
}

// .ressource.GroupSyncInfos groupSyncInfos = 5;
inline bool LdapSyncInfos::_internal_has_groupsyncinfos() const {
  return this != internal_default_instance() && groupsyncinfos_ != nullptr;
}
inline bool LdapSyncInfos::has_groupsyncinfos() const {
  return _internal_has_groupsyncinfos();
}
inline void LdapSyncInfos::clear_groupsyncinfos() {
  if (GetArena() == nullptr && groupsyncinfos_ != nullptr) {
    delete groupsyncinfos_;
  }
  groupsyncinfos_ = nullptr;
}
inline const ::ressource::GroupSyncInfos& LdapSyncInfos::_internal_groupsyncinfos() const {
  const ::ressource::GroupSyncInfos* p = groupsyncinfos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ressource::GroupSyncInfos*>(
      &::ressource::_GroupSyncInfos_default_instance_);
}
inline const ::ressource::GroupSyncInfos& LdapSyncInfos::groupsyncinfos() const {
  // @@protoc_insertion_point(field_get:ressource.LdapSyncInfos.groupSyncInfos)
  return _internal_groupsyncinfos();
}
inline void LdapSyncInfos::unsafe_arena_set_allocated_groupsyncinfos(
    ::ressource::GroupSyncInfos* groupsyncinfos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groupsyncinfos_);
  }
  groupsyncinfos_ = groupsyncinfos;
  if (groupsyncinfos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ressource.LdapSyncInfos.groupSyncInfos)
}
inline ::ressource::GroupSyncInfos* LdapSyncInfos::release_groupsyncinfos() {
  
  ::ressource::GroupSyncInfos* temp = groupsyncinfos_;
  groupsyncinfos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ressource::GroupSyncInfos* LdapSyncInfos::unsafe_arena_release_groupsyncinfos() {
  // @@protoc_insertion_point(field_release:ressource.LdapSyncInfos.groupSyncInfos)
  
  ::ressource::GroupSyncInfos* temp = groupsyncinfos_;
  groupsyncinfos_ = nullptr;
  return temp;
}
inline ::ressource::GroupSyncInfos* LdapSyncInfos::_internal_mutable_groupsyncinfos() {
  
  if (groupsyncinfos_ == nullptr) {
    auto* p = CreateMaybeMessage<::ressource::GroupSyncInfos>(GetArena());
    groupsyncinfos_ = p;
  }
  return groupsyncinfos_;
}
inline ::ressource::GroupSyncInfos* LdapSyncInfos::mutable_groupsyncinfos() {
  // @@protoc_insertion_point(field_mutable:ressource.LdapSyncInfos.groupSyncInfos)
  return _internal_mutable_groupsyncinfos();
}
inline void LdapSyncInfos::set_allocated_groupsyncinfos(::ressource::GroupSyncInfos* groupsyncinfos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete groupsyncinfos_;
  }
  if (groupsyncinfos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groupsyncinfos);
    if (message_arena != submessage_arena) {
      groupsyncinfos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupsyncinfos, submessage_arena);
    }
    
  } else {
    
  }
  groupsyncinfos_ = groupsyncinfos;
  // @@protoc_insertion_point(field_set_allocated:ressource.LdapSyncInfos.groupSyncInfos)
}

// -------------------------------------------------------------------

// SynchronizeLdapRqst

// .ressource.LdapSyncInfos syncInfo = 1;
inline bool SynchronizeLdapRqst::_internal_has_syncinfo() const {
  return this != internal_default_instance() && syncinfo_ != nullptr;
}
inline bool SynchronizeLdapRqst::has_syncinfo() const {
  return _internal_has_syncinfo();
}
inline void SynchronizeLdapRqst::clear_syncinfo() {
  if (GetArena() == nullptr && syncinfo_ != nullptr) {
    delete syncinfo_;
  }
  syncinfo_ = nullptr;
}
inline const ::ressource::LdapSyncInfos& SynchronizeLdapRqst::_internal_syncinfo() const {
  const ::ressource::LdapSyncInfos* p = syncinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ressource::LdapSyncInfos*>(
      &::ressource::_LdapSyncInfos_default_instance_);
}
inline const ::ressource::LdapSyncInfos& SynchronizeLdapRqst::syncinfo() const {
  // @@protoc_insertion_point(field_get:ressource.SynchronizeLdapRqst.syncInfo)
  return _internal_syncinfo();
}
inline void SynchronizeLdapRqst::unsafe_arena_set_allocated_syncinfo(
    ::ressource::LdapSyncInfos* syncinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(syncinfo_);
  }
  syncinfo_ = syncinfo;
  if (syncinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ressource.SynchronizeLdapRqst.syncInfo)
}
inline ::ressource::LdapSyncInfos* SynchronizeLdapRqst::release_syncinfo() {
  
  ::ressource::LdapSyncInfos* temp = syncinfo_;
  syncinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ressource::LdapSyncInfos* SynchronizeLdapRqst::unsafe_arena_release_syncinfo() {
  // @@protoc_insertion_point(field_release:ressource.SynchronizeLdapRqst.syncInfo)
  
  ::ressource::LdapSyncInfos* temp = syncinfo_;
  syncinfo_ = nullptr;
  return temp;
}
inline ::ressource::LdapSyncInfos* SynchronizeLdapRqst::_internal_mutable_syncinfo() {
  
  if (syncinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::ressource::LdapSyncInfos>(GetArena());
    syncinfo_ = p;
  }
  return syncinfo_;
}
inline ::ressource::LdapSyncInfos* SynchronizeLdapRqst::mutable_syncinfo() {
  // @@protoc_insertion_point(field_mutable:ressource.SynchronizeLdapRqst.syncInfo)
  return _internal_mutable_syncinfo();
}
inline void SynchronizeLdapRqst::set_allocated_syncinfo(::ressource::LdapSyncInfos* syncinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete syncinfo_;
  }
  if (syncinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(syncinfo);
    if (message_arena != submessage_arena) {
      syncinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncinfo, submessage_arena);
    }
    
  } else {
    
  }
  syncinfo_ = syncinfo;
  // @@protoc_insertion_point(field_set_allocated:ressource.SynchronizeLdapRqst.syncInfo)
}

// -------------------------------------------------------------------

// SynchronizeLdapRsp

// bool result = 1;
inline void SynchronizeLdapRsp::clear_result() {
  result_ = false;
}
inline bool SynchronizeLdapRsp::_internal_result() const {
  return result_;
}
inline bool SynchronizeLdapRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.SynchronizeLdapRsp.result)
  return _internal_result();
}
inline void SynchronizeLdapRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void SynchronizeLdapRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.SynchronizeLdapRsp.result)
}

// -------------------------------------------------------------------

// SetRessourceOwnerRqst

// string path = 1;
inline void SetRessourceOwnerRqst::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetRessourceOwnerRqst::path() const {
  // @@protoc_insertion_point(field_get:ressource.SetRessourceOwnerRqst.path)
  return _internal_path();
}
inline void SetRessourceOwnerRqst::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ressource.SetRessourceOwnerRqst.path)
}
inline std::string* SetRessourceOwnerRqst::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ressource.SetRessourceOwnerRqst.path)
  return _internal_mutable_path();
}
inline const std::string& SetRessourceOwnerRqst::_internal_path() const {
  return path_.Get();
}
inline void SetRessourceOwnerRqst::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetRessourceOwnerRqst::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.SetRessourceOwnerRqst.path)
}
inline void SetRessourceOwnerRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.SetRessourceOwnerRqst.path)
}
inline void SetRessourceOwnerRqst::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.SetRessourceOwnerRqst.path)
}
inline std::string* SetRessourceOwnerRqst::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetRessourceOwnerRqst::release_path() {
  // @@protoc_insertion_point(field_release:ressource.SetRessourceOwnerRqst.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetRessourceOwnerRqst::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.SetRessourceOwnerRqst.path)
}

// string owner = 2;
inline void SetRessourceOwnerRqst::clear_owner() {
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetRessourceOwnerRqst::owner() const {
  // @@protoc_insertion_point(field_get:ressource.SetRessourceOwnerRqst.owner)
  return _internal_owner();
}
inline void SetRessourceOwnerRqst::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:ressource.SetRessourceOwnerRqst.owner)
}
inline std::string* SetRessourceOwnerRqst::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:ressource.SetRessourceOwnerRqst.owner)
  return _internal_mutable_owner();
}
inline const std::string& SetRessourceOwnerRqst::_internal_owner() const {
  return owner_.Get();
}
inline void SetRessourceOwnerRqst::_internal_set_owner(const std::string& value) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetRessourceOwnerRqst::set_owner(std::string&& value) {
  
  owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.SetRessourceOwnerRqst.owner)
}
inline void SetRessourceOwnerRqst::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.SetRessourceOwnerRqst.owner)
}
inline void SetRessourceOwnerRqst::set_owner(const char* value,
    size_t size) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.SetRessourceOwnerRqst.owner)
}
inline std::string* SetRessourceOwnerRqst::_internal_mutable_owner() {
  
  return owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetRessourceOwnerRqst::release_owner() {
  // @@protoc_insertion_point(field_release:ressource.SetRessourceOwnerRqst.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetRessourceOwnerRqst::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.SetRessourceOwnerRqst.owner)
}

// -------------------------------------------------------------------

// SetRessourceOwnerRsp

// bool result = 1;
inline void SetRessourceOwnerRsp::clear_result() {
  result_ = false;
}
inline bool SetRessourceOwnerRsp::_internal_result() const {
  return result_;
}
inline bool SetRessourceOwnerRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.SetRessourceOwnerRsp.result)
  return _internal_result();
}
inline void SetRessourceOwnerRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void SetRessourceOwnerRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.SetRessourceOwnerRsp.result)
}

// -------------------------------------------------------------------

// GetRessourceOwnersRqst

// string path = 1;
inline void GetRessourceOwnersRqst::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRessourceOwnersRqst::path() const {
  // @@protoc_insertion_point(field_get:ressource.GetRessourceOwnersRqst.path)
  return _internal_path();
}
inline void GetRessourceOwnersRqst::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ressource.GetRessourceOwnersRqst.path)
}
inline std::string* GetRessourceOwnersRqst::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ressource.GetRessourceOwnersRqst.path)
  return _internal_mutable_path();
}
inline const std::string& GetRessourceOwnersRqst::_internal_path() const {
  return path_.Get();
}
inline void GetRessourceOwnersRqst::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRessourceOwnersRqst::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.GetRessourceOwnersRqst.path)
}
inline void GetRessourceOwnersRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.GetRessourceOwnersRqst.path)
}
inline void GetRessourceOwnersRqst::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.GetRessourceOwnersRqst.path)
}
inline std::string* GetRessourceOwnersRqst::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRessourceOwnersRqst::release_path() {
  // @@protoc_insertion_point(field_release:ressource.GetRessourceOwnersRqst.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRessourceOwnersRqst::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.GetRessourceOwnersRqst.path)
}

// -------------------------------------------------------------------

// GetRessourceOwnersRsp

// repeated string owners = 1;
inline int GetRessourceOwnersRsp::_internal_owners_size() const {
  return owners_.size();
}
inline int GetRessourceOwnersRsp::owners_size() const {
  return _internal_owners_size();
}
inline void GetRessourceOwnersRsp::clear_owners() {
  owners_.Clear();
}
inline std::string* GetRessourceOwnersRsp::add_owners() {
  // @@protoc_insertion_point(field_add_mutable:ressource.GetRessourceOwnersRsp.owners)
  return _internal_add_owners();
}
inline const std::string& GetRessourceOwnersRsp::_internal_owners(int index) const {
  return owners_.Get(index);
}
inline const std::string& GetRessourceOwnersRsp::owners(int index) const {
  // @@protoc_insertion_point(field_get:ressource.GetRessourceOwnersRsp.owners)
  return _internal_owners(index);
}
inline std::string* GetRessourceOwnersRsp::mutable_owners(int index) {
  // @@protoc_insertion_point(field_mutable:ressource.GetRessourceOwnersRsp.owners)
  return owners_.Mutable(index);
}
inline void GetRessourceOwnersRsp::set_owners(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ressource.GetRessourceOwnersRsp.owners)
  owners_.Mutable(index)->assign(value);
}
inline void GetRessourceOwnersRsp::set_owners(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ressource.GetRessourceOwnersRsp.owners)
  owners_.Mutable(index)->assign(std::move(value));
}
inline void GetRessourceOwnersRsp::set_owners(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  owners_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ressource.GetRessourceOwnersRsp.owners)
}
inline void GetRessourceOwnersRsp::set_owners(int index, const char* value, size_t size) {
  owners_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ressource.GetRessourceOwnersRsp.owners)
}
inline std::string* GetRessourceOwnersRsp::_internal_add_owners() {
  return owners_.Add();
}
inline void GetRessourceOwnersRsp::add_owners(const std::string& value) {
  owners_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ressource.GetRessourceOwnersRsp.owners)
}
inline void GetRessourceOwnersRsp::add_owners(std::string&& value) {
  owners_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ressource.GetRessourceOwnersRsp.owners)
}
inline void GetRessourceOwnersRsp::add_owners(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  owners_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ressource.GetRessourceOwnersRsp.owners)
}
inline void GetRessourceOwnersRsp::add_owners(const char* value, size_t size) {
  owners_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ressource.GetRessourceOwnersRsp.owners)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetRessourceOwnersRsp::owners() const {
  // @@protoc_insertion_point(field_list:ressource.GetRessourceOwnersRsp.owners)
  return owners_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetRessourceOwnersRsp::mutable_owners() {
  // @@protoc_insertion_point(field_mutable_list:ressource.GetRessourceOwnersRsp.owners)
  return &owners_;
}

// -------------------------------------------------------------------

// DeleteRessourceOwnerRqst

// string path = 1;
inline void DeleteRessourceOwnerRqst::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRessourceOwnerRqst::path() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteRessourceOwnerRqst.path)
  return _internal_path();
}
inline void DeleteRessourceOwnerRqst::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteRessourceOwnerRqst.path)
}
inline std::string* DeleteRessourceOwnerRqst::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ressource.DeleteRessourceOwnerRqst.path)
  return _internal_mutable_path();
}
inline const std::string& DeleteRessourceOwnerRqst::_internal_path() const {
  return path_.Get();
}
inline void DeleteRessourceOwnerRqst::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRessourceOwnerRqst::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.DeleteRessourceOwnerRqst.path)
}
inline void DeleteRessourceOwnerRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.DeleteRessourceOwnerRqst.path)
}
inline void DeleteRessourceOwnerRqst::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.DeleteRessourceOwnerRqst.path)
}
inline std::string* DeleteRessourceOwnerRqst::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRessourceOwnerRqst::release_path() {
  // @@protoc_insertion_point(field_release:ressource.DeleteRessourceOwnerRqst.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRessourceOwnerRqst::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.DeleteRessourceOwnerRqst.path)
}

// string owner = 2;
inline void DeleteRessourceOwnerRqst::clear_owner() {
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRessourceOwnerRqst::owner() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteRessourceOwnerRqst.owner)
  return _internal_owner();
}
inline void DeleteRessourceOwnerRqst::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteRessourceOwnerRqst.owner)
}
inline std::string* DeleteRessourceOwnerRqst::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:ressource.DeleteRessourceOwnerRqst.owner)
  return _internal_mutable_owner();
}
inline const std::string& DeleteRessourceOwnerRqst::_internal_owner() const {
  return owner_.Get();
}
inline void DeleteRessourceOwnerRqst::_internal_set_owner(const std::string& value) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRessourceOwnerRqst::set_owner(std::string&& value) {
  
  owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.DeleteRessourceOwnerRqst.owner)
}
inline void DeleteRessourceOwnerRqst::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.DeleteRessourceOwnerRqst.owner)
}
inline void DeleteRessourceOwnerRqst::set_owner(const char* value,
    size_t size) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.DeleteRessourceOwnerRqst.owner)
}
inline std::string* DeleteRessourceOwnerRqst::_internal_mutable_owner() {
  
  return owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRessourceOwnerRqst::release_owner() {
  // @@protoc_insertion_point(field_release:ressource.DeleteRessourceOwnerRqst.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRessourceOwnerRqst::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.DeleteRessourceOwnerRqst.owner)
}

// -------------------------------------------------------------------

// DeleteRessourceOwnerRsp

// bool result = 1;
inline void DeleteRessourceOwnerRsp::clear_result() {
  result_ = false;
}
inline bool DeleteRessourceOwnerRsp::_internal_result() const {
  return result_;
}
inline bool DeleteRessourceOwnerRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteRessourceOwnerRsp.result)
  return _internal_result();
}
inline void DeleteRessourceOwnerRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteRessourceOwnerRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteRessourceOwnerRsp.result)
}

// -------------------------------------------------------------------

// DeleteRessourceOwnersRqst

// string path = 1;
inline void DeleteRessourceOwnersRqst::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRessourceOwnersRqst::path() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteRessourceOwnersRqst.path)
  return _internal_path();
}
inline void DeleteRessourceOwnersRqst::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteRessourceOwnersRqst.path)
}
inline std::string* DeleteRessourceOwnersRqst::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ressource.DeleteRessourceOwnersRqst.path)
  return _internal_mutable_path();
}
inline const std::string& DeleteRessourceOwnersRqst::_internal_path() const {
  return path_.Get();
}
inline void DeleteRessourceOwnersRqst::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRessourceOwnersRqst::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.DeleteRessourceOwnersRqst.path)
}
inline void DeleteRessourceOwnersRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.DeleteRessourceOwnersRqst.path)
}
inline void DeleteRessourceOwnersRqst::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.DeleteRessourceOwnersRqst.path)
}
inline std::string* DeleteRessourceOwnersRqst::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRessourceOwnersRqst::release_path() {
  // @@protoc_insertion_point(field_release:ressource.DeleteRessourceOwnersRqst.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRessourceOwnersRqst::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.DeleteRessourceOwnersRqst.path)
}

// -------------------------------------------------------------------

// DeleteRessourceOwnersRsp

// bool result = 1;
inline void DeleteRessourceOwnersRsp::clear_result() {
  result_ = false;
}
inline bool DeleteRessourceOwnersRsp::_internal_result() const {
  return result_;
}
inline bool DeleteRessourceOwnersRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteRessourceOwnersRsp.result)
  return _internal_result();
}
inline void DeleteRessourceOwnersRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteRessourceOwnersRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteRessourceOwnersRsp.result)
}

// -------------------------------------------------------------------

// ValidateTokenRqst

// string token = 1;
inline void ValidateTokenRqst::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateTokenRqst::token() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateTokenRqst.token)
  return _internal_token();
}
inline void ValidateTokenRqst::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateTokenRqst.token)
}
inline std::string* ValidateTokenRqst::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ressource.ValidateTokenRqst.token)
  return _internal_mutable_token();
}
inline const std::string& ValidateTokenRqst::_internal_token() const {
  return token_.Get();
}
inline void ValidateTokenRqst::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateTokenRqst::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ValidateTokenRqst.token)
}
inline void ValidateTokenRqst::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ValidateTokenRqst.token)
}
inline void ValidateTokenRqst::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ValidateTokenRqst.token)
}
inline std::string* ValidateTokenRqst::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateTokenRqst::release_token() {
  // @@protoc_insertion_point(field_release:ressource.ValidateTokenRqst.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateTokenRqst::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ValidateTokenRqst.token)
}

// -------------------------------------------------------------------

// ValidateTokenRsp

// string clientId = 1;
inline void ValidateTokenRsp::clear_clientid() {
  clientid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateTokenRsp::clientid() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateTokenRsp.clientId)
  return _internal_clientid();
}
inline void ValidateTokenRsp::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateTokenRsp.clientId)
}
inline std::string* ValidateTokenRsp::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:ressource.ValidateTokenRsp.clientId)
  return _internal_mutable_clientid();
}
inline const std::string& ValidateTokenRsp::_internal_clientid() const {
  return clientid_.Get();
}
inline void ValidateTokenRsp::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateTokenRsp::set_clientid(std::string&& value) {
  
  clientid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ValidateTokenRsp.clientId)
}
inline void ValidateTokenRsp::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ValidateTokenRsp.clientId)
}
inline void ValidateTokenRsp::set_clientid(const char* value,
    size_t size) {
  
  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ValidateTokenRsp.clientId)
}
inline std::string* ValidateTokenRsp::_internal_mutable_clientid() {
  
  return clientid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateTokenRsp::release_clientid() {
  // @@protoc_insertion_point(field_release:ressource.ValidateTokenRsp.clientId)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateTokenRsp::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ValidateTokenRsp.clientId)
}

// int64 expired = 2;
inline void ValidateTokenRsp::clear_expired() {
  expired_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValidateTokenRsp::_internal_expired() const {
  return expired_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValidateTokenRsp::expired() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateTokenRsp.expired)
  return _internal_expired();
}
inline void ValidateTokenRsp::_internal_set_expired(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expired_ = value;
}
inline void ValidateTokenRsp::set_expired(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expired(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateTokenRsp.expired)
}

// -------------------------------------------------------------------

// ValidateApplicationAccessRqst

// string name = 1;
inline void ValidateApplicationAccessRqst::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateApplicationAccessRqst::name() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateApplicationAccessRqst.name)
  return _internal_name();
}
inline void ValidateApplicationAccessRqst::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateApplicationAccessRqst.name)
}
inline std::string* ValidateApplicationAccessRqst::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ressource.ValidateApplicationAccessRqst.name)
  return _internal_mutable_name();
}
inline const std::string& ValidateApplicationAccessRqst::_internal_name() const {
  return name_.Get();
}
inline void ValidateApplicationAccessRqst::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateApplicationAccessRqst::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ValidateApplicationAccessRqst.name)
}
inline void ValidateApplicationAccessRqst::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ValidateApplicationAccessRqst.name)
}
inline void ValidateApplicationAccessRqst::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ValidateApplicationAccessRqst.name)
}
inline std::string* ValidateApplicationAccessRqst::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateApplicationAccessRqst::release_name() {
  // @@protoc_insertion_point(field_release:ressource.ValidateApplicationAccessRqst.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateApplicationAccessRqst::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ValidateApplicationAccessRqst.name)
}

// string method = 2;
inline void ValidateApplicationAccessRqst::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateApplicationAccessRqst::method() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateApplicationAccessRqst.method)
  return _internal_method();
}
inline void ValidateApplicationAccessRqst::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateApplicationAccessRqst.method)
}
inline std::string* ValidateApplicationAccessRqst::mutable_method() {
  // @@protoc_insertion_point(field_mutable:ressource.ValidateApplicationAccessRqst.method)
  return _internal_mutable_method();
}
inline const std::string& ValidateApplicationAccessRqst::_internal_method() const {
  return method_.Get();
}
inline void ValidateApplicationAccessRqst::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateApplicationAccessRqst::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ValidateApplicationAccessRqst.method)
}
inline void ValidateApplicationAccessRqst::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ValidateApplicationAccessRqst.method)
}
inline void ValidateApplicationAccessRqst::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ValidateApplicationAccessRqst.method)
}
inline std::string* ValidateApplicationAccessRqst::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateApplicationAccessRqst::release_method() {
  // @@protoc_insertion_point(field_release:ressource.ValidateApplicationAccessRqst.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateApplicationAccessRqst::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ValidateApplicationAccessRqst.method)
}

// -------------------------------------------------------------------

// ValidateApplicationAccessRsp

// bool result = 1;
inline void ValidateApplicationAccessRsp::clear_result() {
  result_ = false;
}
inline bool ValidateApplicationAccessRsp::_internal_result() const {
  return result_;
}
inline bool ValidateApplicationAccessRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateApplicationAccessRsp.result)
  return _internal_result();
}
inline void ValidateApplicationAccessRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void ValidateApplicationAccessRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateApplicationAccessRsp.result)
}

// -------------------------------------------------------------------

// ValidateUserAccessRqst

// string token = 1;
inline void ValidateUserAccessRqst::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateUserAccessRqst::token() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateUserAccessRqst.token)
  return _internal_token();
}
inline void ValidateUserAccessRqst::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateUserAccessRqst.token)
}
inline std::string* ValidateUserAccessRqst::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ressource.ValidateUserAccessRqst.token)
  return _internal_mutable_token();
}
inline const std::string& ValidateUserAccessRqst::_internal_token() const {
  return token_.Get();
}
inline void ValidateUserAccessRqst::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateUserAccessRqst::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ValidateUserAccessRqst.token)
}
inline void ValidateUserAccessRqst::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ValidateUserAccessRqst.token)
}
inline void ValidateUserAccessRqst::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ValidateUserAccessRqst.token)
}
inline std::string* ValidateUserAccessRqst::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateUserAccessRqst::release_token() {
  // @@protoc_insertion_point(field_release:ressource.ValidateUserAccessRqst.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateUserAccessRqst::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ValidateUserAccessRqst.token)
}

// string method = 2;
inline void ValidateUserAccessRqst::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateUserAccessRqst::method() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateUserAccessRqst.method)
  return _internal_method();
}
inline void ValidateUserAccessRqst::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateUserAccessRqst.method)
}
inline std::string* ValidateUserAccessRqst::mutable_method() {
  // @@protoc_insertion_point(field_mutable:ressource.ValidateUserAccessRqst.method)
  return _internal_mutable_method();
}
inline const std::string& ValidateUserAccessRqst::_internal_method() const {
  return method_.Get();
}
inline void ValidateUserAccessRqst::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateUserAccessRqst::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ValidateUserAccessRqst.method)
}
inline void ValidateUserAccessRqst::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ValidateUserAccessRqst.method)
}
inline void ValidateUserAccessRqst::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ValidateUserAccessRqst.method)
}
inline std::string* ValidateUserAccessRqst::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateUserAccessRqst::release_method() {
  // @@protoc_insertion_point(field_release:ressource.ValidateUserAccessRqst.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateUserAccessRqst::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ValidateUserAccessRqst.method)
}

// -------------------------------------------------------------------

// ValidateUserAccessRsp

// bool result = 1;
inline void ValidateUserAccessRsp::clear_result() {
  result_ = false;
}
inline bool ValidateUserAccessRsp::_internal_result() const {
  return result_;
}
inline bool ValidateUserAccessRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateUserAccessRsp.result)
  return _internal_result();
}
inline void ValidateUserAccessRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void ValidateUserAccessRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateUserAccessRsp.result)
}

// -------------------------------------------------------------------

// ValidateUserRessourceAccessRqst

// string token = 1;
inline void ValidateUserRessourceAccessRqst::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateUserRessourceAccessRqst::token() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateUserRessourceAccessRqst.token)
  return _internal_token();
}
inline void ValidateUserRessourceAccessRqst::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateUserRessourceAccessRqst.token)
}
inline std::string* ValidateUserRessourceAccessRqst::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ressource.ValidateUserRessourceAccessRqst.token)
  return _internal_mutable_token();
}
inline const std::string& ValidateUserRessourceAccessRqst::_internal_token() const {
  return token_.Get();
}
inline void ValidateUserRessourceAccessRqst::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateUserRessourceAccessRqst::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ValidateUserRessourceAccessRqst.token)
}
inline void ValidateUserRessourceAccessRqst::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ValidateUserRessourceAccessRqst.token)
}
inline void ValidateUserRessourceAccessRqst::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ValidateUserRessourceAccessRqst.token)
}
inline std::string* ValidateUserRessourceAccessRqst::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateUserRessourceAccessRqst::release_token() {
  // @@protoc_insertion_point(field_release:ressource.ValidateUserRessourceAccessRqst.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateUserRessourceAccessRqst::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ValidateUserRessourceAccessRqst.token)
}

// string method = 2;
inline void ValidateUserRessourceAccessRqst::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateUserRessourceAccessRqst::method() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateUserRessourceAccessRqst.method)
  return _internal_method();
}
inline void ValidateUserRessourceAccessRqst::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateUserRessourceAccessRqst.method)
}
inline std::string* ValidateUserRessourceAccessRqst::mutable_method() {
  // @@protoc_insertion_point(field_mutable:ressource.ValidateUserRessourceAccessRqst.method)
  return _internal_mutable_method();
}
inline const std::string& ValidateUserRessourceAccessRqst::_internal_method() const {
  return method_.Get();
}
inline void ValidateUserRessourceAccessRqst::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateUserRessourceAccessRqst::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ValidateUserRessourceAccessRqst.method)
}
inline void ValidateUserRessourceAccessRqst::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ValidateUserRessourceAccessRqst.method)
}
inline void ValidateUserRessourceAccessRqst::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ValidateUserRessourceAccessRqst.method)
}
inline std::string* ValidateUserRessourceAccessRqst::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateUserRessourceAccessRqst::release_method() {
  // @@protoc_insertion_point(field_release:ressource.ValidateUserRessourceAccessRqst.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateUserRessourceAccessRqst::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ValidateUserRessourceAccessRqst.method)
}

// string path = 3;
inline void ValidateUserRessourceAccessRqst::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateUserRessourceAccessRqst::path() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateUserRessourceAccessRqst.path)
  return _internal_path();
}
inline void ValidateUserRessourceAccessRqst::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateUserRessourceAccessRqst.path)
}
inline std::string* ValidateUserRessourceAccessRqst::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ressource.ValidateUserRessourceAccessRqst.path)
  return _internal_mutable_path();
}
inline const std::string& ValidateUserRessourceAccessRqst::_internal_path() const {
  return path_.Get();
}
inline void ValidateUserRessourceAccessRqst::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateUserRessourceAccessRqst::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ValidateUserRessourceAccessRqst.path)
}
inline void ValidateUserRessourceAccessRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ValidateUserRessourceAccessRqst.path)
}
inline void ValidateUserRessourceAccessRqst::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ValidateUserRessourceAccessRqst.path)
}
inline std::string* ValidateUserRessourceAccessRqst::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateUserRessourceAccessRqst::release_path() {
  // @@protoc_insertion_point(field_release:ressource.ValidateUserRessourceAccessRqst.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateUserRessourceAccessRqst::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ValidateUserRessourceAccessRqst.path)
}

// int32 permission = 4;
inline void ValidateUserRessourceAccessRqst::clear_permission() {
  permission_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValidateUserRessourceAccessRqst::_internal_permission() const {
  return permission_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValidateUserRessourceAccessRqst::permission() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateUserRessourceAccessRqst.permission)
  return _internal_permission();
}
inline void ValidateUserRessourceAccessRqst::_internal_set_permission(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  permission_ = value;
}
inline void ValidateUserRessourceAccessRqst::set_permission(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateUserRessourceAccessRqst.permission)
}

// -------------------------------------------------------------------

// ValidateUserRessourceAccessRsp

// bool result = 1;
inline void ValidateUserRessourceAccessRsp::clear_result() {
  result_ = false;
}
inline bool ValidateUserRessourceAccessRsp::_internal_result() const {
  return result_;
}
inline bool ValidateUserRessourceAccessRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateUserRessourceAccessRsp.result)
  return _internal_result();
}
inline void ValidateUserRessourceAccessRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void ValidateUserRessourceAccessRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateUserRessourceAccessRsp.result)
}

// -------------------------------------------------------------------

// ValidateApplicationRessourceAccessRqst

// string name = 1;
inline void ValidateApplicationRessourceAccessRqst::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateApplicationRessourceAccessRqst::name() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateApplicationRessourceAccessRqst.name)
  return _internal_name();
}
inline void ValidateApplicationRessourceAccessRqst::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateApplicationRessourceAccessRqst.name)
}
inline std::string* ValidateApplicationRessourceAccessRqst::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ressource.ValidateApplicationRessourceAccessRqst.name)
  return _internal_mutable_name();
}
inline const std::string& ValidateApplicationRessourceAccessRqst::_internal_name() const {
  return name_.Get();
}
inline void ValidateApplicationRessourceAccessRqst::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateApplicationRessourceAccessRqst::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ValidateApplicationRessourceAccessRqst.name)
}
inline void ValidateApplicationRessourceAccessRqst::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ValidateApplicationRessourceAccessRqst.name)
}
inline void ValidateApplicationRessourceAccessRqst::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ValidateApplicationRessourceAccessRqst.name)
}
inline std::string* ValidateApplicationRessourceAccessRqst::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateApplicationRessourceAccessRqst::release_name() {
  // @@protoc_insertion_point(field_release:ressource.ValidateApplicationRessourceAccessRqst.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateApplicationRessourceAccessRqst::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ValidateApplicationRessourceAccessRqst.name)
}

// string method = 2;
inline void ValidateApplicationRessourceAccessRqst::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateApplicationRessourceAccessRqst::method() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateApplicationRessourceAccessRqst.method)
  return _internal_method();
}
inline void ValidateApplicationRessourceAccessRqst::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateApplicationRessourceAccessRqst.method)
}
inline std::string* ValidateApplicationRessourceAccessRqst::mutable_method() {
  // @@protoc_insertion_point(field_mutable:ressource.ValidateApplicationRessourceAccessRqst.method)
  return _internal_mutable_method();
}
inline const std::string& ValidateApplicationRessourceAccessRqst::_internal_method() const {
  return method_.Get();
}
inline void ValidateApplicationRessourceAccessRqst::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateApplicationRessourceAccessRqst::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ValidateApplicationRessourceAccessRqst.method)
}
inline void ValidateApplicationRessourceAccessRqst::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ValidateApplicationRessourceAccessRqst.method)
}
inline void ValidateApplicationRessourceAccessRqst::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ValidateApplicationRessourceAccessRqst.method)
}
inline std::string* ValidateApplicationRessourceAccessRqst::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateApplicationRessourceAccessRqst::release_method() {
  // @@protoc_insertion_point(field_release:ressource.ValidateApplicationRessourceAccessRqst.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateApplicationRessourceAccessRqst::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ValidateApplicationRessourceAccessRqst.method)
}

// string path = 3;
inline void ValidateApplicationRessourceAccessRqst::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidateApplicationRessourceAccessRqst::path() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateApplicationRessourceAccessRqst.path)
  return _internal_path();
}
inline void ValidateApplicationRessourceAccessRqst::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateApplicationRessourceAccessRqst.path)
}
inline std::string* ValidateApplicationRessourceAccessRqst::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ressource.ValidateApplicationRessourceAccessRqst.path)
  return _internal_mutable_path();
}
inline const std::string& ValidateApplicationRessourceAccessRqst::_internal_path() const {
  return path_.Get();
}
inline void ValidateApplicationRessourceAccessRqst::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidateApplicationRessourceAccessRqst::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ValidateApplicationRessourceAccessRqst.path)
}
inline void ValidateApplicationRessourceAccessRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ValidateApplicationRessourceAccessRqst.path)
}
inline void ValidateApplicationRessourceAccessRqst::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ValidateApplicationRessourceAccessRqst.path)
}
inline std::string* ValidateApplicationRessourceAccessRqst::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidateApplicationRessourceAccessRqst::release_path() {
  // @@protoc_insertion_point(field_release:ressource.ValidateApplicationRessourceAccessRqst.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidateApplicationRessourceAccessRqst::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ValidateApplicationRessourceAccessRqst.path)
}

// int32 permission = 4;
inline void ValidateApplicationRessourceAccessRqst::clear_permission() {
  permission_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValidateApplicationRessourceAccessRqst::_internal_permission() const {
  return permission_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValidateApplicationRessourceAccessRqst::permission() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateApplicationRessourceAccessRqst.permission)
  return _internal_permission();
}
inline void ValidateApplicationRessourceAccessRqst::_internal_set_permission(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  permission_ = value;
}
inline void ValidateApplicationRessourceAccessRqst::set_permission(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateApplicationRessourceAccessRqst.permission)
}

// -------------------------------------------------------------------

// ValidateApplicationRessourceAccessRsp

// bool result = 1;
inline void ValidateApplicationRessourceAccessRsp::clear_result() {
  result_ = false;
}
inline bool ValidateApplicationRessourceAccessRsp::_internal_result() const {
  return result_;
}
inline bool ValidateApplicationRessourceAccessRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.ValidateApplicationRessourceAccessRsp.result)
  return _internal_result();
}
inline void ValidateApplicationRessourceAccessRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void ValidateApplicationRessourceAccessRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.ValidateApplicationRessourceAccessRsp.result)
}

// -------------------------------------------------------------------

// AccountExistRqst

// string id = 1;
inline void AccountExistRqst::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountExistRqst::id() const {
  // @@protoc_insertion_point(field_get:ressource.AccountExistRqst.id)
  return _internal_id();
}
inline void AccountExistRqst::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ressource.AccountExistRqst.id)
}
inline std::string* AccountExistRqst::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ressource.AccountExistRqst.id)
  return _internal_mutable_id();
}
inline const std::string& AccountExistRqst::_internal_id() const {
  return id_.Get();
}
inline void AccountExistRqst::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountExistRqst::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.AccountExistRqst.id)
}
inline void AccountExistRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.AccountExistRqst.id)
}
inline void AccountExistRqst::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.AccountExistRqst.id)
}
inline std::string* AccountExistRqst::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountExistRqst::release_id() {
  // @@protoc_insertion_point(field_release:ressource.AccountExistRqst.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountExistRqst::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.AccountExistRqst.id)
}

// -------------------------------------------------------------------

// AccountExistRsp

// bool result = 1;
inline void AccountExistRsp::clear_result() {
  result_ = false;
}
inline bool AccountExistRsp::_internal_result() const {
  return result_;
}
inline bool AccountExistRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.AccountExistRsp.result)
  return _internal_result();
}
inline void AccountExistRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AccountExistRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.AccountExistRsp.result)
}

// -------------------------------------------------------------------

// DeleteAccountPermissionsRqst

// string id = 1;
inline void DeleteAccountPermissionsRqst::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteAccountPermissionsRqst::id() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteAccountPermissionsRqst.id)
  return _internal_id();
}
inline void DeleteAccountPermissionsRqst::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteAccountPermissionsRqst.id)
}
inline std::string* DeleteAccountPermissionsRqst::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ressource.DeleteAccountPermissionsRqst.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteAccountPermissionsRqst::_internal_id() const {
  return id_.Get();
}
inline void DeleteAccountPermissionsRqst::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteAccountPermissionsRqst::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.DeleteAccountPermissionsRqst.id)
}
inline void DeleteAccountPermissionsRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.DeleteAccountPermissionsRqst.id)
}
inline void DeleteAccountPermissionsRqst::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.DeleteAccountPermissionsRqst.id)
}
inline std::string* DeleteAccountPermissionsRqst::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteAccountPermissionsRqst::release_id() {
  // @@protoc_insertion_point(field_release:ressource.DeleteAccountPermissionsRqst.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteAccountPermissionsRqst::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.DeleteAccountPermissionsRqst.id)
}

// -------------------------------------------------------------------

// DeleteAccountPermissionsRsp

// bool result = 1;
inline void DeleteAccountPermissionsRsp::clear_result() {
  result_ = false;
}
inline bool DeleteAccountPermissionsRsp::_internal_result() const {
  return result_;
}
inline bool DeleteAccountPermissionsRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteAccountPermissionsRsp.result)
  return _internal_result();
}
inline void DeleteAccountPermissionsRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteAccountPermissionsRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteAccountPermissionsRsp.result)
}

// -------------------------------------------------------------------

// DeleteRolePermissionsRqst

// string id = 1;
inline void DeleteRolePermissionsRqst::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteRolePermissionsRqst::id() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteRolePermissionsRqst.id)
  return _internal_id();
}
inline void DeleteRolePermissionsRqst::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteRolePermissionsRqst.id)
}
inline std::string* DeleteRolePermissionsRqst::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ressource.DeleteRolePermissionsRqst.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteRolePermissionsRqst::_internal_id() const {
  return id_.Get();
}
inline void DeleteRolePermissionsRqst::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteRolePermissionsRqst::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.DeleteRolePermissionsRqst.id)
}
inline void DeleteRolePermissionsRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.DeleteRolePermissionsRqst.id)
}
inline void DeleteRolePermissionsRqst::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.DeleteRolePermissionsRqst.id)
}
inline std::string* DeleteRolePermissionsRqst::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteRolePermissionsRqst::release_id() {
  // @@protoc_insertion_point(field_release:ressource.DeleteRolePermissionsRqst.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRolePermissionsRqst::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.DeleteRolePermissionsRqst.id)
}

// -------------------------------------------------------------------

// DeleteRolePermissionsRsp

// bool result = 1;
inline void DeleteRolePermissionsRsp::clear_result() {
  result_ = false;
}
inline bool DeleteRolePermissionsRsp::_internal_result() const {
  return result_;
}
inline bool DeleteRolePermissionsRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteRolePermissionsRsp.result)
  return _internal_result();
}
inline void DeleteRolePermissionsRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteRolePermissionsRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteRolePermissionsRsp.result)
}

// -------------------------------------------------------------------

// LogInfo

// int64 date = 1;
inline void LogInfo::clear_date() {
  date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogInfo::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogInfo::date() const {
  // @@protoc_insertion_point(field_get:ressource.LogInfo.date)
  return _internal_date();
}
inline void LogInfo::_internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  date_ = value;
}
inline void LogInfo::set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:ressource.LogInfo.date)
}

// .ressource.LogType type = 2;
inline void LogInfo::clear_type() {
  type_ = 0;
}
inline ::ressource::LogType LogInfo::_internal_type() const {
  return static_cast< ::ressource::LogType >(type_);
}
inline ::ressource::LogType LogInfo::type() const {
  // @@protoc_insertion_point(field_get:ressource.LogInfo.type)
  return _internal_type();
}
inline void LogInfo::_internal_set_type(::ressource::LogType value) {
  
  type_ = value;
}
inline void LogInfo::set_type(::ressource::LogType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ressource.LogInfo.type)
}

// string application = 3;
inline void LogInfo::clear_application() {
  application_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogInfo::application() const {
  // @@protoc_insertion_point(field_get:ressource.LogInfo.application)
  return _internal_application();
}
inline void LogInfo::set_application(const std::string& value) {
  _internal_set_application(value);
  // @@protoc_insertion_point(field_set:ressource.LogInfo.application)
}
inline std::string* LogInfo::mutable_application() {
  // @@protoc_insertion_point(field_mutable:ressource.LogInfo.application)
  return _internal_mutable_application();
}
inline const std::string& LogInfo::_internal_application() const {
  return application_.Get();
}
inline void LogInfo::_internal_set_application(const std::string& value) {
  
  application_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogInfo::set_application(std::string&& value) {
  
  application_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.LogInfo.application)
}
inline void LogInfo::set_application(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.LogInfo.application)
}
inline void LogInfo::set_application(const char* value,
    size_t size) {
  
  application_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.LogInfo.application)
}
inline std::string* LogInfo::_internal_mutable_application() {
  
  return application_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogInfo::release_application() {
  // @@protoc_insertion_point(field_release:ressource.LogInfo.application)
  return application_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogInfo::set_allocated_application(std::string* application) {
  if (application != nullptr) {
    
  } else {
    
  }
  application_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.LogInfo.application)
}

// string userId = 4;
inline void LogInfo::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogInfo::userid() const {
  // @@protoc_insertion_point(field_get:ressource.LogInfo.userId)
  return _internal_userid();
}
inline void LogInfo::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:ressource.LogInfo.userId)
}
inline std::string* LogInfo::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:ressource.LogInfo.userId)
  return _internal_mutable_userid();
}
inline const std::string& LogInfo::_internal_userid() const {
  return userid_.Get();
}
inline void LogInfo::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogInfo::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.LogInfo.userId)
}
inline void LogInfo::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.LogInfo.userId)
}
inline void LogInfo::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.LogInfo.userId)
}
inline std::string* LogInfo::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogInfo::release_userid() {
  // @@protoc_insertion_point(field_release:ressource.LogInfo.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogInfo::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.LogInfo.userId)
}

// string userName = 5;
inline void LogInfo::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogInfo::username() const {
  // @@protoc_insertion_point(field_get:ressource.LogInfo.userName)
  return _internal_username();
}
inline void LogInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:ressource.LogInfo.userName)
}
inline std::string* LogInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:ressource.LogInfo.userName)
  return _internal_mutable_username();
}
inline const std::string& LogInfo::_internal_username() const {
  return username_.Get();
}
inline void LogInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogInfo::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.LogInfo.userName)
}
inline void LogInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.LogInfo.userName)
}
inline void LogInfo::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.LogInfo.userName)
}
inline std::string* LogInfo::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogInfo::release_username() {
  // @@protoc_insertion_point(field_release:ressource.LogInfo.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.LogInfo.userName)
}

// string method = 6;
inline void LogInfo::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogInfo::method() const {
  // @@protoc_insertion_point(field_get:ressource.LogInfo.method)
  return _internal_method();
}
inline void LogInfo::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:ressource.LogInfo.method)
}
inline std::string* LogInfo::mutable_method() {
  // @@protoc_insertion_point(field_mutable:ressource.LogInfo.method)
  return _internal_mutable_method();
}
inline const std::string& LogInfo::_internal_method() const {
  return method_.Get();
}
inline void LogInfo::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogInfo::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.LogInfo.method)
}
inline void LogInfo::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.LogInfo.method)
}
inline void LogInfo::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.LogInfo.method)
}
inline std::string* LogInfo::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogInfo::release_method() {
  // @@protoc_insertion_point(field_release:ressource.LogInfo.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogInfo::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.LogInfo.method)
}

// string message = 7;
inline void LogInfo::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogInfo::message() const {
  // @@protoc_insertion_point(field_get:ressource.LogInfo.message)
  return _internal_message();
}
inline void LogInfo::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:ressource.LogInfo.message)
}
inline std::string* LogInfo::mutable_message() {
  // @@protoc_insertion_point(field_mutable:ressource.LogInfo.message)
  return _internal_mutable_message();
}
inline const std::string& LogInfo::_internal_message() const {
  return message_.Get();
}
inline void LogInfo::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogInfo::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.LogInfo.message)
}
inline void LogInfo::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.LogInfo.message)
}
inline void LogInfo::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.LogInfo.message)
}
inline std::string* LogInfo::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogInfo::release_message() {
  // @@protoc_insertion_point(field_release:ressource.LogInfo.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogInfo::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.LogInfo.message)
}

// -------------------------------------------------------------------

// LogRqst

// .ressource.LogInfo info = 1;
inline bool LogRqst::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool LogRqst::has_info() const {
  return _internal_has_info();
}
inline void LogRqst::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::ressource::LogInfo& LogRqst::_internal_info() const {
  const ::ressource::LogInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ressource::LogInfo*>(
      &::ressource::_LogInfo_default_instance_);
}
inline const ::ressource::LogInfo& LogRqst::info() const {
  // @@protoc_insertion_point(field_get:ressource.LogRqst.info)
  return _internal_info();
}
inline void LogRqst::unsafe_arena_set_allocated_info(
    ::ressource::LogInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ressource.LogRqst.info)
}
inline ::ressource::LogInfo* LogRqst::release_info() {
  
  ::ressource::LogInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ressource::LogInfo* LogRqst::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ressource.LogRqst.info)
  
  ::ressource::LogInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::ressource::LogInfo* LogRqst::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ressource::LogInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::ressource::LogInfo* LogRqst::mutable_info() {
  // @@protoc_insertion_point(field_mutable:ressource.LogRqst.info)
  return _internal_mutable_info();
}
inline void LogRqst::set_allocated_info(::ressource::LogInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ressource.LogRqst.info)
}

// -------------------------------------------------------------------

// LogRsp

// bool result = 1;
inline void LogRsp::clear_result() {
  result_ = false;
}
inline bool LogRsp::_internal_result() const {
  return result_;
}
inline bool LogRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.LogRsp.result)
  return _internal_result();
}
inline void LogRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void LogRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.LogRsp.result)
}

// -------------------------------------------------------------------

// DeleteLogRqst

// .ressource.LogInfo log = 1;
inline bool DeleteLogRqst::_internal_has_log() const {
  return this != internal_default_instance() && log_ != nullptr;
}
inline bool DeleteLogRqst::has_log() const {
  return _internal_has_log();
}
inline void DeleteLogRqst::clear_log() {
  if (GetArena() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
}
inline const ::ressource::LogInfo& DeleteLogRqst::_internal_log() const {
  const ::ressource::LogInfo* p = log_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ressource::LogInfo*>(
      &::ressource::_LogInfo_default_instance_);
}
inline const ::ressource::LogInfo& DeleteLogRqst::log() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteLogRqst.log)
  return _internal_log();
}
inline void DeleteLogRqst::unsafe_arena_set_allocated_log(
    ::ressource::LogInfo* log) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_);
  }
  log_ = log;
  if (log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ressource.DeleteLogRqst.log)
}
inline ::ressource::LogInfo* DeleteLogRqst::release_log() {
  
  ::ressource::LogInfo* temp = log_;
  log_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ressource::LogInfo* DeleteLogRqst::unsafe_arena_release_log() {
  // @@protoc_insertion_point(field_release:ressource.DeleteLogRqst.log)
  
  ::ressource::LogInfo* temp = log_;
  log_ = nullptr;
  return temp;
}
inline ::ressource::LogInfo* DeleteLogRqst::_internal_mutable_log() {
  
  if (log_ == nullptr) {
    auto* p = CreateMaybeMessage<::ressource::LogInfo>(GetArena());
    log_ = p;
  }
  return log_;
}
inline ::ressource::LogInfo* DeleteLogRqst::mutable_log() {
  // @@protoc_insertion_point(field_mutable:ressource.DeleteLogRqst.log)
  return _internal_mutable_log();
}
inline void DeleteLogRqst::set_allocated_log(::ressource::LogInfo* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete log_;
  }
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log);
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:ressource.DeleteLogRqst.log)
}

// -------------------------------------------------------------------

// DeleteLogRsp

// bool result = 1;
inline void DeleteLogRsp::clear_result() {
  result_ = false;
}
inline bool DeleteLogRsp::_internal_result() const {
  return result_;
}
inline bool DeleteLogRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.DeleteLogRsp.result)
  return _internal_result();
}
inline void DeleteLogRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteLogRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.DeleteLogRsp.result)
}

// -------------------------------------------------------------------

// SetLogMethodRqst

// string method = 1;
inline void SetLogMethodRqst::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetLogMethodRqst::method() const {
  // @@protoc_insertion_point(field_get:ressource.SetLogMethodRqst.method)
  return _internal_method();
}
inline void SetLogMethodRqst::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:ressource.SetLogMethodRqst.method)
}
inline std::string* SetLogMethodRqst::mutable_method() {
  // @@protoc_insertion_point(field_mutable:ressource.SetLogMethodRqst.method)
  return _internal_mutable_method();
}
inline const std::string& SetLogMethodRqst::_internal_method() const {
  return method_.Get();
}
inline void SetLogMethodRqst::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetLogMethodRqst::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.SetLogMethodRqst.method)
}
inline void SetLogMethodRqst::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.SetLogMethodRqst.method)
}
inline void SetLogMethodRqst::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.SetLogMethodRqst.method)
}
inline std::string* SetLogMethodRqst::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetLogMethodRqst::release_method() {
  // @@protoc_insertion_point(field_release:ressource.SetLogMethodRqst.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLogMethodRqst::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.SetLogMethodRqst.method)
}

// -------------------------------------------------------------------

// SetLogMethodRsp

// bool result = 1;
inline void SetLogMethodRsp::clear_result() {
  result_ = false;
}
inline bool SetLogMethodRsp::_internal_result() const {
  return result_;
}
inline bool SetLogMethodRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.SetLogMethodRsp.result)
  return _internal_result();
}
inline void SetLogMethodRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void SetLogMethodRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.SetLogMethodRsp.result)
}

// -------------------------------------------------------------------

// ResetLogMethodRqst

// string method = 1;
inline void ResetLogMethodRqst::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResetLogMethodRqst::method() const {
  // @@protoc_insertion_point(field_get:ressource.ResetLogMethodRqst.method)
  return _internal_method();
}
inline void ResetLogMethodRqst::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:ressource.ResetLogMethodRqst.method)
}
inline std::string* ResetLogMethodRqst::mutable_method() {
  // @@protoc_insertion_point(field_mutable:ressource.ResetLogMethodRqst.method)
  return _internal_mutable_method();
}
inline const std::string& ResetLogMethodRqst::_internal_method() const {
  return method_.Get();
}
inline void ResetLogMethodRqst::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResetLogMethodRqst::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.ResetLogMethodRqst.method)
}
inline void ResetLogMethodRqst::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.ResetLogMethodRqst.method)
}
inline void ResetLogMethodRqst::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.ResetLogMethodRqst.method)
}
inline std::string* ResetLogMethodRqst::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResetLogMethodRqst::release_method() {
  // @@protoc_insertion_point(field_release:ressource.ResetLogMethodRqst.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetLogMethodRqst::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.ResetLogMethodRqst.method)
}

// -------------------------------------------------------------------

// ResetLogMethodRsp

// bool result = 1;
inline void ResetLogMethodRsp::clear_result() {
  result_ = false;
}
inline bool ResetLogMethodRsp::_internal_result() const {
  return result_;
}
inline bool ResetLogMethodRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.ResetLogMethodRsp.result)
  return _internal_result();
}
inline void ResetLogMethodRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void ResetLogMethodRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.ResetLogMethodRsp.result)
}

// -------------------------------------------------------------------

// GetLogMethodsRqst

// -------------------------------------------------------------------

// GetLogMethodsRsp

// repeated string methods = 1;
inline int GetLogMethodsRsp::_internal_methods_size() const {
  return methods_.size();
}
inline int GetLogMethodsRsp::methods_size() const {
  return _internal_methods_size();
}
inline void GetLogMethodsRsp::clear_methods() {
  methods_.Clear();
}
inline std::string* GetLogMethodsRsp::add_methods() {
  // @@protoc_insertion_point(field_add_mutable:ressource.GetLogMethodsRsp.methods)
  return _internal_add_methods();
}
inline const std::string& GetLogMethodsRsp::_internal_methods(int index) const {
  return methods_.Get(index);
}
inline const std::string& GetLogMethodsRsp::methods(int index) const {
  // @@protoc_insertion_point(field_get:ressource.GetLogMethodsRsp.methods)
  return _internal_methods(index);
}
inline std::string* GetLogMethodsRsp::mutable_methods(int index) {
  // @@protoc_insertion_point(field_mutable:ressource.GetLogMethodsRsp.methods)
  return methods_.Mutable(index);
}
inline void GetLogMethodsRsp::set_methods(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ressource.GetLogMethodsRsp.methods)
  methods_.Mutable(index)->assign(value);
}
inline void GetLogMethodsRsp::set_methods(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ressource.GetLogMethodsRsp.methods)
  methods_.Mutable(index)->assign(std::move(value));
}
inline void GetLogMethodsRsp::set_methods(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  methods_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ressource.GetLogMethodsRsp.methods)
}
inline void GetLogMethodsRsp::set_methods(int index, const char* value, size_t size) {
  methods_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ressource.GetLogMethodsRsp.methods)
}
inline std::string* GetLogMethodsRsp::_internal_add_methods() {
  return methods_.Add();
}
inline void GetLogMethodsRsp::add_methods(const std::string& value) {
  methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ressource.GetLogMethodsRsp.methods)
}
inline void GetLogMethodsRsp::add_methods(std::string&& value) {
  methods_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ressource.GetLogMethodsRsp.methods)
}
inline void GetLogMethodsRsp::add_methods(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ressource.GetLogMethodsRsp.methods)
}
inline void GetLogMethodsRsp::add_methods(const char* value, size_t size) {
  methods_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ressource.GetLogMethodsRsp.methods)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetLogMethodsRsp::methods() const {
  // @@protoc_insertion_point(field_list:ressource.GetLogMethodsRsp.methods)
  return methods_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetLogMethodsRsp::mutable_methods() {
  // @@protoc_insertion_point(field_mutable_list:ressource.GetLogMethodsRsp.methods)
  return &methods_;
}

// -------------------------------------------------------------------

// GetLogRqst

// string query = 1;
inline void GetLogRqst::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetLogRqst::query() const {
  // @@protoc_insertion_point(field_get:ressource.GetLogRqst.query)
  return _internal_query();
}
inline void GetLogRqst::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:ressource.GetLogRqst.query)
}
inline std::string* GetLogRqst::mutable_query() {
  // @@protoc_insertion_point(field_mutable:ressource.GetLogRqst.query)
  return _internal_mutable_query();
}
inline const std::string& GetLogRqst::_internal_query() const {
  return query_.Get();
}
inline void GetLogRqst::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetLogRqst::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.GetLogRqst.query)
}
inline void GetLogRqst::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.GetLogRqst.query)
}
inline void GetLogRqst::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.GetLogRqst.query)
}
inline std::string* GetLogRqst::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetLogRqst::release_query() {
  // @@protoc_insertion_point(field_release:ressource.GetLogRqst.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLogRqst::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.GetLogRqst.query)
}

// -------------------------------------------------------------------

// GetLogRsp

// repeated .ressource.LogInfo info = 1;
inline int GetLogRsp::_internal_info_size() const {
  return info_.size();
}
inline int GetLogRsp::info_size() const {
  return _internal_info_size();
}
inline void GetLogRsp::clear_info() {
  info_.Clear();
}
inline ::ressource::LogInfo* GetLogRsp::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:ressource.GetLogRsp.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::LogInfo >*
GetLogRsp::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:ressource.GetLogRsp.info)
  return &info_;
}
inline const ::ressource::LogInfo& GetLogRsp::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::ressource::LogInfo& GetLogRsp::info(int index) const {
  // @@protoc_insertion_point(field_get:ressource.GetLogRsp.info)
  return _internal_info(index);
}
inline ::ressource::LogInfo* GetLogRsp::_internal_add_info() {
  return info_.Add();
}
inline ::ressource::LogInfo* GetLogRsp::add_info() {
  // @@protoc_insertion_point(field_add:ressource.GetLogRsp.info)
  return _internal_add_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::LogInfo >&
GetLogRsp::info() const {
  // @@protoc_insertion_point(field_list:ressource.GetLogRsp.info)
  return info_;
}

// -------------------------------------------------------------------

// ClearAllLogRqst

// .ressource.LogType type = 1;
inline void ClearAllLogRqst::clear_type() {
  type_ = 0;
}
inline ::ressource::LogType ClearAllLogRqst::_internal_type() const {
  return static_cast< ::ressource::LogType >(type_);
}
inline ::ressource::LogType ClearAllLogRqst::type() const {
  // @@protoc_insertion_point(field_get:ressource.ClearAllLogRqst.type)
  return _internal_type();
}
inline void ClearAllLogRqst::_internal_set_type(::ressource::LogType value) {
  
  type_ = value;
}
inline void ClearAllLogRqst::set_type(::ressource::LogType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ressource.ClearAllLogRqst.type)
}

// -------------------------------------------------------------------

// ClearAllLogRsp

// bool result = 1;
inline void ClearAllLogRsp::clear_result() {
  result_ = false;
}
inline bool ClearAllLogRsp::_internal_result() const {
  return result_;
}
inline bool ClearAllLogRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.ClearAllLogRsp.result)
  return _internal_result();
}
inline void ClearAllLogRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void ClearAllLogRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.ClearAllLogRsp.result)
}

// -------------------------------------------------------------------

// Ressource

// string path = 1;
inline void Ressource::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ressource::path() const {
  // @@protoc_insertion_point(field_get:ressource.Ressource.path)
  return _internal_path();
}
inline void Ressource::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ressource.Ressource.path)
}
inline std::string* Ressource::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ressource.Ressource.path)
  return _internal_mutable_path();
}
inline const std::string& Ressource::_internal_path() const {
  return path_.Get();
}
inline void Ressource::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ressource::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.Ressource.path)
}
inline void Ressource::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.Ressource.path)
}
inline void Ressource::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.Ressource.path)
}
inline std::string* Ressource::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ressource::release_path() {
  // @@protoc_insertion_point(field_release:ressource.Ressource.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ressource::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.Ressource.path)
}

// string name = 2;
inline void Ressource::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ressource::name() const {
  // @@protoc_insertion_point(field_get:ressource.Ressource.name)
  return _internal_name();
}
inline void Ressource::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ressource.Ressource.name)
}
inline std::string* Ressource::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ressource.Ressource.name)
  return _internal_mutable_name();
}
inline const std::string& Ressource::_internal_name() const {
  return name_.Get();
}
inline void Ressource::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ressource::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.Ressource.name)
}
inline void Ressource::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.Ressource.name)
}
inline void Ressource::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.Ressource.name)
}
inline std::string* Ressource::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ressource::release_name() {
  // @@protoc_insertion_point(field_release:ressource.Ressource.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ressource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.Ressource.name)
}

// int64 modified = 3;
inline void Ressource::clear_modified() {
  modified_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ressource::_internal_modified() const {
  return modified_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ressource::modified() const {
  // @@protoc_insertion_point(field_get:ressource.Ressource.modified)
  return _internal_modified();
}
inline void Ressource::_internal_set_modified(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  modified_ = value;
}
inline void Ressource::set_modified(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_modified(value);
  // @@protoc_insertion_point(field_set:ressource.Ressource.modified)
}

// int64 size = 4;
inline void Ressource::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ressource::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ressource::size() const {
  // @@protoc_insertion_point(field_get:ressource.Ressource.size)
  return _internal_size();
}
inline void Ressource::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Ressource::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ressource.Ressource.size)
}

// -------------------------------------------------------------------

// SetRessourceRqst

// .ressource.Ressource ressource = 1;
inline bool SetRessourceRqst::_internal_has_ressource() const {
  return this != internal_default_instance() && ressource_ != nullptr;
}
inline bool SetRessourceRqst::has_ressource() const {
  return _internal_has_ressource();
}
inline void SetRessourceRqst::clear_ressource() {
  if (GetArena() == nullptr && ressource_ != nullptr) {
    delete ressource_;
  }
  ressource_ = nullptr;
}
inline const ::ressource::Ressource& SetRessourceRqst::_internal_ressource() const {
  const ::ressource::Ressource* p = ressource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ressource::Ressource*>(
      &::ressource::_Ressource_default_instance_);
}
inline const ::ressource::Ressource& SetRessourceRqst::ressource() const {
  // @@protoc_insertion_point(field_get:ressource.SetRessourceRqst.ressource)
  return _internal_ressource();
}
inline void SetRessourceRqst::unsafe_arena_set_allocated_ressource(
    ::ressource::Ressource* ressource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ressource_);
  }
  ressource_ = ressource;
  if (ressource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ressource.SetRessourceRqst.ressource)
}
inline ::ressource::Ressource* SetRessourceRqst::release_ressource() {
  
  ::ressource::Ressource* temp = ressource_;
  ressource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ressource::Ressource* SetRessourceRqst::unsafe_arena_release_ressource() {
  // @@protoc_insertion_point(field_release:ressource.SetRessourceRqst.ressource)
  
  ::ressource::Ressource* temp = ressource_;
  ressource_ = nullptr;
  return temp;
}
inline ::ressource::Ressource* SetRessourceRqst::_internal_mutable_ressource() {
  
  if (ressource_ == nullptr) {
    auto* p = CreateMaybeMessage<::ressource::Ressource>(GetArena());
    ressource_ = p;
  }
  return ressource_;
}
inline ::ressource::Ressource* SetRessourceRqst::mutable_ressource() {
  // @@protoc_insertion_point(field_mutable:ressource.SetRessourceRqst.ressource)
  return _internal_mutable_ressource();
}
inline void SetRessourceRqst::set_allocated_ressource(::ressource::Ressource* ressource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ressource_;
  }
  if (ressource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ressource);
    if (message_arena != submessage_arena) {
      ressource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ressource, submessage_arena);
    }
    
  } else {
    
  }
  ressource_ = ressource;
  // @@protoc_insertion_point(field_set_allocated:ressource.SetRessourceRqst.ressource)
}

// -------------------------------------------------------------------

// SetRessourceRsp

// bool result = 1;
inline void SetRessourceRsp::clear_result() {
  result_ = false;
}
inline bool SetRessourceRsp::_internal_result() const {
  return result_;
}
inline bool SetRessourceRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.SetRessourceRsp.result)
  return _internal_result();
}
inline void SetRessourceRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void SetRessourceRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.SetRessourceRsp.result)
}

// -------------------------------------------------------------------

// ActionParameterRessourcePermission

// int32 index = 1;
inline void ActionParameterRessourcePermission::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionParameterRessourcePermission::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionParameterRessourcePermission::index() const {
  // @@protoc_insertion_point(field_get:ressource.ActionParameterRessourcePermission.index)
  return _internal_index();
}
inline void ActionParameterRessourcePermission::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void ActionParameterRessourcePermission::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:ressource.ActionParameterRessourcePermission.index)
}

// int32 permission = 2;
inline void ActionParameterRessourcePermission::clear_permission() {
  permission_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionParameterRessourcePermission::_internal_permission() const {
  return permission_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionParameterRessourcePermission::permission() const {
  // @@protoc_insertion_point(field_get:ressource.ActionParameterRessourcePermission.permission)
  return _internal_permission();
}
inline void ActionParameterRessourcePermission::_internal_set_permission(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  permission_ = value;
}
inline void ActionParameterRessourcePermission::set_permission(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:ressource.ActionParameterRessourcePermission.permission)
}

// -------------------------------------------------------------------

// SetActionPermissionRqst

// string action = 1;
inline void SetActionPermissionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetActionPermissionRqst::action() const {
  // @@protoc_insertion_point(field_get:ressource.SetActionPermissionRqst.action)
  return _internal_action();
}
inline void SetActionPermissionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:ressource.SetActionPermissionRqst.action)
}
inline std::string* SetActionPermissionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:ressource.SetActionPermissionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& SetActionPermissionRqst::_internal_action() const {
  return action_.Get();
}
inline void SetActionPermissionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetActionPermissionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.SetActionPermissionRqst.action)
}
inline void SetActionPermissionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.SetActionPermissionRqst.action)
}
inline void SetActionPermissionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.SetActionPermissionRqst.action)
}
inline std::string* SetActionPermissionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetActionPermissionRqst::release_action() {
  // @@protoc_insertion_point(field_release:ressource.SetActionPermissionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetActionPermissionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.SetActionPermissionRqst.action)
}

// repeated .ressource.ActionParameterRessourcePermission actionParameterRessourcePermissions = 2;
inline int SetActionPermissionRqst::_internal_actionparameterressourcepermissions_size() const {
  return actionparameterressourcepermissions_.size();
}
inline int SetActionPermissionRqst::actionparameterressourcepermissions_size() const {
  return _internal_actionparameterressourcepermissions_size();
}
inline void SetActionPermissionRqst::clear_actionparameterressourcepermissions() {
  actionparameterressourcepermissions_.Clear();
}
inline ::ressource::ActionParameterRessourcePermission* SetActionPermissionRqst::mutable_actionparameterressourcepermissions(int index) {
  // @@protoc_insertion_point(field_mutable:ressource.SetActionPermissionRqst.actionParameterRessourcePermissions)
  return actionparameterressourcepermissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::ActionParameterRessourcePermission >*
SetActionPermissionRqst::mutable_actionparameterressourcepermissions() {
  // @@protoc_insertion_point(field_mutable_list:ressource.SetActionPermissionRqst.actionParameterRessourcePermissions)
  return &actionparameterressourcepermissions_;
}
inline const ::ressource::ActionParameterRessourcePermission& SetActionPermissionRqst::_internal_actionparameterressourcepermissions(int index) const {
  return actionparameterressourcepermissions_.Get(index);
}
inline const ::ressource::ActionParameterRessourcePermission& SetActionPermissionRqst::actionparameterressourcepermissions(int index) const {
  // @@protoc_insertion_point(field_get:ressource.SetActionPermissionRqst.actionParameterRessourcePermissions)
  return _internal_actionparameterressourcepermissions(index);
}
inline ::ressource::ActionParameterRessourcePermission* SetActionPermissionRqst::_internal_add_actionparameterressourcepermissions() {
  return actionparameterressourcepermissions_.Add();
}
inline ::ressource::ActionParameterRessourcePermission* SetActionPermissionRqst::add_actionparameterressourcepermissions() {
  // @@protoc_insertion_point(field_add:ressource.SetActionPermissionRqst.actionParameterRessourcePermissions)
  return _internal_add_actionparameterressourcepermissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::ActionParameterRessourcePermission >&
SetActionPermissionRqst::actionparameterressourcepermissions() const {
  // @@protoc_insertion_point(field_list:ressource.SetActionPermissionRqst.actionParameterRessourcePermissions)
  return actionparameterressourcepermissions_;
}

// -------------------------------------------------------------------

// SetActionPermissionRsp

// bool result = 1;
inline void SetActionPermissionRsp::clear_result() {
  result_ = false;
}
inline bool SetActionPermissionRsp::_internal_result() const {
  return result_;
}
inline bool SetActionPermissionRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.SetActionPermissionRsp.result)
  return _internal_result();
}
inline void SetActionPermissionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void SetActionPermissionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.SetActionPermissionRsp.result)
}

// -------------------------------------------------------------------

// GetActionPermissionRqst

// string action = 1;
inline void GetActionPermissionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetActionPermissionRqst::action() const {
  // @@protoc_insertion_point(field_get:ressource.GetActionPermissionRqst.action)
  return _internal_action();
}
inline void GetActionPermissionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:ressource.GetActionPermissionRqst.action)
}
inline std::string* GetActionPermissionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:ressource.GetActionPermissionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& GetActionPermissionRqst::_internal_action() const {
  return action_.Get();
}
inline void GetActionPermissionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetActionPermissionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.GetActionPermissionRqst.action)
}
inline void GetActionPermissionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.GetActionPermissionRqst.action)
}
inline void GetActionPermissionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.GetActionPermissionRqst.action)
}
inline std::string* GetActionPermissionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetActionPermissionRqst::release_action() {
  // @@protoc_insertion_point(field_release:ressource.GetActionPermissionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetActionPermissionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.GetActionPermissionRqst.action)
}

// -------------------------------------------------------------------

// GetActionPermissionRsp

// repeated .ressource.ActionParameterRessourcePermission actionParameterRessourcePermissions = 1;
inline int GetActionPermissionRsp::_internal_actionparameterressourcepermissions_size() const {
  return actionparameterressourcepermissions_.size();
}
inline int GetActionPermissionRsp::actionparameterressourcepermissions_size() const {
  return _internal_actionparameterressourcepermissions_size();
}
inline void GetActionPermissionRsp::clear_actionparameterressourcepermissions() {
  actionparameterressourcepermissions_.Clear();
}
inline ::ressource::ActionParameterRessourcePermission* GetActionPermissionRsp::mutable_actionparameterressourcepermissions(int index) {
  // @@protoc_insertion_point(field_mutable:ressource.GetActionPermissionRsp.actionParameterRessourcePermissions)
  return actionparameterressourcepermissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::ActionParameterRessourcePermission >*
GetActionPermissionRsp::mutable_actionparameterressourcepermissions() {
  // @@protoc_insertion_point(field_mutable_list:ressource.GetActionPermissionRsp.actionParameterRessourcePermissions)
  return &actionparameterressourcepermissions_;
}
inline const ::ressource::ActionParameterRessourcePermission& GetActionPermissionRsp::_internal_actionparameterressourcepermissions(int index) const {
  return actionparameterressourcepermissions_.Get(index);
}
inline const ::ressource::ActionParameterRessourcePermission& GetActionPermissionRsp::actionparameterressourcepermissions(int index) const {
  // @@protoc_insertion_point(field_get:ressource.GetActionPermissionRsp.actionParameterRessourcePermissions)
  return _internal_actionparameterressourcepermissions(index);
}
inline ::ressource::ActionParameterRessourcePermission* GetActionPermissionRsp::_internal_add_actionparameterressourcepermissions() {
  return actionparameterressourcepermissions_.Add();
}
inline ::ressource::ActionParameterRessourcePermission* GetActionPermissionRsp::add_actionparameterressourcepermissions() {
  // @@protoc_insertion_point(field_add:ressource.GetActionPermissionRsp.actionParameterRessourcePermissions)
  return _internal_add_actionparameterressourcepermissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::ActionParameterRessourcePermission >&
GetActionPermissionRsp::actionparameterressourcepermissions() const {
  // @@protoc_insertion_point(field_list:ressource.GetActionPermissionRsp.actionParameterRessourcePermissions)
  return actionparameterressourcepermissions_;
}

// -------------------------------------------------------------------

// RemoveRessourceRqst

// .ressource.Ressource ressource = 1;
inline bool RemoveRessourceRqst::_internal_has_ressource() const {
  return this != internal_default_instance() && ressource_ != nullptr;
}
inline bool RemoveRessourceRqst::has_ressource() const {
  return _internal_has_ressource();
}
inline void RemoveRessourceRqst::clear_ressource() {
  if (GetArena() == nullptr && ressource_ != nullptr) {
    delete ressource_;
  }
  ressource_ = nullptr;
}
inline const ::ressource::Ressource& RemoveRessourceRqst::_internal_ressource() const {
  const ::ressource::Ressource* p = ressource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ressource::Ressource*>(
      &::ressource::_Ressource_default_instance_);
}
inline const ::ressource::Ressource& RemoveRessourceRqst::ressource() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveRessourceRqst.ressource)
  return _internal_ressource();
}
inline void RemoveRessourceRqst::unsafe_arena_set_allocated_ressource(
    ::ressource::Ressource* ressource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ressource_);
  }
  ressource_ = ressource;
  if (ressource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ressource.RemoveRessourceRqst.ressource)
}
inline ::ressource::Ressource* RemoveRessourceRqst::release_ressource() {
  
  ::ressource::Ressource* temp = ressource_;
  ressource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ressource::Ressource* RemoveRessourceRqst::unsafe_arena_release_ressource() {
  // @@protoc_insertion_point(field_release:ressource.RemoveRessourceRqst.ressource)
  
  ::ressource::Ressource* temp = ressource_;
  ressource_ = nullptr;
  return temp;
}
inline ::ressource::Ressource* RemoveRessourceRqst::_internal_mutable_ressource() {
  
  if (ressource_ == nullptr) {
    auto* p = CreateMaybeMessage<::ressource::Ressource>(GetArena());
    ressource_ = p;
  }
  return ressource_;
}
inline ::ressource::Ressource* RemoveRessourceRqst::mutable_ressource() {
  // @@protoc_insertion_point(field_mutable:ressource.RemoveRessourceRqst.ressource)
  return _internal_mutable_ressource();
}
inline void RemoveRessourceRqst::set_allocated_ressource(::ressource::Ressource* ressource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ressource_;
  }
  if (ressource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ressource);
    if (message_arena != submessage_arena) {
      ressource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ressource, submessage_arena);
    }
    
  } else {
    
  }
  ressource_ = ressource;
  // @@protoc_insertion_point(field_set_allocated:ressource.RemoveRessourceRqst.ressource)
}

// -------------------------------------------------------------------

// RemoveRessourceRsp

// bool result = 1;
inline void RemoveRessourceRsp::clear_result() {
  result_ = false;
}
inline bool RemoveRessourceRsp::_internal_result() const {
  return result_;
}
inline bool RemoveRessourceRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveRessourceRsp.result)
  return _internal_result();
}
inline void RemoveRessourceRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveRessourceRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.RemoveRessourceRsp.result)
}

// -------------------------------------------------------------------

// GetRessourcesRqst

// string path = 1;
inline void GetRessourcesRqst::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRessourcesRqst::path() const {
  // @@protoc_insertion_point(field_get:ressource.GetRessourcesRqst.path)
  return _internal_path();
}
inline void GetRessourcesRqst::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:ressource.GetRessourcesRqst.path)
}
inline std::string* GetRessourcesRqst::mutable_path() {
  // @@protoc_insertion_point(field_mutable:ressource.GetRessourcesRqst.path)
  return _internal_mutable_path();
}
inline const std::string& GetRessourcesRqst::_internal_path() const {
  return path_.Get();
}
inline void GetRessourcesRqst::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRessourcesRqst::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.GetRessourcesRqst.path)
}
inline void GetRessourcesRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.GetRessourcesRqst.path)
}
inline void GetRessourcesRqst::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.GetRessourcesRqst.path)
}
inline std::string* GetRessourcesRqst::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRessourcesRqst::release_path() {
  // @@protoc_insertion_point(field_release:ressource.GetRessourcesRqst.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRessourcesRqst::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.GetRessourcesRqst.path)
}

// string name = 2;
inline void GetRessourcesRqst::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRessourcesRqst::name() const {
  // @@protoc_insertion_point(field_get:ressource.GetRessourcesRqst.name)
  return _internal_name();
}
inline void GetRessourcesRqst::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ressource.GetRessourcesRqst.name)
}
inline std::string* GetRessourcesRqst::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ressource.GetRessourcesRqst.name)
  return _internal_mutable_name();
}
inline const std::string& GetRessourcesRqst::_internal_name() const {
  return name_.Get();
}
inline void GetRessourcesRqst::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRessourcesRqst::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.GetRessourcesRqst.name)
}
inline void GetRessourcesRqst::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.GetRessourcesRqst.name)
}
inline void GetRessourcesRqst::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.GetRessourcesRqst.name)
}
inline std::string* GetRessourcesRqst::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRessourcesRqst::release_name() {
  // @@protoc_insertion_point(field_release:ressource.GetRessourcesRqst.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRessourcesRqst::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.GetRessourcesRqst.name)
}

// -------------------------------------------------------------------

// GetRessourcesRsp

// repeated .ressource.Ressource ressources = 1;
inline int GetRessourcesRsp::_internal_ressources_size() const {
  return ressources_.size();
}
inline int GetRessourcesRsp::ressources_size() const {
  return _internal_ressources_size();
}
inline void GetRessourcesRsp::clear_ressources() {
  ressources_.Clear();
}
inline ::ressource::Ressource* GetRessourcesRsp::mutable_ressources(int index) {
  // @@protoc_insertion_point(field_mutable:ressource.GetRessourcesRsp.ressources)
  return ressources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::Ressource >*
GetRessourcesRsp::mutable_ressources() {
  // @@protoc_insertion_point(field_mutable_list:ressource.GetRessourcesRsp.ressources)
  return &ressources_;
}
inline const ::ressource::Ressource& GetRessourcesRsp::_internal_ressources(int index) const {
  return ressources_.Get(index);
}
inline const ::ressource::Ressource& GetRessourcesRsp::ressources(int index) const {
  // @@protoc_insertion_point(field_get:ressource.GetRessourcesRsp.ressources)
  return _internal_ressources(index);
}
inline ::ressource::Ressource* GetRessourcesRsp::_internal_add_ressources() {
  return ressources_.Add();
}
inline ::ressource::Ressource* GetRessourcesRsp::add_ressources() {
  // @@protoc_insertion_point(field_add:ressource.GetRessourcesRsp.ressources)
  return _internal_add_ressources();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ressource::Ressource >&
GetRessourcesRsp::ressources() const {
  // @@protoc_insertion_point(field_list:ressource.GetRessourcesRsp.ressources)
  return ressources_;
}

// -------------------------------------------------------------------

// RemoveActionPermissionRqst

// string action = 1;
inline void RemoveActionPermissionRqst::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveActionPermissionRqst::action() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveActionPermissionRqst.action)
  return _internal_action();
}
inline void RemoveActionPermissionRqst::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:ressource.RemoveActionPermissionRqst.action)
}
inline std::string* RemoveActionPermissionRqst::mutable_action() {
  // @@protoc_insertion_point(field_mutable:ressource.RemoveActionPermissionRqst.action)
  return _internal_mutable_action();
}
inline const std::string& RemoveActionPermissionRqst::_internal_action() const {
  return action_.Get();
}
inline void RemoveActionPermissionRqst::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveActionPermissionRqst::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ressource.RemoveActionPermissionRqst.action)
}
inline void RemoveActionPermissionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ressource.RemoveActionPermissionRqst.action)
}
inline void RemoveActionPermissionRqst::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ressource.RemoveActionPermissionRqst.action)
}
inline std::string* RemoveActionPermissionRqst::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveActionPermissionRqst::release_action() {
  // @@protoc_insertion_point(field_release:ressource.RemoveActionPermissionRqst.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveActionPermissionRqst::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ressource.RemoveActionPermissionRqst.action)
}

// -------------------------------------------------------------------

// RemoveActionPermissionRsp

// bool result = 1;
inline void RemoveActionPermissionRsp::clear_result() {
  result_ = false;
}
inline bool RemoveActionPermissionRsp::_internal_result() const {
  return result_;
}
inline bool RemoveActionPermissionRsp::result() const {
  // @@protoc_insertion_point(field_get:ressource.RemoveActionPermissionRsp.result)
  return _internal_result();
}
inline void RemoveActionPermissionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void RemoveActionPermissionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ressource.RemoveActionPermissionRsp.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ressource

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ressource::LogType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ressource::LogType>() {
  return ::ressource::LogType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ressource_2eproto
