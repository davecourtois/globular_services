// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plc.proto

#include "plc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_plc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Connection_plc_2eproto;
namespace plc {
class ConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Connection> _instance;
} _Connection_default_instance_;
class CreateConnectionRqstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateConnectionRqst> _instance;
} _CreateConnectionRqst_default_instance_;
class CreateConnectionRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateConnectionRsp> _instance;
} _CreateConnectionRsp_default_instance_;
class GetConnectionRqstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConnectionRqst> _instance;
} _GetConnectionRqst_default_instance_;
class GetConnectionRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConnectionRsp> _instance;
} _GetConnectionRsp_default_instance_;
class CloseConnectionRqstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseConnectionRqst> _instance;
} _CloseConnectionRqst_default_instance_;
class CloseConnectionRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseConnectionRsp> _instance;
} _CloseConnectionRsp_default_instance_;
class DeleteConnectionRqstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteConnectionRqst> _instance;
} _DeleteConnectionRqst_default_instance_;
class DeleteConnectionRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteConnectionRsp> _instance;
} _DeleteConnectionRsp_default_instance_;
class WriteTagRqstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteTagRqst> _instance;
} _WriteTagRqst_default_instance_;
class WriteTagRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteTagRsp> _instance;
} _WriteTagRsp_default_instance_;
class ReadTagRqstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadTagRqst> _instance;
} _ReadTagRqst_default_instance_;
class ReadTagRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadTagRsp> _instance;
} _ReadTagRsp_default_instance_;
class StopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopRequest> _instance;
} _StopRequest_default_instance_;
class StopResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopResponse> _instance;
} _StopResponse_default_instance_;
}  // namespace plc
static void InitDefaultsscc_info_CloseConnectionRqst_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_CloseConnectionRqst_default_instance_;
    new (ptr) ::plc::CloseConnectionRqst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::CloseConnectionRqst::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseConnectionRqst_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloseConnectionRqst_plc_2eproto}, {}};

static void InitDefaultsscc_info_CloseConnectionRsp_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_CloseConnectionRsp_default_instance_;
    new (ptr) ::plc::CloseConnectionRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::CloseConnectionRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseConnectionRsp_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloseConnectionRsp_plc_2eproto}, {}};

static void InitDefaultsscc_info_Connection_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_Connection_default_instance_;
    new (ptr) ::plc::Connection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::Connection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Connection_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Connection_plc_2eproto}, {}};

static void InitDefaultsscc_info_CreateConnectionRqst_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_CreateConnectionRqst_default_instance_;
    new (ptr) ::plc::CreateConnectionRqst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::CreateConnectionRqst::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateConnectionRqst_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateConnectionRqst_plc_2eproto}, {
      &scc_info_Connection_plc_2eproto.base,}};

static void InitDefaultsscc_info_CreateConnectionRsp_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_CreateConnectionRsp_default_instance_;
    new (ptr) ::plc::CreateConnectionRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::CreateConnectionRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateConnectionRsp_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateConnectionRsp_plc_2eproto}, {}};

static void InitDefaultsscc_info_DeleteConnectionRqst_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_DeleteConnectionRqst_default_instance_;
    new (ptr) ::plc::DeleteConnectionRqst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::DeleteConnectionRqst::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteConnectionRqst_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteConnectionRqst_plc_2eproto}, {}};

static void InitDefaultsscc_info_DeleteConnectionRsp_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_DeleteConnectionRsp_default_instance_;
    new (ptr) ::plc::DeleteConnectionRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::DeleteConnectionRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteConnectionRsp_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteConnectionRsp_plc_2eproto}, {}};

static void InitDefaultsscc_info_GetConnectionRqst_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_GetConnectionRqst_default_instance_;
    new (ptr) ::plc::GetConnectionRqst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::GetConnectionRqst::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConnectionRqst_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetConnectionRqst_plc_2eproto}, {}};

static void InitDefaultsscc_info_GetConnectionRsp_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_GetConnectionRsp_default_instance_;
    new (ptr) ::plc::GetConnectionRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::GetConnectionRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetConnectionRsp_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetConnectionRsp_plc_2eproto}, {
      &scc_info_Connection_plc_2eproto.base,}};

static void InitDefaultsscc_info_ReadTagRqst_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_ReadTagRqst_default_instance_;
    new (ptr) ::plc::ReadTagRqst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::ReadTagRqst::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadTagRqst_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadTagRqst_plc_2eproto}, {}};

static void InitDefaultsscc_info_ReadTagRsp_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_ReadTagRsp_default_instance_;
    new (ptr) ::plc::ReadTagRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::ReadTagRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadTagRsp_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadTagRsp_plc_2eproto}, {}};

static void InitDefaultsscc_info_StopRequest_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_StopRequest_default_instance_;
    new (ptr) ::plc::StopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::StopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopRequest_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopRequest_plc_2eproto}, {}};

static void InitDefaultsscc_info_StopResponse_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_StopResponse_default_instance_;
    new (ptr) ::plc::StopResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::StopResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopResponse_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopResponse_plc_2eproto}, {}};

static void InitDefaultsscc_info_WriteTagRqst_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_WriteTagRqst_default_instance_;
    new (ptr) ::plc::WriteTagRqst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::WriteTagRqst::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteTagRqst_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteTagRqst_plc_2eproto}, {}};

static void InitDefaultsscc_info_WriteTagRsp_plc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::plc::_WriteTagRsp_default_instance_;
    new (ptr) ::plc::WriteTagRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::plc::WriteTagRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteTagRsp_plc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteTagRsp_plc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_plc_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_plc_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_plc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_plc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::Connection, id_),
  PROTOBUF_FIELD_OFFSET(::plc::Connection, ip_),
  PROTOBUF_FIELD_OFFSET(::plc::Connection, protocol_),
  PROTOBUF_FIELD_OFFSET(::plc::Connection, cpu_),
  PROTOBUF_FIELD_OFFSET(::plc::Connection, porttype_),
  PROTOBUF_FIELD_OFFSET(::plc::Connection, slot_),
  PROTOBUF_FIELD_OFFSET(::plc::Connection, rack_),
  PROTOBUF_FIELD_OFFSET(::plc::Connection, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::CreateConnectionRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::CreateConnectionRqst, connection_),
  PROTOBUF_FIELD_OFFSET(::plc::CreateConnectionRqst, save_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::CreateConnectionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::CreateConnectionRsp, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::GetConnectionRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::GetConnectionRqst, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::GetConnectionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::GetConnectionRsp, connection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::CloseConnectionRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::CloseConnectionRqst, connection_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::CloseConnectionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::CloseConnectionRsp, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::DeleteConnectionRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::DeleteConnectionRqst, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::DeleteConnectionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::DeleteConnectionRsp, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::WriteTagRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::WriteTagRqst, connection_id_),
  PROTOBUF_FIELD_OFFSET(::plc::WriteTagRqst, name_),
  PROTOBUF_FIELD_OFFSET(::plc::WriteTagRqst, type_),
  PROTOBUF_FIELD_OFFSET(::plc::WriteTagRqst, values_),
  PROTOBUF_FIELD_OFFSET(::plc::WriteTagRqst, offset_),
  PROTOBUF_FIELD_OFFSET(::plc::WriteTagRqst, length_),
  PROTOBUF_FIELD_OFFSET(::plc::WriteTagRqst, unsigned__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::WriteTagRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::WriteTagRsp, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::ReadTagRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::ReadTagRqst, connection_id_),
  PROTOBUF_FIELD_OFFSET(::plc::ReadTagRqst, name_),
  PROTOBUF_FIELD_OFFSET(::plc::ReadTagRqst, type_),
  PROTOBUF_FIELD_OFFSET(::plc::ReadTagRqst, offset_),
  PROTOBUF_FIELD_OFFSET(::plc::ReadTagRqst, length_),
  PROTOBUF_FIELD_OFFSET(::plc::ReadTagRqst, unsigned__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::ReadTagRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plc::ReadTagRsp, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::StopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plc::StopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::plc::Connection)},
  { 13, -1, sizeof(::plc::CreateConnectionRqst)},
  { 20, -1, sizeof(::plc::CreateConnectionRsp)},
  { 26, -1, sizeof(::plc::GetConnectionRqst)},
  { 32, -1, sizeof(::plc::GetConnectionRsp)},
  { 38, -1, sizeof(::plc::CloseConnectionRqst)},
  { 44, -1, sizeof(::plc::CloseConnectionRsp)},
  { 50, -1, sizeof(::plc::DeleteConnectionRqst)},
  { 56, -1, sizeof(::plc::DeleteConnectionRsp)},
  { 62, -1, sizeof(::plc::WriteTagRqst)},
  { 74, -1, sizeof(::plc::WriteTagRsp)},
  { 80, -1, sizeof(::plc::ReadTagRqst)},
  { 91, -1, sizeof(::plc::ReadTagRsp)},
  { 97, -1, sizeof(::plc::StopRequest)},
  { 102, -1, sizeof(::plc::StopResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_Connection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_CreateConnectionRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_CreateConnectionRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_GetConnectionRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_GetConnectionRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_CloseConnectionRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_CloseConnectionRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_DeleteConnectionRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_DeleteConnectionRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_WriteTagRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_WriteTagRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_ReadTagRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_ReadTagRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_StopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plc::_StopResponse_default_instance_),
};

const char descriptor_table_protodef_plc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tplc.proto\022\003plc\"\262\001\n\nConnection\022\n\n\002id\030\001 "
  "\001(\t\022\n\n\002ip\030\002 \001(\t\022#\n\010protocol\030\003 \001(\0162\021.plc."
  "ProtocolType\022\031\n\003cpu\030\004 \001(\0162\014.plc.CpuType\022"
  "\037\n\010portType\030\005 \001(\0162\r.plc.PortType\022\014\n\004slot"
  "\030\006 \001(\005\022\014\n\004rack\030\007 \001(\005\022\017\n\007timeout\030\010 \001(\003\"I\n"
  "\024CreateConnectionRqst\022#\n\nconnection\030\001 \001("
  "\0132\017.plc.Connection\022\014\n\004save\030\002 \001(\010\"%\n\023Crea"
  "teConnectionRsp\022\016\n\006result\030\001 \001(\010\"\037\n\021GetCo"
  "nnectionRqst\022\n\n\002id\030\001 \001(\t\"7\n\020GetConnectio"
  "nRsp\022#\n\nconnection\030\001 \001(\0132\017.plc.Connectio"
  "n\",\n\023CloseConnectionRqst\022\025\n\rconnection_i"
  "d\030\001 \001(\t\"$\n\022CloseConnectionRsp\022\016\n\006result\030"
  "\001 \001(\010\"\"\n\024DeleteConnectionRqst\022\n\n\002id\030\001 \001("
  "\t\"%\n\023DeleteConnectionRsp\022\016\n\006result\030\001 \001(\010"
  "\"\221\001\n\014WriteTagRqst\022\025\n\rconnection_id\030\001 \001(\t"
  "\022\014\n\004name\030\002 \001(\t\022\032\n\004type\030\003 \001(\0162\014.plc.TagTy"
  "pe\022\016\n\006values\030\004 \001(\t\022\016\n\006offset\030\005 \001(\005\022\016\n\006le"
  "ngth\030\006 \001(\005\022\020\n\010unsigned\030\007 \001(\010\"\035\n\013WriteTag"
  "Rsp\022\016\n\006result\030\001 \001(\010\"\200\001\n\013ReadTagRqst\022\025\n\rc"
  "onnection_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\032\n\004type"
  "\030\003 \001(\0162\014.plc.TagType\022\016\n\006offset\030\004 \001(\005\022\016\n\006"
  "length\030\005 \001(\005\022\020\n\010unsigned\030\006 \001(\010\"\034\n\nReadTa"
  "gRsp\022\016\n\006values\030\001 \001(\t\"\r\n\013StopRequest\"\016\n\014S"
  "topResponse*\271\001\n\007CpuType\022\007\n\003PLC\020\000\022\010\n\004PLC5"
  "\020\001\022\007\n\003SLC\020\002\022\n\n\006SLC500\020\003\022\016\n\nMICROLOGIX\020\004\022"
  "\010\n\004MLGX\020\005\022\020\n\014COMPACTLOGIX\020\006\022\010\n\004CLGX\020\007\022\007\n"
  "\003LGX\020\010\022\020\n\014CONTROLLOGIX\020\t\022\017\n\013CONTROLOGIX\020"
  "\n\022\r\n\tFLEXLOGIX\020\013\022\010\n\004FLGX\020\014\022\013\n\007SIMMENS\020\016*"
  "&\n\014ProtocolType\022\n\n\006AB_EIP\020\000\022\n\n\006AB_CIP\020\001*"
  "n\n\010PortType\022\r\n\tBACKPLANE\020\000\022\020\n\014NET_ETHERN"
  "ET\020\001\022\025\n\021DH_PLUS_CHANNEL_A\020\002\022\025\n\021DH_PLUS_C"
  "HANNEL_B\020\003\022\n\n\006SERIAL\020\004\022\007\n\003TCP\020\005*O\n\007TagTy"
  "pe\022\010\n\004BOOL\020\000\022\010\n\004SINT\020\001\022\007\n\003INT\020\002\022\010\n\004DINT\020"
  "\003\022\010\n\004REAL\020\004\022\t\n\005LREAL\020\005\022\010\n\004LINT\020\0062\274\003\n\nPlc"
  "Service\022+\n\004Stop\022\020.plc.StopRequest\032\021.plc."
  "StopResponse\022I\n\020CreateConnection\022\031.plc.C"
  "reateConnectionRqst\032\030.plc.CreateConnecti"
  "onRsp\"\000\022@\n\rGetConnection\022\026.plc.GetConnec"
  "tionRqst\032\025.plc.GetConnectionRsp\"\000\022F\n\017Clo"
  "seConnection\022\030.plc.CloseConnectionRqst\032\027"
  ".plc.CloseConnectionRsp\"\000\022I\n\020DeleteConne"
  "ction\022\031.plc.DeleteConnectionRqst\032\030.plc.D"
  "eleteConnectionRsp\"\000\022.\n\007ReadTag\022\020.plc.Re"
  "adTagRqst\032\017.plc.ReadTagRsp\"\000\0221\n\010WriteTag"
  "\022\021.plc.WriteTagRqst\032\020.plc.WriteTagRsp\"\000B"
  "\013Z\tplc/plcpbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_plc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_plc_2eproto_sccs[15] = {
  &scc_info_CloseConnectionRqst_plc_2eproto.base,
  &scc_info_CloseConnectionRsp_plc_2eproto.base,
  &scc_info_Connection_plc_2eproto.base,
  &scc_info_CreateConnectionRqst_plc_2eproto.base,
  &scc_info_CreateConnectionRsp_plc_2eproto.base,
  &scc_info_DeleteConnectionRqst_plc_2eproto.base,
  &scc_info_DeleteConnectionRsp_plc_2eproto.base,
  &scc_info_GetConnectionRqst_plc_2eproto.base,
  &scc_info_GetConnectionRsp_plc_2eproto.base,
  &scc_info_ReadTagRqst_plc_2eproto.base,
  &scc_info_ReadTagRsp_plc_2eproto.base,
  &scc_info_StopRequest_plc_2eproto.base,
  &scc_info_StopResponse_plc_2eproto.base,
  &scc_info_WriteTagRqst_plc_2eproto.base,
  &scc_info_WriteTagRsp_plc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_plc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plc_2eproto = {
  false, false, descriptor_table_protodef_plc_2eproto, "plc.proto", 1820,
  &descriptor_table_plc_2eproto_once, descriptor_table_plc_2eproto_sccs, descriptor_table_plc_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_plc_2eproto::offsets,
  file_level_metadata_plc_2eproto, 15, file_level_enum_descriptors_plc_2eproto, file_level_service_descriptors_plc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_plc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_plc_2eproto)), true);
namespace plc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CpuType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_plc_2eproto);
  return file_level_enum_descriptors_plc_2eproto[0];
}
bool CpuType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_plc_2eproto);
  return file_level_enum_descriptors_plc_2eproto[1];
}
bool ProtocolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_plc_2eproto);
  return file_level_enum_descriptors_plc_2eproto[2];
}
bool PortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TagType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_plc_2eproto);
  return file_level_enum_descriptors_plc_2eproto[3];
}
bool TagType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Connection::InitAsDefaultInstance() {
}
class Connection::_Internal {
 public:
};

Connection::Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.Connection)
}
Connection::Connection(const Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  ::memcpy(&protocol_, &from.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&rack_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(rack_));
  // @@protoc_insertion_point(copy_constructor:plc.Connection)
}

void Connection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Connection_plc_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rack_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(rack_));
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:plc.Connection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Connection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Connection::ArenaDtor(void* object) {
  Connection* _this = reinterpret_cast< Connection* >(object);
  (void)_this;
}
void Connection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Connection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Connection& Connection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Connection_plc_2eproto.base);
  return *internal_default_instance();
}


void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.Connection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rack_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(rack_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plc.Connection.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plc.Connection.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plc.ProtocolType protocol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::plc::ProtocolType>(val));
        } else goto handle_unusual;
        continue;
      // .plc.CpuType cpu = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cpu(static_cast<::plc::CpuType>(val));
        } else goto handle_unusual;
        continue;
      // .plc.PortType portType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_porttype(static_cast<::plc::PortType>(val));
        } else goto handle_unusual;
        continue;
      // int32 slot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timeout = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Connection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.Connection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plc.Connection.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plc.Connection.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // .plc.ProtocolType protocol = 3;
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_protocol(), target);
  }

  // .plc.CpuType cpu = 4;
  if (this->cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_cpu(), target);
  }

  // .plc.PortType portType = 5;
  if (this->porttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_porttype(), target);
  }

  // int32 slot = 6;
  if (this->slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_slot(), target);
  }

  // int32 rack = 7;
  if (this->rack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_rack(), target);
  }

  // int64 timeout = 8;
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.Connection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .plc.ProtocolType protocol = 3;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // .plc.CpuType cpu = 4;
  if (this->cpu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cpu());
  }

  // .plc.PortType portType = 5;
  if (this->porttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_porttype());
  }

  // int32 slot = 6;
  if (this->slot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot());
  }

  // int64 timeout = 8;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timeout());
  }

  // int32 rack = 7;
  if (this->rack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rack());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Connection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Connection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Connection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.Connection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.cpu() != 0) {
    _internal_set_cpu(from._internal_cpu());
  }
  if (from.porttype() != 0) {
    _internal_set_porttype(from._internal_porttype());
  }
  if (from.slot() != 0) {
    _internal_set_slot(from._internal_slot());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from.rack() != 0) {
    _internal_set_rack(from._internal_rack());
  }
}

void Connection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::InternalSwap(Connection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Connection, rack_)
      + sizeof(Connection::rack_)
      - PROTOBUF_FIELD_OFFSET(Connection, protocol_)>(
          reinterpret_cast<char*>(&protocol_),
          reinterpret_cast<char*>(&other->protocol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Connection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateConnectionRqst::InitAsDefaultInstance() {
  ::plc::_CreateConnectionRqst_default_instance_._instance.get_mutable()->connection_ = const_cast< ::plc::Connection*>(
      ::plc::Connection::internal_default_instance());
}
class CreateConnectionRqst::_Internal {
 public:
  static const ::plc::Connection& connection(const CreateConnectionRqst* msg);
};

const ::plc::Connection&
CreateConnectionRqst::_Internal::connection(const CreateConnectionRqst* msg) {
  return *msg->connection_;
}
CreateConnectionRqst::CreateConnectionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.CreateConnectionRqst)
}
CreateConnectionRqst::CreateConnectionRqst(const CreateConnectionRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection()) {
    connection_ = new ::plc::Connection(*from.connection_);
  } else {
    connection_ = nullptr;
  }
  save_ = from.save_;
  // @@protoc_insertion_point(copy_constructor:plc.CreateConnectionRqst)
}

void CreateConnectionRqst::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateConnectionRqst_plc_2eproto.base);
  ::memset(&connection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&save_) -
      reinterpret_cast<char*>(&connection_)) + sizeof(save_));
}

CreateConnectionRqst::~CreateConnectionRqst() {
  // @@protoc_insertion_point(destructor:plc.CreateConnectionRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateConnectionRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete connection_;
}

void CreateConnectionRqst::ArenaDtor(void* object) {
  CreateConnectionRqst* _this = reinterpret_cast< CreateConnectionRqst* >(object);
  (void)_this;
}
void CreateConnectionRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateConnectionRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateConnectionRqst& CreateConnectionRqst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateConnectionRqst_plc_2eproto.base);
  return *internal_default_instance();
}


void CreateConnectionRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.CreateConnectionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && connection_ != nullptr) {
    delete connection_;
  }
  connection_ = nullptr;
  save_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateConnectionRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .plc.Connection connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool save = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          save_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateConnectionRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.CreateConnectionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .plc.Connection connection = 1;
  if (this->has_connection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::connection(this), target, stream);
  }

  // bool save = 2;
  if (this->save() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_save(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.CreateConnectionRqst)
  return target;
}

size_t CreateConnectionRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.CreateConnectionRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .plc.Connection connection = 1;
  if (this->has_connection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  // bool save = 2;
  if (this->save() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateConnectionRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.CreateConnectionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateConnectionRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateConnectionRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.CreateConnectionRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.CreateConnectionRqst)
    MergeFrom(*source);
  }
}

void CreateConnectionRqst::MergeFrom(const CreateConnectionRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.CreateConnectionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connection()) {
    _internal_mutable_connection()->::plc::Connection::MergeFrom(from._internal_connection());
  }
  if (from.save() != 0) {
    _internal_set_save(from._internal_save());
  }
}

void CreateConnectionRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.CreateConnectionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateConnectionRqst::CopyFrom(const CreateConnectionRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.CreateConnectionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateConnectionRqst::IsInitialized() const {
  return true;
}

void CreateConnectionRqst::InternalSwap(CreateConnectionRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateConnectionRqst, save_)
      + sizeof(CreateConnectionRqst::save_)
      - PROTOBUF_FIELD_OFFSET(CreateConnectionRqst, connection_)>(
          reinterpret_cast<char*>(&connection_),
          reinterpret_cast<char*>(&other->connection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateConnectionRqst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateConnectionRsp::InitAsDefaultInstance() {
}
class CreateConnectionRsp::_Internal {
 public:
};

CreateConnectionRsp::CreateConnectionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.CreateConnectionRsp)
}
CreateConnectionRsp::CreateConnectionRsp(const CreateConnectionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:plc.CreateConnectionRsp)
}

void CreateConnectionRsp::SharedCtor() {
  result_ = false;
}

CreateConnectionRsp::~CreateConnectionRsp() {
  // @@protoc_insertion_point(destructor:plc.CreateConnectionRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateConnectionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateConnectionRsp::ArenaDtor(void* object) {
  CreateConnectionRsp* _this = reinterpret_cast< CreateConnectionRsp* >(object);
  (void)_this;
}
void CreateConnectionRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateConnectionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateConnectionRsp& CreateConnectionRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateConnectionRsp_plc_2eproto.base);
  return *internal_default_instance();
}


void CreateConnectionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.CreateConnectionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateConnectionRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateConnectionRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.CreateConnectionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.CreateConnectionRsp)
  return target;
}

size_t CreateConnectionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.CreateConnectionRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateConnectionRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.CreateConnectionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateConnectionRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateConnectionRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.CreateConnectionRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.CreateConnectionRsp)
    MergeFrom(*source);
  }
}

void CreateConnectionRsp::MergeFrom(const CreateConnectionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.CreateConnectionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CreateConnectionRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.CreateConnectionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateConnectionRsp::CopyFrom(const CreateConnectionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.CreateConnectionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateConnectionRsp::IsInitialized() const {
  return true;
}

void CreateConnectionRsp::InternalSwap(CreateConnectionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateConnectionRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConnectionRqst::InitAsDefaultInstance() {
}
class GetConnectionRqst::_Internal {
 public:
};

GetConnectionRqst::GetConnectionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.GetConnectionRqst)
}
GetConnectionRqst::GetConnectionRqst(const GetConnectionRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:plc.GetConnectionRqst)
}

void GetConnectionRqst::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConnectionRqst_plc_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetConnectionRqst::~GetConnectionRqst() {
  // @@protoc_insertion_point(destructor:plc.GetConnectionRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetConnectionRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetConnectionRqst::ArenaDtor(void* object) {
  GetConnectionRqst* _this = reinterpret_cast< GetConnectionRqst* >(object);
  (void)_this;
}
void GetConnectionRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConnectionRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConnectionRqst& GetConnectionRqst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConnectionRqst_plc_2eproto.base);
  return *internal_default_instance();
}


void GetConnectionRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.GetConnectionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConnectionRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plc.GetConnectionRqst.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConnectionRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.GetConnectionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plc.GetConnectionRqst.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.GetConnectionRqst)
  return target;
}

size_t GetConnectionRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.GetConnectionRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConnectionRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.GetConnectionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConnectionRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConnectionRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.GetConnectionRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.GetConnectionRqst)
    MergeFrom(*source);
  }
}

void GetConnectionRqst::MergeFrom(const GetConnectionRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.GetConnectionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetConnectionRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.GetConnectionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConnectionRqst::CopyFrom(const GetConnectionRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.GetConnectionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnectionRqst::IsInitialized() const {
  return true;
}

void GetConnectionRqst::InternalSwap(GetConnectionRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConnectionRqst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConnectionRsp::InitAsDefaultInstance() {
  ::plc::_GetConnectionRsp_default_instance_._instance.get_mutable()->connection_ = const_cast< ::plc::Connection*>(
      ::plc::Connection::internal_default_instance());
}
class GetConnectionRsp::_Internal {
 public:
  static const ::plc::Connection& connection(const GetConnectionRsp* msg);
};

const ::plc::Connection&
GetConnectionRsp::_Internal::connection(const GetConnectionRsp* msg) {
  return *msg->connection_;
}
GetConnectionRsp::GetConnectionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.GetConnectionRsp)
}
GetConnectionRsp::GetConnectionRsp(const GetConnectionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection()) {
    connection_ = new ::plc::Connection(*from.connection_);
  } else {
    connection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:plc.GetConnectionRsp)
}

void GetConnectionRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConnectionRsp_plc_2eproto.base);
  connection_ = nullptr;
}

GetConnectionRsp::~GetConnectionRsp() {
  // @@protoc_insertion_point(destructor:plc.GetConnectionRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetConnectionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete connection_;
}

void GetConnectionRsp::ArenaDtor(void* object) {
  GetConnectionRsp* _this = reinterpret_cast< GetConnectionRsp* >(object);
  (void)_this;
}
void GetConnectionRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConnectionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConnectionRsp& GetConnectionRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConnectionRsp_plc_2eproto.base);
  return *internal_default_instance();
}


void GetConnectionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.GetConnectionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && connection_ != nullptr) {
    delete connection_;
  }
  connection_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConnectionRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .plc.Connection connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConnectionRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.GetConnectionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .plc.Connection connection = 1;
  if (this->has_connection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::connection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.GetConnectionRsp)
  return target;
}

size_t GetConnectionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.GetConnectionRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .plc.Connection connection = 1;
  if (this->has_connection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *connection_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConnectionRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.GetConnectionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConnectionRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConnectionRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.GetConnectionRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.GetConnectionRsp)
    MergeFrom(*source);
  }
}

void GetConnectionRsp::MergeFrom(const GetConnectionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.GetConnectionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connection()) {
    _internal_mutable_connection()->::plc::Connection::MergeFrom(from._internal_connection());
  }
}

void GetConnectionRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.GetConnectionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConnectionRsp::CopyFrom(const GetConnectionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.GetConnectionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnectionRsp::IsInitialized() const {
  return true;
}

void GetConnectionRsp::InternalSwap(GetConnectionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(connection_, other->connection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConnectionRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseConnectionRqst::InitAsDefaultInstance() {
}
class CloseConnectionRqst::_Internal {
 public:
};

CloseConnectionRqst::CloseConnectionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.CloseConnectionRqst)
}
CloseConnectionRqst::CloseConnectionRqst(const CloseConnectionRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_connection_id().empty()) {
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_connection_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:plc.CloseConnectionRqst)
}

void CloseConnectionRqst::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseConnectionRqst_plc_2eproto.base);
  connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CloseConnectionRqst::~CloseConnectionRqst() {
  // @@protoc_insertion_point(destructor:plc.CloseConnectionRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseConnectionRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  connection_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloseConnectionRqst::ArenaDtor(void* object) {
  CloseConnectionRqst* _this = reinterpret_cast< CloseConnectionRqst* >(object);
  (void)_this;
}
void CloseConnectionRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseConnectionRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseConnectionRqst& CloseConnectionRqst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseConnectionRqst_plc_2eproto.base);
  return *internal_default_instance();
}


void CloseConnectionRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.CloseConnectionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseConnectionRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plc.CloseConnectionRqst.connection_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseConnectionRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.CloseConnectionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string connection_id = 1;
  if (this->connection_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connection_id().data(), static_cast<int>(this->_internal_connection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plc.CloseConnectionRqst.connection_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connection_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.CloseConnectionRqst)
  return target;
}

size_t CloseConnectionRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.CloseConnectionRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection_id = 1;
  if (this->connection_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connection_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseConnectionRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.CloseConnectionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseConnectionRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseConnectionRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.CloseConnectionRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.CloseConnectionRqst)
    MergeFrom(*source);
  }
}

void CloseConnectionRqst::MergeFrom(const CloseConnectionRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.CloseConnectionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connection_id().size() > 0) {
    _internal_set_connection_id(from._internal_connection_id());
  }
}

void CloseConnectionRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.CloseConnectionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseConnectionRqst::CopyFrom(const CloseConnectionRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.CloseConnectionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseConnectionRqst::IsInitialized() const {
  return true;
}

void CloseConnectionRqst::InternalSwap(CloseConnectionRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  connection_id_.Swap(&other->connection_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseConnectionRqst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseConnectionRsp::InitAsDefaultInstance() {
}
class CloseConnectionRsp::_Internal {
 public:
};

CloseConnectionRsp::CloseConnectionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.CloseConnectionRsp)
}
CloseConnectionRsp::CloseConnectionRsp(const CloseConnectionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:plc.CloseConnectionRsp)
}

void CloseConnectionRsp::SharedCtor() {
  result_ = false;
}

CloseConnectionRsp::~CloseConnectionRsp() {
  // @@protoc_insertion_point(destructor:plc.CloseConnectionRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseConnectionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CloseConnectionRsp::ArenaDtor(void* object) {
  CloseConnectionRsp* _this = reinterpret_cast< CloseConnectionRsp* >(object);
  (void)_this;
}
void CloseConnectionRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseConnectionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseConnectionRsp& CloseConnectionRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseConnectionRsp_plc_2eproto.base);
  return *internal_default_instance();
}


void CloseConnectionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.CloseConnectionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseConnectionRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseConnectionRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.CloseConnectionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.CloseConnectionRsp)
  return target;
}

size_t CloseConnectionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.CloseConnectionRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseConnectionRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.CloseConnectionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseConnectionRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseConnectionRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.CloseConnectionRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.CloseConnectionRsp)
    MergeFrom(*source);
  }
}

void CloseConnectionRsp::MergeFrom(const CloseConnectionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.CloseConnectionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CloseConnectionRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.CloseConnectionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseConnectionRsp::CopyFrom(const CloseConnectionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.CloseConnectionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseConnectionRsp::IsInitialized() const {
  return true;
}

void CloseConnectionRsp::InternalSwap(CloseConnectionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseConnectionRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteConnectionRqst::InitAsDefaultInstance() {
}
class DeleteConnectionRqst::_Internal {
 public:
};

DeleteConnectionRqst::DeleteConnectionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.DeleteConnectionRqst)
}
DeleteConnectionRqst::DeleteConnectionRqst(const DeleteConnectionRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:plc.DeleteConnectionRqst)
}

void DeleteConnectionRqst::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteConnectionRqst_plc_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteConnectionRqst::~DeleteConnectionRqst() {
  // @@protoc_insertion_point(destructor:plc.DeleteConnectionRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteConnectionRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteConnectionRqst::ArenaDtor(void* object) {
  DeleteConnectionRqst* _this = reinterpret_cast< DeleteConnectionRqst* >(object);
  (void)_this;
}
void DeleteConnectionRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteConnectionRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteConnectionRqst& DeleteConnectionRqst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteConnectionRqst_plc_2eproto.base);
  return *internal_default_instance();
}


void DeleteConnectionRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.DeleteConnectionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteConnectionRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plc.DeleteConnectionRqst.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteConnectionRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.DeleteConnectionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plc.DeleteConnectionRqst.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.DeleteConnectionRqst)
  return target;
}

size_t DeleteConnectionRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.DeleteConnectionRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteConnectionRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.DeleteConnectionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteConnectionRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteConnectionRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.DeleteConnectionRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.DeleteConnectionRqst)
    MergeFrom(*source);
  }
}

void DeleteConnectionRqst::MergeFrom(const DeleteConnectionRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.DeleteConnectionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteConnectionRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.DeleteConnectionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteConnectionRqst::CopyFrom(const DeleteConnectionRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.DeleteConnectionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteConnectionRqst::IsInitialized() const {
  return true;
}

void DeleteConnectionRqst::InternalSwap(DeleteConnectionRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteConnectionRqst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteConnectionRsp::InitAsDefaultInstance() {
}
class DeleteConnectionRsp::_Internal {
 public:
};

DeleteConnectionRsp::DeleteConnectionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.DeleteConnectionRsp)
}
DeleteConnectionRsp::DeleteConnectionRsp(const DeleteConnectionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:plc.DeleteConnectionRsp)
}

void DeleteConnectionRsp::SharedCtor() {
  result_ = false;
}

DeleteConnectionRsp::~DeleteConnectionRsp() {
  // @@protoc_insertion_point(destructor:plc.DeleteConnectionRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteConnectionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteConnectionRsp::ArenaDtor(void* object) {
  DeleteConnectionRsp* _this = reinterpret_cast< DeleteConnectionRsp* >(object);
  (void)_this;
}
void DeleteConnectionRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteConnectionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteConnectionRsp& DeleteConnectionRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteConnectionRsp_plc_2eproto.base);
  return *internal_default_instance();
}


void DeleteConnectionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.DeleteConnectionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteConnectionRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteConnectionRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.DeleteConnectionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.DeleteConnectionRsp)
  return target;
}

size_t DeleteConnectionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.DeleteConnectionRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteConnectionRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.DeleteConnectionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteConnectionRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteConnectionRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.DeleteConnectionRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.DeleteConnectionRsp)
    MergeFrom(*source);
  }
}

void DeleteConnectionRsp::MergeFrom(const DeleteConnectionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.DeleteConnectionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void DeleteConnectionRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.DeleteConnectionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteConnectionRsp::CopyFrom(const DeleteConnectionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.DeleteConnectionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteConnectionRsp::IsInitialized() const {
  return true;
}

void DeleteConnectionRsp::InternalSwap(DeleteConnectionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteConnectionRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteTagRqst::InitAsDefaultInstance() {
}
class WriteTagRqst::_Internal {
 public:
};

WriteTagRqst::WriteTagRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.WriteTagRqst)
}
WriteTagRqst::WriteTagRqst(const WriteTagRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_connection_id().empty()) {
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_connection_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_values().empty()) {
    values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_values(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&unsigned__) -
    reinterpret_cast<char*>(&type_)) + sizeof(unsigned__));
  // @@protoc_insertion_point(copy_constructor:plc.WriteTagRqst)
}

void WriteTagRqst::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteTagRqst_plc_2eproto.base);
  connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsigned__) -
      reinterpret_cast<char*>(&type_)) + sizeof(unsigned__));
}

WriteTagRqst::~WriteTagRqst() {
  // @@protoc_insertion_point(destructor:plc.WriteTagRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteTagRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  connection_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  values_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteTagRqst::ArenaDtor(void* object) {
  WriteTagRqst* _this = reinterpret_cast< WriteTagRqst* >(object);
  (void)_this;
}
void WriteTagRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteTagRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteTagRqst& WriteTagRqst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteTagRqst_plc_2eproto.base);
  return *internal_default_instance();
}


void WriteTagRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.WriteTagRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  values_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsigned__) -
      reinterpret_cast<char*>(&type_)) + sizeof(unsigned__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteTagRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plc.WriteTagRqst.connection_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plc.WriteTagRqst.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plc.TagType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::plc::TagType>(val));
        } else goto handle_unusual;
        continue;
      // string values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_values();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plc.WriteTagRqst.values"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool unsigned = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          unsigned__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteTagRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.WriteTagRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string connection_id = 1;
  if (this->connection_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connection_id().data(), static_cast<int>(this->_internal_connection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plc.WriteTagRqst.connection_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connection_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plc.WriteTagRqst.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .plc.TagType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string values = 4;
  if (this->values().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_values().data(), static_cast<int>(this->_internal_values().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plc.WriteTagRqst.values");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_values(), target);
  }

  // int32 offset = 5;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_offset(), target);
  }

  // int32 length = 6;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_length(), target);
  }

  // bool unsigned = 7;
  if (this->unsigned_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_unsigned_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.WriteTagRqst)
  return target;
}

size_t WriteTagRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.WriteTagRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection_id = 1;
  if (this->connection_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connection_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string values = 4;
  if (this->values().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_values());
  }

  // .plc.TagType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 offset = 5;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // int32 length = 6;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  // bool unsigned = 7;
  if (this->unsigned_() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteTagRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.WriteTagRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteTagRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteTagRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.WriteTagRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.WriteTagRqst)
    MergeFrom(*source);
  }
}

void WriteTagRqst::MergeFrom(const WriteTagRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.WriteTagRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connection_id().size() > 0) {
    _internal_set_connection_id(from._internal_connection_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.values().size() > 0) {
    _internal_set_values(from._internal_values());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.unsigned_() != 0) {
    _internal_set_unsigned_(from._internal_unsigned_());
  }
}

void WriteTagRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.WriteTagRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteTagRqst::CopyFrom(const WriteTagRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.WriteTagRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteTagRqst::IsInitialized() const {
  return true;
}

void WriteTagRqst::InternalSwap(WriteTagRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  connection_id_.Swap(&other->connection_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  values_.Swap(&other->values_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteTagRqst, unsigned__)
      + sizeof(WriteTagRqst::unsigned__)
      - PROTOBUF_FIELD_OFFSET(WriteTagRqst, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteTagRqst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteTagRsp::InitAsDefaultInstance() {
}
class WriteTagRsp::_Internal {
 public:
};

WriteTagRsp::WriteTagRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.WriteTagRsp)
}
WriteTagRsp::WriteTagRsp(const WriteTagRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:plc.WriteTagRsp)
}

void WriteTagRsp::SharedCtor() {
  result_ = false;
}

WriteTagRsp::~WriteTagRsp() {
  // @@protoc_insertion_point(destructor:plc.WriteTagRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteTagRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WriteTagRsp::ArenaDtor(void* object) {
  WriteTagRsp* _this = reinterpret_cast< WriteTagRsp* >(object);
  (void)_this;
}
void WriteTagRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteTagRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteTagRsp& WriteTagRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteTagRsp_plc_2eproto.base);
  return *internal_default_instance();
}


void WriteTagRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.WriteTagRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteTagRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteTagRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.WriteTagRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.WriteTagRsp)
  return target;
}

size_t WriteTagRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.WriteTagRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteTagRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.WriteTagRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteTagRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteTagRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.WriteTagRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.WriteTagRsp)
    MergeFrom(*source);
  }
}

void WriteTagRsp::MergeFrom(const WriteTagRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.WriteTagRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void WriteTagRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.WriteTagRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteTagRsp::CopyFrom(const WriteTagRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.WriteTagRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteTagRsp::IsInitialized() const {
  return true;
}

void WriteTagRsp::InternalSwap(WriteTagRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteTagRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadTagRqst::InitAsDefaultInstance() {
}
class ReadTagRqst::_Internal {
 public:
};

ReadTagRqst::ReadTagRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.ReadTagRqst)
}
ReadTagRqst::ReadTagRqst(const ReadTagRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_connection_id().empty()) {
    connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_connection_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&unsigned__) -
    reinterpret_cast<char*>(&type_)) + sizeof(unsigned__));
  // @@protoc_insertion_point(copy_constructor:plc.ReadTagRqst)
}

void ReadTagRqst::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadTagRqst_plc_2eproto.base);
  connection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsigned__) -
      reinterpret_cast<char*>(&type_)) + sizeof(unsigned__));
}

ReadTagRqst::~ReadTagRqst() {
  // @@protoc_insertion_point(destructor:plc.ReadTagRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadTagRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  connection_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadTagRqst::ArenaDtor(void* object) {
  ReadTagRqst* _this = reinterpret_cast< ReadTagRqst* >(object);
  (void)_this;
}
void ReadTagRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadTagRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadTagRqst& ReadTagRqst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadTagRqst_plc_2eproto.base);
  return *internal_default_instance();
}


void ReadTagRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.ReadTagRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsigned__) -
      reinterpret_cast<char*>(&type_)) + sizeof(unsigned__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadTagRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plc.ReadTagRqst.connection_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plc.ReadTagRqst.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .plc.TagType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::plc::TagType>(val));
        } else goto handle_unusual;
        continue;
      // int32 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool unsigned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          unsigned__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadTagRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.ReadTagRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string connection_id = 1;
  if (this->connection_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connection_id().data(), static_cast<int>(this->_internal_connection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plc.ReadTagRqst.connection_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connection_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plc.ReadTagRqst.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .plc.TagType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // int32 offset = 4;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_offset(), target);
  }

  // int32 length = 5;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_length(), target);
  }

  // bool unsigned = 6;
  if (this->unsigned_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_unsigned_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.ReadTagRqst)
  return target;
}

size_t ReadTagRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.ReadTagRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection_id = 1;
  if (this->connection_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connection_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .plc.TagType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // int32 length = 5;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  // bool unsigned = 6;
  if (this->unsigned_() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadTagRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.ReadTagRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadTagRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadTagRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.ReadTagRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.ReadTagRqst)
    MergeFrom(*source);
  }
}

void ReadTagRqst::MergeFrom(const ReadTagRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.ReadTagRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connection_id().size() > 0) {
    _internal_set_connection_id(from._internal_connection_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.unsigned_() != 0) {
    _internal_set_unsigned_(from._internal_unsigned_());
  }
}

void ReadTagRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.ReadTagRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadTagRqst::CopyFrom(const ReadTagRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.ReadTagRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadTagRqst::IsInitialized() const {
  return true;
}

void ReadTagRqst::InternalSwap(ReadTagRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  connection_id_.Swap(&other->connection_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadTagRqst, unsigned__)
      + sizeof(ReadTagRqst::unsigned__)
      - PROTOBUF_FIELD_OFFSET(ReadTagRqst, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadTagRqst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadTagRsp::InitAsDefaultInstance() {
}
class ReadTagRsp::_Internal {
 public:
};

ReadTagRsp::ReadTagRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.ReadTagRsp)
}
ReadTagRsp::ReadTagRsp(const ReadTagRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_values().empty()) {
    values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_values(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:plc.ReadTagRsp)
}

void ReadTagRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadTagRsp_plc_2eproto.base);
  values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReadTagRsp::~ReadTagRsp() {
  // @@protoc_insertion_point(destructor:plc.ReadTagRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadTagRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  values_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadTagRsp::ArenaDtor(void* object) {
  ReadTagRsp* _this = reinterpret_cast< ReadTagRsp* >(object);
  (void)_this;
}
void ReadTagRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadTagRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadTagRsp& ReadTagRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadTagRsp_plc_2eproto.base);
  return *internal_default_instance();
}


void ReadTagRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.ReadTagRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadTagRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_values();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plc.ReadTagRsp.values"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadTagRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.ReadTagRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string values = 1;
  if (this->values().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_values().data(), static_cast<int>(this->_internal_values().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plc.ReadTagRsp.values");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.ReadTagRsp)
  return target;
}

size_t ReadTagRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.ReadTagRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string values = 1;
  if (this->values().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_values());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadTagRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.ReadTagRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadTagRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadTagRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.ReadTagRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.ReadTagRsp)
    MergeFrom(*source);
  }
}

void ReadTagRsp::MergeFrom(const ReadTagRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.ReadTagRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.values().size() > 0) {
    _internal_set_values(from._internal_values());
  }
}

void ReadTagRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.ReadTagRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadTagRsp::CopyFrom(const ReadTagRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.ReadTagRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadTagRsp::IsInitialized() const {
  return true;
}

void ReadTagRsp::InternalSwap(ReadTagRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.Swap(&other->values_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadTagRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopRequest::InitAsDefaultInstance() {
}
class StopRequest::_Internal {
 public:
};

StopRequest::StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.StopRequest)
}
StopRequest::StopRequest(const StopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plc.StopRequest)
}

void StopRequest::SharedCtor() {
}

StopRequest::~StopRequest() {
  // @@protoc_insertion_point(destructor:plc.StopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopRequest::ArenaDtor(void* object) {
  StopRequest* _this = reinterpret_cast< StopRequest* >(object);
  (void)_this;
}
void StopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopRequest& StopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopRequest_plc_2eproto.base);
  return *internal_default_instance();
}


void StopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.StopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.StopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.StopRequest)
  return target;
}

size_t StopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.StopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.StopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.StopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.StopRequest)
    MergeFrom(*source);
  }
}

void StopRequest::MergeFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.StopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRequest::CopyFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRequest::IsInitialized() const {
  return true;
}

void StopRequest::InternalSwap(StopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopResponse::InitAsDefaultInstance() {
}
class StopResponse::_Internal {
 public:
};

StopResponse::StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plc.StopResponse)
}
StopResponse::StopResponse(const StopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:plc.StopResponse)
}

void StopResponse::SharedCtor() {
}

StopResponse::~StopResponse() {
  // @@protoc_insertion_point(destructor:plc.StopResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopResponse::ArenaDtor(void* object) {
  StopResponse* _this = reinterpret_cast< StopResponse* >(object);
  (void)_this;
}
void StopResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopResponse& StopResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopResponse_plc_2eproto.base);
  return *internal_default_instance();
}


void StopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:plc.StopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plc.StopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plc.StopResponse)
  return target;
}

size_t StopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plc.StopResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plc.StopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plc.StopResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plc.StopResponse)
    MergeFrom(*source);
  }
}

void StopResponse::MergeFrom(const StopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plc.StopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plc.StopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopResponse::CopyFrom(const StopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plc.StopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopResponse::IsInitialized() const {
  return true;
}

void StopResponse::InternalSwap(StopResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::plc::Connection* Arena::CreateMaybeMessage< ::plc::Connection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::CreateConnectionRqst* Arena::CreateMaybeMessage< ::plc::CreateConnectionRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::CreateConnectionRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::CreateConnectionRsp* Arena::CreateMaybeMessage< ::plc::CreateConnectionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::CreateConnectionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::GetConnectionRqst* Arena::CreateMaybeMessage< ::plc::GetConnectionRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::GetConnectionRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::GetConnectionRsp* Arena::CreateMaybeMessage< ::plc::GetConnectionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::GetConnectionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::CloseConnectionRqst* Arena::CreateMaybeMessage< ::plc::CloseConnectionRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::CloseConnectionRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::CloseConnectionRsp* Arena::CreateMaybeMessage< ::plc::CloseConnectionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::CloseConnectionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::DeleteConnectionRqst* Arena::CreateMaybeMessage< ::plc::DeleteConnectionRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::DeleteConnectionRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::DeleteConnectionRsp* Arena::CreateMaybeMessage< ::plc::DeleteConnectionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::DeleteConnectionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::WriteTagRqst* Arena::CreateMaybeMessage< ::plc::WriteTagRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::WriteTagRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::WriteTagRsp* Arena::CreateMaybeMessage< ::plc::WriteTagRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::WriteTagRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::ReadTagRqst* Arena::CreateMaybeMessage< ::plc::ReadTagRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::ReadTagRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::ReadTagRsp* Arena::CreateMaybeMessage< ::plc::ReadTagRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::ReadTagRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::StopRequest* Arena::CreateMaybeMessage< ::plc::StopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::StopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::plc::StopResponse* Arena::CreateMaybeMessage< ::plc::StopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plc::StopResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
