// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_plc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_plc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_plc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_plc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plc_2eproto;
namespace plc {
class CloseConnectionRqst;
class CloseConnectionRqstDefaultTypeInternal;
extern CloseConnectionRqstDefaultTypeInternal _CloseConnectionRqst_default_instance_;
class CloseConnectionRsp;
class CloseConnectionRspDefaultTypeInternal;
extern CloseConnectionRspDefaultTypeInternal _CloseConnectionRsp_default_instance_;
class Connection;
class ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class CreateConnectionRqst;
class CreateConnectionRqstDefaultTypeInternal;
extern CreateConnectionRqstDefaultTypeInternal _CreateConnectionRqst_default_instance_;
class CreateConnectionRsp;
class CreateConnectionRspDefaultTypeInternal;
extern CreateConnectionRspDefaultTypeInternal _CreateConnectionRsp_default_instance_;
class DeleteConnectionRqst;
class DeleteConnectionRqstDefaultTypeInternal;
extern DeleteConnectionRqstDefaultTypeInternal _DeleteConnectionRqst_default_instance_;
class DeleteConnectionRsp;
class DeleteConnectionRspDefaultTypeInternal;
extern DeleteConnectionRspDefaultTypeInternal _DeleteConnectionRsp_default_instance_;
class GetConnectionRqst;
class GetConnectionRqstDefaultTypeInternal;
extern GetConnectionRqstDefaultTypeInternal _GetConnectionRqst_default_instance_;
class GetConnectionRsp;
class GetConnectionRspDefaultTypeInternal;
extern GetConnectionRspDefaultTypeInternal _GetConnectionRsp_default_instance_;
class ReadTagRqst;
class ReadTagRqstDefaultTypeInternal;
extern ReadTagRqstDefaultTypeInternal _ReadTagRqst_default_instance_;
class ReadTagRsp;
class ReadTagRspDefaultTypeInternal;
extern ReadTagRspDefaultTypeInternal _ReadTagRsp_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
class StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
class WriteTagRqst;
class WriteTagRqstDefaultTypeInternal;
extern WriteTagRqstDefaultTypeInternal _WriteTagRqst_default_instance_;
class WriteTagRsp;
class WriteTagRspDefaultTypeInternal;
extern WriteTagRspDefaultTypeInternal _WriteTagRsp_default_instance_;
}  // namespace plc
PROTOBUF_NAMESPACE_OPEN
template<> ::plc::CloseConnectionRqst* Arena::CreateMaybeMessage<::plc::CloseConnectionRqst>(Arena*);
template<> ::plc::CloseConnectionRsp* Arena::CreateMaybeMessage<::plc::CloseConnectionRsp>(Arena*);
template<> ::plc::Connection* Arena::CreateMaybeMessage<::plc::Connection>(Arena*);
template<> ::plc::CreateConnectionRqst* Arena::CreateMaybeMessage<::plc::CreateConnectionRqst>(Arena*);
template<> ::plc::CreateConnectionRsp* Arena::CreateMaybeMessage<::plc::CreateConnectionRsp>(Arena*);
template<> ::plc::DeleteConnectionRqst* Arena::CreateMaybeMessage<::plc::DeleteConnectionRqst>(Arena*);
template<> ::plc::DeleteConnectionRsp* Arena::CreateMaybeMessage<::plc::DeleteConnectionRsp>(Arena*);
template<> ::plc::GetConnectionRqst* Arena::CreateMaybeMessage<::plc::GetConnectionRqst>(Arena*);
template<> ::plc::GetConnectionRsp* Arena::CreateMaybeMessage<::plc::GetConnectionRsp>(Arena*);
template<> ::plc::ReadTagRqst* Arena::CreateMaybeMessage<::plc::ReadTagRqst>(Arena*);
template<> ::plc::ReadTagRsp* Arena::CreateMaybeMessage<::plc::ReadTagRsp>(Arena*);
template<> ::plc::StopRequest* Arena::CreateMaybeMessage<::plc::StopRequest>(Arena*);
template<> ::plc::StopResponse* Arena::CreateMaybeMessage<::plc::StopResponse>(Arena*);
template<> ::plc::WriteTagRqst* Arena::CreateMaybeMessage<::plc::WriteTagRqst>(Arena*);
template<> ::plc::WriteTagRsp* Arena::CreateMaybeMessage<::plc::WriteTagRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace plc {

enum CpuType : int {
  PLC = 0,
  PLC5 = 1,
  SLC = 2,
  SLC500 = 3,
  MICROLOGIX = 4,
  MLGX = 5,
  COMPACTLOGIX = 6,
  CLGX = 7,
  LGX = 8,
  CONTROLLOGIX = 9,
  CONTROLOGIX = 10,
  FLEXLOGIX = 11,
  FLGX = 12,
  SIMMENS = 14,
  CpuType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CpuType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CpuType_IsValid(int value);
constexpr CpuType CpuType_MIN = PLC;
constexpr CpuType CpuType_MAX = SIMMENS;
constexpr int CpuType_ARRAYSIZE = CpuType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CpuType_descriptor();
template<typename T>
inline const std::string& CpuType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CpuType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CpuType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CpuType_descriptor(), enum_t_value);
}
inline bool CpuType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CpuType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CpuType>(
    CpuType_descriptor(), name, value);
}
enum ProtocolType : int {
  AB_EIP = 0,
  AB_CIP = 1,
  ProtocolType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProtocolType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProtocolType_IsValid(int value);
constexpr ProtocolType ProtocolType_MIN = AB_EIP;
constexpr ProtocolType ProtocolType_MAX = AB_CIP;
constexpr int ProtocolType_ARRAYSIZE = ProtocolType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtocolType_descriptor();
template<typename T>
inline const std::string& ProtocolType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtocolType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtocolType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProtocolType_descriptor(), enum_t_value);
}
inline bool ProtocolType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtocolType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProtocolType>(
    ProtocolType_descriptor(), name, value);
}
enum PortType : int {
  BACKPLANE = 0,
  NET_ETHERNET = 1,
  DH_PLUS_CHANNEL_A = 2,
  DH_PLUS_CHANNEL_B = 3,
  SERIAL = 4,
  TCP = 5,
  PortType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PortType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PortType_IsValid(int value);
constexpr PortType PortType_MIN = BACKPLANE;
constexpr PortType PortType_MAX = TCP;
constexpr int PortType_ARRAYSIZE = PortType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PortType_descriptor();
template<typename T>
inline const std::string& PortType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PortType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PortType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PortType_descriptor(), enum_t_value);
}
inline bool PortType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PortType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PortType>(
    PortType_descriptor(), name, value);
}
enum TagType : int {
  BOOL = 0,
  SINT = 1,
  INT = 2,
  DINT = 3,
  REAL = 4,
  LREAL = 5,
  LINT = 6,
  TagType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TagType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TagType_IsValid(int value);
constexpr TagType TagType_MIN = BOOL;
constexpr TagType TagType_MAX = LINT;
constexpr int TagType_ARRAYSIZE = TagType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TagType_descriptor();
template<typename T>
inline const std::string& TagType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TagType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TagType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TagType_descriptor(), enum_t_value);
}
inline bool TagType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TagType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TagType>(
    TagType_descriptor(), name, value);
}
// ===================================================================

class Connection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.Connection) */ {
 public:
  inline Connection() : Connection(nullptr) {}
  virtual ~Connection();

  Connection(const Connection& from);
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connection& operator=(Connection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Connection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }
  inline void Swap(Connection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Connection* New() const final {
    return CreateMaybeMessage<Connection>(nullptr);
  }

  Connection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Connection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.Connection";
  }
  protected:
  explicit Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIpFieldNumber = 2,
    kProtocolFieldNumber = 3,
    kCpuFieldNumber = 4,
    kPortTypeFieldNumber = 5,
    kSlotFieldNumber = 6,
    kTimeoutFieldNumber = 8,
    kRackFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .plc.ProtocolType protocol = 3;
  void clear_protocol();
  ::plc::ProtocolType protocol() const;
  void set_protocol(::plc::ProtocolType value);
  private:
  ::plc::ProtocolType _internal_protocol() const;
  void _internal_set_protocol(::plc::ProtocolType value);
  public:

  // .plc.CpuType cpu = 4;
  void clear_cpu();
  ::plc::CpuType cpu() const;
  void set_cpu(::plc::CpuType value);
  private:
  ::plc::CpuType _internal_cpu() const;
  void _internal_set_cpu(::plc::CpuType value);
  public:

  // .plc.PortType portType = 5;
  void clear_porttype();
  ::plc::PortType porttype() const;
  void set_porttype(::plc::PortType value);
  private:
  ::plc::PortType _internal_porttype() const;
  void _internal_set_porttype(::plc::PortType value);
  public:

  // int32 slot = 6;
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 timeout = 8;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int64 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 rack = 7;
  void clear_rack();
  ::PROTOBUF_NAMESPACE_ID::int32 rack() const;
  void set_rack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rack() const;
  void _internal_set_rack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:plc.Connection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int protocol_;
  int cpu_;
  int porttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_;
  ::PROTOBUF_NAMESPACE_ID::int64 timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 rack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class CreateConnectionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.CreateConnectionRqst) */ {
 public:
  inline CreateConnectionRqst() : CreateConnectionRqst(nullptr) {}
  virtual ~CreateConnectionRqst();

  CreateConnectionRqst(const CreateConnectionRqst& from);
  CreateConnectionRqst(CreateConnectionRqst&& from) noexcept
    : CreateConnectionRqst() {
    *this = ::std::move(from);
  }

  inline CreateConnectionRqst& operator=(const CreateConnectionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConnectionRqst& operator=(CreateConnectionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateConnectionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateConnectionRqst* internal_default_instance() {
    return reinterpret_cast<const CreateConnectionRqst*>(
               &_CreateConnectionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateConnectionRqst& a, CreateConnectionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConnectionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateConnectionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateConnectionRqst* New() const final {
    return CreateMaybeMessage<CreateConnectionRqst>(nullptr);
  }

  CreateConnectionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateConnectionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateConnectionRqst& from);
  void MergeFrom(const CreateConnectionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateConnectionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.CreateConnectionRqst";
  }
  protected:
  explicit CreateConnectionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
    kSaveFieldNumber = 2,
  };
  // .plc.Connection connection = 1;
  bool has_connection() const;
  private:
  bool _internal_has_connection() const;
  public:
  void clear_connection();
  const ::plc::Connection& connection() const;
  ::plc::Connection* release_connection();
  ::plc::Connection* mutable_connection();
  void set_allocated_connection(::plc::Connection* connection);
  private:
  const ::plc::Connection& _internal_connection() const;
  ::plc::Connection* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::plc::Connection* connection);
  ::plc::Connection* unsafe_arena_release_connection();

  // bool save = 2;
  void clear_save();
  bool save() const;
  void set_save(bool value);
  private:
  bool _internal_save() const;
  void _internal_set_save(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plc.CreateConnectionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::plc::Connection* connection_;
  bool save_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class CreateConnectionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.CreateConnectionRsp) */ {
 public:
  inline CreateConnectionRsp() : CreateConnectionRsp(nullptr) {}
  virtual ~CreateConnectionRsp();

  CreateConnectionRsp(const CreateConnectionRsp& from);
  CreateConnectionRsp(CreateConnectionRsp&& from) noexcept
    : CreateConnectionRsp() {
    *this = ::std::move(from);
  }

  inline CreateConnectionRsp& operator=(const CreateConnectionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateConnectionRsp& operator=(CreateConnectionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateConnectionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateConnectionRsp* internal_default_instance() {
    return reinterpret_cast<const CreateConnectionRsp*>(
               &_CreateConnectionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateConnectionRsp& a, CreateConnectionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateConnectionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateConnectionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateConnectionRsp* New() const final {
    return CreateMaybeMessage<CreateConnectionRsp>(nullptr);
  }

  CreateConnectionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateConnectionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateConnectionRsp& from);
  void MergeFrom(const CreateConnectionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateConnectionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.CreateConnectionRsp";
  }
  protected:
  explicit CreateConnectionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plc.CreateConnectionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class GetConnectionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.GetConnectionRqst) */ {
 public:
  inline GetConnectionRqst() : GetConnectionRqst(nullptr) {}
  virtual ~GetConnectionRqst();

  GetConnectionRqst(const GetConnectionRqst& from);
  GetConnectionRqst(GetConnectionRqst&& from) noexcept
    : GetConnectionRqst() {
    *this = ::std::move(from);
  }

  inline GetConnectionRqst& operator=(const GetConnectionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnectionRqst& operator=(GetConnectionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConnectionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnectionRqst* internal_default_instance() {
    return reinterpret_cast<const GetConnectionRqst*>(
               &_GetConnectionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetConnectionRqst& a, GetConnectionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnectionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConnectionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConnectionRqst* New() const final {
    return CreateMaybeMessage<GetConnectionRqst>(nullptr);
  }

  GetConnectionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConnectionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConnectionRqst& from);
  void MergeFrom(const GetConnectionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.GetConnectionRqst";
  }
  protected:
  explicit GetConnectionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:plc.GetConnectionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class GetConnectionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.GetConnectionRsp) */ {
 public:
  inline GetConnectionRsp() : GetConnectionRsp(nullptr) {}
  virtual ~GetConnectionRsp();

  GetConnectionRsp(const GetConnectionRsp& from);
  GetConnectionRsp(GetConnectionRsp&& from) noexcept
    : GetConnectionRsp() {
    *this = ::std::move(from);
  }

  inline GetConnectionRsp& operator=(const GetConnectionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnectionRsp& operator=(GetConnectionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConnectionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnectionRsp* internal_default_instance() {
    return reinterpret_cast<const GetConnectionRsp*>(
               &_GetConnectionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetConnectionRsp& a, GetConnectionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnectionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConnectionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConnectionRsp* New() const final {
    return CreateMaybeMessage<GetConnectionRsp>(nullptr);
  }

  GetConnectionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConnectionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConnectionRsp& from);
  void MergeFrom(const GetConnectionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.GetConnectionRsp";
  }
  protected:
  explicit GetConnectionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
  };
  // .plc.Connection connection = 1;
  bool has_connection() const;
  private:
  bool _internal_has_connection() const;
  public:
  void clear_connection();
  const ::plc::Connection& connection() const;
  ::plc::Connection* release_connection();
  ::plc::Connection* mutable_connection();
  void set_allocated_connection(::plc::Connection* connection);
  private:
  const ::plc::Connection& _internal_connection() const;
  ::plc::Connection* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::plc::Connection* connection);
  ::plc::Connection* unsafe_arena_release_connection();

  // @@protoc_insertion_point(class_scope:plc.GetConnectionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::plc::Connection* connection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class CloseConnectionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.CloseConnectionRqst) */ {
 public:
  inline CloseConnectionRqst() : CloseConnectionRqst(nullptr) {}
  virtual ~CloseConnectionRqst();

  CloseConnectionRqst(const CloseConnectionRqst& from);
  CloseConnectionRqst(CloseConnectionRqst&& from) noexcept
    : CloseConnectionRqst() {
    *this = ::std::move(from);
  }

  inline CloseConnectionRqst& operator=(const CloseConnectionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseConnectionRqst& operator=(CloseConnectionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseConnectionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseConnectionRqst* internal_default_instance() {
    return reinterpret_cast<const CloseConnectionRqst*>(
               &_CloseConnectionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CloseConnectionRqst& a, CloseConnectionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseConnectionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseConnectionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseConnectionRqst* New() const final {
    return CreateMaybeMessage<CloseConnectionRqst>(nullptr);
  }

  CloseConnectionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseConnectionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseConnectionRqst& from);
  void MergeFrom(const CloseConnectionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseConnectionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.CloseConnectionRqst";
  }
  protected:
  explicit CloseConnectionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
  };
  // string connection_id = 1;
  void clear_connection_id();
  const std::string& connection_id() const;
  void set_connection_id(const std::string& value);
  void set_connection_id(std::string&& value);
  void set_connection_id(const char* value);
  void set_connection_id(const char* value, size_t size);
  std::string* mutable_connection_id();
  std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // @@protoc_insertion_point(class_scope:plc.CloseConnectionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class CloseConnectionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.CloseConnectionRsp) */ {
 public:
  inline CloseConnectionRsp() : CloseConnectionRsp(nullptr) {}
  virtual ~CloseConnectionRsp();

  CloseConnectionRsp(const CloseConnectionRsp& from);
  CloseConnectionRsp(CloseConnectionRsp&& from) noexcept
    : CloseConnectionRsp() {
    *this = ::std::move(from);
  }

  inline CloseConnectionRsp& operator=(const CloseConnectionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseConnectionRsp& operator=(CloseConnectionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseConnectionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseConnectionRsp* internal_default_instance() {
    return reinterpret_cast<const CloseConnectionRsp*>(
               &_CloseConnectionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CloseConnectionRsp& a, CloseConnectionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseConnectionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseConnectionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseConnectionRsp* New() const final {
    return CreateMaybeMessage<CloseConnectionRsp>(nullptr);
  }

  CloseConnectionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseConnectionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseConnectionRsp& from);
  void MergeFrom(const CloseConnectionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseConnectionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.CloseConnectionRsp";
  }
  protected:
  explicit CloseConnectionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plc.CloseConnectionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class DeleteConnectionRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.DeleteConnectionRqst) */ {
 public:
  inline DeleteConnectionRqst() : DeleteConnectionRqst(nullptr) {}
  virtual ~DeleteConnectionRqst();

  DeleteConnectionRqst(const DeleteConnectionRqst& from);
  DeleteConnectionRqst(DeleteConnectionRqst&& from) noexcept
    : DeleteConnectionRqst() {
    *this = ::std::move(from);
  }

  inline DeleteConnectionRqst& operator=(const DeleteConnectionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteConnectionRqst& operator=(DeleteConnectionRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteConnectionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteConnectionRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteConnectionRqst*>(
               &_DeleteConnectionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteConnectionRqst& a, DeleteConnectionRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteConnectionRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteConnectionRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteConnectionRqst* New() const final {
    return CreateMaybeMessage<DeleteConnectionRqst>(nullptr);
  }

  DeleteConnectionRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteConnectionRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteConnectionRqst& from);
  void MergeFrom(const DeleteConnectionRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteConnectionRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.DeleteConnectionRqst";
  }
  protected:
  explicit DeleteConnectionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:plc.DeleteConnectionRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class DeleteConnectionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.DeleteConnectionRsp) */ {
 public:
  inline DeleteConnectionRsp() : DeleteConnectionRsp(nullptr) {}
  virtual ~DeleteConnectionRsp();

  DeleteConnectionRsp(const DeleteConnectionRsp& from);
  DeleteConnectionRsp(DeleteConnectionRsp&& from) noexcept
    : DeleteConnectionRsp() {
    *this = ::std::move(from);
  }

  inline DeleteConnectionRsp& operator=(const DeleteConnectionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteConnectionRsp& operator=(DeleteConnectionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteConnectionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteConnectionRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteConnectionRsp*>(
               &_DeleteConnectionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteConnectionRsp& a, DeleteConnectionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteConnectionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteConnectionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteConnectionRsp* New() const final {
    return CreateMaybeMessage<DeleteConnectionRsp>(nullptr);
  }

  DeleteConnectionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteConnectionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteConnectionRsp& from);
  void MergeFrom(const DeleteConnectionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteConnectionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.DeleteConnectionRsp";
  }
  protected:
  explicit DeleteConnectionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plc.DeleteConnectionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class WriteTagRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.WriteTagRqst) */ {
 public:
  inline WriteTagRqst() : WriteTagRqst(nullptr) {}
  virtual ~WriteTagRqst();

  WriteTagRqst(const WriteTagRqst& from);
  WriteTagRqst(WriteTagRqst&& from) noexcept
    : WriteTagRqst() {
    *this = ::std::move(from);
  }

  inline WriteTagRqst& operator=(const WriteTagRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteTagRqst& operator=(WriteTagRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteTagRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteTagRqst* internal_default_instance() {
    return reinterpret_cast<const WriteTagRqst*>(
               &_WriteTagRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WriteTagRqst& a, WriteTagRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteTagRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteTagRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteTagRqst* New() const final {
    return CreateMaybeMessage<WriteTagRqst>(nullptr);
  }

  WriteTagRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteTagRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteTagRqst& from);
  void MergeFrom(const WriteTagRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteTagRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.WriteTagRqst";
  }
  protected:
  explicit WriteTagRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kValuesFieldNumber = 4,
    kTypeFieldNumber = 3,
    kOffsetFieldNumber = 5,
    kLengthFieldNumber = 6,
    kUnsignedFieldNumber = 7,
  };
  // string connection_id = 1;
  void clear_connection_id();
  const std::string& connection_id() const;
  void set_connection_id(const std::string& value);
  void set_connection_id(std::string&& value);
  void set_connection_id(const char* value);
  void set_connection_id(const char* value, size_t size);
  std::string* mutable_connection_id();
  std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string values = 4;
  void clear_values();
  const std::string& values() const;
  void set_values(const std::string& value);
  void set_values(std::string&& value);
  void set_values(const char* value);
  void set_values(const char* value, size_t size);
  std::string* mutable_values();
  std::string* release_values();
  void set_allocated_values(std::string* values);
  private:
  const std::string& _internal_values() const;
  void _internal_set_values(const std::string& value);
  std::string* _internal_mutable_values();
  public:

  // .plc.TagType type = 3;
  void clear_type();
  ::plc::TagType type() const;
  void set_type(::plc::TagType value);
  private:
  ::plc::TagType _internal_type() const;
  void _internal_set_type(::plc::TagType value);
  public:

  // int32 offset = 5;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 length = 6;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool unsigned = 7;
  void clear_unsigned_();
  bool unsigned_() const;
  void set_unsigned_(bool value);
  private:
  bool _internal_unsigned_() const;
  void _internal_set_unsigned_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plc.WriteTagRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr values_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  bool unsigned__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class WriteTagRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.WriteTagRsp) */ {
 public:
  inline WriteTagRsp() : WriteTagRsp(nullptr) {}
  virtual ~WriteTagRsp();

  WriteTagRsp(const WriteTagRsp& from);
  WriteTagRsp(WriteTagRsp&& from) noexcept
    : WriteTagRsp() {
    *this = ::std::move(from);
  }

  inline WriteTagRsp& operator=(const WriteTagRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteTagRsp& operator=(WriteTagRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteTagRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteTagRsp* internal_default_instance() {
    return reinterpret_cast<const WriteTagRsp*>(
               &_WriteTagRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WriteTagRsp& a, WriteTagRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteTagRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteTagRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteTagRsp* New() const final {
    return CreateMaybeMessage<WriteTagRsp>(nullptr);
  }

  WriteTagRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteTagRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteTagRsp& from);
  void MergeFrom(const WriteTagRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteTagRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.WriteTagRsp";
  }
  protected:
  explicit WriteTagRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plc.WriteTagRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class ReadTagRqst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.ReadTagRqst) */ {
 public:
  inline ReadTagRqst() : ReadTagRqst(nullptr) {}
  virtual ~ReadTagRqst();

  ReadTagRqst(const ReadTagRqst& from);
  ReadTagRqst(ReadTagRqst&& from) noexcept
    : ReadTagRqst() {
    *this = ::std::move(from);
  }

  inline ReadTagRqst& operator=(const ReadTagRqst& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadTagRqst& operator=(ReadTagRqst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadTagRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadTagRqst* internal_default_instance() {
    return reinterpret_cast<const ReadTagRqst*>(
               &_ReadTagRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReadTagRqst& a, ReadTagRqst& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadTagRqst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadTagRqst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadTagRqst* New() const final {
    return CreateMaybeMessage<ReadTagRqst>(nullptr);
  }

  ReadTagRqst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadTagRqst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadTagRqst& from);
  void MergeFrom(const ReadTagRqst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadTagRqst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.ReadTagRqst";
  }
  protected:
  explicit ReadTagRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kLengthFieldNumber = 5,
    kUnsignedFieldNumber = 6,
  };
  // string connection_id = 1;
  void clear_connection_id();
  const std::string& connection_id() const;
  void set_connection_id(const std::string& value);
  void set_connection_id(std::string&& value);
  void set_connection_id(const char* value);
  void set_connection_id(const char* value, size_t size);
  std::string* mutable_connection_id();
  std::string* release_connection_id();
  void set_allocated_connection_id(std::string* connection_id);
  private:
  const std::string& _internal_connection_id() const;
  void _internal_set_connection_id(const std::string& value);
  std::string* _internal_mutable_connection_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .plc.TagType type = 3;
  void clear_type();
  ::plc::TagType type() const;
  void set_type(::plc::TagType value);
  private:
  ::plc::TagType _internal_type() const;
  void _internal_set_type(::plc::TagType value);
  public:

  // int32 offset = 4;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 length = 5;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool unsigned = 6;
  void clear_unsigned_();
  bool unsigned_() const;
  void set_unsigned_(bool value);
  private:
  bool _internal_unsigned_() const;
  void _internal_set_unsigned_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plc.ReadTagRqst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  bool unsigned__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class ReadTagRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.ReadTagRsp) */ {
 public:
  inline ReadTagRsp() : ReadTagRsp(nullptr) {}
  virtual ~ReadTagRsp();

  ReadTagRsp(const ReadTagRsp& from);
  ReadTagRsp(ReadTagRsp&& from) noexcept
    : ReadTagRsp() {
    *this = ::std::move(from);
  }

  inline ReadTagRsp& operator=(const ReadTagRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadTagRsp& operator=(ReadTagRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadTagRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadTagRsp* internal_default_instance() {
    return reinterpret_cast<const ReadTagRsp*>(
               &_ReadTagRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReadTagRsp& a, ReadTagRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadTagRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadTagRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadTagRsp* New() const final {
    return CreateMaybeMessage<ReadTagRsp>(nullptr);
  }

  ReadTagRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadTagRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadTagRsp& from);
  void MergeFrom(const ReadTagRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadTagRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.ReadTagRsp";
  }
  protected:
  explicit ReadTagRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // string values = 1;
  void clear_values();
  const std::string& values() const;
  void set_values(const std::string& value);
  void set_values(std::string&& value);
  void set_values(const char* value);
  void set_values(const char* value, size_t size);
  std::string* mutable_values();
  std::string* release_values();
  void set_allocated_values(std::string* values);
  private:
  const std::string& _internal_values() const;
  void _internal_set_values(const std::string& value);
  std::string* _internal_mutable_values();
  public:

  // @@protoc_insertion_point(class_scope:plc.ReadTagRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class StopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {}
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(nullptr);
  }

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:plc.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// -------------------------------------------------------------------

class StopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plc.StopResponse) */ {
 public:
  inline StopResponse() : StopResponse(nullptr) {}
  virtual ~StopResponse();

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopResponse* New() const final {
    return CreateMaybeMessage<StopResponse>(nullptr);
  }

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopResponse& from);
  void MergeFrom(const StopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plc.StopResponse";
  }
  protected:
  explicit StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_plc_2eproto);
    return ::descriptor_table_plc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:plc.StopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Connection

// string id = 1;
inline void Connection::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Connection::id() const {
  // @@protoc_insertion_point(field_get:plc.Connection.id)
  return _internal_id();
}
inline void Connection::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:plc.Connection.id)
}
inline std::string* Connection::mutable_id() {
  // @@protoc_insertion_point(field_mutable:plc.Connection.id)
  return _internal_mutable_id();
}
inline const std::string& Connection::_internal_id() const {
  return id_.Get();
}
inline void Connection::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Connection::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plc.Connection.id)
}
inline void Connection::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:plc.Connection.id)
}
inline void Connection::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plc.Connection.id)
}
inline std::string* Connection::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Connection::release_id() {
  // @@protoc_insertion_point(field_release:plc.Connection.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Connection::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plc.Connection.id)
}

// string ip = 2;
inline void Connection::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Connection::ip() const {
  // @@protoc_insertion_point(field_get:plc.Connection.ip)
  return _internal_ip();
}
inline void Connection::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:plc.Connection.ip)
}
inline std::string* Connection::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:plc.Connection.ip)
  return _internal_mutable_ip();
}
inline const std::string& Connection::_internal_ip() const {
  return ip_.Get();
}
inline void Connection::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Connection::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plc.Connection.ip)
}
inline void Connection::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:plc.Connection.ip)
}
inline void Connection::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plc.Connection.ip)
}
inline std::string* Connection::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Connection::release_ip() {
  // @@protoc_insertion_point(field_release:plc.Connection.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Connection::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plc.Connection.ip)
}

// .plc.ProtocolType protocol = 3;
inline void Connection::clear_protocol() {
  protocol_ = 0;
}
inline ::plc::ProtocolType Connection::_internal_protocol() const {
  return static_cast< ::plc::ProtocolType >(protocol_);
}
inline ::plc::ProtocolType Connection::protocol() const {
  // @@protoc_insertion_point(field_get:plc.Connection.protocol)
  return _internal_protocol();
}
inline void Connection::_internal_set_protocol(::plc::ProtocolType value) {
  
  protocol_ = value;
}
inline void Connection::set_protocol(::plc::ProtocolType value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:plc.Connection.protocol)
}

// .plc.CpuType cpu = 4;
inline void Connection::clear_cpu() {
  cpu_ = 0;
}
inline ::plc::CpuType Connection::_internal_cpu() const {
  return static_cast< ::plc::CpuType >(cpu_);
}
inline ::plc::CpuType Connection::cpu() const {
  // @@protoc_insertion_point(field_get:plc.Connection.cpu)
  return _internal_cpu();
}
inline void Connection::_internal_set_cpu(::plc::CpuType value) {
  
  cpu_ = value;
}
inline void Connection::set_cpu(::plc::CpuType value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:plc.Connection.cpu)
}

// .plc.PortType portType = 5;
inline void Connection::clear_porttype() {
  porttype_ = 0;
}
inline ::plc::PortType Connection::_internal_porttype() const {
  return static_cast< ::plc::PortType >(porttype_);
}
inline ::plc::PortType Connection::porttype() const {
  // @@protoc_insertion_point(field_get:plc.Connection.portType)
  return _internal_porttype();
}
inline void Connection::_internal_set_porttype(::plc::PortType value) {
  
  porttype_ = value;
}
inline void Connection::set_porttype(::plc::PortType value) {
  _internal_set_porttype(value);
  // @@protoc_insertion_point(field_set:plc.Connection.portType)
}

// int32 slot = 6;
inline void Connection::clear_slot() {
  slot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::slot() const {
  // @@protoc_insertion_point(field_get:plc.Connection.slot)
  return _internal_slot();
}
inline void Connection::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slot_ = value;
}
inline void Connection::set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:plc.Connection.slot)
}

// int32 rack = 7;
inline void Connection::clear_rack() {
  rack_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::_internal_rack() const {
  return rack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Connection::rack() const {
  // @@protoc_insertion_point(field_get:plc.Connection.rack)
  return _internal_rack();
}
inline void Connection::_internal_set_rack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rack_ = value;
}
inline void Connection::set_rack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rack(value);
  // @@protoc_insertion_point(field_set:plc.Connection.rack)
}

// int64 timeout = 8;
inline void Connection::clear_timeout() {
  timeout_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Connection::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Connection::timeout() const {
  // @@protoc_insertion_point(field_get:plc.Connection.timeout)
  return _internal_timeout();
}
inline void Connection::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timeout_ = value;
}
inline void Connection::set_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:plc.Connection.timeout)
}

// -------------------------------------------------------------------

// CreateConnectionRqst

// .plc.Connection connection = 1;
inline bool CreateConnectionRqst::_internal_has_connection() const {
  return this != internal_default_instance() && connection_ != nullptr;
}
inline bool CreateConnectionRqst::has_connection() const {
  return _internal_has_connection();
}
inline void CreateConnectionRqst::clear_connection() {
  if (GetArena() == nullptr && connection_ != nullptr) {
    delete connection_;
  }
  connection_ = nullptr;
}
inline const ::plc::Connection& CreateConnectionRqst::_internal_connection() const {
  const ::plc::Connection* p = connection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plc::Connection*>(
      &::plc::_Connection_default_instance_);
}
inline const ::plc::Connection& CreateConnectionRqst::connection() const {
  // @@protoc_insertion_point(field_get:plc.CreateConnectionRqst.connection)
  return _internal_connection();
}
inline void CreateConnectionRqst::unsafe_arena_set_allocated_connection(
    ::plc::Connection* connection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_);
  }
  connection_ = connection;
  if (connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plc.CreateConnectionRqst.connection)
}
inline ::plc::Connection* CreateConnectionRqst::release_connection() {
  
  ::plc::Connection* temp = connection_;
  connection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::plc::Connection* CreateConnectionRqst::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:plc.CreateConnectionRqst.connection)
  
  ::plc::Connection* temp = connection_;
  connection_ = nullptr;
  return temp;
}
inline ::plc::Connection* CreateConnectionRqst::_internal_mutable_connection() {
  
  if (connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::plc::Connection>(GetArena());
    connection_ = p;
  }
  return connection_;
}
inline ::plc::Connection* CreateConnectionRqst::mutable_connection() {
  // @@protoc_insertion_point(field_mutable:plc.CreateConnectionRqst.connection)
  return _internal_mutable_connection();
}
inline void CreateConnectionRqst::set_allocated_connection(::plc::Connection* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    
  } else {
    
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:plc.CreateConnectionRqst.connection)
}

// bool save = 2;
inline void CreateConnectionRqst::clear_save() {
  save_ = false;
}
inline bool CreateConnectionRqst::_internal_save() const {
  return save_;
}
inline bool CreateConnectionRqst::save() const {
  // @@protoc_insertion_point(field_get:plc.CreateConnectionRqst.save)
  return _internal_save();
}
inline void CreateConnectionRqst::_internal_set_save(bool value) {
  
  save_ = value;
}
inline void CreateConnectionRqst::set_save(bool value) {
  _internal_set_save(value);
  // @@protoc_insertion_point(field_set:plc.CreateConnectionRqst.save)
}

// -------------------------------------------------------------------

// CreateConnectionRsp

// bool result = 1;
inline void CreateConnectionRsp::clear_result() {
  result_ = false;
}
inline bool CreateConnectionRsp::_internal_result() const {
  return result_;
}
inline bool CreateConnectionRsp::result() const {
  // @@protoc_insertion_point(field_get:plc.CreateConnectionRsp.result)
  return _internal_result();
}
inline void CreateConnectionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void CreateConnectionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:plc.CreateConnectionRsp.result)
}

// -------------------------------------------------------------------

// GetConnectionRqst

// string id = 1;
inline void GetConnectionRqst::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetConnectionRqst::id() const {
  // @@protoc_insertion_point(field_get:plc.GetConnectionRqst.id)
  return _internal_id();
}
inline void GetConnectionRqst::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:plc.GetConnectionRqst.id)
}
inline std::string* GetConnectionRqst::mutable_id() {
  // @@protoc_insertion_point(field_mutable:plc.GetConnectionRqst.id)
  return _internal_mutable_id();
}
inline const std::string& GetConnectionRqst::_internal_id() const {
  return id_.Get();
}
inline void GetConnectionRqst::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetConnectionRqst::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plc.GetConnectionRqst.id)
}
inline void GetConnectionRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:plc.GetConnectionRqst.id)
}
inline void GetConnectionRqst::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plc.GetConnectionRqst.id)
}
inline std::string* GetConnectionRqst::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetConnectionRqst::release_id() {
  // @@protoc_insertion_point(field_release:plc.GetConnectionRqst.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConnectionRqst::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plc.GetConnectionRqst.id)
}

// -------------------------------------------------------------------

// GetConnectionRsp

// .plc.Connection connection = 1;
inline bool GetConnectionRsp::_internal_has_connection() const {
  return this != internal_default_instance() && connection_ != nullptr;
}
inline bool GetConnectionRsp::has_connection() const {
  return _internal_has_connection();
}
inline void GetConnectionRsp::clear_connection() {
  if (GetArena() == nullptr && connection_ != nullptr) {
    delete connection_;
  }
  connection_ = nullptr;
}
inline const ::plc::Connection& GetConnectionRsp::_internal_connection() const {
  const ::plc::Connection* p = connection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::plc::Connection*>(
      &::plc::_Connection_default_instance_);
}
inline const ::plc::Connection& GetConnectionRsp::connection() const {
  // @@protoc_insertion_point(field_get:plc.GetConnectionRsp.connection)
  return _internal_connection();
}
inline void GetConnectionRsp::unsafe_arena_set_allocated_connection(
    ::plc::Connection* connection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_);
  }
  connection_ = connection;
  if (connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plc.GetConnectionRsp.connection)
}
inline ::plc::Connection* GetConnectionRsp::release_connection() {
  
  ::plc::Connection* temp = connection_;
  connection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::plc::Connection* GetConnectionRsp::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:plc.GetConnectionRsp.connection)
  
  ::plc::Connection* temp = connection_;
  connection_ = nullptr;
  return temp;
}
inline ::plc::Connection* GetConnectionRsp::_internal_mutable_connection() {
  
  if (connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::plc::Connection>(GetArena());
    connection_ = p;
  }
  return connection_;
}
inline ::plc::Connection* GetConnectionRsp::mutable_connection() {
  // @@protoc_insertion_point(field_mutable:plc.GetConnectionRsp.connection)
  return _internal_mutable_connection();
}
inline void GetConnectionRsp::set_allocated_connection(::plc::Connection* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    
  } else {
    
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:plc.GetConnectionRsp.connection)
}

// -------------------------------------------------------------------

// CloseConnectionRqst

// string connection_id = 1;
inline void CloseConnectionRqst::clear_connection_id() {
  connection_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CloseConnectionRqst::connection_id() const {
  // @@protoc_insertion_point(field_get:plc.CloseConnectionRqst.connection_id)
  return _internal_connection_id();
}
inline void CloseConnectionRqst::set_connection_id(const std::string& value) {
  _internal_set_connection_id(value);
  // @@protoc_insertion_point(field_set:plc.CloseConnectionRqst.connection_id)
}
inline std::string* CloseConnectionRqst::mutable_connection_id() {
  // @@protoc_insertion_point(field_mutable:plc.CloseConnectionRqst.connection_id)
  return _internal_mutable_connection_id();
}
inline const std::string& CloseConnectionRqst::_internal_connection_id() const {
  return connection_id_.Get();
}
inline void CloseConnectionRqst::_internal_set_connection_id(const std::string& value) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CloseConnectionRqst::set_connection_id(std::string&& value) {
  
  connection_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plc.CloseConnectionRqst.connection_id)
}
inline void CloseConnectionRqst::set_connection_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:plc.CloseConnectionRqst.connection_id)
}
inline void CloseConnectionRqst::set_connection_id(const char* value,
    size_t size) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plc.CloseConnectionRqst.connection_id)
}
inline std::string* CloseConnectionRqst::_internal_mutable_connection_id() {
  
  return connection_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CloseConnectionRqst::release_connection_id() {
  // @@protoc_insertion_point(field_release:plc.CloseConnectionRqst.connection_id)
  return connection_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloseConnectionRqst::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    
  } else {
    
  }
  connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plc.CloseConnectionRqst.connection_id)
}

// -------------------------------------------------------------------

// CloseConnectionRsp

// bool result = 1;
inline void CloseConnectionRsp::clear_result() {
  result_ = false;
}
inline bool CloseConnectionRsp::_internal_result() const {
  return result_;
}
inline bool CloseConnectionRsp::result() const {
  // @@protoc_insertion_point(field_get:plc.CloseConnectionRsp.result)
  return _internal_result();
}
inline void CloseConnectionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void CloseConnectionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:plc.CloseConnectionRsp.result)
}

// -------------------------------------------------------------------

// DeleteConnectionRqst

// string id = 1;
inline void DeleteConnectionRqst::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteConnectionRqst::id() const {
  // @@protoc_insertion_point(field_get:plc.DeleteConnectionRqst.id)
  return _internal_id();
}
inline void DeleteConnectionRqst::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:plc.DeleteConnectionRqst.id)
}
inline std::string* DeleteConnectionRqst::mutable_id() {
  // @@protoc_insertion_point(field_mutable:plc.DeleteConnectionRqst.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteConnectionRqst::_internal_id() const {
  return id_.Get();
}
inline void DeleteConnectionRqst::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteConnectionRqst::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plc.DeleteConnectionRqst.id)
}
inline void DeleteConnectionRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:plc.DeleteConnectionRqst.id)
}
inline void DeleteConnectionRqst::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plc.DeleteConnectionRqst.id)
}
inline std::string* DeleteConnectionRqst::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteConnectionRqst::release_id() {
  // @@protoc_insertion_point(field_release:plc.DeleteConnectionRqst.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteConnectionRqst::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plc.DeleteConnectionRqst.id)
}

// -------------------------------------------------------------------

// DeleteConnectionRsp

// bool result = 1;
inline void DeleteConnectionRsp::clear_result() {
  result_ = false;
}
inline bool DeleteConnectionRsp::_internal_result() const {
  return result_;
}
inline bool DeleteConnectionRsp::result() const {
  // @@protoc_insertion_point(field_get:plc.DeleteConnectionRsp.result)
  return _internal_result();
}
inline void DeleteConnectionRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void DeleteConnectionRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:plc.DeleteConnectionRsp.result)
}

// -------------------------------------------------------------------

// WriteTagRqst

// string connection_id = 1;
inline void WriteTagRqst::clear_connection_id() {
  connection_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WriteTagRqst::connection_id() const {
  // @@protoc_insertion_point(field_get:plc.WriteTagRqst.connection_id)
  return _internal_connection_id();
}
inline void WriteTagRqst::set_connection_id(const std::string& value) {
  _internal_set_connection_id(value);
  // @@protoc_insertion_point(field_set:plc.WriteTagRqst.connection_id)
}
inline std::string* WriteTagRqst::mutable_connection_id() {
  // @@protoc_insertion_point(field_mutable:plc.WriteTagRqst.connection_id)
  return _internal_mutable_connection_id();
}
inline const std::string& WriteTagRqst::_internal_connection_id() const {
  return connection_id_.Get();
}
inline void WriteTagRqst::_internal_set_connection_id(const std::string& value) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WriteTagRqst::set_connection_id(std::string&& value) {
  
  connection_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plc.WriteTagRqst.connection_id)
}
inline void WriteTagRqst::set_connection_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:plc.WriteTagRqst.connection_id)
}
inline void WriteTagRqst::set_connection_id(const char* value,
    size_t size) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plc.WriteTagRqst.connection_id)
}
inline std::string* WriteTagRqst::_internal_mutable_connection_id() {
  
  return connection_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WriteTagRqst::release_connection_id() {
  // @@protoc_insertion_point(field_release:plc.WriteTagRqst.connection_id)
  return connection_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteTagRqst::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    
  } else {
    
  }
  connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plc.WriteTagRqst.connection_id)
}

// string name = 2;
inline void WriteTagRqst::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WriteTagRqst::name() const {
  // @@protoc_insertion_point(field_get:plc.WriteTagRqst.name)
  return _internal_name();
}
inline void WriteTagRqst::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:plc.WriteTagRqst.name)
}
inline std::string* WriteTagRqst::mutable_name() {
  // @@protoc_insertion_point(field_mutable:plc.WriteTagRqst.name)
  return _internal_mutable_name();
}
inline const std::string& WriteTagRqst::_internal_name() const {
  return name_.Get();
}
inline void WriteTagRqst::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WriteTagRqst::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plc.WriteTagRqst.name)
}
inline void WriteTagRqst::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:plc.WriteTagRqst.name)
}
inline void WriteTagRqst::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plc.WriteTagRqst.name)
}
inline std::string* WriteTagRqst::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WriteTagRqst::release_name() {
  // @@protoc_insertion_point(field_release:plc.WriteTagRqst.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteTagRqst::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plc.WriteTagRqst.name)
}

// .plc.TagType type = 3;
inline void WriteTagRqst::clear_type() {
  type_ = 0;
}
inline ::plc::TagType WriteTagRqst::_internal_type() const {
  return static_cast< ::plc::TagType >(type_);
}
inline ::plc::TagType WriteTagRqst::type() const {
  // @@protoc_insertion_point(field_get:plc.WriteTagRqst.type)
  return _internal_type();
}
inline void WriteTagRqst::_internal_set_type(::plc::TagType value) {
  
  type_ = value;
}
inline void WriteTagRqst::set_type(::plc::TagType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plc.WriteTagRqst.type)
}

// string values = 4;
inline void WriteTagRqst::clear_values() {
  values_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WriteTagRqst::values() const {
  // @@protoc_insertion_point(field_get:plc.WriteTagRqst.values)
  return _internal_values();
}
inline void WriteTagRqst::set_values(const std::string& value) {
  _internal_set_values(value);
  // @@protoc_insertion_point(field_set:plc.WriteTagRqst.values)
}
inline std::string* WriteTagRqst::mutable_values() {
  // @@protoc_insertion_point(field_mutable:plc.WriteTagRqst.values)
  return _internal_mutable_values();
}
inline const std::string& WriteTagRqst::_internal_values() const {
  return values_.Get();
}
inline void WriteTagRqst::_internal_set_values(const std::string& value) {
  
  values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WriteTagRqst::set_values(std::string&& value) {
  
  values_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plc.WriteTagRqst.values)
}
inline void WriteTagRqst::set_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:plc.WriteTagRqst.values)
}
inline void WriteTagRqst::set_values(const char* value,
    size_t size) {
  
  values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plc.WriteTagRqst.values)
}
inline std::string* WriteTagRqst::_internal_mutable_values() {
  
  return values_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WriteTagRqst::release_values() {
  // @@protoc_insertion_point(field_release:plc.WriteTagRqst.values)
  return values_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteTagRqst::set_allocated_values(std::string* values) {
  if (values != nullptr) {
    
  } else {
    
  }
  values_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), values,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plc.WriteTagRqst.values)
}

// int32 offset = 5;
inline void WriteTagRqst::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteTagRqst::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteTagRqst::offset() const {
  // @@protoc_insertion_point(field_get:plc.WriteTagRqst.offset)
  return _internal_offset();
}
inline void WriteTagRqst::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void WriteTagRqst::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:plc.WriteTagRqst.offset)
}

// int32 length = 6;
inline void WriteTagRqst::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteTagRqst::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WriteTagRqst::length() const {
  // @@protoc_insertion_point(field_get:plc.WriteTagRqst.length)
  return _internal_length();
}
inline void WriteTagRqst::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
}
inline void WriteTagRqst::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:plc.WriteTagRqst.length)
}

// bool unsigned = 7;
inline void WriteTagRqst::clear_unsigned_() {
  unsigned__ = false;
}
inline bool WriteTagRqst::_internal_unsigned_() const {
  return unsigned__;
}
inline bool WriteTagRqst::unsigned_() const {
  // @@protoc_insertion_point(field_get:plc.WriteTagRqst.unsigned)
  return _internal_unsigned_();
}
inline void WriteTagRqst::_internal_set_unsigned_(bool value) {
  
  unsigned__ = value;
}
inline void WriteTagRqst::set_unsigned_(bool value) {
  _internal_set_unsigned_(value);
  // @@protoc_insertion_point(field_set:plc.WriteTagRqst.unsigned)
}

// -------------------------------------------------------------------

// WriteTagRsp

// bool result = 1;
inline void WriteTagRsp::clear_result() {
  result_ = false;
}
inline bool WriteTagRsp::_internal_result() const {
  return result_;
}
inline bool WriteTagRsp::result() const {
  // @@protoc_insertion_point(field_get:plc.WriteTagRsp.result)
  return _internal_result();
}
inline void WriteTagRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void WriteTagRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:plc.WriteTagRsp.result)
}

// -------------------------------------------------------------------

// ReadTagRqst

// string connection_id = 1;
inline void ReadTagRqst::clear_connection_id() {
  connection_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadTagRqst::connection_id() const {
  // @@protoc_insertion_point(field_get:plc.ReadTagRqst.connection_id)
  return _internal_connection_id();
}
inline void ReadTagRqst::set_connection_id(const std::string& value) {
  _internal_set_connection_id(value);
  // @@protoc_insertion_point(field_set:plc.ReadTagRqst.connection_id)
}
inline std::string* ReadTagRqst::mutable_connection_id() {
  // @@protoc_insertion_point(field_mutable:plc.ReadTagRqst.connection_id)
  return _internal_mutable_connection_id();
}
inline const std::string& ReadTagRqst::_internal_connection_id() const {
  return connection_id_.Get();
}
inline void ReadTagRqst::_internal_set_connection_id(const std::string& value) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadTagRqst::set_connection_id(std::string&& value) {
  
  connection_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plc.ReadTagRqst.connection_id)
}
inline void ReadTagRqst::set_connection_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:plc.ReadTagRqst.connection_id)
}
inline void ReadTagRqst::set_connection_id(const char* value,
    size_t size) {
  
  connection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plc.ReadTagRqst.connection_id)
}
inline std::string* ReadTagRqst::_internal_mutable_connection_id() {
  
  return connection_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadTagRqst::release_connection_id() {
  // @@protoc_insertion_point(field_release:plc.ReadTagRqst.connection_id)
  return connection_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadTagRqst::set_allocated_connection_id(std::string* connection_id) {
  if (connection_id != nullptr) {
    
  } else {
    
  }
  connection_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plc.ReadTagRqst.connection_id)
}

// string name = 2;
inline void ReadTagRqst::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadTagRqst::name() const {
  // @@protoc_insertion_point(field_get:plc.ReadTagRqst.name)
  return _internal_name();
}
inline void ReadTagRqst::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:plc.ReadTagRqst.name)
}
inline std::string* ReadTagRqst::mutable_name() {
  // @@protoc_insertion_point(field_mutable:plc.ReadTagRqst.name)
  return _internal_mutable_name();
}
inline const std::string& ReadTagRqst::_internal_name() const {
  return name_.Get();
}
inline void ReadTagRqst::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadTagRqst::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plc.ReadTagRqst.name)
}
inline void ReadTagRqst::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:plc.ReadTagRqst.name)
}
inline void ReadTagRqst::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plc.ReadTagRqst.name)
}
inline std::string* ReadTagRqst::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadTagRqst::release_name() {
  // @@protoc_insertion_point(field_release:plc.ReadTagRqst.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadTagRqst::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plc.ReadTagRqst.name)
}

// .plc.TagType type = 3;
inline void ReadTagRqst::clear_type() {
  type_ = 0;
}
inline ::plc::TagType ReadTagRqst::_internal_type() const {
  return static_cast< ::plc::TagType >(type_);
}
inline ::plc::TagType ReadTagRqst::type() const {
  // @@protoc_insertion_point(field_get:plc.ReadTagRqst.type)
  return _internal_type();
}
inline void ReadTagRqst::_internal_set_type(::plc::TagType value) {
  
  type_ = value;
}
inline void ReadTagRqst::set_type(::plc::TagType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:plc.ReadTagRqst.type)
}

// int32 offset = 4;
inline void ReadTagRqst::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadTagRqst::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadTagRqst::offset() const {
  // @@protoc_insertion_point(field_get:plc.ReadTagRqst.offset)
  return _internal_offset();
}
inline void ReadTagRqst::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void ReadTagRqst::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:plc.ReadTagRqst.offset)
}

// int32 length = 5;
inline void ReadTagRqst::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadTagRqst::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadTagRqst::length() const {
  // @@protoc_insertion_point(field_get:plc.ReadTagRqst.length)
  return _internal_length();
}
inline void ReadTagRqst::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
}
inline void ReadTagRqst::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:plc.ReadTagRqst.length)
}

// bool unsigned = 6;
inline void ReadTagRqst::clear_unsigned_() {
  unsigned__ = false;
}
inline bool ReadTagRqst::_internal_unsigned_() const {
  return unsigned__;
}
inline bool ReadTagRqst::unsigned_() const {
  // @@protoc_insertion_point(field_get:plc.ReadTagRqst.unsigned)
  return _internal_unsigned_();
}
inline void ReadTagRqst::_internal_set_unsigned_(bool value) {
  
  unsigned__ = value;
}
inline void ReadTagRqst::set_unsigned_(bool value) {
  _internal_set_unsigned_(value);
  // @@protoc_insertion_point(field_set:plc.ReadTagRqst.unsigned)
}

// -------------------------------------------------------------------

// ReadTagRsp

// string values = 1;
inline void ReadTagRsp::clear_values() {
  values_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadTagRsp::values() const {
  // @@protoc_insertion_point(field_get:plc.ReadTagRsp.values)
  return _internal_values();
}
inline void ReadTagRsp::set_values(const std::string& value) {
  _internal_set_values(value);
  // @@protoc_insertion_point(field_set:plc.ReadTagRsp.values)
}
inline std::string* ReadTagRsp::mutable_values() {
  // @@protoc_insertion_point(field_mutable:plc.ReadTagRsp.values)
  return _internal_mutable_values();
}
inline const std::string& ReadTagRsp::_internal_values() const {
  return values_.Get();
}
inline void ReadTagRsp::_internal_set_values(const std::string& value) {
  
  values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadTagRsp::set_values(std::string&& value) {
  
  values_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plc.ReadTagRsp.values)
}
inline void ReadTagRsp::set_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:plc.ReadTagRsp.values)
}
inline void ReadTagRsp::set_values(const char* value,
    size_t size) {
  
  values_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plc.ReadTagRsp.values)
}
inline std::string* ReadTagRsp::_internal_mutable_values() {
  
  return values_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadTagRsp::release_values() {
  // @@protoc_insertion_point(field_release:plc.ReadTagRsp.values)
  return values_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadTagRsp::set_allocated_values(std::string* values) {
  if (values != nullptr) {
    
  } else {
    
  }
  values_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), values,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plc.ReadTagRsp.values)
}

// -------------------------------------------------------------------

// StopRequest

// -------------------------------------------------------------------

// StopResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::plc::CpuType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::plc::CpuType>() {
  return ::plc::CpuType_descriptor();
}
template <> struct is_proto_enum< ::plc::ProtocolType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::plc::ProtocolType>() {
  return ::plc::ProtocolType_descriptor();
}
template <> struct is_proto_enum< ::plc::PortType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::plc::PortType>() {
  return ::plc::PortType_descriptor();
}
template <> struct is_proto_enum< ::plc::TagType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::plc::TagType>() {
  return ::plc::TagType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_plc_2eproto
