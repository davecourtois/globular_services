// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: plc.proto

#include "plc.pb.h"
#include "plc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace plc {

static const char* PlcService_method_names[] = {
  "/plc.PlcService/Stop",
  "/plc.PlcService/CreateConnection",
  "/plc.PlcService/GetConnection",
  "/plc.PlcService/CloseConnection",
  "/plc.PlcService/DeleteConnection",
  "/plc.PlcService/ReadTag",
  "/plc.PlcService/WriteTag",
};

std::unique_ptr< PlcService::Stub> PlcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PlcService::Stub> stub(new PlcService::Stub(channel));
  return stub;
}

PlcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Stop_(PlcService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateConnection_(PlcService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConnection_(PlcService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseConnection_(PlcService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteConnection_(PlcService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadTag_(PlcService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteTag_(PlcService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PlcService::Stub::Stop(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::plc::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void PlcService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::plc::StopRequest* request, ::plc::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::plc::StopRequest* request, ::plc::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

void PlcService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::plc::StopResponse>* PlcService::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::plc::StopResponse>* PlcService::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, false);
}

::grpc::Status PlcService::Stub::CreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::plc::CreateConnectionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateConnection_, context, request, response);
}

void PlcService::Stub::experimental_async::CreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst* request, ::plc::CreateConnectionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateConnection_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::CreateConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CreateConnectionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateConnection_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::CreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst* request, ::plc::CreateConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateConnection_, context, request, response, reactor);
}

void PlcService::Stub::experimental_async::CreateConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CreateConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::plc::CreateConnectionRsp>* PlcService::Stub::AsyncCreateConnectionRaw(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::CreateConnectionRsp>::Create(channel_.get(), cq, rpcmethod_CreateConnection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::plc::CreateConnectionRsp>* PlcService::Stub::PrepareAsyncCreateConnectionRaw(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::CreateConnectionRsp>::Create(channel_.get(), cq, rpcmethod_CreateConnection_, context, request, false);
}

::grpc::Status PlcService::Stub::GetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::plc::GetConnectionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetConnection_, context, request, response);
}

void PlcService::Stub::experimental_async::GetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst* request, ::plc::GetConnectionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConnection_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::GetConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::GetConnectionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConnection_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::GetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst* request, ::plc::GetConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConnection_, context, request, response, reactor);
}

void PlcService::Stub::experimental_async::GetConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::GetConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::plc::GetConnectionRsp>* PlcService::Stub::AsyncGetConnectionRaw(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::GetConnectionRsp>::Create(channel_.get(), cq, rpcmethod_GetConnection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::plc::GetConnectionRsp>* PlcService::Stub::PrepareAsyncGetConnectionRaw(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::GetConnectionRsp>::Create(channel_.get(), cq, rpcmethod_GetConnection_, context, request, false);
}

::grpc::Status PlcService::Stub::CloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::plc::CloseConnectionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CloseConnection_, context, request, response);
}

void PlcService::Stub::experimental_async::CloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst* request, ::plc::CloseConnectionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseConnection_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::CloseConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CloseConnectionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseConnection_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::CloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst* request, ::plc::CloseConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseConnection_, context, request, response, reactor);
}

void PlcService::Stub::experimental_async::CloseConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CloseConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::plc::CloseConnectionRsp>* PlcService::Stub::AsyncCloseConnectionRaw(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::CloseConnectionRsp>::Create(channel_.get(), cq, rpcmethod_CloseConnection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::plc::CloseConnectionRsp>* PlcService::Stub::PrepareAsyncCloseConnectionRaw(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::CloseConnectionRsp>::Create(channel_.get(), cq, rpcmethod_CloseConnection_, context, request, false);
}

::grpc::Status PlcService::Stub::DeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::plc::DeleteConnectionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteConnection_, context, request, response);
}

void PlcService::Stub::experimental_async::DeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst* request, ::plc::DeleteConnectionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteConnection_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::DeleteConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::DeleteConnectionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteConnection_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::DeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst* request, ::plc::DeleteConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteConnection_, context, request, response, reactor);
}

void PlcService::Stub::experimental_async::DeleteConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::DeleteConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::plc::DeleteConnectionRsp>* PlcService::Stub::AsyncDeleteConnectionRaw(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::DeleteConnectionRsp>::Create(channel_.get(), cq, rpcmethod_DeleteConnection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::plc::DeleteConnectionRsp>* PlcService::Stub::PrepareAsyncDeleteConnectionRaw(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::DeleteConnectionRsp>::Create(channel_.get(), cq, rpcmethod_DeleteConnection_, context, request, false);
}

::grpc::Status PlcService::Stub::ReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::plc::ReadTagRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReadTag_, context, request, response);
}

void PlcService::Stub::experimental_async::ReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst* request, ::plc::ReadTagRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadTag_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::ReadTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::ReadTagRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadTag_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::ReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst* request, ::plc::ReadTagRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReadTag_, context, request, response, reactor);
}

void PlcService::Stub::experimental_async::ReadTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::ReadTagRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReadTag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::plc::ReadTagRsp>* PlcService::Stub::AsyncReadTagRaw(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::ReadTagRsp>::Create(channel_.get(), cq, rpcmethod_ReadTag_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::plc::ReadTagRsp>* PlcService::Stub::PrepareAsyncReadTagRaw(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::ReadTagRsp>::Create(channel_.get(), cq, rpcmethod_ReadTag_, context, request, false);
}

::grpc::Status PlcService::Stub::WriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::plc::WriteTagRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WriteTag_, context, request, response);
}

void PlcService::Stub::experimental_async::WriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst* request, ::plc::WriteTagRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WriteTag_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::WriteTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::WriteTagRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WriteTag_, context, request, response, std::move(f));
}

void PlcService::Stub::experimental_async::WriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst* request, ::plc::WriteTagRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WriteTag_, context, request, response, reactor);
}

void PlcService::Stub::experimental_async::WriteTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::WriteTagRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WriteTag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::plc::WriteTagRsp>* PlcService::Stub::AsyncWriteTagRaw(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::WriteTagRsp>::Create(channel_.get(), cq, rpcmethod_WriteTag_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::plc::WriteTagRsp>* PlcService::Stub::PrepareAsyncWriteTagRaw(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::plc::WriteTagRsp>::Create(channel_.get(), cq, rpcmethod_WriteTag_, context, request, false);
}

PlcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlcService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlcService::Service, ::plc::StopRequest, ::plc::StopResponse>(
          [](PlcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::plc::StopRequest* req,
             ::plc::StopResponse* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlcService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlcService::Service, ::plc::CreateConnectionRqst, ::plc::CreateConnectionRsp>(
          [](PlcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::plc::CreateConnectionRqst* req,
             ::plc::CreateConnectionRsp* resp) {
               return service->CreateConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlcService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlcService::Service, ::plc::GetConnectionRqst, ::plc::GetConnectionRsp>(
          [](PlcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::plc::GetConnectionRqst* req,
             ::plc::GetConnectionRsp* resp) {
               return service->GetConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlcService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlcService::Service, ::plc::CloseConnectionRqst, ::plc::CloseConnectionRsp>(
          [](PlcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::plc::CloseConnectionRqst* req,
             ::plc::CloseConnectionRsp* resp) {
               return service->CloseConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlcService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlcService::Service, ::plc::DeleteConnectionRqst, ::plc::DeleteConnectionRsp>(
          [](PlcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::plc::DeleteConnectionRqst* req,
             ::plc::DeleteConnectionRsp* resp) {
               return service->DeleteConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlcService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlcService::Service, ::plc::ReadTagRqst, ::plc::ReadTagRsp>(
          [](PlcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::plc::ReadTagRqst* req,
             ::plc::ReadTagRsp* resp) {
               return service->ReadTag(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlcService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlcService::Service, ::plc::WriteTagRqst, ::plc::WriteTagRsp>(
          [](PlcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::plc::WriteTagRqst* req,
             ::plc::WriteTagRsp* resp) {
               return service->WriteTag(ctx, req, resp);
             }, this)));
}

PlcService::Service::~Service() {
}

::grpc::Status PlcService::Service::Stop(::grpc::ServerContext* context, const ::plc::StopRequest* request, ::plc::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlcService::Service::CreateConnection(::grpc::ServerContext* context, const ::plc::CreateConnectionRqst* request, ::plc::CreateConnectionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlcService::Service::GetConnection(::grpc::ServerContext* context, const ::plc::GetConnectionRqst* request, ::plc::GetConnectionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlcService::Service::CloseConnection(::grpc::ServerContext* context, const ::plc::CloseConnectionRqst* request, ::plc::CloseConnectionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlcService::Service::DeleteConnection(::grpc::ServerContext* context, const ::plc::DeleteConnectionRqst* request, ::plc::DeleteConnectionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlcService::Service::ReadTag(::grpc::ServerContext* context, const ::plc::ReadTagRqst* request, ::plc::ReadTagRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlcService::Service::WriteTag(::grpc::ServerContext* context, const ::plc::WriteTagRqst* request, ::plc::WriteTagRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace plc

