// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: plc.proto
// Original file comments:
// *
// You can use plc as starter project.
#ifndef GRPC_plc_2eproto__INCLUDED
#define GRPC_plc_2eproto__INCLUDED

#include "plc.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace plc {

// *
// That service is use to give access to a PLC on a network via Ethenet/ip
// https://github.com/kyle-github/libplctag
class PlcService final {
 public:
  static constexpr char const* service_full_name() {
    return "plc.PlcService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Stop the server.
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::plc::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    // * Connection functions *
    //
    // Create a connection.
    virtual ::grpc::Status CreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::plc::CreateConnectionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::CreateConnectionRsp>> AsyncCreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::CreateConnectionRsp>>(AsyncCreateConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::CreateConnectionRsp>> PrepareAsyncCreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::CreateConnectionRsp>>(PrepareAsyncCreateConnectionRaw(context, request, cq));
    }
    // Get a connection with a given id
    virtual ::grpc::Status GetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::plc::GetConnectionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::GetConnectionRsp>> AsyncGetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::GetConnectionRsp>>(AsyncGetConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::GetConnectionRsp>> PrepareAsyncGetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::GetConnectionRsp>>(PrepareAsyncGetConnectionRaw(context, request, cq));
    }
    // Close a connection
    virtual ::grpc::Status CloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::plc::CloseConnectionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::CloseConnectionRsp>> AsyncCloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::CloseConnectionRsp>>(AsyncCloseConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::CloseConnectionRsp>> PrepareAsyncCloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::CloseConnectionRsp>>(PrepareAsyncCloseConnectionRaw(context, request, cq));
    }
    // Delete a connection.
    virtual ::grpc::Status DeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::plc::DeleteConnectionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::DeleteConnectionRsp>> AsyncDeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::DeleteConnectionRsp>>(AsyncDeleteConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::DeleteConnectionRsp>> PrepareAsyncDeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::DeleteConnectionRsp>>(PrepareAsyncDeleteConnectionRaw(context, request, cq));
    }
    // Read Tag
    virtual ::grpc::Status ReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::plc::ReadTagRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::ReadTagRsp>> AsyncReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::ReadTagRsp>>(AsyncReadTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::ReadTagRsp>> PrepareAsyncReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::ReadTagRsp>>(PrepareAsyncReadTagRaw(context, request, cq));
    }
    // Write Tag
    virtual ::grpc::Status WriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::plc::WriteTagRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::WriteTagRsp>> AsyncWriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::WriteTagRsp>>(AsyncWriteTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::WriteTagRsp>> PrepareAsyncWriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plc::WriteTagRsp>>(PrepareAsyncWriteTagRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Stop the server.
      virtual void Stop(::grpc::ClientContext* context, const ::plc::StopRequest* request, ::plc::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Stop(::grpc::ClientContext* context, const ::plc::StopRequest* request, ::plc::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Stop(::grpc::ClientContext* context, const ::plc::StopRequest* request, ::plc::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Connection functions *
      //
      // Create a connection.
      virtual void CreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst* request, ::plc::CreateConnectionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CreateConnectionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst* request, ::plc::CreateConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst* request, ::plc::CreateConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CreateConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CreateConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get a connection with a given id
      virtual void GetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst* request, ::plc::GetConnectionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::GetConnectionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst* request, ::plc::GetConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst* request, ::plc::GetConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::GetConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::GetConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Close a connection
      virtual void CloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst* request, ::plc::CloseConnectionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CloseConnectionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst* request, ::plc::CloseConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst* request, ::plc::CloseConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CloseConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CloseConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete a connection.
      virtual void DeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst* request, ::plc::DeleteConnectionRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::DeleteConnectionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst* request, ::plc::DeleteConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst* request, ::plc::DeleteConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::DeleteConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::DeleteConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Read Tag
      virtual void ReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst* request, ::plc::ReadTagRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::ReadTagRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst* request, ::plc::ReadTagRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst* request, ::plc::ReadTagRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReadTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::ReadTagRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReadTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::ReadTagRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Write Tag
      virtual void WriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst* request, ::plc::WriteTagRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::WriteTagRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void WriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst* request, ::plc::WriteTagRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void WriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst* request, ::plc::WriteTagRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void WriteTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::WriteTagRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void WriteTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::WriteTagRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::CreateConnectionRsp>* AsyncCreateConnectionRaw(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::CreateConnectionRsp>* PrepareAsyncCreateConnectionRaw(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::GetConnectionRsp>* AsyncGetConnectionRaw(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::GetConnectionRsp>* PrepareAsyncGetConnectionRaw(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::CloseConnectionRsp>* AsyncCloseConnectionRaw(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::CloseConnectionRsp>* PrepareAsyncCloseConnectionRaw(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::DeleteConnectionRsp>* AsyncDeleteConnectionRaw(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::DeleteConnectionRsp>* PrepareAsyncDeleteConnectionRaw(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::ReadTagRsp>* AsyncReadTagRaw(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::ReadTagRsp>* PrepareAsyncReadTagRaw(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::WriteTagRsp>* AsyncWriteTagRaw(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plc::WriteTagRsp>* PrepareAsyncWriteTagRaw(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::plc::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    ::grpc::Status CreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::plc::CreateConnectionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::CreateConnectionRsp>> AsyncCreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::CreateConnectionRsp>>(AsyncCreateConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::CreateConnectionRsp>> PrepareAsyncCreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::CreateConnectionRsp>>(PrepareAsyncCreateConnectionRaw(context, request, cq));
    }
    ::grpc::Status GetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::plc::GetConnectionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::GetConnectionRsp>> AsyncGetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::GetConnectionRsp>>(AsyncGetConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::GetConnectionRsp>> PrepareAsyncGetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::GetConnectionRsp>>(PrepareAsyncGetConnectionRaw(context, request, cq));
    }
    ::grpc::Status CloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::plc::CloseConnectionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::CloseConnectionRsp>> AsyncCloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::CloseConnectionRsp>>(AsyncCloseConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::CloseConnectionRsp>> PrepareAsyncCloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::CloseConnectionRsp>>(PrepareAsyncCloseConnectionRaw(context, request, cq));
    }
    ::grpc::Status DeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::plc::DeleteConnectionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::DeleteConnectionRsp>> AsyncDeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::DeleteConnectionRsp>>(AsyncDeleteConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::DeleteConnectionRsp>> PrepareAsyncDeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::DeleteConnectionRsp>>(PrepareAsyncDeleteConnectionRaw(context, request, cq));
    }
    ::grpc::Status ReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::plc::ReadTagRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::ReadTagRsp>> AsyncReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::ReadTagRsp>>(AsyncReadTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::ReadTagRsp>> PrepareAsyncReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::ReadTagRsp>>(PrepareAsyncReadTagRaw(context, request, cq));
    }
    ::grpc::Status WriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::plc::WriteTagRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::WriteTagRsp>> AsyncWriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::WriteTagRsp>>(AsyncWriteTagRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::WriteTagRsp>> PrepareAsyncWriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plc::WriteTagRsp>>(PrepareAsyncWriteTagRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Stop(::grpc::ClientContext* context, const ::plc::StopRequest* request, ::plc::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::StopResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Stop(::grpc::ClientContext* context, const ::plc::StopRequest* request, ::plc::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Stop(::grpc::ClientContext* context, const ::plc::StopRequest* request, ::plc::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst* request, ::plc::CreateConnectionRsp* response, std::function<void(::grpc::Status)>) override;
      void CreateConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CreateConnectionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst* request, ::plc::CreateConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateConnection(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst* request, ::plc::CreateConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CreateConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CreateConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst* request, ::plc::GetConnectionRsp* response, std::function<void(::grpc::Status)>) override;
      void GetConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::GetConnectionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst* request, ::plc::GetConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetConnection(::grpc::ClientContext* context, const ::plc::GetConnectionRqst* request, ::plc::GetConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::GetConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::GetConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst* request, ::plc::CloseConnectionRsp* response, std::function<void(::grpc::Status)>) override;
      void CloseConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CloseConnectionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst* request, ::plc::CloseConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseConnection(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst* request, ::plc::CloseConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CloseConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::CloseConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst* request, ::plc::DeleteConnectionRsp* response, std::function<void(::grpc::Status)>) override;
      void DeleteConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::DeleteConnectionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst* request, ::plc::DeleteConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteConnection(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst* request, ::plc::DeleteConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::DeleteConnectionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteConnection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::DeleteConnectionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst* request, ::plc::ReadTagRsp* response, std::function<void(::grpc::Status)>) override;
      void ReadTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::ReadTagRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst* request, ::plc::ReadTagRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReadTag(::grpc::ClientContext* context, const ::plc::ReadTagRqst* request, ::plc::ReadTagRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReadTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::ReadTagRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReadTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::ReadTagRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void WriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst* request, ::plc::WriteTagRsp* response, std::function<void(::grpc::Status)>) override;
      void WriteTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::WriteTagRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void WriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst* request, ::plc::WriteTagRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void WriteTag(::grpc::ClientContext* context, const ::plc::WriteTagRqst* request, ::plc::WriteTagRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void WriteTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::WriteTagRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void WriteTag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::plc::WriteTagRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::plc::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::plc::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::CreateConnectionRsp>* AsyncCreateConnectionRaw(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::CreateConnectionRsp>* PrepareAsyncCreateConnectionRaw(::grpc::ClientContext* context, const ::plc::CreateConnectionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::GetConnectionRsp>* AsyncGetConnectionRaw(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::GetConnectionRsp>* PrepareAsyncGetConnectionRaw(::grpc::ClientContext* context, const ::plc::GetConnectionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::CloseConnectionRsp>* AsyncCloseConnectionRaw(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::CloseConnectionRsp>* PrepareAsyncCloseConnectionRaw(::grpc::ClientContext* context, const ::plc::CloseConnectionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::DeleteConnectionRsp>* AsyncDeleteConnectionRaw(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::DeleteConnectionRsp>* PrepareAsyncDeleteConnectionRaw(::grpc::ClientContext* context, const ::plc::DeleteConnectionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::ReadTagRsp>* AsyncReadTagRaw(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::ReadTagRsp>* PrepareAsyncReadTagRaw(::grpc::ClientContext* context, const ::plc::ReadTagRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::WriteTagRsp>* AsyncWriteTagRaw(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plc::WriteTagRsp>* PrepareAsyncWriteTagRaw(::grpc::ClientContext* context, const ::plc::WriteTagRqst& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateConnection_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConnection_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseConnection_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteConnection_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadTag_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteTag_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Stop the server.
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::plc::StopRequest* request, ::plc::StopResponse* response);
    // * Connection functions *
    //
    // Create a connection.
    virtual ::grpc::Status CreateConnection(::grpc::ServerContext* context, const ::plc::CreateConnectionRqst* request, ::plc::CreateConnectionRsp* response);
    // Get a connection with a given id
    virtual ::grpc::Status GetConnection(::grpc::ServerContext* context, const ::plc::GetConnectionRqst* request, ::plc::GetConnectionRsp* response);
    // Close a connection
    virtual ::grpc::Status CloseConnection(::grpc::ServerContext* context, const ::plc::CloseConnectionRqst* request, ::plc::CloseConnectionRsp* response);
    // Delete a connection.
    virtual ::grpc::Status DeleteConnection(::grpc::ServerContext* context, const ::plc::DeleteConnectionRqst* request, ::plc::DeleteConnectionRsp* response);
    // Read Tag
    virtual ::grpc::Status ReadTag(::grpc::ServerContext* context, const ::plc::ReadTagRqst* request, ::plc::ReadTagRsp* response);
    // Write Tag
    virtual ::grpc::Status WriteTag(::grpc::ServerContext* context, const ::plc::WriteTagRqst* request, ::plc::WriteTagRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::plc::StopRequest* /*request*/, ::plc::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::plc::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::plc::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateConnection() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConnection(::grpc::ServerContext* /*context*/, const ::plc::CreateConnectionRqst* /*request*/, ::plc::CreateConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateConnection(::grpc::ServerContext* context, ::plc::CreateConnectionRqst* request, ::grpc::ServerAsyncResponseWriter< ::plc::CreateConnectionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConnection() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnection(::grpc::ServerContext* /*context*/, const ::plc::GetConnectionRqst* /*request*/, ::plc::GetConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConnection(::grpc::ServerContext* context, ::plc::GetConnectionRqst* request, ::grpc::ServerAsyncResponseWriter< ::plc::GetConnectionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseConnection() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CloseConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseConnection(::grpc::ServerContext* /*context*/, const ::plc::CloseConnectionRqst* /*request*/, ::plc::CloseConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseConnection(::grpc::ServerContext* context, ::plc::CloseConnectionRqst* request, ::grpc::ServerAsyncResponseWriter< ::plc::CloseConnectionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteConnection() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConnection(::grpc::ServerContext* /*context*/, const ::plc::DeleteConnectionRqst* /*request*/, ::plc::DeleteConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteConnection(::grpc::ServerContext* context, ::plc::DeleteConnectionRqst* request, ::grpc::ServerAsyncResponseWriter< ::plc::DeleteConnectionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadTag() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReadTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadTag(::grpc::ServerContext* /*context*/, const ::plc::ReadTagRqst* /*request*/, ::plc::ReadTagRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadTag(::grpc::ServerContext* context, ::plc::ReadTagRqst* request, ::grpc::ServerAsyncResponseWriter< ::plc::ReadTagRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteTag() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_WriteTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteTag(::grpc::ServerContext* /*context*/, const ::plc::WriteTagRqst* /*request*/, ::plc::WriteTagRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteTag(::grpc::ServerContext* context, ::plc::WriteTagRqst* request, ::grpc::ServerAsyncResponseWriter< ::plc::WriteTagRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Stop<WithAsyncMethod_CreateConnection<WithAsyncMethod_GetConnection<WithAsyncMethod_CloseConnection<WithAsyncMethod_DeleteConnection<WithAsyncMethod_ReadTag<WithAsyncMethod_WriteTag<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::plc::StopRequest, ::plc::StopResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::plc::StopRequest* request, ::plc::StopResponse* response) { return this->Stop(context, request, response); }));}
    void SetMessageAllocatorFor_Stop(
        ::grpc::experimental::MessageAllocator< ::plc::StopRequest, ::plc::StopResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::plc::StopRequest, ::plc::StopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::plc::StopRequest* /*request*/, ::plc::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::plc::StopRequest* /*request*/, ::plc::StopResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::plc::StopRequest* /*request*/, ::plc::StopResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateConnection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::plc::CreateConnectionRqst, ::plc::CreateConnectionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::plc::CreateConnectionRqst* request, ::plc::CreateConnectionRsp* response) { return this->CreateConnection(context, request, response); }));}
    void SetMessageAllocatorFor_CreateConnection(
        ::grpc::experimental::MessageAllocator< ::plc::CreateConnectionRqst, ::plc::CreateConnectionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::plc::CreateConnectionRqst, ::plc::CreateConnectionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConnection(::grpc::ServerContext* /*context*/, const ::plc::CreateConnectionRqst* /*request*/, ::plc::CreateConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::plc::CreateConnectionRqst* /*request*/, ::plc::CreateConnectionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateConnection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::plc::CreateConnectionRqst* /*request*/, ::plc::CreateConnectionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetConnection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::plc::GetConnectionRqst, ::plc::GetConnectionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::plc::GetConnectionRqst* request, ::plc::GetConnectionRsp* response) { return this->GetConnection(context, request, response); }));}
    void SetMessageAllocatorFor_GetConnection(
        ::grpc::experimental::MessageAllocator< ::plc::GetConnectionRqst, ::plc::GetConnectionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::plc::GetConnectionRqst, ::plc::GetConnectionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnection(::grpc::ServerContext* /*context*/, const ::plc::GetConnectionRqst* /*request*/, ::plc::GetConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::plc::GetConnectionRqst* /*request*/, ::plc::GetConnectionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetConnection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::plc::GetConnectionRqst* /*request*/, ::plc::GetConnectionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CloseConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CloseConnection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::plc::CloseConnectionRqst, ::plc::CloseConnectionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::plc::CloseConnectionRqst* request, ::plc::CloseConnectionRsp* response) { return this->CloseConnection(context, request, response); }));}
    void SetMessageAllocatorFor_CloseConnection(
        ::grpc::experimental::MessageAllocator< ::plc::CloseConnectionRqst, ::plc::CloseConnectionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::plc::CloseConnectionRqst, ::plc::CloseConnectionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CloseConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseConnection(::grpc::ServerContext* /*context*/, const ::plc::CloseConnectionRqst* /*request*/, ::plc::CloseConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::plc::CloseConnectionRqst* /*request*/, ::plc::CloseConnectionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseConnection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::plc::CloseConnectionRqst* /*request*/, ::plc::CloseConnectionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteConnection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::plc::DeleteConnectionRqst, ::plc::DeleteConnectionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::plc::DeleteConnectionRqst* request, ::plc::DeleteConnectionRsp* response) { return this->DeleteConnection(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteConnection(
        ::grpc::experimental::MessageAllocator< ::plc::DeleteConnectionRqst, ::plc::DeleteConnectionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::plc::DeleteConnectionRqst, ::plc::DeleteConnectionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConnection(::grpc::ServerContext* /*context*/, const ::plc::DeleteConnectionRqst* /*request*/, ::plc::DeleteConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::plc::DeleteConnectionRqst* /*request*/, ::plc::DeleteConnectionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteConnection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::plc::DeleteConnectionRqst* /*request*/, ::plc::DeleteConnectionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReadTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReadTag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::plc::ReadTagRqst, ::plc::ReadTagRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::plc::ReadTagRqst* request, ::plc::ReadTagRsp* response) { return this->ReadTag(context, request, response); }));}
    void SetMessageAllocatorFor_ReadTag(
        ::grpc::experimental::MessageAllocator< ::plc::ReadTagRqst, ::plc::ReadTagRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::plc::ReadTagRqst, ::plc::ReadTagRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReadTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadTag(::grpc::ServerContext* /*context*/, const ::plc::ReadTagRqst* /*request*/, ::plc::ReadTagRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReadTag(
      ::grpc::CallbackServerContext* /*context*/, const ::plc::ReadTagRqst* /*request*/, ::plc::ReadTagRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReadTag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::plc::ReadTagRqst* /*request*/, ::plc::ReadTagRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WriteTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_WriteTag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::plc::WriteTagRqst, ::plc::WriteTagRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::plc::WriteTagRqst* request, ::plc::WriteTagRsp* response) { return this->WriteTag(context, request, response); }));}
    void SetMessageAllocatorFor_WriteTag(
        ::grpc::experimental::MessageAllocator< ::plc::WriteTagRqst, ::plc::WriteTagRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::plc::WriteTagRqst, ::plc::WriteTagRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_WriteTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteTag(::grpc::ServerContext* /*context*/, const ::plc::WriteTagRqst* /*request*/, ::plc::WriteTagRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WriteTag(
      ::grpc::CallbackServerContext* /*context*/, const ::plc::WriteTagRqst* /*request*/, ::plc::WriteTagRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WriteTag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::plc::WriteTagRqst* /*request*/, ::plc::WriteTagRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Stop<ExperimentalWithCallbackMethod_CreateConnection<ExperimentalWithCallbackMethod_GetConnection<ExperimentalWithCallbackMethod_CloseConnection<ExperimentalWithCallbackMethod_DeleteConnection<ExperimentalWithCallbackMethod_ReadTag<ExperimentalWithCallbackMethod_WriteTag<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Stop<ExperimentalWithCallbackMethod_CreateConnection<ExperimentalWithCallbackMethod_GetConnection<ExperimentalWithCallbackMethod_CloseConnection<ExperimentalWithCallbackMethod_DeleteConnection<ExperimentalWithCallbackMethod_ReadTag<ExperimentalWithCallbackMethod_WriteTag<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::plc::StopRequest* /*request*/, ::plc::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateConnection() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConnection(::grpc::ServerContext* /*context*/, const ::plc::CreateConnectionRqst* /*request*/, ::plc::CreateConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConnection() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnection(::grpc::ServerContext* /*context*/, const ::plc::GetConnectionRqst* /*request*/, ::plc::GetConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseConnection() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CloseConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseConnection(::grpc::ServerContext* /*context*/, const ::plc::CloseConnectionRqst* /*request*/, ::plc::CloseConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteConnection() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConnection(::grpc::ServerContext* /*context*/, const ::plc::DeleteConnectionRqst* /*request*/, ::plc::DeleteConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadTag() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReadTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadTag(::grpc::ServerContext* /*context*/, const ::plc::ReadTagRqst* /*request*/, ::plc::ReadTagRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteTag() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_WriteTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteTag(::grpc::ServerContext* /*context*/, const ::plc::WriteTagRqst* /*request*/, ::plc::WriteTagRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::plc::StopRequest* /*request*/, ::plc::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateConnection() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConnection(::grpc::ServerContext* /*context*/, const ::plc::CreateConnectionRqst* /*request*/, ::plc::CreateConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateConnection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConnection() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnection(::grpc::ServerContext* /*context*/, const ::plc::GetConnectionRqst* /*request*/, ::plc::GetConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConnection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseConnection() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CloseConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseConnection(::grpc::ServerContext* /*context*/, const ::plc::CloseConnectionRqst* /*request*/, ::plc::CloseConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseConnection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteConnection() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConnection(::grpc::ServerContext* /*context*/, const ::plc::DeleteConnectionRqst* /*request*/, ::plc::DeleteConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteConnection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadTag() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReadTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadTag(::grpc::ServerContext* /*context*/, const ::plc::ReadTagRqst* /*request*/, ::plc::ReadTagRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteTag() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_WriteTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteTag(::grpc::ServerContext* /*context*/, const ::plc::WriteTagRqst* /*request*/, ::plc::WriteTagRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteTag(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::plc::StopRequest* /*request*/, ::plc::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateConnection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateConnection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateConnection(::grpc::ServerContext* /*context*/, const ::plc::CreateConnectionRqst* /*request*/, ::plc::CreateConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateConnection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetConnection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConnection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnection(::grpc::ServerContext* /*context*/, const ::plc::GetConnectionRqst* /*request*/, ::plc::GetConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetConnection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CloseConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CloseConnection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseConnection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CloseConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseConnection(::grpc::ServerContext* /*context*/, const ::plc::CloseConnectionRqst* /*request*/, ::plc::CloseConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseConnection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteConnection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteConnection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteConnection(::grpc::ServerContext* /*context*/, const ::plc::DeleteConnectionRqst* /*request*/, ::plc::DeleteConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteConnection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReadTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReadTag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadTag(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReadTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadTag(::grpc::ServerContext* /*context*/, const ::plc::ReadTagRqst* /*request*/, ::plc::ReadTagRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReadTag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReadTag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WriteTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_WriteTag() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteTag(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_WriteTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteTag(::grpc::ServerContext* /*context*/, const ::plc::WriteTagRqst* /*request*/, ::plc::WriteTagRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WriteTag(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WriteTag(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::plc::StopRequest, ::plc::StopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::plc::StopRequest, ::plc::StopResponse>* streamer) {
                       return this->StreamedStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::plc::StopRequest* /*request*/, ::plc::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::plc::StopRequest,::plc::StopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateConnection() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::plc::CreateConnectionRqst, ::plc::CreateConnectionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::plc::CreateConnectionRqst, ::plc::CreateConnectionRsp>* streamer) {
                       return this->StreamedCreateConnection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateConnection(::grpc::ServerContext* /*context*/, const ::plc::CreateConnectionRqst* /*request*/, ::plc::CreateConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateConnection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::plc::CreateConnectionRqst,::plc::CreateConnectionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConnection() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::plc::GetConnectionRqst, ::plc::GetConnectionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::plc::GetConnectionRqst, ::plc::GetConnectionRsp>* streamer) {
                       return this->StreamedGetConnection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConnection(::grpc::ServerContext* /*context*/, const ::plc::GetConnectionRqst* /*request*/, ::plc::GetConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConnection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::plc::GetConnectionRqst,::plc::GetConnectionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseConnection() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::plc::CloseConnectionRqst, ::plc::CloseConnectionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::plc::CloseConnectionRqst, ::plc::CloseConnectionRsp>* streamer) {
                       return this->StreamedCloseConnection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseConnection(::grpc::ServerContext* /*context*/, const ::plc::CloseConnectionRqst* /*request*/, ::plc::CloseConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseConnection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::plc::CloseConnectionRqst,::plc::CloseConnectionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteConnection() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::plc::DeleteConnectionRqst, ::plc::DeleteConnectionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::plc::DeleteConnectionRqst, ::plc::DeleteConnectionRsp>* streamer) {
                       return this->StreamedDeleteConnection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteConnection(::grpc::ServerContext* /*context*/, const ::plc::DeleteConnectionRqst* /*request*/, ::plc::DeleteConnectionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteConnection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::plc::DeleteConnectionRqst,::plc::DeleteConnectionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadTag() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::plc::ReadTagRqst, ::plc::ReadTagRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::plc::ReadTagRqst, ::plc::ReadTagRsp>* streamer) {
                       return this->StreamedReadTag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadTag(::grpc::ServerContext* /*context*/, const ::plc::ReadTagRqst* /*request*/, ::plc::ReadTagRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::plc::ReadTagRqst,::plc::ReadTagRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteTag : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteTag() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::plc::WriteTagRqst, ::plc::WriteTagRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::plc::WriteTagRqst, ::plc::WriteTagRsp>* streamer) {
                       return this->StreamedWriteTag(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteTag() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteTag(::grpc::ServerContext* /*context*/, const ::plc::WriteTagRqst* /*request*/, ::plc::WriteTagRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteTag(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::plc::WriteTagRqst,::plc::WriteTagRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_CreateConnection<WithStreamedUnaryMethod_GetConnection<WithStreamedUnaryMethod_CloseConnection<WithStreamedUnaryMethod_DeleteConnection<WithStreamedUnaryMethod_ReadTag<WithStreamedUnaryMethod_WriteTag<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_CreateConnection<WithStreamedUnaryMethod_GetConnection<WithStreamedUnaryMethod_CloseConnection<WithStreamedUnaryMethod_DeleteConnection<WithStreamedUnaryMethod_ReadTag<WithStreamedUnaryMethod_WriteTag<Service > > > > > > > StreamedService;
};

}  // namespace plc


#endif  // GRPC_plc_2eproto__INCLUDED
