/**
 * Service management functionality.
 */
syntax = "proto3";
package packages;

option go_package="packages/packagespb";


enum PackageType {
	UNKNOW_TYPE = 0; // not work correctly with ToJson function...
	SERVICE_TYPE = 1;
	APPLICATION_TYPE = 2;
}

/**
 * A package can contain Service or Application. The type will be use to dertmine 
 * what the package contain.
 */
message PackageDescriptor {
	string id = 1;
	string name = 2;
	PackageType type = 3;
	string publisherId = 4; // Cam be Organization or Account.
	string version = 6;
	string description = 7;
	repeated string repositories = 8; // The list of repositories that has the package
	repeated string discoveries = 9; // The list of dicoveries that has the package
	repeated string keywords = 10; // keywords that describe the application/service
	repeated string actions = 11; // optional, contain the list of actions required by that application / services
}


/** That message will contain the information to update a service on a node. **/
message PackageBundle {
	PackageDescriptor descriptor = 1;
	string buildNumber = 2;
	string plaform = 3;
	
	/** binairies must be a tar.gz file **/
	bytes binairies = 4;
}

message PublishPackageDescriptorRequest {
	PackageDescriptor descriptor = 1;
}

message PublishPackageDescriptorResponse {
	bool result = 1;
}

message UploadBundleRequest {
	bytes data = 1;
}

message UploadBundleResponse {
	bool result = 1;
}

message DownloadBundleRequest {
	PackageDescriptor descriptor = 1;
	string plaform = 2;
}

message DownloadBundleResponse {
	bytes data = 1;
}

message GetPackageDescriptorRequest {
	string serviceId = 1;
	string publisherId = 2;
}

message GetPackageDescriptorResponse {
	// Return one of more service descriptor with various versions.
	repeated PackageDescriptor results = 1;
}

message GetPackagesDescriptorRequest {
	string query = 1;
}

message GetPackagesDescriptorResponse {
	repeated PackageDescriptor results = 1;
}

message SetPackageDescriptorRequest {
	PackageDescriptor descriptor = 1;
}

message SetPackageDescriptorResponse {
	bool result = 1;
}

message FindPackagesDescriptorRequest {
	repeated string keywords = 1;
}

message FindPackagesDescriptorResponse {
	repeated PackageDescriptor results = 1;
}

/** functionality to retreive a service **/
service PackageDiscovery {
	
	/** Search service by keywords **/
	rpc FindPackages(FindPackagesDescriptorRequest) returns (FindPackagesDescriptorResponse);
	
	/** Return the list of all packages **/
	rpc GetPackageDescriptor(GetPackageDescriptorRequest) returns ( GetPackageDescriptorResponse);
	
	/** Return the list of all packages **/
	rpc GetPackagesDescriptor(GetPackagesDescriptorRequest) returns(stream GetPackagesDescriptorResponse);
	
	/** Save a service descriptor **/
	rpc SetPackageDescriptor(SetPackageDescriptorRequest) returns(SetPackageDescriptorResponse);
	
	/** Publish a service to service discovery **/
	rpc PublishPackageDescriptor(PublishPackageDescriptorRequest) returns(PublishPackageDescriptorResponse);
	
}

/** functionality to download/upload a service **/
service PackageRepository {
	/** Download a service from a service directory **/
	rpc DownloadBundle(DownloadBundleRequest) returns(stream DownloadBundleResponse);
	
	/** Upload a service to a service directory **/
	rpc UploadBundle(stream UploadBundleRequest) returns(UploadBundleResponse);
}