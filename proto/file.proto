/**
 * You can use echo as starter project.
 */
syntax = "proto3";

package file;

option go_package="file/filepb";

message Empty {}

message ReadDirRequest {
	string path = 1;
	bool recursive = 2;
	int32 thumnailWidth = 3;
	int32 thumnailHeight = 4;
}

message ReadDirResponse {
	bytes data = 1; // The json string containing the list of files.
}

message CreateDirRequest {
	string path = 1; // The parent path
	string name = 2; // the new directory name
}

message CreateDirResponse {
	bool result = 1;
}

message DeleteDirRequest {
	string path = 1;
}

message DeleteDirResponse {
	bool result = 1;
}

message RenameRequest {
	string path = 1; // the path of the directory
	string new_name = 2; // the new name.
	string old_name = 3; // the old name.
}

message RenameResponse {
	bool result = 1;
}

message GetFileInfoRequest {
	string path = 1;
	int32 thumnailWidth = 2;
	int32 thumnailHeight = 3;
}

message GetFileInfoResponse {
	string data = 1; // The json string containing the file info.
}

// Read file as a binary file.
message ReadFileRequest {
	string path = 1;
}

message ReadFileResponse {
	bytes data = 1; // The file content.
}

// Read file as a binary file.
message SaveFileRequest {
	oneof file{
		string path = 1;
		bytes  data = 2;
	}
}

message SaveFileResponse {
	bool result = 1;
}

// Delete file
message DeleteFileRequest {
	string path = 1;
}

message DeleteFileResponse {
	bool result = 1;
}

// Return all images thumnails from a directory
message GetThumbnailsRequest{
	string path = 1;
	bool recursive = 2;
	int32 thumnailWidth = 3;
	int32 thumnailHeight = 4;
}

message GetThumbnailsResponse {
	bytes data = 1; // The json string containing the list of files.
}

// Write the execel file on the server.
message CreateArchiveRequest{
	repeated string paths = 1; // The directory to archive
	string name = 2; // the name
}

message CreateArchiveResponse{
	string result = 1;
}

// Write the execel file on the server.
message WriteExcelFileRequest{
	string path = 1;
	string data = 2; // JSON object containing {{"name":"page1", "data"[[1,2,3][4,5,6][7,8,9]]}}
}

message WriteExcelFileResponse{
	bool result = 1; // return true by default.
}

message HtmlToPdfRqst{
	string html = 1; // The html values.
}

message HtmlToPdfResponse{
	bytes pdf = 2; //The pdf data file.
}

message StopRequest {
	
}

message StopResponse {
	
}

service FileService {
  	// Stop the server.
 	rpc Stop(StopRequest) returns (StopResponse);

	// Return a JOSN string containing the directories informations.
	// In case of image I will return a thumnail of the image so 
	// so the response string can became large.
	rpc ReadDir(ReadDirRequest) returns (stream ReadDirResponse){};

	// Create a new directory
 	rpc CreateDir(CreateDirRequest) returns (CreateDirResponse){};
	
	// Delete a directories
	rpc DeleteDir(DeleteDirRequest) returns (DeleteDirResponse){};
	
	// Rename a file/directory
	rpc Rename(RenameRequest) returns (RenameResponse){};
	
	// Create an archive from a given dir and set it with name.
	rpc CreateAchive(CreateArchiveRequest) returns (CreateArchiveResponse);
	
	// Get file info, if the file exist it return the file size, name, thumnail...
	rpc GetFileInfo(GetFileInfoRequest) returns (GetFileInfoResponse){};

	// Read file, can be use for small to medium file...
	rpc ReadFile(ReadFileRequest) returns (stream ReadFileResponse){};
	
	// Save a file on the server...
	rpc SaveFile(stream SaveFileRequest) returns (SaveFileResponse){};
	
	// Delete file
	rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse){};
	
	// Specific files...
	rpc GetThumbnails(GetThumbnailsRequest) returns (stream GetThumbnailsResponse){};
	
	// Excel files...
	rpc WriteExcelFile(WriteExcelFileRequest) returns (WriteExcelFileResponse){};
	
	// Convert html to pdf.
	rpc HtmlToPdf(HtmlToPdfRqst) returns(HtmlToPdfResponse){};
}