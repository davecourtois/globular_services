/**
 * You can use plc as starter project.
 */
syntax = "proto3";
package plc;

option go_package="plc/plcpb";

//  AB CPU models: plc,plc5,slc,slc500,micrologix,mlgx,compactlogix,clgx,lgx,controllogix,contrologix,flexlogix,flgx
enum CpuType {
	// Alan Bradley
	PLC = 0;
	PLC5 = 1;
	SLC = 2;
	SLC500 = 3;
	MICROLOGIX = 4;
	MLGX = 5;
	COMPACTLOGIX = 6;
	CLGX = 7;
	LGX = 8;
	CONTROLLOGIX = 9;
	CONTROLOGIX = 10;
	FLEXLOGIX = 11;
	FLGX = 12;
	
	// Simmens
	SIMMENS = 14;
	
}

enum ProtocolType {
	// Alan Bradley
	AB_EIP = 0;
	AB_CIP = 1;
}

enum PortType {
	// alan bradley
	BACKPLANE = 0;
	NET_ETHERNET = 1;
	DH_PLUS_CHANNEL_A = 2;
	DH_PLUS_CHANNEL_B = 3;
	// Simmens
	SERIAL = 4;
	TCP = 5;
}

message Connection {
	string id = 1; // The connection id for subsequent use.
	string ip = 2; // ipv4 address
	ProtocolType protocol = 3;
	CpuType cpu = 4;
	PortType portType = 5;
	int32 slot = 6; //  Slot number where cpu is installed: 0,1..
	int32 rack = 7; // Simmens 
	int64 timeout = 8;
}

// Create connection
message CreateConnectionRqst {
	Connection connection = 1;
	bool save = 2; // if true it will save in the config file.
}

message CreateConnectionRsp {
	bool result = 1;
}

// get connection
message GetConnectionRqst {
	string id = 1;
}

message GetConnectionRsp {
	Connection connection = 1;
}

// Close connection
message CloseConnectionRqst {
	string connection_id = 1;
}

message  CloseConnectionRsp {
	bool result = 1;
}

// Delete connection
message DeleteConnectionRqst {
	string id = 1;
}

message DeleteConnectionRsp {
	bool result = 1;
}

// Define the type of tag to store in the plc.
enum TagType {
	 BOOL = 0;
	 SINT = 1;
	 INT  = 2;
	 DINT = 3;
	 REAL = 4;
	 LREAL = 5;
	 LINT =6;
}


// Write tag.
message WriteTagRqst {
	string connection_id = 1;
	string name = 2;
	TagType type =3;
	string values = 4; // the value will be convert depending of type.
	int32  offset = 5; // the offset where to begin to write.
	int32  length = 6; // the length of the array if is an array
	bool unsigned = 7; // if true it read as unsigned value.
}

message  WriteTagRsp {
	bool result = 1;
}

// Read tag.
message ReadTagRqst {
	string connection_id = 1;
	string name = 2;
	TagType type =3;
	int32 offset = 4;
	int32  length = 5; // the length of the array if is an array
	bool unsigned = 6; // if true it read as unsigned values.
}

message  ReadTagRsp {
	string values = 1; // return the value as string
}

message StopRequest {
	
}

message StopResponse {
	
}

/**
 * That service is use to give access to a PLC on a network via Ethenet/ip
 * https://github.com/kyle-github/libplctag
 */
service PlcService {
	// Stop the server.
 	rpc Stop(StopRequest) returns (StopResponse);
	
	/** Connection functions **/
	// Create a connection.
	rpc CreateConnection(CreateConnectionRqst) returns (CreateConnectionRsp){};
	
	// Get a connection with a given id
	rpc GetConnection(GetConnectionRqst) returns (GetConnectionRsp){};
		
	// Close a connection
	rpc CloseConnection(CloseConnectionRqst) returns (CloseConnectionRsp){};
	
	// Delete a connection.
	rpc DeleteConnection(DeleteConnectionRqst) returns (DeleteConnectionRsp){};

	// Read Tag
	rpc ReadTag(ReadTagRqst) returns (ReadTagRsp){};
	
	// Write Tag
	rpc WriteTag(WriteTagRqst) returns (WriteTagRsp){};
}