/**
 * Management and definition of ressources.
 */
syntax = "proto3";
package ressource;

option go_package = "ressource/ressourcepb";

/** Account **/
message Account {
	string id=1;
	string name=2;
	string email =3;
	string password =4;
}

/** A role is simply a list of actions that an account can call **/
message Role {
	string id=1;
	string name=2;
	repeated string  actions=3; // must be a registered action from grpc.
}

message RegisterAccountRqst{
	Account account = 1;
	string password = 2;
	string confirm_password = 3;
}

message RegisterAccountRsp {
	string result = 1;
}

message DeleteAccountRqst{
	string id = 1;
}

message DeleteAccountRsp {
	string result = 1;
}

/** Authenticate the user **/
message AuthenticateRqst{
	string name = 1;
	string password =2;
}

message AuthenticateRsp {
	string token = 1;
}

/** Refresh token **/
message RefreshTokenRqst{
	string token = 1;
}

message RefreshTokenRsp {
	string token = 1;
}

message AddAccountRoleRqst{
	string accountId = 1;
	string roleId = 2;
}

message AddAccountRoleRsp{
	bool result = 1;
}

message RemoveAccountRoleRqst{
	string accountId = 1;
	string roleId = 2;
}

message RemoveAccountRoleRsp{
	bool result = 1;
}

message CreateRoleRqst{
	Role role = 1;
}

message CreateRoleRsp{
	bool result = 1;
}

message DeleteRoleRqst{
	string roleId = 1;
}

message DeleteRoleRsp{
	bool result = 1;
}


message AddRoleActionRqst{
	string roleId = 1;
	string action = 2;
}

message AddRoleActionRsp{
	bool result = 1;
}

message RemoveRoleActionRqst{
	string roleId = 1;
	string action = 2;
}

message RemoveRoleActionRsp{
	bool result = 1;
}

message AddApplicationActionRqst{
	string applicationId = 1;
	string action = 2;
}

message AddApplicationActionRsp{
	bool result = 1;
}

message RemoveApplicationActionRqst{
	string applicationId = 1;
	string action = 2;
}

message RemoveApplicationActionRsp{
	bool result = 1;
}

message GetAllActionsRqst{

}

message GetAllActionsRsp{
	repeated string actions = 1;
}

message DeleteApplicationRqst{
	string applicationId = 1;
}

message DeleteApplicationRsp{
	bool result = 1;
}

////////////////////////////////////////////////////////////////////////////////
// Ressource permissions
////////////////////////////////////////////////////////////////////////////////

// Define a permission to a file or a directory.
message RessourcePermission {
	int32 number = 1;
	string path = 2;
	oneof owner {
		string user = 3;
		string role = 4;
		string application = 5;
		string service = 6;
	}
}

// Get the permission for a given file.
message GetPermissionsRqst{
	string path = 1;
}

message GetPermissionsRsp{
	string permissions = 1;
}

// set the permission for a given file.
message SetPermissionRqst{
	RessourcePermission permission = 1;
}

message SetPermissionRsp{
	bool result = 1;
}

// set the permission for a given file.
message DeletePermissionsRqst{
	string path = 1;
	string owner = 2;
}

message DeletePermissionsRsp{
	bool result = 1;
}

// Retrun a json with the root file information.
message GetAllFilesInfoRqst{
	
}

message GetAllFilesInfoRsp{
	string result = 1;
}

// Retrun a json with applications informations.
message GetAllApplicationsInfoRqst{
	
}

message GetAllApplicationsInfoRsp{
	string result = 1;
}

message UserSyncInfos{
	string base = 1;
	string query = 2; // ldap query to get the list of users.
	string id = 3; // user account id
	string email = 4; // ldap email attribute
}

message GroupSyncInfos{
	string base = 1;
	string query = 2; // ldap query
	string id = 3;
}

// That Information is use to synchronize LDAP user with Globular Account and
// LDAP group with Globular Role.
message LdapSyncInfos {
	string ldapSeriveId = 1;
	string connectionId = 2;
	int32 refresh = 3;
	UserSyncInfos userSyncInfos = 4;
	GroupSyncInfos groupSyncInfos = 5;
}

// Create Account and Roles from LDAP User and Groups
message SynchronizeLdapRqst{
	LdapSyncInfos syncInfo = 1;
}

message SynchronizeLdapRsp{
	bool result = 1;
}

// Set a ressource owner.
message SetRessourceOwnerRqst{
	string path = 1;
	string owner = 2;
}

// Get the ressource owner
message SetRessourceOwnerRsp{
	bool result = 1;
}

// Get the ressource Owners
message GetRessourceOwnersRqst{
	string path = 1;
}

message GetRessourceOwnersRsp{
	repeated string owners = 1;
}

// Delete a ressource Owner.
message DeleteRessourceOwnerRqst{
	string path = 1;
	string owner = 2;
}

message DeleteRessourceOwnerRsp{
	bool result = 1;
}

// Delete a ressource Owner.
message DeleteRessourceOwnersRqst{
	string path = 1;
}

message DeleteRessourceOwnersRsp{
	bool result = 1;
}

message ValidateTokenRqst{
	string token = 1;
}

message ValidateTokenRsp{
	string clientId = 1;
	int64 expired = 2;
}

message ValidateApplicationAccessRqst{
	string name=1;
	string method=2;
}

message ValidateApplicationAccessRsp{
	bool result=1;
}


message ValidateUserAccessRqst{
	string token=1;
	string method=2;
}

message ValidateUserAccessRsp{
	bool result=1;
}


message ValidateUserRessourceAccessRqst{
	string token=1;
	string method=2;
	string path=3;
	int32 permission=4;
}

message ValidateUserRessourceAccessRsp{
	bool result=1;
}

message ValidateApplicationRessourceAccessRqst{
	string name=1;
	string method=2;
	string path=3;
	int32 permission=4;
}

message ValidateApplicationRessourceAccessRsp{
	bool result=1;
}

message AccountExistRqst{
	string id = 1;
}

message AccountExistRsp{
	bool result=1;
}

message DeleteAccountPermissionsRqst{
	string id = 1;
}

message DeleteAccountPermissionsRsp{
	bool result=1;
}

message DeleteRolePermissionsRqst{
	string id = 1;
}

message DeleteRolePermissionsRsp{
	bool result=1;
}

enum LogType{
	INFO_MESSAGE=0;
	ERROR_MESSAGE=1;
}

message LogInfo{
	int64 date = 1;
	LogType type = 2;
	string application = 3;
	string userId = 4;
	string userName = 5;
	string method = 6;
	string message = 7;
}

message LogRqst{
	LogInfo info = 1;
}

message LogRsp{
	bool result=1;
}

message DeleteLogRqst{
	LogInfo log = 1;
}

message DeleteLogRsp{
	bool result=1;
}

message SetLogMethodRqst{
	string method = 1;
}

message SetLogMethodRsp{
	bool result=1;
}

message ResetLogMethodRqst{
	string method = 1;
}

message ResetLogMethodRsp{
	bool result=1;
}

message GetLogMethodsRqst{
}

message GetLogMethodsRsp{
	repeated string methods = 1;
}

message GetLogRqst{
	string query = 1;
}

message GetLogRsp{
	repeated LogInfo info = 1;
}

message ClearAllLogRqst{
	LogType type = 1;
}

message ClearAllLogRsp{
	bool result=1;
}

////////////////// Ressource //////////////////

/** A ressource can be anything with a path an a name **/
message Ressource {
	string path = 1; // can be recursive.
	string name = 2;
	int64 modified =3;
	int64 size = 4;
}

message SetRessourceRqst{
	Ressource ressource = 1;
}

message SetRessourceRsp{
	bool result=1;
}

// gRpc action can modified, delete or create ressource.
// This message specified what parameter of the Action permission
// as effect on a ressource and if so what permission is require.
message ActionParameterRessourcePermission{
	int32 index = 1; // The index of the parameter in the function start from 0
	int32 permission = 2; // The assciated ressource permission nunber.
}

message SetActionPermissionRqst{
	string action = 1;
	repeated ActionParameterRessourcePermission actionParameterRessourcePermissions = 2;
}

message SetActionPermissionRsp{
	bool result=1;
}

message GetActionPermissionRqst{
	string action = 1;
}

message GetActionPermissionRsp{
	repeated ActionParameterRessourcePermission actionParameterRessourcePermissions = 1;
}

message RemoveRessourceRqst{
	Ressource ressource = 1;
}

message RemoveRessourceRsp{
	bool result=1;
}

message	GetRessourcesRqst{
	string path = 1;
	string name = 2;
}

message	GetRessourcesRsp{
	repeated Ressource ressources = 1;
}

message RemoveActionPermissionRqst{
	string action = 1;
}

message RemoveActionPermissionRsp{
	bool result=1;
}

/** File permission specific infos. **/
message CreateDirPermissionsRqst{
	string token = 1;
	string path = 2;
	string name = 3;
}

message CreateDirPermissionsRsp{
	bool result=1;
}

message RenameFilePermissionRqst{
	string path = 1;
	string oldName = 2;
	string newName = 3;
}

message RenameFilePermissionRsp{
	bool result=1;
}

message DeleteDirPermissionsRqst{
	string path = 1;
}

message DeleteDirPermissionsRsp{
	bool result=1;
}

message DeleteFilePermissionsRqst{
	string path = 1;
}

message DeleteFilePermissionsRsp{
	bool result=1;
}


/**
 * That service is use to manage Globular ressource like permissions and accounts
 * or role. The service made use of Persistence service to store various 
 * objects.
 */
service RessourceService {

	/** Register a new Account **/
	rpc RegisterAccount(RegisterAccountRqst) returns (RegisterAccountRsp);
	
	/** Delete an account **/
	rpc DeleteAccount(DeleteAccountRqst) returns(DeleteAccountRsp);
	
	/** Authenticate a user **/
	rpc Authenticate(AuthenticateRqst) returns(AuthenticateRsp);
	
	/** Synchronize Ressource with LDAP if connection exist **/
	rpc SynchronizeLdap(SynchronizeLdapRqst) returns(SynchronizeLdapRsp);
	
	/** Refresh token get a new token **/
	rpc RefreshToken(RefreshTokenRqst) returns(RefreshTokenRsp);
	
	/** Add role to a given account **/
	rpc AddAccountRole(AddAccountRoleRqst) returns(AddAccountRoleRsp);

	/** Remove a role from a given account **/
	rpc RemoveAccountRole(RemoveAccountRoleRqst) returns(RemoveAccountRoleRsp);
	
	/** Create a role with given action list **/
	rpc CreateRole(CreateRoleRqst) returns(CreateRoleRsp);
	
	/** Delete a role with a given id **/
	rpc DeleteRole(DeleteRoleRqst) returns(DeleteRoleRsp);
	
	/** Append an action to existing role. **/
	rpc AddRoleAction(AddRoleActionRqst) returns(AddRoleActionRsp);
	
	/** Remove an action to existing role. **/
	rpc RemoveRoleAction(RemoveRoleActionRqst) returns(RemoveRoleActionRsp);
	
	/** Append an action to existing applications. **/
	rpc AddApplicationAction(AddApplicationActionRqst) returns(AddApplicationActionRsp);
	
	/** Remove an action to existing applications. **/
	rpc RemoveApplicationAction(RemoveApplicationActionRqst) returns(RemoveApplicationActionRsp);
	
	/** Get all actions **/
	rpc GetAllActions(GetAllActionsRqst) returns(GetAllActionsRsp);
	
	/**  **/
	rpc GetPermissions(GetPermissionsRqst) returns(GetPermissionsRsp);
	
	/** Set a file permission, create new one if not already exist. **/
	rpc SetPermission(SetPermissionRqst) returns(SetPermissionRsp);
	
	/** Delete a file permissions **/
	rpc DeletePermissions(DeletePermissionsRqst) returns(DeletePermissionsRsp);
	
	/** Set Ressource owner **/
	rpc SetRessourceOwner(SetRessourceOwnerRqst) returns(SetRessourceOwnerRsp);
	
	/** Get the ressource owners **/
	rpc GetRessourceOwners(GetRessourceOwnersRqst) returns(GetRessourceOwnersRsp);
	
	/** Delete the ressource owner **/
	rpc DeleteRessourceOwner(DeleteRessourceOwnerRqst) returns(DeleteRessourceOwnerRsp);
	
	/** Delete the ressource owners **/
	rpc DeleteRessourceOwners(DeleteRessourceOwnersRqst) returns(DeleteRessourceOwnersRsp);
	
	/** Retrun a json string with all file info **/
	rpc GetAllFilesInfo(GetAllFilesInfoRqst) returns(GetAllFilesInfoRsp);
	
	/** Validate a token **/
	rpc ValidateToken(ValidateTokenRqst) returns (ValidateTokenRsp);
	
	/** Validate if user can access a given ressource. **/
	rpc ValidateUserRessourceAccess(ValidateUserRessourceAccessRqst) returns (ValidateUserRessourceAccessRsp);
	
	/** Validate if application can access a given ressouce. **/
	rpc ValidateApplicationRessourceAccess(ValidateApplicationRessourceAccessRqst) returns (ValidateApplicationRessourceAccessRsp);
	
	/** Validate if user can access a given method. **/
	rpc ValidateUserAccess(ValidateUserAccessRqst) returns (ValidateUserAccessRsp);
	
	/** Validate if application can access a given method. **/
	rpc ValidateApplicationAccess(ValidateApplicationAccessRqst) returns (ValidateApplicationAccessRsp);
		
	/** Delete all permission for a given account **/
	rpc DeleteAccountPermissions(DeleteAccountPermissionsRqst) returns(DeleteAccountPermissionsRsp);
	
	/** Delete all permission for a given role **/
	rpc DeleteRolePermissions(DeleteRolePermissionsRqst) returns(DeleteRolePermissionsRsp);
	
	/** Return a json string with all applications informations **/
	rpc GetAllApplicationsInfo(GetAllApplicationsInfoRqst) returns(GetAllApplicationsInfoRsp);
	
	/** Delete an application from the server. **/
	rpc DeleteApplication(DeleteApplicationRqst) returns(DeleteApplicationRsp);
	
	/** Set a method into the log... **/
	rpc Log(LogRqst) returns(LogRsp);
	
	/** Get the list of logs **/
	rpc GetLog(GetLogRqst) returns(stream GetLogRsp);

	/** Delete a single log entry **/
	rpc DeleteLog(DeleteLogRqst) returns(DeleteLogRsp);
	
	/** Delete all log **/
	rpc ClearAllLog(ClearAllLogRqst) returns(ClearAllLogRsp);

	/** Get all ressources */
	rpc GetRessources(GetRessourcesRqst) returns(stream GetRessourcesRsp);
	
	/** Set a ressource from a client (custom service) to globular */
	rpc SetRessource(SetRessourceRqst) returns(SetRessourceRsp);
	
	/** Remove a ressource from a client (custom service) to globular */
	rpc RemoveRessource(RemoveRessourceRqst) returns(RemoveRessourceRsp);
	
	/** Set ressource action permission **/
	rpc SetActionPermission(SetActionPermissionRqst) returns(SetActionPermissionRsp);
	
	/** Remove ressource action permission **/
	rpc RemoveActionPermission(RemoveActionPermissionRqst) returns(RemoveActionPermissionRsp);
	
	/** Get ressource action permission **/
	rpc GetActionPermission(GetActionPermissionRqst) returns(GetActionPermissionRsp);
	
	/** Create Permission for a dir (recursive) **/
	rpc CreateDirPermissions(CreateDirPermissionsRqst) returns(CreateDirPermissionsRsp);
	
	/** Rename file/dir permission **/
	rpc RenameFilePermission(RenameFilePermissionRqst) returns(RenameFilePermissionRsp);
	
	/** Delete Permission for a dir (recursive) **/
	rpc DeleteDirPermissions(DeleteDirPermissionsRqst) returns(DeleteDirPermissionsRsp);
	
	/** Delete a single file permission **/
	rpc DeleteFilePermissions(DeleteFilePermissionsRqst) returns(DeleteFilePermissionsRsp);
	
}
