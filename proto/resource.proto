/**
 * Management and definition of resources.
 */
syntax = "proto3";
package resource;

option go_package = "resource/resourcepb";

message UserSyncInfos{
	string base = 1;
	string query = 2; // ldap query to get the list of users.
	string id = 3; // user account id
	string email = 4; // ldap email attribute
}

message GroupSyncInfos{
	string base = 1;
	string query = 2; // ldap query
	string id = 3;
}

// That Information is use to synchronize LDAP user with Globular Account and
// LDAP group with Globular Role.
message LdapSyncInfos {
	string ldapSeriveId = 1;
	string connectionId = 2;
	int32 refresh = 3;
	UserSyncInfos userSyncInfos = 4;
	GroupSyncInfos groupSyncInfos = 5;
}

// Create Account and Roles from LDAP User and Groups
message SynchronizeLdapRqst{
	LdapSyncInfos syncInfo = 1;
}

message SynchronizeLdapRsp{
	bool result = 1;
}

message ValidateTokenRqst{
	string token = 1;
}

message ValidateTokenRsp{
	string clientId = 1;
	int64 expired = 2;
}

message GetAllActionsRqst{

}

message GetAllActionsRsp{
	repeated string actions = 1;
}

/** Account **/
message Account {
	string id=1;
	string name=2;
	string email =3;
	string password =4;
}

/** A role is simply a list of actions that an account can call **/
message Role {
	string id=1;
	string name=2;
	repeated string  actions=3; // must be a registered action from grpc.
}

message RegisterAccountRqst{
	Account account = 1;
	string confirm_password = 3;
}

message RegisterAccountRsp {
	string result = 1;
}

message DeleteAccountRqst{
	string id = 1;
}

message DeleteAccountRsp {
	string result = 1;
}

/** Authenticate the user **/
message AuthenticateRqst{
	string name = 1;
	string password =2;
}

message AuthenticateRsp {
	string token = 1;
}

/** Refresh token **/
message RefreshTokenRqst{
	string token = 1;
}

message RefreshTokenRsp {
	string token = 1;
}

message AddAccountRoleRqst{
	string accountId = 1;
	string roleId = 2;
}

message AddAccountRoleRsp{
	bool result = 1;
}

message RemoveAccountRoleRqst{
	string accountId = 1;
	string roleId = 2;
}

message RemoveAccountRoleRsp{
	bool result = 1;
}

message CreateRoleRqst{
	Role role = 1;
}

message CreateRoleRsp{
	bool result = 1;
}

message DeleteRoleRqst{
	string roleId = 1;
}

message DeleteRoleRsp{
	bool result = 1;
}

message DeleteApplicationRqst{
	string applicationId = 1;
}

message DeleteApplicationRsp{
	bool result = 1;
}

// Retrun a json with applications informations.
message GetAllApplicationsInfoRqst{
	
}

message GetAllApplicationsInfoRsp{
	string result = 1;
}


message AccountExistRqst{
	string id = 1;
}

message AccountExistRsp{
	bool result=1;
}

////////////////////////////////////////////////////////////////////////////////
// Group's
////////////////////////////////////////////////////////////////////////////////

/** a globular group **/
message Group {
	string id = 1;
	string name = 2; // must be unique on the network.
	repeated string  members=3; // can be empty...
}

/**
 * Register group request.
 */
message CreateGroupRqst{
	Group group = 1;
}

message CreateGroupRsp{
	bool result = 1;
}

/**
 * Return list of groups
 */
message GetGroupsRqst{
	string query = 1; // filter...
}

message GetGroupsRsp{
	repeated Group groups = 1;
}

/**
 * Remove a peer from the network.
 */
message DeleteGroupRqst{
	string group = 1;
}

message DeleteGroupRsp{
	bool result = 1;
}

message AddGroupMemberAccountRqst{
	string groupId = 1;
	string accountId = 2;
}

message AddGroupMemberAccountRsp{
	bool result = 1;
}

message RemoveGroupMemberAccountRqst{
	string groupId = 1;
	string accountId = 2;
}

message RemoveGroupMemberAccountRsp{
	bool result = 1;
}

////////////////////////////////////////////////////////////////////////////////
// Organization's
////////////////////////////////////////////////////////////////////////////////

/** a globular server **/
message Organization {
	string id = 1;
	string name = 2; // must be unique on the network.
	
	// Aggregations
	repeated string  accounts=3;
	repeated string  groups=4;
	repeated string  roles=5;
	repeated string  applications=6;
}

/**
 * Register peer request.
 */
message CreateOrganizationRqst{
	Organization organization = 1;
}

message CreateOrganizationRsp{
	bool result = 1;
}

/**
 * Return list of Organization
 */
message GetOrganizationsRqst{
	string query = 1;
}

message GetOrganizationsRsp{
	repeated Organization organizations = 1;
}

/**
 * Remove a peer from the network.
 */
message DeleteOrganizationRqst{
	string organization = 1;
}

message DeleteOrganizationRsp{
	bool result = 1;
}


////////////////////////////////////////////////////////////////////////////////
// Peer's
////////////////////////////////////////////////////////////////////////////////

/** a globular server **/
message Peer {
	string domain = 1; // must be unique on the network.
	repeated string actions=2;
}

/**
 * Register peer request. The peer must be accept before Authenticate.
 */
message RegisterPeerRqst{
	Peer peer = 1;
}

message RegisterPeerRsp{
	bool result = 1;
}

/**
 * Return the list of peer (query is use to get specific peer's).
 */
message GetPeersRqst{
	string query = 1;
}

message GetPeersRsp{
	repeated Peer peers = 1;
}

/**
 * Remove a peer from the network.
 */
message DeletePeerRqst{
	Peer peer = 1;
}

message DeletePeerRsp{
	bool result = 1;
}


message AddRoleActionRqst{
	string roleId = 1;
	string action = 2;
}

message AddRoleActionRsp{
	bool result = 1;
}

message RemoveRoleActionRqst{
	string roleId = 1;
	string action = 2;
}

message RemoveRoleActionRsp{
	bool result = 1;
}

message AddApplicationActionRqst{
	string applicationId = 1;
	string action = 2;
}

message AddApplicationActionRsp{
	bool result = 1;
}

message RemoveApplicationActionRqst{
	string applicationId = 1;
	string action = 2;
}

message RemoveApplicationActionRsp{
	bool result = 1;
}

message AddPeerActionRqst{
	string domain = 1;
	string action = 2;
}

message AddPeerActionRsp{
	bool result = 1;
}

message RemovePeerActionRqst{
	string domain = 1;
	string action = 2;
}

message RemovePeerActionRsp{
	bool result = 1;
}

message AddOrganizationAccountRqst{
	string organizationId = 1;
	string accountId = 2;
}

message AddOrganizationAccountRsp{
	bool result = 1;
}

message AddOrganizationGroupRqst{
	string organizationId = 1;
	string groupId = 2;
}

message AddOrganizationGroupRsp{
	bool result = 1;
}

message AddOrganizationRoleRqst{
	string organizationId = 1;
	string roleId = 2;
}

message AddOrganizationRoleRsp{
	bool result = 1;
}

message AddOrganizationApplicationRqst{
	string organizationId = 1;
	string applicationId = 2;
}

message AddOrganizationApplicationRsp{
	bool result = 1;
}

message RemoveOrganizationGroupRqst{
	string organizationId = 1;
	string groupId = 2;
}

message RemoveOrganizationGroupRsp{
	bool result = 1;
}

message RemoveOrganizationRoleRqst{
	string organizationId = 1;
	string roleId = 2;
}

message RemoveOrganizationRoleRsp{
	bool result = 1;
}

message RemoveOrganizationApplicationRqst{
	string organizationId = 1;
	string applicationId = 2;
}

message RemoveOrganizationApplicationRsp{
	bool result = 1;
}

message RemoveOrganizationAccountRqst{
	string organizationId = 1;
	string accountId = 2;
}

message RemoveOrganizationAccountRsp{
	bool result = 1;
}



/**
 * That service is use to manage Globular resource like permissions and accounts
 * or role. The service made use of Persistence service to store various 
 * objects.
 */
service ResourceService {
	
	/** Return the list of all grpc methods **/
	rpc GetAllActions(GetAllActionsRqst) returns(GetAllActionsRsp);
	
	/** Validate a token **/
	rpc ValidateToken(ValidateTokenRqst) returns (ValidateTokenRsp);	
		
	/** Refresh token get a new token **/
	rpc RefreshToken(RefreshTokenRqst) returns(RefreshTokenRsp);
	
	
	////////////////////////////////////////////////////////////////////////////
	// Authentication
	////////////////////////////////////////////////////////////////////////////
	
	/** Authenticate a user **/
	rpc Authenticate(AuthenticateRqst) returns(AuthenticateRsp);
	
	/** Synchronize Resource with LDAP if connection exist **/
	rpc SynchronizeLdap(SynchronizeLdapRqst) returns(SynchronizeLdapRsp);
		
	////////////////////////////////////////////////////////////////////////////
	// Resource's control objects
	////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////
	// Organization's
	////////////////////////////////////////////////////////////////////////////
	
	/** Register a new organization */
	rpc CreateOrganization(CreateOrganizationRqst) returns (CreateOrganizationRsp);
	
	/** Return the list of organizations */
	rpc GetOrganizations(GetOrganizationsRqst) returns(stream GetOrganizationsRsp);

	/** Delete Organization */
	rpc DeleteOrganization(DeleteOrganizationRqst) returns (DeleteOrganizationRsp);
	
	/** Add Account **/
	rpc AddOrganizationAccount(AddOrganizationAccountRqst) returns (AddOrganizationAccountRsp);
	
	/** Add Group **/
	rpc AddOrganizationGroup(AddOrganizationGroupRqst) returns (AddOrganizationGroupRsp);
	
	/** Add Role **/
	rpc AddOrganizationRole(AddOrganizationRoleRqst) returns (AddOrganizationRoleRsp);
	
	/** Add Application **/
	rpc AddOrganizationApplication(AddOrganizationApplicationRqst) returns (AddOrganizationApplicationRsp);
	
	/** Remove Account **/
	rpc RemoveOrganizationAccount(RemoveOrganizationAccountRqst) returns (RemoveOrganizationAccountRsp);
	
	/** Remove Group **/
	rpc RemoveOrganizationGroup(RemoveOrganizationGroupRqst) returns (RemoveOrganizationGroupRsp);
	
	/** Remove Role **/
	rpc RemoveOrganizationRole(RemoveOrganizationRoleRqst) returns (RemoveOrganizationRoleRsp);
	
	/** Remove Application **/
	rpc RemoveOrganizationApplication(RemoveOrganizationApplicationRqst) returns (RemoveOrganizationApplicationRsp);
	
	////////////////////////////////////////////////////////////////////////////
	// Group's
	////////////////////////////////////////////////////////////////////////////
	
	/** Register a new group */
	rpc CreateGroup(CreateGroupRqst) returns (CreateGroupRsp);
	
	/** Return the list of groups */
	rpc GetGroups(GetGroupsRqst) returns(stream GetGroupsRsp);

	/** Delete group */
	rpc DeleteGroup(DeleteGroupRqst) returns (DeleteGroupRsp);
	
	/** Add a member account to the group **/
	rpc AddGroupMemberAccount(AddGroupMemberAccountRqst) returns(AddGroupMemberAccountRsp);
	
	/** Remove member account from the group **/
	rpc RemoveGroupMemberAccount(RemoveGroupMemberAccountRqst) returns(RemoveGroupMemberAccountRsp);

	////////////////////////////////////////////////////////////////////////////
	// Account's
	////////////////////////////////////////////////////////////////////////////
	
	/** Register a new Account **/
	rpc RegisterAccount(RegisterAccountRqst) returns (RegisterAccountRsp);
	
	/** Delete an account **/
	rpc DeleteAccount(DeleteAccountRqst) returns(DeleteAccountRsp);
	
	/** Add role to a given account **/
	rpc AddAccountRole(AddAccountRoleRqst) returns(AddAccountRoleRsp);

	/** Remove a role from a given account **/
	rpc RemoveAccountRole(RemoveAccountRoleRqst) returns(RemoveAccountRoleRsp);
	
	////////////////////////////////////////////////////////////////////////////
	// Action's control objects (Role Base'd)
	////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////
	// Role's
	////////////////////////////////////////////////////////////////////////////
	
	/** Create a role with given action list **/
	rpc CreateRole(CreateRoleRqst) returns(CreateRoleRsp);
	
	/** Delete a role with a given id **/
	rpc DeleteRole(DeleteRoleRqst) returns(DeleteRoleRsp);
	
	/** Append an action to existing role. **/
	rpc AddRoleAction(AddRoleActionRqst) returns(AddRoleActionRsp);
	
	/** Remove an action to existing role. **/
	rpc RemoveRoleAction(RemoveRoleActionRqst) returns(RemoveRoleActionRsp);
	
	
	////////////////////////////////////////////////////////////////////////////
	// Application's
	////////////////////////////////////////////////////////////////////////////

	/** Return a json string with all applications informations **/
	rpc GetAllApplicationsInfo(GetAllApplicationsInfoRqst) returns(GetAllApplicationsInfoRsp);
	
	/** Delete an application from the server. **/
	rpc DeleteApplication(DeleteApplicationRqst) returns(DeleteApplicationRsp);
	
	/** Append an action to existing applications. **/
	rpc AddApplicationAction(AddApplicationActionRqst) returns(AddApplicationActionRsp);
	
	/** Remove an action to existing applications. **/
	rpc RemoveApplicationAction(RemoveApplicationActionRqst) returns(RemoveApplicationActionRsp);
	
	////////////////////////////////////////////////////////////////////////////
	// Peer's
	////////////////////////////////////////////////////////////////////////////
	
	/** Register a peer on the network **/
	rpc RegisterPeer(RegisterPeerRqst) returns (RegisterPeerRsp);
	
	/** Return the list of peers **/
	rpc GetPeers(GetPeersRqst) returns(stream GetPeersRsp);

	/** Remove a peer from the network **/
	rpc DeletePeer(DeletePeerRqst) returns (DeletePeerRsp);

	/** Add peer action permission **/
	rpc AddPeerAction(AddPeerActionRqst) returns(AddPeerActionRsp);
	
	/** Remove peer action permission **/
	rpc RemovePeerAction(RemovePeerActionRqst) returns(RemovePeerActionRsp);
	

}
