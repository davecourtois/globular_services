/**
 * Service management functionality.
 */
syntax = "proto3";
package services;

option go_package="services/servicespb";

/** Description of the service **/
message ServiceDescriptor {
	string id = 1;
	string name = 2;
	string publisherId = 3;
	string version = 4;
	string description = 5;
	repeated string repositories = 6; // The list of repositories that has the services
	repeated string discoveries = 7; // The list of dicoveries that has the services
	repeated string keywords = 8;
}


/** That message will contain the information to update a service on a node. **/
message ServiceBundle {
	ServiceDescriptor descriptor = 1;
	string buildNumber = 2;
	string plaform = 3;
	
	/** binairies must be a tar.gz file **/
	bytes binairies = 4;
}

message PublishServiceDescriptorRequest {
	ServiceDescriptor descriptor = 1;
}

message PublishServiceDescriptorResponse {
	bool result = 1;
}

message UploadBundleRequest {
	bytes data = 1;
}

message UploadBundleResponse {
	bool result = 1;
}

message DownloadBundleRequest {
	ServiceDescriptor descriptor = 1;
	string plaform = 2;
}

message DownloadBundleResponse {
	bytes data = 1;
}

message GetServiceDescriptorRequest {
	string serviceId = 1;
	string publisherId = 2;
}

message GetServiceDescriptorResponse {
	// Return one of more service descriptor with various versions.
	repeated ServiceDescriptor results = 1;
}

message GetServicesDescriptorRequest {
	string query = 1;
}

message GetServicesDescriptorResponse {
	repeated ServiceDescriptor results = 1;
}

message SetServiceDescriptorRequest {
	ServiceDescriptor descriptor = 1;
}

message SetServiceDescriptorResponse {
	bool result = 1;
}

message FindServicesDescriptorRequest {
	repeated string keywords = 1;
}

message FindServicesDescriptorResponse {
	repeated ServiceDescriptor results = 1;
}

/** functionality to retreive a service **/
service ServiceDiscovery {
	/** Search service by keywords **/
	rpc FindServices(FindServicesDescriptorRequest) returns (FindServicesDescriptorResponse);
	
	/** Return the list of all services **/
	rpc GetServiceDescriptor(GetServiceDescriptorRequest) returns ( GetServiceDescriptorResponse);
	
	/** Return the list of all services **/
	rpc GetServicesDescriptor(GetServicesDescriptorRequest) returns(stream GetServicesDescriptorResponse);
	
	/** Save a service descriptor **/
	rpc SetServiceDescriptor(SetServiceDescriptorRequest) returns(SetServiceDescriptorResponse);
	
	/** Publish a service to service discovery **/
	rpc PublishServiceDescriptor(PublishServiceDescriptorRequest) returns(PublishServiceDescriptorResponse);
	
}

/** functionality to download/upload a service **/
service ServiceRepository {
	/** Download a service from a service directory **/
	rpc DownloadBundle(DownloadBundleRequest) returns(stream DownloadBundleResponse);
	
	/** Upload a service to a service directory **/
	rpc UploadBundle(stream UploadBundleRequest) returns(UploadBundleResponse);
}