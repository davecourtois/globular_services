// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PlcServiceClient is the client API for PlcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlcServiceClient interface {
	// Stop the server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Create a connection.
	CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error)
	// Get a connection with a given id
	GetConnection(ctx context.Context, in *GetConnectionRqst, opts ...grpc.CallOption) (*GetConnectionRsp, error)
	// Close a connection
	CloseConnection(ctx context.Context, in *CloseConnectionRqst, opts ...grpc.CallOption) (*CloseConnectionRsp, error)
	// Delete a connection.
	DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error)
	// Read Tag
	ReadTag(ctx context.Context, in *ReadTagRqst, opts ...grpc.CallOption) (*ReadTagRsp, error)
	// Write Tag
	WriteTag(ctx context.Context, in *WriteTagRqst, opts ...grpc.CallOption) (*WriteTagRsp, error)
}

type plcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlcServiceClient(cc grpc.ClientConnInterface) PlcServiceClient {
	return &plcServiceClient{cc}
}

func (c *plcServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/plc.PlcService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plcServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error) {
	out := new(CreateConnectionRsp)
	err := c.cc.Invoke(ctx, "/plc.PlcService/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plcServiceClient) GetConnection(ctx context.Context, in *GetConnectionRqst, opts ...grpc.CallOption) (*GetConnectionRsp, error) {
	out := new(GetConnectionRsp)
	err := c.cc.Invoke(ctx, "/plc.PlcService/GetConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plcServiceClient) CloseConnection(ctx context.Context, in *CloseConnectionRqst, opts ...grpc.CallOption) (*CloseConnectionRsp, error) {
	out := new(CloseConnectionRsp)
	err := c.cc.Invoke(ctx, "/plc.PlcService/CloseConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plcServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error) {
	out := new(DeleteConnectionRsp)
	err := c.cc.Invoke(ctx, "/plc.PlcService/DeleteConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plcServiceClient) ReadTag(ctx context.Context, in *ReadTagRqst, opts ...grpc.CallOption) (*ReadTagRsp, error) {
	out := new(ReadTagRsp)
	err := c.cc.Invoke(ctx, "/plc.PlcService/ReadTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plcServiceClient) WriteTag(ctx context.Context, in *WriteTagRqst, opts ...grpc.CallOption) (*WriteTagRsp, error) {
	out := new(WriteTagRsp)
	err := c.cc.Invoke(ctx, "/plc.PlcService/WriteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlcServiceServer is the server API for PlcService service.
// All implementations should embed UnimplementedPlcServiceServer
// for forward compatibility
type PlcServiceServer interface {
	// Stop the server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Create a connection.
	CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error)
	// Get a connection with a given id
	GetConnection(context.Context, *GetConnectionRqst) (*GetConnectionRsp, error)
	// Close a connection
	CloseConnection(context.Context, *CloseConnectionRqst) (*CloseConnectionRsp, error)
	// Delete a connection.
	DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error)
	// Read Tag
	ReadTag(context.Context, *ReadTagRqst) (*ReadTagRsp, error)
	// Write Tag
	WriteTag(context.Context, *WriteTagRqst) (*WriteTagRsp, error)
}

// UnimplementedPlcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPlcServiceServer struct {
}

func (UnimplementedPlcServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedPlcServiceServer) CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedPlcServiceServer) GetConnection(context.Context, *GetConnectionRqst) (*GetConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedPlcServiceServer) CloseConnection(context.Context, *CloseConnectionRqst) (*CloseConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseConnection not implemented")
}
func (UnimplementedPlcServiceServer) DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedPlcServiceServer) ReadTag(context.Context, *ReadTagRqst) (*ReadTagRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTag not implemented")
}
func (UnimplementedPlcServiceServer) WriteTag(context.Context, *WriteTagRqst) (*WriteTagRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteTag not implemented")
}

// UnsafePlcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlcServiceServer will
// result in compilation errors.
type UnsafePlcServiceServer interface {
	mustEmbedUnimplementedPlcServiceServer()
}

func RegisterPlcServiceServer(s grpc.ServiceRegistrar, srv PlcServiceServer) {
	s.RegisterService(&PlcService_ServiceDesc, srv)
}

func _PlcService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc.PlcService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlcService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc.PlcService/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcServiceServer).CreateConnection(ctx, req.(*CreateConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlcService_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcServiceServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc.PlcService/GetConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcServiceServer).GetConnection(ctx, req.(*GetConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlcService_CloseConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcServiceServer).CloseConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc.PlcService/CloseConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcServiceServer).CloseConnection(ctx, req.(*CloseConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlcService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc.PlcService/DeleteConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlcService_ReadTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTagRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcServiceServer).ReadTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc.PlcService/ReadTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcServiceServer).ReadTag(ctx, req.(*ReadTagRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlcService_WriteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteTagRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcServiceServer).WriteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc.PlcService/WriteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcServiceServer).WriteTag(ctx, req.(*WriteTagRqst))
	}
	return interceptor(ctx, in, info, handler)
}

// PlcService_ServiceDesc is the grpc.ServiceDesc for PlcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plc.PlcService",
	HandlerType: (*PlcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _PlcService_Stop_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _PlcService_CreateConnection_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _PlcService_GetConnection_Handler,
		},
		{
			MethodName: "CloseConnection",
			Handler:    _PlcService_CloseConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _PlcService_DeleteConnection_Handler,
		},
		{
			MethodName: "ReadTag",
			Handler:    _PlcService_ReadTag_Handler,
		},
		{
			MethodName: "WriteTag",
			Handler:    _PlcService_WriteTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/plc.proto",
}
