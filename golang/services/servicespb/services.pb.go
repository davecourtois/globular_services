//*
// Service management functionality.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.13.0
// source: proto/services.proto

package servicespb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//* Description of the service *
type ServiceDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PublisherId  string   `protobuf:"bytes,3,opt,name=publisherId,proto3" json:"publisherId,omitempty"`
	Version      string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Description  string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Repositories []string `protobuf:"bytes,6,rep,name=repositories,proto3" json:"repositories,omitempty"` // The list of repositories that has the services
	Discoveries  []string `protobuf:"bytes,7,rep,name=discoveries,proto3" json:"discoveries,omitempty"`   // The list of dicoveries that has the services
	Keywords     []string `protobuf:"bytes,8,rep,name=keywords,proto3" json:"keywords,omitempty"`
}

func (x *ServiceDescriptor) Reset() {
	*x = ServiceDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDescriptor) ProtoMessage() {}

func (x *ServiceDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDescriptor.ProtoReflect.Descriptor instead.
func (*ServiceDescriptor) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceDescriptor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceDescriptor) GetPublisherId() string {
	if x != nil {
		return x.PublisherId
	}
	return ""
}

func (x *ServiceDescriptor) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServiceDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceDescriptor) GetRepositories() []string {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *ServiceDescriptor) GetDiscoveries() []string {
	if x != nil {
		return x.Discoveries
	}
	return nil
}

func (x *ServiceDescriptor) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

//* That message will contain the information to update a service on a node. *
type ServiceBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *ServiceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	BuildNumber string             `protobuf:"bytes,2,opt,name=buildNumber,proto3" json:"buildNumber,omitempty"`
	Plaform     string             `protobuf:"bytes,3,opt,name=plaform,proto3" json:"plaform,omitempty"`
	//* binairies must be a tar.gz file *
	Binairies []byte `protobuf:"bytes,4,opt,name=binairies,proto3" json:"binairies,omitempty"`
}

func (x *ServiceBundle) Reset() {
	*x = ServiceBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceBundle) ProtoMessage() {}

func (x *ServiceBundle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceBundle.ProtoReflect.Descriptor instead.
func (*ServiceBundle) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceBundle) GetDescriptor_() *ServiceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *ServiceBundle) GetBuildNumber() string {
	if x != nil {
		return x.BuildNumber
	}
	return ""
}

func (x *ServiceBundle) GetPlaform() string {
	if x != nil {
		return x.Plaform
	}
	return ""
}

func (x *ServiceBundle) GetBinairies() []byte {
	if x != nil {
		return x.Binairies
	}
	return nil
}

type PublishServiceDescriptorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *ServiceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
}

func (x *PublishServiceDescriptorRequest) Reset() {
	*x = PublishServiceDescriptorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishServiceDescriptorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishServiceDescriptorRequest) ProtoMessage() {}

func (x *PublishServiceDescriptorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishServiceDescriptorRequest.ProtoReflect.Descriptor instead.
func (*PublishServiceDescriptorRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{2}
}

func (x *PublishServiceDescriptorRequest) GetDescriptor_() *ServiceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

type PublishServiceDescriptorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PublishServiceDescriptorResponse) Reset() {
	*x = PublishServiceDescriptorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishServiceDescriptorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishServiceDescriptorResponse) ProtoMessage() {}

func (x *PublishServiceDescriptorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishServiceDescriptorResponse.ProtoReflect.Descriptor instead.
func (*PublishServiceDescriptorResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{3}
}

func (x *PublishServiceDescriptorResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UploadBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UploadBundleRequest) Reset() {
	*x = UploadBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBundleRequest) ProtoMessage() {}

func (x *UploadBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBundleRequest.ProtoReflect.Descriptor instead.
func (*UploadBundleRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{4}
}

func (x *UploadBundleRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type UploadBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UploadBundleResponse) Reset() {
	*x = UploadBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBundleResponse) ProtoMessage() {}

func (x *UploadBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBundleResponse.ProtoReflect.Descriptor instead.
func (*UploadBundleResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{5}
}

func (x *UploadBundleResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DownloadBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *ServiceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	Plaform     string             `protobuf:"bytes,2,opt,name=plaform,proto3" json:"plaform,omitempty"`
}

func (x *DownloadBundleRequest) Reset() {
	*x = DownloadBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadBundleRequest) ProtoMessage() {}

func (x *DownloadBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadBundleRequest.ProtoReflect.Descriptor instead.
func (*DownloadBundleRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{6}
}

func (x *DownloadBundleRequest) GetDescriptor_() *ServiceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *DownloadBundleRequest) GetPlaform() string {
	if x != nil {
		return x.Plaform
	}
	return ""
}

type DownloadBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DownloadBundleResponse) Reset() {
	*x = DownloadBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadBundleResponse) ProtoMessage() {}

func (x *DownloadBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadBundleResponse.ProtoReflect.Descriptor instead.
func (*DownloadBundleResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{7}
}

func (x *DownloadBundleResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetServiceDescriptorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId   string `protobuf:"bytes,1,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	PublisherId string `protobuf:"bytes,2,opt,name=publisherId,proto3" json:"publisherId,omitempty"`
}

func (x *GetServiceDescriptorRequest) Reset() {
	*x = GetServiceDescriptorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDescriptorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDescriptorRequest) ProtoMessage() {}

func (x *GetServiceDescriptorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDescriptorRequest.ProtoReflect.Descriptor instead.
func (*GetServiceDescriptorRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{8}
}

func (x *GetServiceDescriptorRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *GetServiceDescriptorRequest) GetPublisherId() string {
	if x != nil {
		return x.PublisherId
	}
	return ""
}

type GetServiceDescriptorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return one of more service descriptor with various versions.
	Results []*ServiceDescriptor `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetServiceDescriptorResponse) Reset() {
	*x = GetServiceDescriptorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceDescriptorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceDescriptorResponse) ProtoMessage() {}

func (x *GetServiceDescriptorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceDescriptorResponse.ProtoReflect.Descriptor instead.
func (*GetServiceDescriptorResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{9}
}

func (x *GetServiceDescriptorResponse) GetResults() []*ServiceDescriptor {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetServicesDescriptorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetServicesDescriptorRequest) Reset() {
	*x = GetServicesDescriptorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesDescriptorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesDescriptorRequest) ProtoMessage() {}

func (x *GetServicesDescriptorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesDescriptorRequest.ProtoReflect.Descriptor instead.
func (*GetServicesDescriptorRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{10}
}

func (x *GetServicesDescriptorRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type GetServicesDescriptorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ServiceDescriptor `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetServicesDescriptorResponse) Reset() {
	*x = GetServicesDescriptorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesDescriptorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesDescriptorResponse) ProtoMessage() {}

func (x *GetServicesDescriptorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesDescriptorResponse.ProtoReflect.Descriptor instead.
func (*GetServicesDescriptorResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{11}
}

func (x *GetServicesDescriptorResponse) GetResults() []*ServiceDescriptor {
	if x != nil {
		return x.Results
	}
	return nil
}

type SetServiceDescriptorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptor_ *ServiceDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
}

func (x *SetServiceDescriptorRequest) Reset() {
	*x = SetServiceDescriptorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetServiceDescriptorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServiceDescriptorRequest) ProtoMessage() {}

func (x *SetServiceDescriptorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServiceDescriptorRequest.ProtoReflect.Descriptor instead.
func (*SetServiceDescriptorRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{12}
}

func (x *SetServiceDescriptorRequest) GetDescriptor_() *ServiceDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

type SetServiceDescriptorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SetServiceDescriptorResponse) Reset() {
	*x = SetServiceDescriptorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetServiceDescriptorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServiceDescriptorResponse) ProtoMessage() {}

func (x *SetServiceDescriptorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServiceDescriptorResponse.ProtoReflect.Descriptor instead.
func (*SetServiceDescriptorResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{13}
}

func (x *SetServiceDescriptorResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type FindServicesDescriptorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keywords []string `protobuf:"bytes,1,rep,name=keywords,proto3" json:"keywords,omitempty"`
}

func (x *FindServicesDescriptorRequest) Reset() {
	*x = FindServicesDescriptorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServicesDescriptorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServicesDescriptorRequest) ProtoMessage() {}

func (x *FindServicesDescriptorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServicesDescriptorRequest.ProtoReflect.Descriptor instead.
func (*FindServicesDescriptorRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{14}
}

func (x *FindServicesDescriptorRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type FindServicesDescriptorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ServiceDescriptor `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *FindServicesDescriptorResponse) Reset() {
	*x = FindServicesDescriptorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServicesDescriptorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServicesDescriptorResponse) ProtoMessage() {}

func (x *FindServicesDescriptorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServicesDescriptorResponse.ProtoReflect.Descriptor instead.
func (*FindServicesDescriptorResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_proto_rawDescGZIP(), []int{15}
}

func (x *FindServicesDescriptorResponse) GetResults() []*ServiceDescriptor {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_proto_services_proto protoreflect.FileDescriptor

var file_proto_services_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0xf7, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x69, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x69, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x1f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x22, 0x3a, 0x0a, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x29, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x14, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6e, 0x0a, 0x15, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x2c, 0x0a, 0x16, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x34,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0x56, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x5a, 0x0a, 0x1b,
	0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x36, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x3b, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x57, 0x0a,
	0x1e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x32, 0xa2, 0x04, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x61, 0x0a, 0x0c, 0x46,
	0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x65, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xbb, 0x01, 0x0a, 0x11,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x55, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x42, 0x15, 0x5a, 0x13, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_services_proto_rawDescOnce sync.Once
	file_proto_services_proto_rawDescData = file_proto_services_proto_rawDesc
)

func file_proto_services_proto_rawDescGZIP() []byte {
	file_proto_services_proto_rawDescOnce.Do(func() {
		file_proto_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_services_proto_rawDescData)
	})
	return file_proto_services_proto_rawDescData
}

var file_proto_services_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_proto_services_proto_goTypes = []interface{}{
	(*ServiceDescriptor)(nil),                // 0: services.ServiceDescriptor
	(*ServiceBundle)(nil),                    // 1: services.ServiceBundle
	(*PublishServiceDescriptorRequest)(nil),  // 2: services.PublishServiceDescriptorRequest
	(*PublishServiceDescriptorResponse)(nil), // 3: services.PublishServiceDescriptorResponse
	(*UploadBundleRequest)(nil),              // 4: services.UploadBundleRequest
	(*UploadBundleResponse)(nil),             // 5: services.UploadBundleResponse
	(*DownloadBundleRequest)(nil),            // 6: services.DownloadBundleRequest
	(*DownloadBundleResponse)(nil),           // 7: services.DownloadBundleResponse
	(*GetServiceDescriptorRequest)(nil),      // 8: services.GetServiceDescriptorRequest
	(*GetServiceDescriptorResponse)(nil),     // 9: services.GetServiceDescriptorResponse
	(*GetServicesDescriptorRequest)(nil),     // 10: services.GetServicesDescriptorRequest
	(*GetServicesDescriptorResponse)(nil),    // 11: services.GetServicesDescriptorResponse
	(*SetServiceDescriptorRequest)(nil),      // 12: services.SetServiceDescriptorRequest
	(*SetServiceDescriptorResponse)(nil),     // 13: services.SetServiceDescriptorResponse
	(*FindServicesDescriptorRequest)(nil),    // 14: services.FindServicesDescriptorRequest
	(*FindServicesDescriptorResponse)(nil),   // 15: services.FindServicesDescriptorResponse
}
var file_proto_services_proto_depIdxs = []int32{
	0,  // 0: services.ServiceBundle.descriptor:type_name -> services.ServiceDescriptor
	0,  // 1: services.PublishServiceDescriptorRequest.descriptor:type_name -> services.ServiceDescriptor
	0,  // 2: services.DownloadBundleRequest.descriptor:type_name -> services.ServiceDescriptor
	0,  // 3: services.GetServiceDescriptorResponse.results:type_name -> services.ServiceDescriptor
	0,  // 4: services.GetServicesDescriptorResponse.results:type_name -> services.ServiceDescriptor
	0,  // 5: services.SetServiceDescriptorRequest.descriptor:type_name -> services.ServiceDescriptor
	0,  // 6: services.FindServicesDescriptorResponse.results:type_name -> services.ServiceDescriptor
	14, // 7: services.ServiceDiscovery.FindServices:input_type -> services.FindServicesDescriptorRequest
	8,  // 8: services.ServiceDiscovery.GetServiceDescriptor:input_type -> services.GetServiceDescriptorRequest
	10, // 9: services.ServiceDiscovery.GetServicesDescriptor:input_type -> services.GetServicesDescriptorRequest
	12, // 10: services.ServiceDiscovery.SetServiceDescriptor:input_type -> services.SetServiceDescriptorRequest
	2,  // 11: services.ServiceDiscovery.PublishServiceDescriptor:input_type -> services.PublishServiceDescriptorRequest
	6,  // 12: services.ServiceRepository.DownloadBundle:input_type -> services.DownloadBundleRequest
	4,  // 13: services.ServiceRepository.UploadBundle:input_type -> services.UploadBundleRequest
	15, // 14: services.ServiceDiscovery.FindServices:output_type -> services.FindServicesDescriptorResponse
	9,  // 15: services.ServiceDiscovery.GetServiceDescriptor:output_type -> services.GetServiceDescriptorResponse
	11, // 16: services.ServiceDiscovery.GetServicesDescriptor:output_type -> services.GetServicesDescriptorResponse
	13, // 17: services.ServiceDiscovery.SetServiceDescriptor:output_type -> services.SetServiceDescriptorResponse
	3,  // 18: services.ServiceDiscovery.PublishServiceDescriptor:output_type -> services.PublishServiceDescriptorResponse
	7,  // 19: services.ServiceRepository.DownloadBundle:output_type -> services.DownloadBundleResponse
	5,  // 20: services.ServiceRepository.UploadBundle:output_type -> services.UploadBundleResponse
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_services_proto_init() }
func file_proto_services_proto_init() {
	if File_proto_services_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishServiceDescriptorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishServiceDescriptorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDescriptorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceDescriptorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesDescriptorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesDescriptorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetServiceDescriptorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetServiceDescriptorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServicesDescriptorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServicesDescriptorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_services_proto_goTypes,
		DependencyIndexes: file_proto_services_proto_depIdxs,
		MessageInfos:      file_proto_services_proto_msgTypes,
	}.Build()
	File_proto_services_proto = out.File
	file_proto_services_proto_rawDesc = nil
	file_proto_services_proto_goTypes = nil
	file_proto_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceDiscoveryClient is the client API for ServiceDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceDiscoveryClient interface {
	//* Search service by keywords *
	FindServices(ctx context.Context, in *FindServicesDescriptorRequest, opts ...grpc.CallOption) (*FindServicesDescriptorResponse, error)
	//* Return the list of all services *
	GetServiceDescriptor(ctx context.Context, in *GetServiceDescriptorRequest, opts ...grpc.CallOption) (*GetServiceDescriptorResponse, error)
	//* Return the list of all services *
	GetServicesDescriptor(ctx context.Context, in *GetServicesDescriptorRequest, opts ...grpc.CallOption) (ServiceDiscovery_GetServicesDescriptorClient, error)
	//* Save a service descriptor *
	SetServiceDescriptor(ctx context.Context, in *SetServiceDescriptorRequest, opts ...grpc.CallOption) (*SetServiceDescriptorResponse, error)
	//* Publish a service to service discovery *
	PublishServiceDescriptor(ctx context.Context, in *PublishServiceDescriptorRequest, opts ...grpc.CallOption) (*PublishServiceDescriptorResponse, error)
}

type serviceDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceDiscoveryClient(cc grpc.ClientConnInterface) ServiceDiscoveryClient {
	return &serviceDiscoveryClient{cc}
}

func (c *serviceDiscoveryClient) FindServices(ctx context.Context, in *FindServicesDescriptorRequest, opts ...grpc.CallOption) (*FindServicesDescriptorResponse, error) {
	out := new(FindServicesDescriptorResponse)
	err := c.cc.Invoke(ctx, "/services.ServiceDiscovery/FindServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDiscoveryClient) GetServiceDescriptor(ctx context.Context, in *GetServiceDescriptorRequest, opts ...grpc.CallOption) (*GetServiceDescriptorResponse, error) {
	out := new(GetServiceDescriptorResponse)
	err := c.cc.Invoke(ctx, "/services.ServiceDiscovery/GetServiceDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDiscoveryClient) GetServicesDescriptor(ctx context.Context, in *GetServicesDescriptorRequest, opts ...grpc.CallOption) (ServiceDiscovery_GetServicesDescriptorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceDiscovery_serviceDesc.Streams[0], "/services.ServiceDiscovery/GetServicesDescriptor", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceDiscoveryGetServicesDescriptorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceDiscovery_GetServicesDescriptorClient interface {
	Recv() (*GetServicesDescriptorResponse, error)
	grpc.ClientStream
}

type serviceDiscoveryGetServicesDescriptorClient struct {
	grpc.ClientStream
}

func (x *serviceDiscoveryGetServicesDescriptorClient) Recv() (*GetServicesDescriptorResponse, error) {
	m := new(GetServicesDescriptorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceDiscoveryClient) SetServiceDescriptor(ctx context.Context, in *SetServiceDescriptorRequest, opts ...grpc.CallOption) (*SetServiceDescriptorResponse, error) {
	out := new(SetServiceDescriptorResponse)
	err := c.cc.Invoke(ctx, "/services.ServiceDiscovery/SetServiceDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDiscoveryClient) PublishServiceDescriptor(ctx context.Context, in *PublishServiceDescriptorRequest, opts ...grpc.CallOption) (*PublishServiceDescriptorResponse, error) {
	out := new(PublishServiceDescriptorResponse)
	err := c.cc.Invoke(ctx, "/services.ServiceDiscovery/PublishServiceDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceDiscoveryServer is the server API for ServiceDiscovery service.
type ServiceDiscoveryServer interface {
	//* Search service by keywords *
	FindServices(context.Context, *FindServicesDescriptorRequest) (*FindServicesDescriptorResponse, error)
	//* Return the list of all services *
	GetServiceDescriptor(context.Context, *GetServiceDescriptorRequest) (*GetServiceDescriptorResponse, error)
	//* Return the list of all services *
	GetServicesDescriptor(*GetServicesDescriptorRequest, ServiceDiscovery_GetServicesDescriptorServer) error
	//* Save a service descriptor *
	SetServiceDescriptor(context.Context, *SetServiceDescriptorRequest) (*SetServiceDescriptorResponse, error)
	//* Publish a service to service discovery *
	PublishServiceDescriptor(context.Context, *PublishServiceDescriptorRequest) (*PublishServiceDescriptorResponse, error)
}

// UnimplementedServiceDiscoveryServer can be embedded to have forward compatible implementations.
type UnimplementedServiceDiscoveryServer struct {
}

func (*UnimplementedServiceDiscoveryServer) FindServices(context.Context, *FindServicesDescriptorRequest) (*FindServicesDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindServices not implemented")
}
func (*UnimplementedServiceDiscoveryServer) GetServiceDescriptor(context.Context, *GetServiceDescriptorRequest) (*GetServiceDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceDescriptor not implemented")
}
func (*UnimplementedServiceDiscoveryServer) GetServicesDescriptor(*GetServicesDescriptorRequest, ServiceDiscovery_GetServicesDescriptorServer) error {
	return status.Errorf(codes.Unimplemented, "method GetServicesDescriptor not implemented")
}
func (*UnimplementedServiceDiscoveryServer) SetServiceDescriptor(context.Context, *SetServiceDescriptorRequest) (*SetServiceDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServiceDescriptor not implemented")
}
func (*UnimplementedServiceDiscoveryServer) PublishServiceDescriptor(context.Context, *PublishServiceDescriptorRequest) (*PublishServiceDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishServiceDescriptor not implemented")
}

func RegisterServiceDiscoveryServer(s *grpc.Server, srv ServiceDiscoveryServer) {
	s.RegisterService(&_ServiceDiscovery_serviceDesc, srv)
}

func _ServiceDiscovery_FindServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindServicesDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryServer).FindServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ServiceDiscovery/FindServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryServer).FindServices(ctx, req.(*FindServicesDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDiscovery_GetServiceDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryServer).GetServiceDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ServiceDiscovery/GetServiceDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryServer).GetServiceDescriptor(ctx, req.(*GetServiceDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDiscovery_GetServicesDescriptor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetServicesDescriptorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceDiscoveryServer).GetServicesDescriptor(m, &serviceDiscoveryGetServicesDescriptorServer{stream})
}

type ServiceDiscovery_GetServicesDescriptorServer interface {
	Send(*GetServicesDescriptorResponse) error
	grpc.ServerStream
}

type serviceDiscoveryGetServicesDescriptorServer struct {
	grpc.ServerStream
}

func (x *serviceDiscoveryGetServicesDescriptorServer) Send(m *GetServicesDescriptorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceDiscovery_SetServiceDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServiceDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryServer).SetServiceDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ServiceDiscovery/SetServiceDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryServer).SetServiceDescriptor(ctx, req.(*SetServiceDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDiscovery_PublishServiceDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishServiceDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryServer).PublishServiceDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ServiceDiscovery/PublishServiceDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryServer).PublishServiceDescriptor(ctx, req.(*PublishServiceDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceDiscovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.ServiceDiscovery",
	HandlerType: (*ServiceDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindServices",
			Handler:    _ServiceDiscovery_FindServices_Handler,
		},
		{
			MethodName: "GetServiceDescriptor",
			Handler:    _ServiceDiscovery_GetServiceDescriptor_Handler,
		},
		{
			MethodName: "SetServiceDescriptor",
			Handler:    _ServiceDiscovery_SetServiceDescriptor_Handler,
		},
		{
			MethodName: "PublishServiceDescriptor",
			Handler:    _ServiceDiscovery_PublishServiceDescriptor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetServicesDescriptor",
			Handler:       _ServiceDiscovery_GetServicesDescriptor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/services.proto",
}

// ServiceRepositoryClient is the client API for ServiceRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceRepositoryClient interface {
	//* Download a service from a service directory *
	DownloadBundle(ctx context.Context, in *DownloadBundleRequest, opts ...grpc.CallOption) (ServiceRepository_DownloadBundleClient, error)
	//* Upload a service to a service directory *
	UploadBundle(ctx context.Context, opts ...grpc.CallOption) (ServiceRepository_UploadBundleClient, error)
}

type serviceRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceRepositoryClient(cc grpc.ClientConnInterface) ServiceRepositoryClient {
	return &serviceRepositoryClient{cc}
}

func (c *serviceRepositoryClient) DownloadBundle(ctx context.Context, in *DownloadBundleRequest, opts ...grpc.CallOption) (ServiceRepository_DownloadBundleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceRepository_serviceDesc.Streams[0], "/services.ServiceRepository/DownloadBundle", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceRepositoryDownloadBundleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceRepository_DownloadBundleClient interface {
	Recv() (*DownloadBundleResponse, error)
	grpc.ClientStream
}

type serviceRepositoryDownloadBundleClient struct {
	grpc.ClientStream
}

func (x *serviceRepositoryDownloadBundleClient) Recv() (*DownloadBundleResponse, error) {
	m := new(DownloadBundleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceRepositoryClient) UploadBundle(ctx context.Context, opts ...grpc.CallOption) (ServiceRepository_UploadBundleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceRepository_serviceDesc.Streams[1], "/services.ServiceRepository/UploadBundle", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceRepositoryUploadBundleClient{stream}
	return x, nil
}

type ServiceRepository_UploadBundleClient interface {
	Send(*UploadBundleRequest) error
	CloseAndRecv() (*UploadBundleResponse, error)
	grpc.ClientStream
}

type serviceRepositoryUploadBundleClient struct {
	grpc.ClientStream
}

func (x *serviceRepositoryUploadBundleClient) Send(m *UploadBundleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceRepositoryUploadBundleClient) CloseAndRecv() (*UploadBundleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadBundleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceRepositoryServer is the server API for ServiceRepository service.
type ServiceRepositoryServer interface {
	//* Download a service from a service directory *
	DownloadBundle(*DownloadBundleRequest, ServiceRepository_DownloadBundleServer) error
	//* Upload a service to a service directory *
	UploadBundle(ServiceRepository_UploadBundleServer) error
}

// UnimplementedServiceRepositoryServer can be embedded to have forward compatible implementations.
type UnimplementedServiceRepositoryServer struct {
}

func (*UnimplementedServiceRepositoryServer) DownloadBundle(*DownloadBundleRequest, ServiceRepository_DownloadBundleServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadBundle not implemented")
}
func (*UnimplementedServiceRepositoryServer) UploadBundle(ServiceRepository_UploadBundleServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadBundle not implemented")
}

func RegisterServiceRepositoryServer(s *grpc.Server, srv ServiceRepositoryServer) {
	s.RegisterService(&_ServiceRepository_serviceDesc, srv)
}

func _ServiceRepository_DownloadBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadBundleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceRepositoryServer).DownloadBundle(m, &serviceRepositoryDownloadBundleServer{stream})
}

type ServiceRepository_DownloadBundleServer interface {
	Send(*DownloadBundleResponse) error
	grpc.ServerStream
}

type serviceRepositoryDownloadBundleServer struct {
	grpc.ServerStream
}

func (x *serviceRepositoryDownloadBundleServer) Send(m *DownloadBundleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceRepository_UploadBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceRepositoryServer).UploadBundle(&serviceRepositoryUploadBundleServer{stream})
}

type ServiceRepository_UploadBundleServer interface {
	SendAndClose(*UploadBundleResponse) error
	Recv() (*UploadBundleRequest, error)
	grpc.ServerStream
}

type serviceRepositoryUploadBundleServer struct {
	grpc.ServerStream
}

func (x *serviceRepositoryUploadBundleServer) SendAndClose(m *UploadBundleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceRepositoryUploadBundleServer) Recv() (*UploadBundleRequest, error) {
	m := new(UploadBundleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ServiceRepository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.ServiceRepository",
	HandlerType: (*ServiceRepositoryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadBundle",
			Handler:       _ServiceRepository_DownloadBundle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadBundle",
			Handler:       _ServiceRepository_UploadBundle_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/services.proto",
}
