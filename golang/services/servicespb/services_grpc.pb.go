// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package servicespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PackageDiscoveryClient is the client API for PackageDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageDiscoveryClient interface {
	//* Search service by keywords *
	FindPackages(ctx context.Context, in *FindPackagesDescriptorRequest, opts ...grpc.CallOption) (*FindPackagesDescriptorResponse, error)
	//* Return the list of all services *
	GetPackageDescriptor(ctx context.Context, in *GetPackageDescriptorRequest, opts ...grpc.CallOption) (*GetPackageDescriptorResponse, error)
	//* Return the list of all services *
	GetPackagesDescriptor(ctx context.Context, in *GetPackagesDescriptorRequest, opts ...grpc.CallOption) (PackageDiscovery_GetPackagesDescriptorClient, error)
	//* Save a service descriptor *
	SetPackageDescriptor(ctx context.Context, in *SetPackageDescriptorRequest, opts ...grpc.CallOption) (*SetPackageDescriptorResponse, error)
	//* Publish a service to service discovery *
	PublishPackageDescriptor(ctx context.Context, in *PublishPackageDescriptorRequest, opts ...grpc.CallOption) (*PublishPackageDescriptorResponse, error)
}

type packageDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageDiscoveryClient(cc grpc.ClientConnInterface) PackageDiscoveryClient {
	return &packageDiscoveryClient{cc}
}

func (c *packageDiscoveryClient) FindPackages(ctx context.Context, in *FindPackagesDescriptorRequest, opts ...grpc.CallOption) (*FindPackagesDescriptorResponse, error) {
	out := new(FindPackagesDescriptorResponse)
	err := c.cc.Invoke(ctx, "/services.PackageDiscovery/FindPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageDiscoveryClient) GetPackageDescriptor(ctx context.Context, in *GetPackageDescriptorRequest, opts ...grpc.CallOption) (*GetPackageDescriptorResponse, error) {
	out := new(GetPackageDescriptorResponse)
	err := c.cc.Invoke(ctx, "/services.PackageDiscovery/GetPackageDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageDiscoveryClient) GetPackagesDescriptor(ctx context.Context, in *GetPackagesDescriptorRequest, opts ...grpc.CallOption) (PackageDiscovery_GetPackagesDescriptorClient, error) {
	stream, err := c.cc.NewStream(ctx, &PackageDiscovery_ServiceDesc.Streams[0], "/services.PackageDiscovery/GetPackagesDescriptor", opts...)
	if err != nil {
		return nil, err
	}
	x := &packageDiscoveryGetPackagesDescriptorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PackageDiscovery_GetPackagesDescriptorClient interface {
	Recv() (*GetPackagesDescriptorResponse, error)
	grpc.ClientStream
}

type packageDiscoveryGetPackagesDescriptorClient struct {
	grpc.ClientStream
}

func (x *packageDiscoveryGetPackagesDescriptorClient) Recv() (*GetPackagesDescriptorResponse, error) {
	m := new(GetPackagesDescriptorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packageDiscoveryClient) SetPackageDescriptor(ctx context.Context, in *SetPackageDescriptorRequest, opts ...grpc.CallOption) (*SetPackageDescriptorResponse, error) {
	out := new(SetPackageDescriptorResponse)
	err := c.cc.Invoke(ctx, "/services.PackageDiscovery/SetPackageDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageDiscoveryClient) PublishPackageDescriptor(ctx context.Context, in *PublishPackageDescriptorRequest, opts ...grpc.CallOption) (*PublishPackageDescriptorResponse, error) {
	out := new(PublishPackageDescriptorResponse)
	err := c.cc.Invoke(ctx, "/services.PackageDiscovery/PublishPackageDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageDiscoveryServer is the server API for PackageDiscovery service.
// All implementations should embed UnimplementedPackageDiscoveryServer
// for forward compatibility
type PackageDiscoveryServer interface {
	//* Search service by keywords *
	FindPackages(context.Context, *FindPackagesDescriptorRequest) (*FindPackagesDescriptorResponse, error)
	//* Return the list of all services *
	GetPackageDescriptor(context.Context, *GetPackageDescriptorRequest) (*GetPackageDescriptorResponse, error)
	//* Return the list of all services *
	GetPackagesDescriptor(*GetPackagesDescriptorRequest, PackageDiscovery_GetPackagesDescriptorServer) error
	//* Save a service descriptor *
	SetPackageDescriptor(context.Context, *SetPackageDescriptorRequest) (*SetPackageDescriptorResponse, error)
	//* Publish a service to service discovery *
	PublishPackageDescriptor(context.Context, *PublishPackageDescriptorRequest) (*PublishPackageDescriptorResponse, error)
}

// UnimplementedPackageDiscoveryServer should be embedded to have forward compatible implementations.
type UnimplementedPackageDiscoveryServer struct {
}

func (UnimplementedPackageDiscoveryServer) FindPackages(context.Context, *FindPackagesDescriptorRequest) (*FindPackagesDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPackages not implemented")
}
func (UnimplementedPackageDiscoveryServer) GetPackageDescriptor(context.Context, *GetPackageDescriptorRequest) (*GetPackageDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageDescriptor not implemented")
}
func (UnimplementedPackageDiscoveryServer) GetPackagesDescriptor(*GetPackagesDescriptorRequest, PackageDiscovery_GetPackagesDescriptorServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPackagesDescriptor not implemented")
}
func (UnimplementedPackageDiscoveryServer) SetPackageDescriptor(context.Context, *SetPackageDescriptorRequest) (*SetPackageDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPackageDescriptor not implemented")
}
func (UnimplementedPackageDiscoveryServer) PublishPackageDescriptor(context.Context, *PublishPackageDescriptorRequest) (*PublishPackageDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishPackageDescriptor not implemented")
}

// UnsafePackageDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageDiscoveryServer will
// result in compilation errors.
type UnsafePackageDiscoveryServer interface {
	mustEmbedUnimplementedPackageDiscoveryServer()
}

func RegisterPackageDiscoveryServer(s grpc.ServiceRegistrar, srv PackageDiscoveryServer) {
	s.RegisterService(&PackageDiscovery_ServiceDesc, srv)
}

func _PackageDiscovery_FindPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPackagesDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageDiscoveryServer).FindPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.PackageDiscovery/FindPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageDiscoveryServer).FindPackages(ctx, req.(*FindPackagesDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageDiscovery_GetPackageDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageDiscoveryServer).GetPackageDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.PackageDiscovery/GetPackageDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageDiscoveryServer).GetPackageDescriptor(ctx, req.(*GetPackageDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageDiscovery_GetPackagesDescriptor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPackagesDescriptorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PackageDiscoveryServer).GetPackagesDescriptor(m, &packageDiscoveryGetPackagesDescriptorServer{stream})
}

type PackageDiscovery_GetPackagesDescriptorServer interface {
	Send(*GetPackagesDescriptorResponse) error
	grpc.ServerStream
}

type packageDiscoveryGetPackagesDescriptorServer struct {
	grpc.ServerStream
}

func (x *packageDiscoveryGetPackagesDescriptorServer) Send(m *GetPackagesDescriptorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PackageDiscovery_SetPackageDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPackageDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageDiscoveryServer).SetPackageDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.PackageDiscovery/SetPackageDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageDiscoveryServer).SetPackageDescriptor(ctx, req.(*SetPackageDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageDiscovery_PublishPackageDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishPackageDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageDiscoveryServer).PublishPackageDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.PackageDiscovery/PublishPackageDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageDiscoveryServer).PublishPackageDescriptor(ctx, req.(*PublishPackageDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackageDiscovery_ServiceDesc is the grpc.ServiceDesc for PackageDiscovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageDiscovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.PackageDiscovery",
	HandlerType: (*PackageDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindPackages",
			Handler:    _PackageDiscovery_FindPackages_Handler,
		},
		{
			MethodName: "GetPackageDescriptor",
			Handler:    _PackageDiscovery_GetPackageDescriptor_Handler,
		},
		{
			MethodName: "SetPackageDescriptor",
			Handler:    _PackageDiscovery_SetPackageDescriptor_Handler,
		},
		{
			MethodName: "PublishPackageDescriptor",
			Handler:    _PackageDiscovery_PublishPackageDescriptor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPackagesDescriptor",
			Handler:       _PackageDiscovery_GetPackagesDescriptor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/services.proto",
}

// PackageRepositoryClient is the client API for PackageRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageRepositoryClient interface {
	//* Download a service from a service directory *
	DownloadBundle(ctx context.Context, in *DownloadBundleRequest, opts ...grpc.CallOption) (PackageRepository_DownloadBundleClient, error)
	//* Upload a service to a service directory *
	UploadBundle(ctx context.Context, opts ...grpc.CallOption) (PackageRepository_UploadBundleClient, error)
}

type packageRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageRepositoryClient(cc grpc.ClientConnInterface) PackageRepositoryClient {
	return &packageRepositoryClient{cc}
}

func (c *packageRepositoryClient) DownloadBundle(ctx context.Context, in *DownloadBundleRequest, opts ...grpc.CallOption) (PackageRepository_DownloadBundleClient, error) {
	stream, err := c.cc.NewStream(ctx, &PackageRepository_ServiceDesc.Streams[0], "/services.PackageRepository/DownloadBundle", opts...)
	if err != nil {
		return nil, err
	}
	x := &packageRepositoryDownloadBundleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PackageRepository_DownloadBundleClient interface {
	Recv() (*DownloadBundleResponse, error)
	grpc.ClientStream
}

type packageRepositoryDownloadBundleClient struct {
	grpc.ClientStream
}

func (x *packageRepositoryDownloadBundleClient) Recv() (*DownloadBundleResponse, error) {
	m := new(DownloadBundleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packageRepositoryClient) UploadBundle(ctx context.Context, opts ...grpc.CallOption) (PackageRepository_UploadBundleClient, error) {
	stream, err := c.cc.NewStream(ctx, &PackageRepository_ServiceDesc.Streams[1], "/services.PackageRepository/UploadBundle", opts...)
	if err != nil {
		return nil, err
	}
	x := &packageRepositoryUploadBundleClient{stream}
	return x, nil
}

type PackageRepository_UploadBundleClient interface {
	Send(*UploadBundleRequest) error
	CloseAndRecv() (*UploadBundleResponse, error)
	grpc.ClientStream
}

type packageRepositoryUploadBundleClient struct {
	grpc.ClientStream
}

func (x *packageRepositoryUploadBundleClient) Send(m *UploadBundleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packageRepositoryUploadBundleClient) CloseAndRecv() (*UploadBundleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadBundleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PackageRepositoryServer is the server API for PackageRepository service.
// All implementations should embed UnimplementedPackageRepositoryServer
// for forward compatibility
type PackageRepositoryServer interface {
	//* Download a service from a service directory *
	DownloadBundle(*DownloadBundleRequest, PackageRepository_DownloadBundleServer) error
	//* Upload a service to a service directory *
	UploadBundle(PackageRepository_UploadBundleServer) error
}

// UnimplementedPackageRepositoryServer should be embedded to have forward compatible implementations.
type UnimplementedPackageRepositoryServer struct {
}

func (UnimplementedPackageRepositoryServer) DownloadBundle(*DownloadBundleRequest, PackageRepository_DownloadBundleServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadBundle not implemented")
}
func (UnimplementedPackageRepositoryServer) UploadBundle(PackageRepository_UploadBundleServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadBundle not implemented")
}

// UnsafePackageRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageRepositoryServer will
// result in compilation errors.
type UnsafePackageRepositoryServer interface {
	mustEmbedUnimplementedPackageRepositoryServer()
}

func RegisterPackageRepositoryServer(s grpc.ServiceRegistrar, srv PackageRepositoryServer) {
	s.RegisterService(&PackageRepository_ServiceDesc, srv)
}

func _PackageRepository_DownloadBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadBundleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PackageRepositoryServer).DownloadBundle(m, &packageRepositoryDownloadBundleServer{stream})
}

type PackageRepository_DownloadBundleServer interface {
	Send(*DownloadBundleResponse) error
	grpc.ServerStream
}

type packageRepositoryDownloadBundleServer struct {
	grpc.ServerStream
}

func (x *packageRepositoryDownloadBundleServer) Send(m *DownloadBundleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PackageRepository_UploadBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PackageRepositoryServer).UploadBundle(&packageRepositoryUploadBundleServer{stream})
}

type PackageRepository_UploadBundleServer interface {
	SendAndClose(*UploadBundleResponse) error
	Recv() (*UploadBundleRequest, error)
	grpc.ServerStream
}

type packageRepositoryUploadBundleServer struct {
	grpc.ServerStream
}

func (x *packageRepositoryUploadBundleServer) SendAndClose(m *UploadBundleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packageRepositoryUploadBundleServer) Recv() (*UploadBundleRequest, error) {
	m := new(UploadBundleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PackageRepository_ServiceDesc is the grpc.ServiceDesc for PackageRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.PackageRepository",
	HandlerType: (*PackageRepositoryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadBundle",
			Handler:       _PackageRepository_DownloadBundle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadBundle",
			Handler:       _PackageRepository_UploadBundle_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/services.proto",
}
