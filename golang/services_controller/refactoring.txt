	store, err := admin_server.getPersistenceStore()
	if err != nil {
		return err
	}

	count, err := store.Count(context.Background(), "local_resource", "local_resource", "Applications", `{"_id":"`+name+`"}`, "")
	application := make(map[string]interface{}, 0)
	application["_id"] = name
	application["password"] = Utility.GenerateUUID(name)
	application["path"] = "/" + name // The path must be the same as the application name.
	application["publisherid"] = publisherId
	application["version"] = version
	application["description"] = description
	application["actions"] = actions
	application["keywords"] = keywords
	application["icon"] = icon
	application["alias"] = alias

	if len(domain) > 0 {
		if Utility.Exists(admin_server.WebRoot + "/" + domain) {
			application["path"] = "/" + domain + "/" + application["path"].(string)
		}
	}

	application["last_deployed"] = time.Now().Unix() // save it as unix time.

	// Here I will set the resource to manage the applicaiton access permission.
	if err != nil || count == 0 {
		address, port := admin_server.getBackendAddress()
		// create the application database.
		createApplicationUserDbScript := fmt.Sprintf(
			"db=db.getSiblingDB('%s_db');db.createCollection('application_data');db=db.getSiblingDB('admin');db.createUser({user: '%s', pwd: '%s',roles: [{ role: 'dbOwner', db: '%s_db' }]});",
			name, name, application["password"].(string), name)

		if address == "0.0.0.0" {
			err = store.RunAdminCmd(context.Background(), "local_resource", "sa", admin_server.RootPassword, createApplicationUserDbScript)
			if err != nil {
				return err
			}
		} else {
			// in the case of remote data store.
			p_, err := admin_server.getPersistenceSaConnection()
			if err != nil {
				return err
			}
			err = p_.RunAdminCmd("local_resource", "sa", admin_server.RootPassword, createApplicationUserDbScript)
			if err != nil {
				return err
			}
		}

		application["creation_date"] = time.Now().Unix() // save it as unix time.
		_, err := store.InsertOne(context.Background(), "local_resource", "local_resource", "Applications", application, "")
		if err != nil {
			return err
		}

		p, err := admin_server.getPersistenceSaConnection()
		if err != nil {
			return err
		}

		err = p.CreateConnection(name+"_db", name+"_db", address, float64(port), 0, name, application["password"].(string), 5000, "", false)
		if err != nil {
			return err
		}

	} else {
		actions_, _ := Utility.ToJson(actions)
		keywords_, _ := Utility.ToJson(keywords)

		err := store.UpdateOne(context.Background(), "local_resource", "local_resource", "Applications", `{"_id":"`+name+`"}`, `{ "$set":{ "last_deployed":`+Utility.ToString(time.Now().Unix())+` }, "$set":{"keywords":`+keywords_+`}, "$set":{"actions":`+actions_+`},"$set":{"publisherid":"`+publisherId+`"},"$set":{"description":"`+description+`"},"$set":{"alias":"`+alias+`"},"$set":{"icon":"`+icon+`"}, "$set":{"version":"`+version+`"}}`, "")

		if err != nil {
			return err
		}
	}
