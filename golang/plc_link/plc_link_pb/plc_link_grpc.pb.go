// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plc_link_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PlcLinkServiceClient is the client API for PlcLinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlcLinkServiceClient interface {
	// Stop the server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Link Tow tag together and make it refresh at a given frequency in milisecond.
	Link(ctx context.Context, in *LinkRqst, opts ...grpc.CallOption) (*LinkRsp, error)
	// Remove link from tow task.
	UnLink(ctx context.Context, in *UnLinkRqst, opts ...grpc.CallOption) (*UnLinkRsp, error)
	// Suspend the synchronization of tow tags.
	Suspend(ctx context.Context, in *SuspendRqst, opts ...grpc.CallOption) (*SuspendRsp, error)
	// Resume the synchronization of tow tags.
	Resume(ctx context.Context, in *ResumeRqst, opts ...grpc.CallOption) (*ResumeRsp, error)
}

type plcLinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlcLinkServiceClient(cc grpc.ClientConnInterface) PlcLinkServiceClient {
	return &plcLinkServiceClient{cc}
}

func (c *plcLinkServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/plc_link.PlcLinkService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plcLinkServiceClient) Link(ctx context.Context, in *LinkRqst, opts ...grpc.CallOption) (*LinkRsp, error) {
	out := new(LinkRsp)
	err := c.cc.Invoke(ctx, "/plc_link.PlcLinkService/Link", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plcLinkServiceClient) UnLink(ctx context.Context, in *UnLinkRqst, opts ...grpc.CallOption) (*UnLinkRsp, error) {
	out := new(UnLinkRsp)
	err := c.cc.Invoke(ctx, "/plc_link.PlcLinkService/UnLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plcLinkServiceClient) Suspend(ctx context.Context, in *SuspendRqst, opts ...grpc.CallOption) (*SuspendRsp, error) {
	out := new(SuspendRsp)
	err := c.cc.Invoke(ctx, "/plc_link.PlcLinkService/Suspend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plcLinkServiceClient) Resume(ctx context.Context, in *ResumeRqst, opts ...grpc.CallOption) (*ResumeRsp, error) {
	out := new(ResumeRsp)
	err := c.cc.Invoke(ctx, "/plc_link.PlcLinkService/Resume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlcLinkServiceServer is the server API for PlcLinkService service.
// All implementations should embed UnimplementedPlcLinkServiceServer
// for forward compatibility
type PlcLinkServiceServer interface {
	// Stop the server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Link Tow tag together and make it refresh at a given frequency in milisecond.
	Link(context.Context, *LinkRqst) (*LinkRsp, error)
	// Remove link from tow task.
	UnLink(context.Context, *UnLinkRqst) (*UnLinkRsp, error)
	// Suspend the synchronization of tow tags.
	Suspend(context.Context, *SuspendRqst) (*SuspendRsp, error)
	// Resume the synchronization of tow tags.
	Resume(context.Context, *ResumeRqst) (*ResumeRsp, error)
}

// UnimplementedPlcLinkServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPlcLinkServiceServer struct {
}

func (UnimplementedPlcLinkServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedPlcLinkServiceServer) Link(context.Context, *LinkRqst) (*LinkRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedPlcLinkServiceServer) UnLink(context.Context, *UnLinkRqst) (*UnLinkRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLink not implemented")
}
func (UnimplementedPlcLinkServiceServer) Suspend(context.Context, *SuspendRqst) (*SuspendRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suspend not implemented")
}
func (UnimplementedPlcLinkServiceServer) Resume(context.Context, *ResumeRqst) (*ResumeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resume not implemented")
}

// UnsafePlcLinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlcLinkServiceServer will
// result in compilation errors.
type UnsafePlcLinkServiceServer interface {
	mustEmbedUnimplementedPlcLinkServiceServer()
}

func RegisterPlcLinkServiceServer(s grpc.ServiceRegistrar, srv PlcLinkServiceServer) {
	s.RegisterService(&PlcLinkService_ServiceDesc, srv)
}

func _PlcLinkService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcLinkServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc_link.PlcLinkService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcLinkServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlcLinkService_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcLinkServiceServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc_link.PlcLinkService/Link",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcLinkServiceServer).Link(ctx, req.(*LinkRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlcLinkService_UnLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLinkRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcLinkServiceServer).UnLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc_link.PlcLinkService/UnLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcLinkServiceServer).UnLink(ctx, req.(*UnLinkRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlcLinkService_Suspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcLinkServiceServer).Suspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc_link.PlcLinkService/Suspend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcLinkServiceServer).Suspend(ctx, req.(*SuspendRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlcLinkService_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcLinkServiceServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc_link.PlcLinkService/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcLinkServiceServer).Resume(ctx, req.(*ResumeRqst))
	}
	return interceptor(ctx, in, info, handler)
}

// PlcLinkService_ServiceDesc is the grpc.ServiceDesc for PlcLinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlcLinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plc_link.PlcLinkService",
	HandlerType: (*PlcLinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _PlcLinkService_Stop_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _PlcLinkService_Link_Handler,
		},
		{
			MethodName: "UnLink",
			Handler:    _PlcLinkService_UnLink_Handler,
		},
		{
			MethodName: "Suspend",
			Handler:    _PlcLinkService_Suspend_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _PlcLinkService_Resume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/plc_link.proto",
}
