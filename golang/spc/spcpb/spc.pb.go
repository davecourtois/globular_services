//*
// You can use  as starter project.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.13.0
// source: proto/spc.proto

package spcpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreateAnalyseRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         string  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // JSON array string
	Tolzon       float64 `protobuf:"fixed64,2,opt,name=tolzon,proto3" json:"tolzon,omitempty"`
	Lotol        float64 `protobuf:"fixed64,3,opt,name=lotol,proto3" json:"lotol,omitempty"`
	Uptol        float64 `protobuf:"fixed64,4,opt,name=uptol,proto3" json:"uptol,omitempty"`
	Toltype      string  `protobuf:"bytes,5,opt,name=toltype,proto3" json:"toltype,omitempty"` // TODO change double to string
	Ispopulation bool    `protobuf:"varint,6,opt,name=ispopulation,proto3" json:"ispopulation,omitempty"`
	Tests        string  `protobuf:"bytes,7,opt,name=tests,proto3" json:"tests,omitempty"` // JSON array string
}

func (x *CreateAnalyseRqst) Reset() {
	*x = CreateAnalyseRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_spc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAnalyseRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAnalyseRqst) ProtoMessage() {}

func (x *CreateAnalyseRqst) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAnalyseRqst.ProtoReflect.Descriptor instead.
func (*CreateAnalyseRqst) Descriptor() ([]byte, []int) {
	return file_proto_spc_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAnalyseRqst) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CreateAnalyseRqst) GetTolzon() float64 {
	if x != nil {
		return x.Tolzon
	}
	return 0
}

func (x *CreateAnalyseRqst) GetLotol() float64 {
	if x != nil {
		return x.Lotol
	}
	return 0
}

func (x *CreateAnalyseRqst) GetUptol() float64 {
	if x != nil {
		return x.Uptol
	}
	return 0
}

func (x *CreateAnalyseRqst) GetToltype() string {
	if x != nil {
		return x.Toltype
	}
	return ""
}

func (x *CreateAnalyseRqst) GetIspopulation() bool {
	if x != nil {
		return x.Ispopulation
	}
	return false
}

func (x *CreateAnalyseRqst) GetTests() string {
	if x != nil {
		return x.Tests
	}
	return ""
}

type CreateAnalyseRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // The result.
}

func (x *CreateAnalyseRsp) Reset() {
	*x = CreateAnalyseRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_spc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAnalyseRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAnalyseRsp) ProtoMessage() {}

func (x *CreateAnalyseRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAnalyseRsp.ProtoReflect.Descriptor instead.
func (*CreateAnalyseRsp) Descriptor() ([]byte, []int) {
	return file_proto_spc_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAnalyseRsp) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_spc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_proto_spc_proto_rawDescGZIP(), []int{2}
}

type StopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_spc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_spc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_proto_spc_proto_rawDescGZIP(), []int{3}
}

var File_proto_spc_proto protoreflect.FileDescriptor

var file_proto_spc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x73, 0x70, 0x63, 0x22, 0xbf, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x52, 0x71, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6c, 0x7a, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x74, 0x6f, 0x6c, 0x7a, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x74, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x74, 0x6f, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x70, 0x74, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x75,
	0x70, 0x74, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x73, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x22, 0x2a, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x7b, 0x0a, 0x0a, 0x53, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x10, 0x2e, 0x73, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x12,
	0x16, 0x2e, 0x73, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x65, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x70, 0x63, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x42, 0x0b, 0x5a, 0x09, 0x73, 0x70, 0x63, 0x2f, 0x73, 0x70, 0x63, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_spc_proto_rawDescOnce sync.Once
	file_proto_spc_proto_rawDescData = file_proto_spc_proto_rawDesc
)

func file_proto_spc_proto_rawDescGZIP() []byte {
	file_proto_spc_proto_rawDescOnce.Do(func() {
		file_proto_spc_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_spc_proto_rawDescData)
	})
	return file_proto_spc_proto_rawDescData
}

var file_proto_spc_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_spc_proto_goTypes = []interface{}{
	(*CreateAnalyseRqst)(nil), // 0: spc.CreateAnalyseRqst
	(*CreateAnalyseRsp)(nil),  // 1: spc.CreateAnalyseRsp
	(*StopRequest)(nil),       // 2: spc.StopRequest
	(*StopResponse)(nil),      // 3: spc.StopResponse
}
var file_proto_spc_proto_depIdxs = []int32{
	2, // 0: spc.SpcService.Stop:input_type -> spc.StopRequest
	0, // 1: spc.SpcService.CreateAnalyse:input_type -> spc.CreateAnalyseRqst
	3, // 2: spc.SpcService.Stop:output_type -> spc.StopResponse
	1, // 3: spc.SpcService.CreateAnalyse:output_type -> spc.CreateAnalyseRsp
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_spc_proto_init() }
func file_proto_spc_proto_init() {
	if File_proto_spc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_spc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAnalyseRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_spc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAnalyseRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_spc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_spc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_spc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_spc_proto_goTypes,
		DependencyIndexes: file_proto_spc_proto_depIdxs,
		MessageInfos:      file_proto_spc_proto_msgTypes,
	}.Build()
	File_proto_spc_proto = out.File
	file_proto_spc_proto_rawDesc = nil
	file_proto_spc_proto_goTypes = nil
	file_proto_spc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SpcServiceClient is the client API for SpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpcServiceClient interface {
	// Stop the server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Send analyse results message.
	CreateAnalyse(ctx context.Context, in *CreateAnalyseRqst, opts ...grpc.CallOption) (*CreateAnalyseRsp, error)
}

type spcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpcServiceClient(cc grpc.ClientConnInterface) SpcServiceClient {
	return &spcServiceClient{cc}
}

func (c *spcServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/spc.SpcService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spcServiceClient) CreateAnalyse(ctx context.Context, in *CreateAnalyseRqst, opts ...grpc.CallOption) (*CreateAnalyseRsp, error) {
	out := new(CreateAnalyseRsp)
	err := c.cc.Invoke(ctx, "/spc.SpcService/CreateAnalyse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpcServiceServer is the server API for SpcService service.
type SpcServiceServer interface {
	// Stop the server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Send analyse results message.
	CreateAnalyse(context.Context, *CreateAnalyseRqst) (*CreateAnalyseRsp, error)
}

// UnimplementedSpcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSpcServiceServer struct {
}

func (*UnimplementedSpcServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedSpcServiceServer) CreateAnalyse(context.Context, *CreateAnalyseRqst) (*CreateAnalyseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnalyse not implemented")
}

func RegisterSpcServiceServer(s *grpc.Server, srv SpcServiceServer) {
	s.RegisterService(&_SpcService_serviceDesc, srv)
}

func _SpcService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpcServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spc.SpcService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpcServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpcService_CreateAnalyse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnalyseRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpcServiceServer).CreateAnalyse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spc.SpcService/CreateAnalyse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpcServiceServer).CreateAnalyse(ctx, req.(*CreateAnalyseRqst))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spc.SpcService",
	HandlerType: (*SpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _SpcService_Stop_Handler,
		},
		{
			MethodName: "CreateAnalyse",
			Handler:    _SpcService_CreateAnalyse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/spc.proto",
}
